Search.setIndex({"docnames": ["index", "reference/collectors", "reference/data", "reference/envs", "reference/generated/knowledge_base/DEBUGGING_RL", "reference/generated/knowledge_base/GYM", "reference/generated/knowledge_base/HABITAT", "reference/generated/knowledge_base/MUJOCO_INSTALLATION", "reference/generated/knowledge_base/PRO-TIPS", "reference/generated/knowledge_base/RESOURCES", "reference/generated/knowledge_base/VERSIONING_ISSUES", "reference/generated/torchrl._utils.implement_for", "reference/generated/torchrl.collectors.collectors.DataCollectorBase", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector", "reference/generated/torchrl.collectors.collectors.RandomPolicy", "reference/generated/torchrl.collectors.collectors.SyncDataCollector", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector", "reference/generated/torchrl.collectors.distributed.DistributedDataCollector", "reference/generated/torchrl.collectors.distributed.DistributedSyncDataCollector", "reference/generated/torchrl.collectors.distributed.RPCDataCollector", "reference/generated/torchrl.collectors.distributed.RayCollector", "reference/generated/torchrl.collectors.distributed.submitit_delayed_launcher", "reference/generated/torchrl.collectors.utils.split_trajectories", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec", "reference/generated/torchrl.data.BoundedTensorSpec", "reference/generated/torchrl.data.CompositeSpec", "reference/generated/torchrl.data.DiscreteTensorSpec", "reference/generated/torchrl.data.MultiDiscreteTensorSpec", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec", "reference/generated/torchrl.data.MultiStep", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec", "reference/generated/torchrl.data.PrioritizedReplayBuffer", "reference/generated/torchrl.data.ReplayBuffer", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer", "reference/generated/torchrl.data.TensorDictReplayBuffer", "reference/generated/torchrl.data.TensorSpec", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec", "reference/generated/torchrl.data.datasets.D4RLExperienceReplay", "reference/generated/torchrl.data.datasets.OpenMLExperienceReplay", "reference/generated/torchrl.data.replay_buffers.LazyMemmapStorage", "reference/generated/torchrl.data.replay_buffers.LazyTensorStorage", "reference/generated/torchrl.data.replay_buffers.ListStorage", "reference/generated/torchrl.data.replay_buffers.PrioritizedSampler", "reference/generated/torchrl.data.replay_buffers.RandomSampler", "reference/generated/torchrl.data.replay_buffers.RoundRobinWriter", "reference/generated/torchrl.data.replay_buffers.Sampler", "reference/generated/torchrl.data.replay_buffers.SamplerWithoutReplacement", "reference/generated/torchrl.data.replay_buffers.Storage", "reference/generated/torchrl.data.replay_buffers.Writer", "reference/generated/torchrl.envs.EnvBase", "reference/generated/torchrl.envs.EnvCreator", "reference/generated/torchrl.envs.EnvMetaData", "reference/generated/torchrl.envs.GymLikeEnv", "reference/generated/torchrl.envs.ModelBasedEnvBase", "reference/generated/torchrl.envs.MultiThreadedEnv", "reference/generated/torchrl.envs.ParallelEnv", "reference/generated/torchrl.envs.SerialEnv", "reference/generated/torchrl.envs.libs.brax.BraxEnv", "reference/generated/torchrl.envs.libs.brax.BraxWrapper", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper", "reference/generated/torchrl.envs.libs.gym.GymEnv", "reference/generated/torchrl.envs.libs.gym.GymWrapper", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper", "reference/generated/torchrl.envs.libs.openml.OpenMLEnv", "reference/generated/torchrl.envs.libs.vmas.VmasEnv", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv", "reference/generated/torchrl.envs.transforms.BinarizeReward", "reference/generated/torchrl.envs.transforms.CatFrames", "reference/generated/torchrl.envs.transforms.CatTensors", "reference/generated/torchrl.envs.transforms.CenterCrop", "reference/generated/torchrl.envs.transforms.Compose", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection", "reference/generated/torchrl.envs.transforms.DoubleToFloat", "reference/generated/torchrl.envs.transforms.ExcludeTransform", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck", "reference/generated/torchrl.envs.transforms.FlattenObservation", "reference/generated/torchrl.envs.transforms.FrameSkipTransform", "reference/generated/torchrl.envs.transforms.GrayScale", "reference/generated/torchrl.envs.transforms.InitTracker", "reference/generated/torchrl.envs.transforms.NoopResetEnv", "reference/generated/torchrl.envs.transforms.ObservationNorm", "reference/generated/torchrl.envs.transforms.ObservationTransform", "reference/generated/torchrl.envs.transforms.PinMemoryTransform", "reference/generated/torchrl.envs.transforms.R3MTransform", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict", "reference/generated/torchrl.envs.transforms.RenameTransform", "reference/generated/torchrl.envs.transforms.Resize", "reference/generated/torchrl.envs.transforms.RewardClipping", "reference/generated/torchrl.envs.transforms.RewardScaling", "reference/generated/torchrl.envs.transforms.RewardSum", "reference/generated/torchrl.envs.transforms.SelectTransform", "reference/generated/torchrl.envs.transforms.SqueezeTransform", "reference/generated/torchrl.envs.transforms.StepCounter", "reference/generated/torchrl.envs.transforms.TensorDictPrimer", "reference/generated/torchrl.envs.transforms.TimeMaxPool", "reference/generated/torchrl.envs.transforms.ToTensorImage", "reference/generated/torchrl.envs.transforms.Transform", "reference/generated/torchrl.envs.transforms.TransformedEnv", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform", "reference/generated/torchrl.envs.transforms.VIPRewardTransform", "reference/generated/torchrl.envs.transforms.VIPTransform", "reference/generated/torchrl.envs.transforms.VecNorm", "reference/generated/torchrl.envs.transforms.gSDENoise", "reference/generated/torchrl.envs.utils.check_env_specs", "reference/generated/torchrl.envs.utils.exploration_mode", "reference/generated/torchrl.envs.utils.get_available_libraries", "reference/generated/torchrl.envs.utils.make_composite_from_td", "reference/generated/torchrl.envs.utils.set_exploration_mode", "reference/generated/torchrl.envs.utils.step_mdp", "reference/generated/torchrl.modules.CEMPlanner", "reference/generated/torchrl.modules.ConvNet", "reference/generated/torchrl.modules.DdpgCnnActor", "reference/generated/torchrl.modules.DdpgCnnQNet", "reference/generated/torchrl.modules.DdpgMlpActor", "reference/generated/torchrl.modules.DdpgMlpQNet", "reference/generated/torchrl.modules.Delta", "reference/generated/torchrl.modules.DistributionalDQNnet", "reference/generated/torchrl.modules.DistributionalQValueHook", "reference/generated/torchrl.modules.DreamerActor", "reference/generated/torchrl.modules.DuelingCnnDQNet", "reference/generated/torchrl.modules.IndependentNormal", "reference/generated/torchrl.modules.LSTMNet", "reference/generated/torchrl.modules.MLP", "reference/generated/torchrl.modules.MPCPlannerBase", "reference/generated/torchrl.modules.MPPIPlanner", "reference/generated/torchrl.modules.NoisyLazyLinear", "reference/generated/torchrl.modules.NoisyLinear", "reference/generated/torchrl.modules.NormalParamWrapper", "reference/generated/torchrl.modules.ObsDecoder", "reference/generated/torchrl.modules.ObsEncoder", "reference/generated/torchrl.modules.OneHotCategorical", "reference/generated/torchrl.modules.QValueHook", "reference/generated/torchrl.modules.RSSMPosterior", "reference/generated/torchrl.modules.RSSMPrior", "reference/generated/torchrl.modules.TanhDelta", "reference/generated/torchrl.modules.TanhNormal", "reference/generated/torchrl.modules.TruncatedNormal", "reference/generated/torchrl.modules.reset_noise", "reference/generated/torchrl.modules.tensordict_module.Actor", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor", "reference/generated/torchrl.modules.tensordict_module.QValueActor", "reference/generated/torchrl.modules.tensordict_module.SafeModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticTensorDictSequential", "reference/generated/torchrl.modules.tensordict_module.SafeSequential", "reference/generated/torchrl.modules.tensordict_module.ValueOperator", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper", "reference/generated/torchrl.modules.utils.biased_softplus", "reference/generated/torchrl.modules.utils.inv_softplus", "reference/generated/torchrl.modules.utils.mappings", "reference/generated/torchrl.objectives.A2CLoss", "reference/generated/torchrl.objectives.ClipPPOLoss", "reference/generated/torchrl.objectives.DDPGLoss", "reference/generated/torchrl.objectives.DQNLoss", "reference/generated/torchrl.objectives.DiscreteSACLoss", "reference/generated/torchrl.objectives.DistributionalDQNLoss", "reference/generated/torchrl.objectives.DreamerActorLoss", "reference/generated/torchrl.objectives.DreamerModelLoss", "reference/generated/torchrl.objectives.DreamerValueLoss", "reference/generated/torchrl.objectives.HardUpdate", "reference/generated/torchrl.objectives.IQLLoss", "reference/generated/torchrl.objectives.KLPENPPOLoss", "reference/generated/torchrl.objectives.LossModule", "reference/generated/torchrl.objectives.PPOLoss", "reference/generated/torchrl.objectives.REDQLoss", "reference/generated/torchrl.objectives.ReinforceLoss", "reference/generated/torchrl.objectives.SACLoss", "reference/generated/torchrl.objectives.SoftUpdate", "reference/generated/torchrl.objectives.TD3Loss", "reference/generated/torchrl.objectives.ValueEstimators", "reference/generated/torchrl.objectives.default_value_kwargs", "reference/generated/torchrl.objectives.distance_loss", "reference/generated/torchrl.objectives.hold_out_net", "reference/generated/torchrl.objectives.hold_out_params", "reference/generated/torchrl.objectives.next_state_value", "reference/generated/torchrl.objectives.value.GAE", "reference/generated/torchrl.objectives.value.TD0Estimator", "reference/generated/torchrl.objectives.value.TD1Estimator", "reference/generated/torchrl.objectives.value.TDLambdaEstimator", "reference/generated/torchrl.objectives.value.ValueEstimatorBase", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td0_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td0_return_estimate", "reference/generated/torchrl.objectives.value.functional.td1_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td1_return_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td1_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td1_return_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate", "reference/generated/torchrl.record.TensorDictRecorder", "reference/generated/torchrl.record.VideoRecorder", "reference/generated/torchrl.record.loggers.Logger", "reference/generated/torchrl.record.loggers.csv.CSVLogger", "reference/generated/torchrl.record.loggers.generate_exp_name", "reference/generated/torchrl.record.loggers.get_logger", "reference/generated/torchrl.record.loggers.mlflow.MLFlowLogger", "reference/generated/torchrl.record.loggers.tensorboard.TensorboardLogger", "reference/generated/torchrl.record.loggers.wandb.WandbLogger", "reference/generated/torchrl.trainers.BatchSubSampler", "reference/generated/torchrl.trainers.ClearCudaCache", "reference/generated/torchrl.trainers.CountFramesLog", "reference/generated/torchrl.trainers.LogReward", "reference/generated/torchrl.trainers.OptimizerHook", "reference/generated/torchrl.trainers.Recorder", "reference/generated/torchrl.trainers.ReplayBufferTrainer", "reference/generated/torchrl.trainers.RewardNormalizer", "reference/generated/torchrl.trainers.SelectKeys", "reference/generated/torchrl.trainers.Trainer", "reference/generated/torchrl.trainers.TrainerHookBase", "reference/generated/torchrl.trainers.UpdateWeights", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout", "reference/generated/torchrl.trainers.helpers.make_a2c_loss", "reference/generated/torchrl.trainers.helpers.make_a2c_model", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss", "reference/generated/torchrl.trainers.helpers.make_dqn_actor", "reference/generated/torchrl.trainers.helpers.make_dqn_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_model", "reference/generated/torchrl.trainers.helpers.make_redq_loss", "reference/generated/torchrl.trainers.helpers.make_redq_model", "reference/generated/torchrl.trainers.helpers.make_replay_buffer", "reference/generated/torchrl.trainers.helpers.make_sac_loss", "reference/generated/torchrl.trainers.helpers.make_sac_model", "reference/generated/torchrl.trainers.helpers.make_target_updater", "reference/generated/torchrl.trainers.helpers.make_trainer", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor", "reference/generated/torchrl.trainers.helpers.sync_async_collector", "reference/generated/torchrl.trainers.helpers.sync_sync_collector", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor", "reference/generated/tutorials/README", "reference/index", "reference/knowledge_base", "reference/modules", "reference/objectives", "reference/trainers", "reference/utils", "tutorials/coding_ddpg", "tutorials/coding_dqn", "tutorials/coding_ppo", "tutorials/index", "tutorials/multi_task", "tutorials/pendulum", "tutorials/pretrained_models", "tutorials/sg_execution_times", "tutorials/torchrl_demo", "tutorials/torchrl_envs"], "filenames": ["index.rst", "reference/collectors.rst", "reference/data.rst", "reference/envs.rst", "reference/generated/knowledge_base/DEBUGGING_RL.rst", "reference/generated/knowledge_base/GYM.rst", "reference/generated/knowledge_base/HABITAT.rst", "reference/generated/knowledge_base/MUJOCO_INSTALLATION.rst", "reference/generated/knowledge_base/PRO-TIPS.rst", "reference/generated/knowledge_base/RESOURCES.rst", "reference/generated/knowledge_base/VERSIONING_ISSUES.rst", "reference/generated/torchrl._utils.implement_for.rst", "reference/generated/torchrl.collectors.collectors.DataCollectorBase.rst", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.RandomPolicy.rst", "reference/generated/torchrl.collectors.collectors.SyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector.rst", "reference/generated/torchrl.collectors.distributed.DistributedDataCollector.rst", "reference/generated/torchrl.collectors.distributed.DistributedSyncDataCollector.rst", "reference/generated/torchrl.collectors.distributed.RPCDataCollector.rst", "reference/generated/torchrl.collectors.distributed.RayCollector.rst", "reference/generated/torchrl.collectors.distributed.submitit_delayed_launcher.rst", "reference/generated/torchrl.collectors.utils.split_trajectories.rst", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec.rst", "reference/generated/torchrl.data.BoundedTensorSpec.rst", "reference/generated/torchrl.data.CompositeSpec.rst", "reference/generated/torchrl.data.DiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiDiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiStep.rst", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.PrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.ReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictReplayBuffer.rst", "reference/generated/torchrl.data.TensorSpec.rst", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec.rst", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec.rst", "reference/generated/torchrl.data.datasets.D4RLExperienceReplay.rst", "reference/generated/torchrl.data.datasets.OpenMLExperienceReplay.rst", "reference/generated/torchrl.data.replay_buffers.LazyMemmapStorage.rst", "reference/generated/torchrl.data.replay_buffers.LazyTensorStorage.rst", "reference/generated/torchrl.data.replay_buffers.ListStorage.rst", "reference/generated/torchrl.data.replay_buffers.PrioritizedSampler.rst", "reference/generated/torchrl.data.replay_buffers.RandomSampler.rst", "reference/generated/torchrl.data.replay_buffers.RoundRobinWriter.rst", "reference/generated/torchrl.data.replay_buffers.Sampler.rst", "reference/generated/torchrl.data.replay_buffers.SamplerWithoutReplacement.rst", "reference/generated/torchrl.data.replay_buffers.Storage.rst", "reference/generated/torchrl.data.replay_buffers.Writer.rst", "reference/generated/torchrl.envs.EnvBase.rst", "reference/generated/torchrl.envs.EnvCreator.rst", "reference/generated/torchrl.envs.EnvMetaData.rst", "reference/generated/torchrl.envs.GymLikeEnv.rst", "reference/generated/torchrl.envs.ModelBasedEnvBase.rst", "reference/generated/torchrl.envs.MultiThreadedEnv.rst", "reference/generated/torchrl.envs.ParallelEnv.rst", "reference/generated/torchrl.envs.SerialEnv.rst", "reference/generated/torchrl.envs.libs.brax.BraxEnv.rst", "reference/generated/torchrl.envs.libs.brax.BraxWrapper.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper.rst", "reference/generated/torchrl.envs.libs.gym.GymEnv.rst", "reference/generated/torchrl.envs.libs.gym.GymWrapper.rst", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper.rst", "reference/generated/torchrl.envs.libs.openml.OpenMLEnv.rst", "reference/generated/torchrl.envs.libs.vmas.VmasEnv.rst", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper.rst", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv.rst", "reference/generated/torchrl.envs.transforms.BinarizeReward.rst", "reference/generated/torchrl.envs.transforms.CatFrames.rst", "reference/generated/torchrl.envs.transforms.CatTensors.rst", "reference/generated/torchrl.envs.transforms.CenterCrop.rst", "reference/generated/torchrl.envs.transforms.Compose.rst", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection.rst", "reference/generated/torchrl.envs.transforms.DoubleToFloat.rst", "reference/generated/torchrl.envs.transforms.ExcludeTransform.rst", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck.rst", "reference/generated/torchrl.envs.transforms.FlattenObservation.rst", "reference/generated/torchrl.envs.transforms.FrameSkipTransform.rst", "reference/generated/torchrl.envs.transforms.GrayScale.rst", "reference/generated/torchrl.envs.transforms.InitTracker.rst", "reference/generated/torchrl.envs.transforms.NoopResetEnv.rst", "reference/generated/torchrl.envs.transforms.ObservationNorm.rst", "reference/generated/torchrl.envs.transforms.ObservationTransform.rst", "reference/generated/torchrl.envs.transforms.PinMemoryTransform.rst", "reference/generated/torchrl.envs.transforms.R3MTransform.rst", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict.rst", "reference/generated/torchrl.envs.transforms.RenameTransform.rst", "reference/generated/torchrl.envs.transforms.Resize.rst", "reference/generated/torchrl.envs.transforms.RewardClipping.rst", "reference/generated/torchrl.envs.transforms.RewardScaling.rst", "reference/generated/torchrl.envs.transforms.RewardSum.rst", "reference/generated/torchrl.envs.transforms.SelectTransform.rst", "reference/generated/torchrl.envs.transforms.SqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.StepCounter.rst", "reference/generated/torchrl.envs.transforms.TensorDictPrimer.rst", "reference/generated/torchrl.envs.transforms.TimeMaxPool.rst", "reference/generated/torchrl.envs.transforms.ToTensorImage.rst", "reference/generated/torchrl.envs.transforms.Transform.rst", "reference/generated/torchrl.envs.transforms.TransformedEnv.rst", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.VIPRewardTransform.rst", "reference/generated/torchrl.envs.transforms.VIPTransform.rst", "reference/generated/torchrl.envs.transforms.VecNorm.rst", "reference/generated/torchrl.envs.transforms.gSDENoise.rst", "reference/generated/torchrl.envs.utils.check_env_specs.rst", "reference/generated/torchrl.envs.utils.exploration_mode.rst", "reference/generated/torchrl.envs.utils.get_available_libraries.rst", "reference/generated/torchrl.envs.utils.make_composite_from_td.rst", "reference/generated/torchrl.envs.utils.set_exploration_mode.rst", "reference/generated/torchrl.envs.utils.step_mdp.rst", "reference/generated/torchrl.modules.CEMPlanner.rst", "reference/generated/torchrl.modules.ConvNet.rst", "reference/generated/torchrl.modules.DdpgCnnActor.rst", "reference/generated/torchrl.modules.DdpgCnnQNet.rst", "reference/generated/torchrl.modules.DdpgMlpActor.rst", "reference/generated/torchrl.modules.DdpgMlpQNet.rst", "reference/generated/torchrl.modules.Delta.rst", "reference/generated/torchrl.modules.DistributionalDQNnet.rst", "reference/generated/torchrl.modules.DistributionalQValueHook.rst", "reference/generated/torchrl.modules.DreamerActor.rst", "reference/generated/torchrl.modules.DuelingCnnDQNet.rst", "reference/generated/torchrl.modules.IndependentNormal.rst", "reference/generated/torchrl.modules.LSTMNet.rst", "reference/generated/torchrl.modules.MLP.rst", "reference/generated/torchrl.modules.MPCPlannerBase.rst", "reference/generated/torchrl.modules.MPPIPlanner.rst", "reference/generated/torchrl.modules.NoisyLazyLinear.rst", "reference/generated/torchrl.modules.NoisyLinear.rst", "reference/generated/torchrl.modules.NormalParamWrapper.rst", "reference/generated/torchrl.modules.ObsDecoder.rst", "reference/generated/torchrl.modules.ObsEncoder.rst", "reference/generated/torchrl.modules.OneHotCategorical.rst", "reference/generated/torchrl.modules.QValueHook.rst", "reference/generated/torchrl.modules.RSSMPosterior.rst", "reference/generated/torchrl.modules.RSSMPrior.rst", "reference/generated/torchrl.modules.TanhDelta.rst", "reference/generated/torchrl.modules.TanhNormal.rst", "reference/generated/torchrl.modules.TruncatedNormal.rst", "reference/generated/torchrl.modules.reset_noise.rst", "reference/generated/torchrl.modules.tensordict_module.Actor.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor.rst", "reference/generated/torchrl.modules.tensordict_module.QValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.SafeModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticTensorDictSequential.rst", "reference/generated/torchrl.modules.tensordict_module.SafeSequential.rst", "reference/generated/torchrl.modules.tensordict_module.ValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper.rst", "reference/generated/torchrl.modules.utils.biased_softplus.rst", "reference/generated/torchrl.modules.utils.inv_softplus.rst", "reference/generated/torchrl.modules.utils.mappings.rst", "reference/generated/torchrl.objectives.A2CLoss.rst", "reference/generated/torchrl.objectives.ClipPPOLoss.rst", "reference/generated/torchrl.objectives.DDPGLoss.rst", "reference/generated/torchrl.objectives.DQNLoss.rst", "reference/generated/torchrl.objectives.DiscreteSACLoss.rst", "reference/generated/torchrl.objectives.DistributionalDQNLoss.rst", "reference/generated/torchrl.objectives.DreamerActorLoss.rst", "reference/generated/torchrl.objectives.DreamerModelLoss.rst", "reference/generated/torchrl.objectives.DreamerValueLoss.rst", "reference/generated/torchrl.objectives.HardUpdate.rst", "reference/generated/torchrl.objectives.IQLLoss.rst", "reference/generated/torchrl.objectives.KLPENPPOLoss.rst", "reference/generated/torchrl.objectives.LossModule.rst", "reference/generated/torchrl.objectives.PPOLoss.rst", "reference/generated/torchrl.objectives.REDQLoss.rst", "reference/generated/torchrl.objectives.ReinforceLoss.rst", "reference/generated/torchrl.objectives.SACLoss.rst", "reference/generated/torchrl.objectives.SoftUpdate.rst", "reference/generated/torchrl.objectives.TD3Loss.rst", "reference/generated/torchrl.objectives.ValueEstimators.rst", "reference/generated/torchrl.objectives.default_value_kwargs.rst", "reference/generated/torchrl.objectives.distance_loss.rst", "reference/generated/torchrl.objectives.hold_out_net.rst", "reference/generated/torchrl.objectives.hold_out_params.rst", "reference/generated/torchrl.objectives.next_state_value.rst", "reference/generated/torchrl.objectives.value.GAE.rst", "reference/generated/torchrl.objectives.value.TD0Estimator.rst", "reference/generated/torchrl.objectives.value.TD1Estimator.rst", "reference/generated/torchrl.objectives.value.TDLambdaEstimator.rst", "reference/generated/torchrl.objectives.value.ValueEstimatorBase.rst", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td0_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td0_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td1_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td1_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td1_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td1_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate.rst", "reference/generated/torchrl.record.TensorDictRecorder.rst", "reference/generated/torchrl.record.VideoRecorder.rst", "reference/generated/torchrl.record.loggers.Logger.rst", "reference/generated/torchrl.record.loggers.csv.CSVLogger.rst", "reference/generated/torchrl.record.loggers.generate_exp_name.rst", "reference/generated/torchrl.record.loggers.get_logger.rst", "reference/generated/torchrl.record.loggers.mlflow.MLFlowLogger.rst", "reference/generated/torchrl.record.loggers.tensorboard.TensorboardLogger.rst", "reference/generated/torchrl.record.loggers.wandb.WandbLogger.rst", "reference/generated/torchrl.trainers.BatchSubSampler.rst", "reference/generated/torchrl.trainers.ClearCudaCache.rst", "reference/generated/torchrl.trainers.CountFramesLog.rst", "reference/generated/torchrl.trainers.LogReward.rst", "reference/generated/torchrl.trainers.OptimizerHook.rst", "reference/generated/torchrl.trainers.Recorder.rst", "reference/generated/torchrl.trainers.ReplayBufferTrainer.rst", "reference/generated/torchrl.trainers.RewardNormalizer.rst", "reference/generated/torchrl.trainers.SelectKeys.rst", "reference/generated/torchrl.trainers.Trainer.rst", "reference/generated/torchrl.trainers.TrainerHookBase.rst", "reference/generated/torchrl.trainers.UpdateWeights.rst", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip.rst", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_loss.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_model.rst", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_actor.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_model.rst", "reference/generated/torchrl.trainers.helpers.make_redq_loss.rst", "reference/generated/torchrl.trainers.helpers.make_redq_model.rst", "reference/generated/torchrl.trainers.helpers.make_replay_buffer.rst", "reference/generated/torchrl.trainers.helpers.make_sac_loss.rst", "reference/generated/torchrl.trainers.helpers.make_sac_model.rst", "reference/generated/torchrl.trainers.helpers.make_target_updater.rst", "reference/generated/torchrl.trainers.helpers.make_trainer.rst", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor.rst", "reference/generated/torchrl.trainers.helpers.sync_async_collector.rst", "reference/generated/torchrl.trainers.helpers.sync_sync_collector.rst", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor.rst", "reference/generated/tutorials/README.rst", "reference/index.rst", "reference/knowledge_base.rst", "reference/modules.rst", "reference/objectives.rst", "reference/trainers.rst", "reference/utils.rst", "tutorials/coding_ddpg.rst", "tutorials/coding_dqn.rst", "tutorials/coding_ppo.rst", "tutorials/index.rst", "tutorials/multi_task.rst", "tutorials/pendulum.rst", "tutorials/pretrained_models.rst", "tutorials/sg_execution_times.rst", "tutorials/torchrl_demo.rst", "tutorials/torchrl_envs.rst"], "titles": ["Welcome to the TorchRL Documentation!", "torchrl.collectors package", "torchrl.data package", "torchrl.envs package", "Things to consider when debugging RL", "Working with gym", "Working with <code class=\"docutils literal notranslate\"><span class=\"pre\">habitat-lab</span></code>", "Working with MuJoCo-based environments", "Common PyTorch errors and solutions", "Useful resources", "Versioning Issues", "implement_for", "DataCollectorBase", "MultiSyncDataCollector", "MultiaSyncDataCollector", "RandomPolicy", "SyncDataCollector", "aSyncDataCollector", "DistributedDataCollector", "DistributedSyncDataCollector", "RPCDataCollector", "RayCollector", "submitit_delayed_launcher", "split_trajectories", "BinaryDiscreteTensorSpec", "BoundedTensorSpec", "CompositeSpec", "DiscreteTensorSpec", "MultiDiscreteTensorSpec", "MultiOneHotDiscreteTensorSpec", "MultiStep", "OneHotDiscreteTensorSpec", "PrioritizedReplayBuffer", "ReplayBuffer", "TensorDictPrioritizedReplayBuffer", "TensorDictReplayBuffer", "TensorSpec", "UnboundedContinuousTensorSpec", "UnboundedDiscreteTensorSpec", "D4RLExperienceReplay", "OpenMLExperienceReplay", "LazyMemmapStorage", "LazyTensorStorage", "ListStorage", "PrioritizedSampler", "RandomSampler", "RoundRobinWriter", "Sampler", "SamplerWithoutReplacement", "Storage", "Writer", "EnvBase", "EnvCreator", "EnvMetaData", "GymLikeEnv", "ModelBasedEnvBase", "MultiThreadedEnv", "ParallelEnv", "SerialEnv", "BraxEnv", "BraxWrapper", "DMControlEnv", "DMControlWrapper", "GymEnv", "GymWrapper", "HabitatEnv", "JumanjiEnv", "JumanjiWrapper", "OpenMLEnv", "VmasEnv", "VmasWrapper", "DreamerEnv", "BinarizeReward", "CatFrames", "CatTensors", "CenterCrop", "Compose", "DiscreteActionProjection", "DoubleToFloat", "ExcludeTransform", "FiniteTensorDictCheck", "FlattenObservation", "FrameSkipTransform", "GrayScale", "InitTracker", "NoopResetEnv", "ObservationNorm", "ObservationTransform", "PinMemoryTransform", "R3MTransform", "RandomCropTensorDict", "RenameTransform", "Resize", "RewardClipping", "RewardScaling", "RewardSum", "SelectTransform", "SqueezeTransform", "StepCounter", "TensorDictPrimer", "TimeMaxPool", "ToTensorImage", "Transform", "TransformedEnv", "UnsqueezeTransform", "VIPRewardTransform", "VIPTransform", "VecNorm", "gSDENoise", "check_env_specs", "exploration_mode", "get_available_libraries", "make_composite_from_td", "set_exploration_mode", "step_mdp", "CEMPlanner", "ConvNet", "DdpgCnnActor", "DdpgCnnQNet", "DdpgMlpActor", "DdpgMlpQNet", "Delta", "DistributionalDQNnet", "DistributionalQValueHook", "DreamerActor", "DuelingCnnDQNet", "IndependentNormal", "LSTMNet", "MLP", "MPCPlannerBase", "MPPIPlanner", "NoisyLazyLinear", "NoisyLinear", "NormalParamWrapper", "ObsDecoder", "ObsEncoder", "OneHotCategorical", "QValueHook", "RSSMPosterior", "RSSMPrior", "TanhDelta", "TanhNormal", "TruncatedNormal", "reset_noise", "Actor", "ActorCriticOperator", "ActorCriticWrapper", "ActorValueOperator", "AdditiveGaussianWrapper", "DistributionalQValueActor", "EGreedyWrapper", "OrnsteinUhlenbeckProcessWrapper", "ProbabilisticActor", "QValueActor", "SafeModule", "SafeProbabilisticModule", "SafeProbabilisticTensorDictSequential", "SafeSequential", "ValueOperator", "WorldModelWrapper", "biased_softplus", "inv_softplus", "mappings", "A2CLoss", "ClipPPOLoss", "DDPGLoss", "DQNLoss", "DiscreteSACLoss", "DistributionalDQNLoss", "DreamerActorLoss", "DreamerModelLoss", "DreamerValueLoss", "HardUpdate", "IQLLoss", "KLPENPPOLoss", "LossModule", "PPOLoss", "REDQLoss", "ReinforceLoss", "SACLoss", "SoftUpdate", "TD3Loss", "ValueEstimators", "default_value_kwargs", "distance_loss", "hold_out_net", "hold_out_params", "next_state_value", "GAE", "TD0Estimator", "TD1Estimator", "TDLambdaEstimator", "ValueEstimatorBase", "generalized_advantage_estimate", "td0_advantage_estimate", "td0_return_estimate", "td1_advantage_estimate", "td1_return_estimate", "td_lambda_advantage_estimate", "td_lambda_return_estimate", "vec_generalized_advantage_estimate", "vec_td1_advantage_estimate", "vec_td1_return_estimate", "vec_td_lambda_advantage_estimate", "vec_td_lambda_return_estimate", "TensorDictRecorder", "VideoRecorder", "Logger", "CSVLogger", "generate_exp_name", "get_logger", "MLFlowLogger", "TensorboardLogger", "WandbLogger", "BatchSubSampler", "ClearCudaCache", "CountFramesLog", "LogReward", "OptimizerHook", "Recorder", "ReplayBufferTrainer", "RewardNormalizer", "SelectKeys", "Trainer", "TrainerHookBase", "UpdateWeights", "correct_for_frame_skip", "get_stats_random_rollout", "make_a2c_loss", "make_a2c_model", "make_collector_offpolicy", "make_collector_onpolicy", "make_ddpg_actor", "make_ddpg_loss", "make_dqn_actor", "make_dqn_loss", "make_ppo_loss", "make_ppo_model", "make_redq_loss", "make_redq_model", "make_replay_buffer", "make_sac_loss", "make_sac_model", "make_target_updater", "make_trainer", "parallel_env_constructor", "sync_async_collector", "sync_sync_collector", "transformed_env_constructor", "README Tutos", "API Reference", "Knowledge Base", "torchrl.modules package", "torchrl.objectives package", "torchrl.trainers package", "torchrl._utils package", "TorchRL objectives: Coding a DDPG loss", "TorchRL trainer: A DQN example", "Reinforcement Learning (PPO) with TorchRL Tutorial", "README Tutos", "Task-specific policy in multi-task environments", "Pendulum: Writing your environment and transforms with TorchRL", "Using pretrained models", "Computation times", "Introduction to TorchRL", "TorchRL envs"], "terms": {"The": [0, 1, 2, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 51, 54, 56, 57, 58, 76, 79, 86, 89, 94, 96, 99, 103, 106, 114, 115, 117, 118, 119, 120, 127, 129, 130, 132, 133, 138, 139, 144, 145, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 164, 165, 166, 168, 169, 170, 171, 174, 175, 187, 188, 189, 190, 191, 192, 208, 211, 212, 213, 214, 218, 244, 246, 247, 252, 253, 254, 257, 258, 261, 262, 264, 265], "tensordict": [0, 1, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 32, 33, 34, 35, 39, 40, 41, 42, 44, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 114, 115, 123, 127, 129, 130, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 205, 214, 218, 219, 220, 222, 223, 229, 232, 234, 237, 239, 242, 250, 253, 254, 256, 257, 258, 260, 261, 262, 265], "class": [0, 1, 2, 3, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 246, 247, 248, 252, 253, 254, 256, 257, 258, 265], "ha": [0, 3, 4, 5, 7, 8, 10, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 52, 54, 56, 57, 58, 73, 99, 103, 148, 150, 155, 174, 256, 257, 258, 260, 261, 262, 264, 265], "been": [0, 5, 7, 8, 17, 18, 20, 21, 48, 51, 54, 56, 57, 58, 102, 256, 257, 258, 260, 261, 265], "move": [0, 4, 21, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 114, 128, 154, 175, 221, 256, 257, 264, 265], "out": [0, 3, 4, 5, 21, 30, 39, 51, 54, 56, 57, 58, 99, 109, 131, 132, 144, 149, 151, 152, 153, 154, 155, 185, 186, 254, 256, 257, 258, 261, 264, 265], "dedic": [0, 1, 18, 19, 20, 21, 145, 146, 147, 252, 256, 260], "librari": [0, 5, 6, 7, 8, 9, 10, 18, 19, 20, 39, 56, 111, 250, 251, 252, 255, 256, 257, 258, 261, 265], "take": [0, 1, 3, 8, 23, 51, 54, 56, 57, 58, 98, 100, 102, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 162, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 214, 225, 252, 254, 256, 257, 258, 261, 265], "look": [0, 3, 5, 7, 8, 30, 51, 54, 56, 57, 58, 89, 90, 152, 155, 156, 157, 253, 258, 261, 262, 264, 265], "find": [0, 1, 4, 6, 18, 19, 20, 32, 148, 150, 217, 221, 256, 257], "sourc": [0, 1, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 256, 257, 258, 259, 260, 261, 262, 264, 265], "code": [0, 3, 5, 7, 8, 89, 157, 257, 258, 259, 260, 262, 263, 264, 265], "github": [0, 2, 5, 6, 7, 10, 18, 19, 20, 262, 264], "i": [0, 1, 2, 3, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 68, 72, 73, 74, 75, 76, 77, 79, 81, 84, 85, 86, 89, 90, 91, 94, 95, 96, 98, 99, 101, 102, 103, 105, 106, 107, 109, 113, 114, 115, 116, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 137, 139, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 184, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 214, 216, 217, 218, 219, 220, 221, 223, 226, 227, 229, 232, 237, 239, 242, 244, 248, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "an": [0, 1, 2, 3, 5, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 68, 75, 77, 80, 85, 86, 89, 90, 91, 92, 99, 101, 102, 103, 107, 109, 116, 117, 118, 119, 120, 127, 128, 129, 131, 135, 145, 146, 147, 151, 152, 155, 156, 159, 162, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 192, 206, 209, 218, 219, 223, 224, 227, 232, 245, 246, 247, 248, 251, 252, 253, 256, 257, 260, 262, 264, 265], "open": [0, 5, 7, 11, 257, 264], "reinforc": [0, 2, 3, 9, 73, 117, 118, 119, 120, 123, 151, 163, 168, 172, 173, 178, 179, 180, 232, 250, 257, 259, 261, 263, 264], "learn": [0, 2, 3, 7, 8, 9, 18, 30, 40, 73, 117, 118, 119, 120, 123, 130, 132, 151, 163, 168, 172, 173, 177, 178, 179, 180, 232, 252, 253, 256, 257, 259, 260, 261, 263, 264, 265], "rl": [0, 1, 2, 3, 5, 8, 10, 13, 14, 16, 17, 55, 132, 144, 152, 158, 163, 175, 176, 214, 251, 252, 253, 254, 256, 257, 258, 262, 265], "pytorch": [0, 1, 2, 101, 223, 251, 254, 256, 258, 261, 262, 264, 265], "It": [0, 2, 3, 4, 7, 30, 34, 39, 51, 54, 55, 56, 57, 58, 65, 86, 90, 103, 109, 117, 119, 124, 138, 139, 151, 155, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 219, 239, 251, 252, 253, 256, 257, 261, 262, 264, 265], "provid": [0, 1, 2, 3, 5, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 45, 51, 54, 55, 56, 57, 58, 74, 75, 81, 85, 86, 89, 90, 95, 99, 103, 106, 107, 116, 123, 127, 128, 129, 144, 148, 150, 151, 152, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 206, 210, 214, 220, 227, 229, 237, 239, 242, 244, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "python": [0, 3, 5, 6, 7, 10, 21, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265], "first": [0, 1, 3, 4, 5, 7, 8, 11, 18, 20, 21, 39, 54, 74, 81, 86, 89, 90, 101, 103, 128, 131, 135, 144, 149, 152, 153, 154, 155, 170, 175, 205, 222, 252, 256, 257, 258, 260, 261, 262, 264, 265], "low": [0, 77, 256, 257, 261, 264], "high": [0, 9, 34, 77, 188, 193, 200, 256, 257, 264], "level": [0, 4, 22, 26, 174, 256, 257, 264], "abstract": [0, 8, 24, 25, 26, 27, 28, 36, 37, 38, 50, 51, 87, 129, 192, 215, 224, 254, 258, 261, 264], "ar": [0, 1, 2, 3, 7, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 49, 51, 52, 54, 55, 56, 57, 58, 68, 76, 77, 78, 80, 81, 89, 95, 99, 102, 103, 104, 106, 107, 112, 115, 120, 121, 127, 129, 132, 136, 139, 151, 152, 154, 155, 156, 157, 162, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 184, 187, 188, 189, 190, 191, 192, 220, 244, 248, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265], "intend": [0, 7, 13, 14, 16, 17, 18, 19, 20, 21, 77, 252, 264], "effici": [0, 1, 2, 4, 8, 132, 252, 256, 257, 258, 260, 262, 264], "modular": [0, 157, 264], "properli": [0, 258, 261, 264], "test": [0, 3, 5, 109, 127, 219, 244, 258, 264], "aim": [0, 3, 7, 89, 106, 128, 226, 251, 252, 253, 256, 257, 264], "support": [0, 1, 3, 18, 20, 26, 39, 40, 49, 56, 68, 86, 102, 111, 123, 149, 154, 157, 168, 188, 189, 190, 191, 211, 254, 258, 261, 264], "research": [0, 7, 9, 264], "most": [0, 3, 7, 8, 30, 77, 256, 258, 261, 264], "written": [0, 3, 39, 41, 51, 54, 56, 57, 58, 73, 95, 98, 100, 144, 149, 151, 152, 153, 154, 155, 158, 163, 164, 174, 176, 178, 187, 205, 206, 252, 253, 254, 256, 260, 261, 264], "highli": [0, 2, 264, 265], "wai": [0, 3, 4, 89, 91, 106, 176, 188, 189, 190, 191, 256, 257, 258, 260, 262, 264, 265], "can": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 48, 51, 52, 54, 56, 57, 58, 73, 76, 77, 85, 86, 89, 90, 95, 99, 102, 103, 106, 107, 115, 126, 129, 130, 132, 133, 141, 142, 144, 148, 149, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 219, 229, 237, 239, 242, 246, 247, 248, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "easili": [0, 3, 7, 229, 237, 239, 242, 253, 256, 257, 258, 264, 265], "swap": [0, 3, 258, 262, 264], "compon": [0, 2, 3, 41, 42, 43, 49, 123, 137, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 218, 223, 256, 257, 258, 260, 261, 262, 264], "transform": [0, 1, 2, 4, 8, 13, 14, 16, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 52, 54, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 117, 123, 124, 137, 160, 162, 206, 220, 229, 232, 234, 237, 239, 242, 248, 250, 257, 259, 262, 263], "them": [0, 2, 7, 21, 32, 33, 34, 35, 39, 40, 51, 52, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 174, 206, 256, 257, 260, 261, 262, 264, 265], "write": [0, 3, 8, 23, 30, 54, 88, 144, 149, 153, 154, 155, 157, 158, 165, 166, 167, 173, 177, 179, 181, 187, 192, 206, 252, 254, 256, 257, 258, 259, 260, 262, 263, 264], "new": [0, 3, 4, 8, 13, 14, 16, 17, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 44, 48, 51, 54, 56, 57, 58, 95, 102, 107, 114, 151, 154, 155, 159, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 256, 258, 261, 264, 265], "ones": [0, 15, 26, 30, 32, 34, 35, 51, 54, 56, 57, 58, 74, 76, 78, 86, 89, 99, 103, 106, 154, 175, 256, 258, 261, 264, 265], "littl": [0, 3, 258, 264, 265], "effort": [0, 3, 261, 264], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 48, 49, 51, 54, 55, 56, 57, 58, 65, 73, 74, 76, 77, 80, 82, 84, 86, 89, 90, 91, 95, 96, 99, 100, 102, 103, 105, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 188, 189, 190, 191, 192, 205, 214, 216, 219, 220, 223, 225, 226, 227, 229, 237, 239, 242, 244, 248, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "repo": [0, 6, 39, 251, 264], "attempt": [0, 148, 150, 151, 173, 264], "align": [0, 264], "exist": [0, 4, 18, 21, 30, 51, 54, 56, 57, 58, 74, 103, 227, 248, 264, 265], "ecosystem": [0, 264], "dataset": [0, 32, 33, 34, 35, 39, 40, 68, 107, 250, 256, 257, 262, 264, 265], "pillar": [0, 264], "environ": [0, 1, 2, 3, 5, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 77, 78, 82, 85, 86, 89, 90, 102, 103, 107, 109, 115, 127, 129, 130, 169, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 214, 216, 219, 226, 227, 229, 230, 231, 232, 234, 237, 239, 242, 244, 245, 246, 247, 248, 251, 252, 259, 262, 263], "model": [0, 1, 3, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 55, 56, 57, 58, 89, 99, 106, 108, 116, 128, 129, 130, 145, 146, 147, 154, 159, 163, 169, 170, 171, 173, 175, 176, 177, 179, 223, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 250, 251, 254, 258, 259, 261, 263, 265], "data": [0, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 68, 86, 98, 109, 112, 115, 123, 127, 130, 137, 144, 149, 150, 151, 152, 153, 154, 155, 157, 158, 165, 167, 177, 179, 181, 188, 189, 190, 191, 192, 214, 220, 223, 225, 230, 244, 246, 247, 248, 250, 253, 254, 261, 262, 265], "util": [0, 3, 17, 23, 30, 51, 54, 56, 57, 58, 89, 106, 109, 110, 111, 112, 113, 114, 116, 160, 161, 162, 244, 250, 255, 256, 258, 261, 264, 265], "e": [0, 1, 3, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 26, 30, 31, 41, 42, 51, 52, 54, 56, 57, 58, 74, 76, 81, 86, 89, 95, 99, 102, 103, 106, 109, 126, 130, 133, 137, 141, 142, 152, 154, 155, 175, 187, 188, 189, 190, 191, 214, 226, 247, 252, 256, 257, 258, 261, 262, 264, 265], "g": [0, 1, 3, 7, 8, 10, 11, 30, 31, 51, 52, 54, 56, 57, 58, 74, 76, 81, 86, 89, 95, 99, 102, 103, 106, 109, 126, 130, 141, 142, 152, 154, 155, 175, 187, 196, 197, 198, 199, 201, 202, 203, 204, 247, 252, 256, 257, 258, 261, 262, 264, 265], "collector": [0, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 98, 151, 220, 223, 225, 230, 231, 244, 246, 247, 250, 254, 265], "contain": [0, 3, 7, 12, 13, 14, 16, 17, 19, 20, 26, 30, 32, 33, 34, 35, 36, 39, 40, 44, 46, 49, 50, 51, 54, 55, 56, 57, 58, 76, 78, 89, 99, 103, 106, 107, 114, 115, 116, 128, 130, 144, 149, 152, 153, 154, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 210, 214, 226, 229, 232, 234, 237, 239, 242, 244, 245, 246, 247, 248, 252, 253, 254, 256, 257, 258, 261, 262, 264, 265], "etc": [0, 3, 7, 8, 11, 30, 37, 38, 51, 54, 56, 57, 58, 103, 128, 256, 257, 258, 264, 265], "have": [0, 1, 3, 5, 6, 7, 8, 13, 14, 17, 18, 20, 21, 26, 28, 30, 32, 33, 34, 35, 39, 48, 49, 51, 54, 56, 57, 58, 73, 85, 86, 99, 102, 103, 107, 109, 116, 127, 128, 156, 157, 163, 164, 174, 176, 184, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 214, 223, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "few": [0, 2, 8, 214, 258, 264, 265], "depend": [0, 1, 2, 3, 4, 7, 8, 158, 176, 252, 256, 258, 261, 264, 265], "possibl": [0, 3, 4, 27, 30, 31, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175, 219, 223, 256, 258, 261, 264, 265], "standard": [0, 86, 94, 107, 115, 124, 130, 131, 132, 148, 181, 188, 189, 190, 191, 256, 257, 264], "numpi": [0, 11, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 101, 223, 261, 264, 265], "common": [0, 3, 4, 21, 54, 57, 58, 145, 146, 147, 244, 251, 252, 254, 256, 258, 260, 262, 264, 265], "openai": [0, 7, 63, 64, 258, 261, 264, 265], "gym": [0, 3, 4, 8, 11, 13, 14, 16, 21, 22, 52, 54, 63, 64, 84, 86, 91, 99, 107, 229, 232, 234, 237, 239, 242, 244, 251, 256, 257, 258, 261, 262, 264], "onli": [0, 1, 3, 4, 7, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 74, 76, 77, 81, 86, 89, 90, 99, 103, 106, 107, 127, 144, 149, 152, 153, 154, 155, 156, 157, 163, 164, 174, 175, 176, 179, 192, 227, 254, 256, 257, 258, 260, 261, 264, 265], "option": [0, 4, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 51, 52, 54, 55, 56, 57, 58, 61, 68, 73, 74, 75, 77, 78, 81, 82, 84, 85, 86, 89, 90, 91, 94, 98, 99, 100, 101, 103, 104, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 201, 202, 203, 204, 206, 214, 216, 217, 218, 219, 220, 221, 223, 227, 229, 232, 237, 239, 242, 244, 246, 247, 248, 252, 261, 264], "On": [0, 3, 7, 18, 19, 20, 21, 252, 257], "end": [0, 13, 14, 30, 32, 33, 34, 35, 39, 40, 48, 51, 54, 56, 57, 58, 103, 116, 129, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 256, 257, 258, 260, 261, 262, 264, 265], "come": [0, 1, 3, 8, 57, 58, 144, 145, 146, 147, 152, 158, 256, 257, 258, 264, 265], "set": [0, 1, 2, 3, 7, 9, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 32, 33, 34, 35, 39, 40, 48, 49, 51, 53, 54, 55, 56, 57, 58, 74, 76, 84, 89, 98, 99, 103, 106, 109, 113, 129, 148, 154, 175, 214, 219, 220, 231, 248, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 264, 265], "re": [0, 3, 8, 30, 48, 51, 54, 56, 57, 58, 152, 155, 254, 256, 258, 260, 261, 264, 265], "usabl": [0, 254, 264], "function": [0, 3, 8, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 41, 42, 43, 49, 51, 52, 54, 56, 57, 58, 78, 103, 107, 109, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 133, 134, 135, 136, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 229, 232, 234, 237, 239, 242, 244, 250, 252, 256, 260, 261, 265], "cost": [0, 2, 27, 256, 257, 261], "return": [0, 3, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 50, 51, 52, 54, 55, 56, 57, 58, 61, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 114, 115, 117, 118, 119, 120, 121, 123, 126, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 223, 226, 229, 230, 232, 234, 237, 239, 242, 244, 245, 246, 247, 248, 250, 252, 254, 256, 257, 258, 260, 261, 262, 264, 265], "process": [0, 1, 2, 3, 4, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 51, 52, 54, 56, 57, 58, 107, 151, 254, 256, 257, 261, 262, 264, 265], "good": [0, 1, 4, 9, 256, 258, 264, 265], "runtim": [0, 3, 30, 51, 54, 56, 57, 58, 261], "perform": [0, 3, 4, 8, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 85, 103, 115, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 129, 130, 133, 134, 135, 138, 139, 148, 150, 151, 160, 170, 176, 219, 223, 253, 256, 257, 258, 260, 261, 265], "ppo": [0, 4, 8, 152, 155, 164, 174, 176, 229, 236, 237, 250, 252, 256, 257, 259, 263], "pendulum": [0, 3, 13, 14, 16, 17, 21, 22, 52, 56, 63, 64, 76, 84, 86, 91, 99, 103, 107, 244, 252, 257, 258, 259, 263, 264, 265], "your": [0, 2, 3, 7, 8, 10, 18, 30, 51, 54, 56, 57, 58, 107, 248, 251, 252, 253, 257, 258, 259, 263, 264], "introduct": [0, 253, 259, 263, 265], "us": [0, 1, 2, 3, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 30, 32, 33, 34, 35, 39, 40, 44, 45, 51, 52, 54, 55, 56, 57, 58, 61, 68, 74, 75, 77, 84, 86, 89, 90, 91, 99, 101, 102, 103, 106, 107, 109, 113, 114, 115, 116, 117, 118, 123, 124, 126, 128, 129, 130, 132, 133, 141, 142, 144, 149, 151, 152, 153, 154, 155, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 184, 187, 188, 189, 190, 191, 192, 193, 200, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 230, 231, 232, 240, 244, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265], "pretrain": [0, 259, 263], "task": [0, 9, 57, 58, 61, 89, 106, 173, 256, 257, 258, 259, 261, 263, 264, 265], "specif": [0, 5, 8, 34, 35, 54, 223, 250, 254, 258, 259, 263], "polici": [0, 1, 2, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 51, 54, 55, 56, 57, 58, 77, 113, 123, 132, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 163, 164, 165, 167, 174, 176, 177, 178, 179, 181, 219, 225, 229, 230, 231, 232, 234, 237, 244, 246, 247, 252, 253, 254, 257, 259, 262, 263, 264, 265], "multi": [0, 3, 7, 9, 30, 51, 54, 56, 57, 58, 127, 128, 256, 257, 259, 261, 263, 264], "object": [0, 3, 4, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 30, 41, 42, 43, 49, 51, 54, 56, 57, 58, 78, 86, 89, 102, 103, 107, 130, 144, 145, 152, 154, 155, 156, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 227, 230, 231, 243, 244, 248, 250, 252, 254, 257, 258, 259, 261, 263, 265], "ddpg": [0, 117, 118, 119, 120, 165, 172, 180, 232, 233, 250, 257, 259, 263, 264], "loss": [0, 3, 8, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 218, 223, 228, 233, 235, 236, 238, 239, 241, 244, 253, 254, 259, 261, 263, 264], "trainer": [0, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 256, 259, 263], "A": [0, 1, 3, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 65, 77, 82, 89, 90, 91, 99, 102, 103, 105, 107, 108, 109, 114, 115, 116, 123, 128, 130, 132, 133, 148, 150, 152, 155, 157, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 188, 189, 190, 191, 192, 207, 208, 211, 216, 223, 225, 229, 234, 237, 239, 242, 244, 253, 256, 258, 259, 261, 263, 265], "dqn": [0, 123, 149, 153, 163, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 234, 235, 250, 259, 263], "exampl": [0, 1, 2, 3, 4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 21, 22, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 39, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 74, 76, 77, 78, 84, 86, 89, 91, 99, 101, 103, 106, 107, 112, 114, 115, 116, 123, 127, 128, 130, 133, 137, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 182, 183, 188, 189, 190, 191, 214, 215, 216, 217, 218, 220, 221, 222, 225, 229, 232, 234, 237, 239, 242, 244, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265], "api": [0, 3, 5, 89, 106, 253, 254, 261, 264, 265], "packag": [0, 6, 7, 10, 250, 251, 256, 264, 265], "singl": [0, 3, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 73, 74, 89, 101, 106, 116, 127, 128, 157, 167, 168, 177, 181, 196, 197, 198, 199, 201, 202, 203, 204, 239, 248, 250, 256, 257, 258, 260, 261, 262], "node": [0, 2, 18, 19, 20, 21, 22, 229, 232, 234, 237, 239, 242, 250], "distribut": [0, 2, 3, 4, 9, 10, 18, 19, 20, 21, 22, 86, 115, 121, 122, 123, 124, 126, 130, 133, 136, 138, 139, 140, 141, 142, 148, 149, 152, 155, 156, 163, 164, 168, 174, 176, 250, 254, 257, 258, 261, 264, 265], "helper": [0, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 256, 257, 261], "replai": [0, 8, 13, 14, 16, 32, 33, 34, 35, 39, 40, 44, 45, 46, 47, 49, 77, 90, 99, 165, 166, 167, 173, 177, 179, 181, 220, 223, 240, 244, 250, 254, 261, 262], "buffer": [0, 1, 3, 4, 8, 13, 14, 16, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 54, 55, 56, 57, 58, 76, 77, 89, 90, 99, 103, 106, 144, 149, 152, 153, 154, 157, 158, 165, 166, 167, 173, 175, 177, 179, 181, 220, 223, 240, 244, 250, 254, 261, 262, 265], "compos": [0, 3, 30, 32, 33, 34, 35, 39, 40, 45, 46, 47, 51, 54, 56, 57, 58, 102, 103, 107, 170, 229, 232, 234, 237, 239, 242, 250, 256, 257, 258, 260, 264, 265], "tensorspec": [0, 3, 15, 24, 25, 26, 27, 28, 29, 31, 37, 38, 51, 55, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 139, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 250, 261], "env": [0, 1, 2, 5, 6, 7, 8, 13, 14, 16, 18, 19, 20, 21, 22, 30, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 129, 130, 154, 175, 205, 227, 229, 230, 231, 232, 234, 237, 239, 242, 244, 246, 247, 248, 250, 252, 256, 257, 258, 259, 260, 262, 263], "envbas": [0, 3, 13, 14, 16, 17, 18, 19, 20, 21, 52, 54, 56, 57, 58, 85, 91, 102, 103, 107, 109, 115, 129, 130, 219, 227, 229, 230, 231, 232, 234, 237, 239, 242, 244, 246, 247, 248, 250], "gymlikeenv": [0, 250], "envmetadata": [0, 250], "vector": [0, 1, 8, 24, 31, 77, 117, 119, 128, 191, 200, 201, 202, 203, 204, 250, 256, 257, 260, 261, 262, 265], "record": [0, 30, 51, 54, 56, 57, 58, 176, 205, 206, 207, 208, 209, 210, 211, 212, 213, 244, 250, 257, 258], "domain": [0, 2, 8, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 77, 99, 112, 144, 149, 152, 153, 154, 155, 156, 157, 250, 252, 258, 261, 264, 265], "modul": [0, 3, 4, 8, 11, 30, 51, 54, 55, 56, 57, 58, 76, 77, 89, 90, 99, 103, 106, 107, 108, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 172, 175, 177, 178, 179, 180, 181, 182, 185, 188, 189, 190, 191, 192, 223, 228, 233, 235, 236, 238, 241, 244, 250, 253, 254, 257, 258, 260, 261, 262], "actor": [0, 4, 15, 21, 115, 117, 119, 123, 124, 130, 137, 145, 146, 147, 149, 150, 151, 152, 153, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 181, 182, 229, 232, 234, 237, 239, 242, 250, 253, 257, 258, 262, 264], "explor": [0, 1, 108, 132, 144, 148, 149, 150, 151, 152, 153, 154, 155, 163, 219, 230, 231, 244, 250, 258, 261], "valu": [0, 1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 72, 73, 74, 77, 85, 86, 89, 90, 93, 95, 99, 100, 101, 102, 103, 106, 107, 112, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 136, 137, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 214, 216, 217, 218, 219, 220, 223, 229, 232, 237, 239, 242, 244, 250, 254, 257, 260, 261, 264, 265], "gener": [0, 1, 3, 7, 8, 16, 32, 33, 47, 48, 52, 55, 86, 91, 95, 96, 102, 121, 136, 144, 152, 155, 158, 159, 177, 183, 188, 193, 200, 209, 223, 250, 256, 257, 258, 259, 260, 261, 262, 264, 265], "hook": [0, 30, 51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 133, 134, 135, 137, 138, 139, 148, 149, 150, 151, 153, 160, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 250], "planner": [0, 115, 130, 250], "train": [0, 1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 30, 51, 54, 56, 57, 58, 82, 89, 103, 106, 109, 117, 119, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 188, 223, 225, 244, 250, 254, 257, 262, 265], "sac": [0, 167, 177, 179, 241, 242, 250], "redq": [0, 177, 238, 239, 250], "iql": [0, 173, 250], "td3": [0, 181, 250], "a2c": [0, 163, 228, 250], "dreamer": [0, 71, 124, 169, 170, 171, 250], "checkpoint": [0, 250, 262], "builder": [0, 250, 257, 265], "logger": [0, 206, 208, 209, 210, 211, 212, 213, 217, 223, 244, 248, 250, 257], "_util": [0, 11, 250], "implement_for": [0, 250], "contribut": 0, "thing": [0, 3, 7, 8, 251, 258, 265], "consid": [0, 1, 8, 20, 30, 51, 54, 56, 57, 58, 77, 107, 121, 140, 149, 153, 175, 251, 256, 261], "when": [0, 1, 2, 3, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 51, 52, 54, 56, 57, 58, 68, 76, 77, 85, 86, 89, 90, 95, 99, 102, 103, 106, 107, 113, 115, 128, 129, 130, 131, 141, 152, 154, 155, 157, 160, 164, 174, 175, 176, 182, 187, 205, 206, 220, 248, 251, 252, 254, 256, 257, 258, 261, 262, 265], "debug": [0, 6, 8, 251, 265], "work": [0, 3, 4, 8, 11, 30, 51, 54, 56, 57, 58, 74, 89, 107, 116, 128, 223, 251, 252, 256, 257, 258, 260, 261, 262, 264, 265], "habitat": [0, 65, 251, 262], "lab": [0, 3, 61, 62, 251], "mujoco": [0, 6, 8, 251, 258], "error": [0, 1, 3, 7, 10, 11, 30, 51, 54, 56, 57, 58, 90, 109, 251, 256, 258, 265], "solut": [0, 6, 7, 9, 21, 251, 254, 264], "resourc": [0, 1, 21, 251, 256, 258], "version": [0, 1, 6, 11, 30, 51, 54, 56, 57, 58, 147, 175, 179, 191, 251, 252, 256, 258, 261, 262, 265], "issu": [0, 4, 5, 8, 90, 144, 149, 152, 153, 154, 155, 251, 264], "index": [0, 3, 7, 8, 10, 16, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 50, 77, 114, 260, 264], "search": [0, 257], "page": [0, 7], "somewhat": [1, 253, 265], "equival": [1, 17, 24, 27, 28, 29, 30, 31, 39, 51, 54, 56, 57, 58, 103, 220, 264, 265], "dataload": [1, 48, 257, 258], "except": [1, 3, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 51, 80, 136, 252, 257, 264, 265], "1": [1, 2, 3, 4, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 72, 74, 76, 77, 78, 82, 85, 86, 89, 90, 91, 99, 100, 101, 103, 106, 107, 112, 114, 115, 116, 117, 118, 120, 123, 125, 126, 128, 130, 131, 132, 133, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 160, 163, 164, 167, 170, 173, 174, 175, 176, 177, 179, 180, 187, 188, 189, 190, 191, 195, 196, 197, 201, 202, 204, 214, 219, 220, 221, 229, 232, 234, 237, 239, 242, 244, 248, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "thei": [1, 2, 3, 4, 8, 9, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 78, 80, 89, 102, 103, 106, 127, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 220, 223, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "collect": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 30, 32, 33, 34, 35, 39, 40, 86, 89, 106, 109, 151, 165, 167, 177, 179, 181, 214, 220, 223, 225, 226, 227, 244, 254, 256, 261, 262, 264, 265], "over": [1, 2, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 33, 35, 51, 54, 56, 57, 58, 77, 86, 100, 114, 157, 168, 170, 175, 226, 254, 256, 257, 258, 261, 265], "non": [1, 8, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 72, 76, 81, 89, 99, 103, 104, 106, 114, 154, 155, 163, 165, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 252, 256, 261, 265], "static": [1, 107, 173, 261], "2": [1, 3, 8, 10, 11, 13, 14, 16, 21, 22, 28, 29, 30, 32, 33, 34, 35, 51, 52, 54, 56, 57, 58, 68, 69, 70, 74, 76, 77, 86, 89, 99, 103, 106, 107, 112, 116, 117, 118, 119, 123, 125, 127, 128, 133, 149, 150, 151, 154, 158, 164, 165, 167, 173, 174, 175, 177, 179, 181, 187, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 214, 252, 253, 256, 257, 258, 260, 261, 262, 263, 264, 265], "like": [1, 4, 7, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 65, 101, 109, 177, 253, 256, 258, 261, 262, 265], "being": [1, 3, 7, 8, 17, 18, 20, 21, 30, 51, 54, 56, 57, 58, 77, 78, 91, 103, 113, 151, 164, 174, 175, 176, 206, 220, 225, 246, 247, 248, 252, 256, 257, 258, 261], "": [1, 2, 3, 6, 7, 8, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 109, 116, 132, 145, 147, 148, 152, 154, 155, 173, 175, 179, 188, 189, 190, 191, 192, 239, 242, 252, 256, 257, 258, 260, 261, 262, 264, 265], "accept": [1, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 55, 56, 57, 58, 76, 81, 89, 95, 99, 103, 104, 106, 154, 155, 156, 175, 254, 258, 265], "two": [1, 4, 8, 10, 30, 48, 51, 54, 56, 57, 58, 86, 89, 106, 120, 155, 174, 184, 219, 223, 229, 237, 239, 242, 253, 256, 257, 258, 260, 261, 264, 265], "main": [1, 2, 5, 20, 22, 52, 155, 223, 252, 253, 256, 257, 260, 265], "argument": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 26, 30, 32, 33, 34, 35, 48, 51, 54, 56, 57, 58, 76, 89, 99, 102, 103, 106, 114, 116, 128, 131, 144, 149, 152, 153, 154, 155, 156, 158, 175, 183, 188, 189, 190, 191, 192, 205, 216, 226, 229, 232, 234, 237, 239, 242, 244, 245, 248, 256, 257, 258, 261, 265], "list": [1, 6, 7, 8, 9, 13, 14, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 48, 49, 51, 54, 55, 56, 57, 58, 73, 78, 86, 89, 91, 95, 103, 106, 107, 128, 157, 158, 175, 186, 188, 191, 205, 219, 220, 246, 247, 252, 256, 258, 260, 261, 262, 264, 265], "constructor": [1, 16, 18, 19, 20, 21, 33, 102, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 192, 229, 232, 234, 237, 239, 242, 245, 248, 252, 256, 257, 258], "iter": [1, 13, 14, 16, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 56, 57, 58, 79, 86, 96, 107, 116, 128, 144, 149, 152, 153, 154, 155, 156, 157, 158, 175, 186, 219, 222, 223, 229, 237, 239, 242, 253, 254, 256, 258, 261], "execut": [1, 3, 6, 7, 8, 13, 14, 16, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 51, 52, 54, 55, 56, 57, 58, 99, 156, 157, 227, 248, 252, 254, 257, 258, 263, 265], "step": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 52, 54, 55, 56, 57, 58, 60, 67, 81, 84, 85, 86, 98, 100, 103, 114, 115, 124, 127, 129, 130, 148, 150, 151, 152, 155, 163, 169, 176, 187, 189, 194, 195, 205, 214, 219, 223, 254, 256, 257, 260, 261, 262, 264], "queri": [1, 13, 14, 16, 17, 30, 51, 54, 56, 57, 58, 89, 102, 107, 157, 256, 261, 264], "defin": [1, 2, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 90, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 188, 189, 190, 191, 192, 205, 245, 256, 257, 261, 265], "number": [1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 27, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 51, 54, 55, 56, 57, 58, 68, 73, 77, 82, 85, 86, 94, 98, 100, 107, 115, 116, 121, 122, 124, 125, 126, 128, 130, 133, 134, 135, 138, 139, 140, 141, 142, 144, 148, 149, 150, 151, 152, 153, 154, 155, 158, 162, 167, 169, 173, 174, 177, 179, 181, 214, 216, 219, 223, 225, 226, 227, 246, 247, 248, 252, 256, 257, 258, 261, 262, 265], "befor": [1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 21, 30, 40, 48, 51, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 104, 128, 131, 132, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 189, 190, 191, 220, 256, 258, 261, 265], "deliv": [1, 18, 19, 20, 256, 257, 264], "stack": [1, 7, 8, 18, 20, 21, 57, 58, 107, 156, 157, 205, 214, 257, 260, 261, 264], "user": [1, 2, 5, 8, 21, 30, 39, 51, 54, 56, 57, 58, 103, 127, 245, 253, 254, 256, 257, 261, 264, 265], "reset": [1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 73, 76, 79, 81, 84, 85, 89, 95, 96, 98, 99, 100, 102, 105, 107, 109, 143, 151, 205, 229, 232, 234, 237, 239, 242, 256, 257, 258, 260, 264], "whenev": [1, 3, 30, 32, 33, 34, 35, 84, 175, 225, 252], "reach": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 22, 48, 51, 54, 56, 57, 58, 148, 150, 151, 256, 258, 264, 265], "done": [1, 3, 4, 7, 8, 13, 14, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 86, 91, 94, 96, 98, 99, 102, 103, 107, 114, 115, 130, 165, 166, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 229, 232, 234, 237, 239, 242, 253, 256, 258, 260, 261, 262, 264, 265], "state": [1, 3, 4, 13, 14, 16, 17, 30, 39, 51, 54, 55, 56, 57, 58, 60, 67, 73, 74, 76, 79, 84, 86, 91, 96, 98, 102, 103, 105, 107, 114, 115, 124, 127, 128, 130, 134, 138, 139, 145, 154, 159, 163, 164, 174, 175, 176, 177, 178, 187, 188, 189, 190, 191, 192, 248, 252, 253, 256, 257, 258, 261, 265], "after": [1, 8, 13, 14, 18, 20, 21, 26, 30, 51, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 114, 131, 148, 150, 170, 257, 258, 261, 262, 265], "predefin": [1, 257, 258], "becaus": [1, 3, 4, 7, 102, 120, 127, 144, 149, 152, 153, 154, 155, 256, 257, 260, 261, 265], "potenti": [1, 261], "comput": [1, 3, 4, 8, 13, 16, 21, 27, 30, 51, 54, 56, 57, 58, 86, 103, 105, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 133, 134, 135, 138, 139, 141, 142, 145, 148, 150, 151, 152, 155, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 227, 253, 256, 258, 260, 262], "heavi": [1, 8], "crucial": [1, 173, 256, 257, 258, 261, 265], "configur": [1, 8, 13, 14, 16, 17, 21, 22, 175, 176, 229, 237, 239, 242, 256, 257, 258, 261], "hyperparamet": [1, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 256, 261], "appropri": [1, 3, 4, 7, 13, 14, 16, 17, 46, 50, 99, 245, 248, 256], "paramet": [1, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 237, 239, 242, 244, 245, 246, 247, 248, 252, 253, 256, 261, 262, 264], "consider": [1, 3, 8, 257], "whether": [1, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 55, 56, 57, 58, 103, 116, 128, 158, 165, 166, 167, 168, 175, 177, 179, 181, 191, 256, 257, 258, 261, 265], "should": [1, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 51, 54, 55, 56, 57, 58, 73, 81, 86, 90, 91, 95, 96, 98, 102, 103, 107, 109, 114, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 152, 154, 155, 160, 167, 172, 174, 175, 176, 177, 180, 187, 188, 189, 190, 191, 192, 206, 218, 219, 220, 223, 244, 246, 247, 248, 252, 254, 256, 257, 258, 260, 261, 262, 264, 265], "occur": [1, 8, 14, 74, 86, 90, 144, 149, 152, 153, 154, 155, 170, 265], "serial": [1, 3, 30, 51, 54, 56, 57, 58, 107], "optim": [1, 8, 30, 51, 54, 56, 57, 58, 115, 130, 131, 132, 175, 176, 179, 218, 223, 229, 237, 244, 253, 254, 258, 261], "parallel": [1, 3, 8, 17, 109, 163, 245, 246, 247, 248, 257, 258], "syncdatacollector": [1, 13, 14, 17, 18, 19, 20, 21, 244, 247, 250, 258], "worker": [1, 13, 14, 16, 17, 18, 19, 20, 21, 22, 52, 56, 57, 58, 107, 246, 247, 248, 256, 258, 264, 265], "multisyncdatacollector": [1, 18, 19, 20, 21, 247, 250, 258, 264], "split": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 39, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 252, 254, 258, 264], "workload": 1, "across": [1, 8, 18, 19, 20, 21, 32, 33, 34, 35, 107, 151, 225, 252, 256, 261], "aggreg": [1, 116, 117, 118, 157], "result": [1, 3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 48, 51, 52, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 107, 109, 114, 128, 137, 175, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 225, 252, 257, 261, 262, 264, 265], "final": [1, 3, 4, 21, 148, 150, 151, 156, 188, 219, 252, 256, 257, 258, 261, 265], "multiasyncdatacollector": [1, 17, 18, 19, 20, 21, 246, 250, 256, 257, 258, 264], "sever": [1, 8, 28, 30, 51, 54, 56, 57, 58, 74, 103, 176, 256, 258, 265], "batch": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 23, 27, 30, 31, 32, 33, 34, 35, 39, 40, 45, 48, 51, 54, 55, 56, 57, 58, 68, 81, 86, 90, 99, 103, 104, 107, 121, 122, 127, 131, 136, 140, 151, 154, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 214, 217, 220, 221, 222, 223, 225, 246, 247, 248, 254, 256, 257, 258, 260, 262, 264, 265], "gather": [1, 3, 18, 20, 21, 90, 187, 227, 251, 256, 257, 258, 261, 265], "continu": [1, 9, 25, 37, 112, 117, 118, 119, 120, 151, 155, 157, 180, 188, 193, 200, 232, 252, 256, 258, 261, 264, 265], "concomitantli": 1, "network": [1, 4, 8, 30, 51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 128, 132, 134, 135, 138, 139, 145, 146, 147, 154, 165, 166, 167, 168, 172, 173, 175, 177, 178, 179, 180, 181, 185, 188, 189, 190, 191, 192, 229, 232, 237, 243, 244, 252, 253, 254, 256, 260, 261, 265], "impli": [1, 265], "weight": [1, 4, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 132, 154, 163, 164, 167, 170, 175, 225, 243, 254, 256, 257, 258, 260, 261, 264], "mai": [1, 2, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 20, 21, 30, 39, 51, 54, 56, 57, 58, 86, 96, 103, 104, 107, 109, 128, 253, 254, 256, 257, 258, 261, 262, 264, 265], "slightli": [1, 252, 253, 261, 262, 265], "lag": [1, 13, 14, 16, 17, 256, 257, 258], "therefor": [1, 3, 7, 176, 265], "although": [1, 8, 51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 254, 256, 257], "fastest": 1, "price": 1, "suitabl": 1, "where": [1, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 39, 40, 41, 42, 51, 54, 55, 56, 57, 58, 68, 73, 89, 95, 98, 100, 102, 104, 106, 148, 150, 152, 154, 155, 162, 163, 164, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 253, 254, 256, 257, 258, 260, 261, 265], "asynchron": [1, 9, 14, 21, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 163, 175, 246, 257, 258], "off": [1, 2, 4, 126, 141, 142, 179, 219, 230, 252, 254, 256, 257, 258, 262, 265], "curriculum": [1, 4], "For": [1, 2, 3, 4, 7, 8, 9, 10, 13, 14, 16, 17, 18, 20, 21, 30, 39, 51, 54, 56, 57, 58, 81, 86, 123, 131, 145, 147, 163, 168, 173, 175, 176, 219, 232, 252, 254, 256, 257, 258, 261, 262, 265], "remot": [1, 18, 19, 20, 21, 57, 58, 265], "rollout": [1, 3, 13, 14, 16, 21, 23, 51, 54, 55, 56, 57, 58, 69, 70, 91, 109, 115, 130, 151, 163, 227, 252, 256, 258, 262, 264], "necessari": [1, 4, 6, 8, 13, 14, 16, 17, 96, 177, 188, 189, 190, 191, 192, 253, 256, 258], "synchronis": [1, 52], "from": [1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 51, 52, 54, 55, 56, 57, 58, 74, 77, 79, 84, 86, 89, 90, 91, 96, 98, 99, 101, 102, 103, 104, 106, 107, 112, 114, 115, 117, 118, 119, 120, 123, 126, 128, 129, 130, 131, 133, 137, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 167, 174, 175, 176, 177, 179, 181, 183, 187, 188, 189, 190, 191, 205, 206, 214, 220, 223, 226, 227, 229, 232, 234, 237, 239, 240, 242, 244, 245, 248, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "either": [1, 5, 22, 30, 51, 54, 56, 57, 58, 159, 210, 232, 254, 256, 257, 262, 264, 265], "update_policy_weights_": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 256, 264], "update_at_each_batch": [1, 13, 14, 17, 256], "true": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 69, 70, 74, 76, 77, 81, 84, 85, 86, 89, 90, 91, 94, 98, 99, 101, 103, 104, 106, 107, 109, 112, 114, 115, 116, 117, 118, 119, 120, 125, 126, 128, 130, 131, 132, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 163, 164, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 184, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 216, 217, 219, 220, 223, 234, 248, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "second": [1, 8, 179, 222, 256, 257, 258, 260, 261, 262, 264, 265], "devic": [1, 2, 3, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 41, 42, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 76, 88, 89, 91, 99, 101, 103, 106, 112, 114, 115, 116, 117, 118, 119, 120, 123, 125, 127, 128, 130, 131, 132, 137, 144, 145, 146, 147, 149, 151, 152, 153, 154, 157, 158, 175, 220, 225, 229, 232, 234, 237, 239, 240, 242, 256, 257, 258, 260, 261, 262, 264], "oper": [1, 3, 4, 7, 8, 13, 14, 17, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 81, 102, 123, 133, 145, 146, 147, 154, 159, 163, 164, 165, 166, 168, 174, 175, 176, 178, 187, 188, 189, 190, 191, 223, 232, 234, 239, 242, 250, 254, 256, 257, 258, 260, 261, 265], "instanc": [1, 2, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 36, 39, 51, 52, 54, 55, 56, 57, 58, 62, 73, 86, 99, 102, 107, 112, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 129, 133, 134, 135, 138, 139, 148, 150, 151, 152, 155, 156, 157, 160, 175, 206, 210, 219, 227, 229, 230, 231, 232, 234, 237, 239, 242, 244, 246, 247, 252, 253, 254, 256, 258, 261, 265], "cpu": [1, 3, 8, 10, 13, 14, 16, 18, 19, 20, 21, 24, 30, 34, 35, 36, 41, 42, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 76, 89, 91, 99, 103, 106, 112, 114, 115, 130, 132, 144, 145, 146, 147, 149, 152, 154, 157, 158, 175, 220, 229, 232, 234, 237, 239, 242, 256, 257, 258, 260, 261, 262, 264, 265], "slower": 1, "than": [1, 4, 8, 13, 14, 16, 17, 39, 91, 120, 128, 133, 144, 148, 149, 150, 153, 154, 158, 175, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 251, 253, 256, 257, 258, 261, 264, 265], "one": [1, 3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 44, 46, 49, 50, 51, 52, 54, 56, 57, 58, 68, 77, 85, 86, 89, 97, 103, 104, 106, 107, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 133, 134, 135, 136, 137, 138, 139, 144, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 162, 163, 164, 165, 166, 167, 174, 175, 176, 177, 178, 181, 194, 195, 216, 218, 219, 223, 227, 229, 237, 239, 242, 248, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 265], "cuda": [1, 3, 7, 30, 51, 54, 56, 57, 58, 76, 88, 89, 99, 103, 106, 154, 175, 215, 256, 257, 258, 262, 265], "multipl": [1, 3, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 27, 57, 58, 74, 77, 95, 102, 107, 127, 131, 132, 144, 149, 152, 153, 154, 155, 167, 177, 181, 239, 248, 252, 254, 256, 257, 258, 261, 264], "infer": [1, 57, 58, 107, 131, 256, 258], "run": [1, 3, 4, 5, 6, 7, 8, 10, 13, 14, 17, 21, 30, 51, 54, 55, 56, 57, 58, 61, 62, 85, 86, 103, 107, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 156, 157, 160, 175, 219, 246, 247, 248, 251, 254, 256, 257, 258, 260, 261, 262, 264], "dispatch": [1, 18, 19, 20, 21], "avail": [1, 4, 6, 21, 48, 123, 137, 152, 155, 175, 246, 247, 256, 257, 258, 265], "speed": [1, 2, 4, 8, 27, 253, 256, 257, 258, 261], "up": [1, 2, 3, 8, 9, 27, 39, 251, 252, 253, 256, 257, 258, 261, 265], "avoid": [1, 30, 51, 54, 56, 57, 58, 103, 107, 144, 149, 153, 154, 158, 226, 258], "oom": 1, "choic": [1, 2, 39, 133, 252, 253, 256, 257], "size": [1, 2, 3, 13, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 74, 81, 89, 91, 97, 99, 101, 103, 104, 106, 107, 112, 114, 115, 116, 121, 123, 127, 128, 130, 133, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 175, 187, 188, 189, 190, 191, 192, 206, 214, 220, 229, 232, 234, 237, 239, 242, 256, 257, 258, 260, 261, 262, 264, 265], "pass": [1, 3, 4, 13, 14, 16, 18, 19, 20, 21, 22, 26, 30, 32, 33, 34, 35, 51, 52, 53, 54, 56, 57, 58, 78, 91, 102, 104, 107, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 131, 133, 134, 135, 138, 139, 144, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 175, 188, 189, 190, 191, 192, 220, 246, 247, 248, 252, 256, 257, 258, 260, 261, 265], "ie": [1, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 44, 68, 81, 104, 107, 163, 164, 174, 175, 176, 253, 257, 258], "store": [1, 3, 8, 13, 14, 16, 17, 20, 26, 30, 34, 35, 41, 42, 43, 44, 51, 54, 56, 57, 58, 107, 115, 127, 130, 229, 232, 234, 237, 239, 242, 250, 254, 256, 258, 262, 265], "while": [1, 3, 7, 8, 30, 51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 173, 174, 175, 176, 252, 256, 258, 261, 262, 264], "wait": [1, 20, 21, 22, 261], "also": [1, 2, 3, 8, 11, 30, 34, 51, 54, 56, 57, 58, 77, 86, 91, 95, 96, 99, 103, 139, 156, 157, 163, 165, 166, 175, 188, 194, 195, 252, 254, 256, 257, 258, 260, 261, 265], "impact": [1, 257], "memori": [1, 2, 3, 8, 21, 27, 30, 41, 51, 52, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 154, 175, 248, 254, 256, 257, 258, 260, 261, 262, 264, 265], "manag": [1, 8, 185, 186, 188, 189, 190, 191, 219], "kei": [1, 3, 7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 103, 105, 106, 107, 114, 115, 129, 130, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 206, 217, 218, 219, 221, 222, 223, 227, 229, 237, 239, 242, 253, 254, 256, 258, 260, 261, 264, 265], "control": [1, 3, 5, 8, 16, 61, 62, 77, 114, 117, 118, 119, 120, 129, 130, 139, 151, 154, 155, 156, 163, 164, 174, 176, 180, 188, 193, 200, 232, 252, 254, 256, 257, 258, 261], "which": [1, 2, 3, 4, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 26, 27, 30, 31, 34, 35, 39, 48, 51, 54, 56, 57, 58, 73, 74, 82, 85, 86, 89, 90, 98, 99, 100, 102, 103, 109, 126, 141, 142, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 158, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 184, 188, 214, 218, 229, 232, 234, 237, 239, 242, 252, 253, 254, 256, 257, 258, 260, 261, 262, 265], "storing_devic": [1, 13, 14, 16, 17, 18, 19, 20, 21, 256, 257, 264], "dure": [1, 7, 13, 14, 16, 17, 18, 19, 20, 39, 40, 51, 54, 56, 57, 58, 82, 103, 219, 223, 253, 256, 257, 258, 261, 265], "heurist": [1, 4, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 151, 256, 265], "usual": [1, 3, 4, 6, 7, 8, 39, 51, 54, 56, 57, 58, 132, 188, 189, 190, 191, 192, 205, 229, 237, 239, 242, 251, 252, 254, 256, 257, 258, 265], "same": [1, 3, 4, 11, 13, 14, 16, 18, 19, 20, 21, 30, 39, 48, 51, 52, 54, 56, 57, 58, 77, 82, 85, 86, 102, 103, 107, 116, 128, 151, 256, 257, 258, 260, 261, 262, 265], "storag": [1, 2, 8, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 48, 51, 53, 54, 56, 57, 58, 78, 250, 254, 256, 257, 258, 262], "default": [1, 2, 3, 10, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 44, 51, 54, 56, 57, 58, 61, 68, 73, 74, 77, 81, 85, 86, 89, 90, 94, 98, 99, 100, 101, 103, 104, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 232, 237, 239, 242, 244, 248, 254, 256, 257, 258, 262, 264, 265], "behaviour": [1, 3, 21, 54, 74, 86, 90, 114, 126, 141, 142, 219, 252, 257, 261], "besid": 1, "those": [1, 5, 7, 26, 57, 58, 86, 99, 152, 155, 156, 157, 225, 246, 247, 252, 256, 257, 261, 265], "choos": [1, 252, 253, 256, 257, 258], "follow": [1, 2, 3, 6, 7, 8, 30, 39, 40, 51, 54, 55, 56, 57, 58, 68, 89, 116, 128, 162, 164, 174, 175, 178, 223, 239, 242, 252, 253, 254, 256, 257, 258, 260, 261, 264, 265], "max_frames_per_traj": [1, 13, 14, 16, 17, 18, 19, 20, 21, 226, 256, 258, 264], "frame": [1, 2, 13, 14, 16, 17, 18, 19, 20, 21, 30, 54, 73, 82, 148, 150, 151, 205, 206, 216, 219, 223, 226, 227, 256, 257, 258, 264, 265], "call": [1, 3, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 45, 48, 49, 51, 54, 56, 57, 58, 68, 73, 76, 77, 78, 81, 84, 86, 88, 89, 95, 98, 99, 103, 106, 107, 109, 113, 115, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 130, 131, 133, 134, 135, 138, 139, 148, 150, 151, 154, 155, 157, 160, 175, 187, 188, 189, 190, 191, 205, 219, 254, 257, 258, 261, 264, 265], "frames_per_batch": [1, 13, 14, 16, 17, 18, 19, 20, 21, 226, 256, 257, 258, 264], "each": [1, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28, 29, 30, 34, 51, 52, 54, 56, 57, 58, 89, 95, 98, 99, 100, 106, 107, 123, 137, 148, 157, 196, 197, 198, 199, 201, 202, 203, 204, 219, 220, 246, 247, 252, 256, 257, 258, 261, 262, 264, 265], "init_random_fram": [1, 13, 14, 16, 17, 18, 19, 20, 21, 226, 256, 257], "random": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 45, 51, 54, 55, 56, 57, 58, 77, 85, 86, 99, 109, 152, 154, 155, 177, 219, 227, 252, 256, 257, 258, 261, 262, 264, 265], "rand_step": [1, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 84, 107, 261, 264, 265], "reset_at_each_it": [1, 13, 14, 16, 17, 18, 19, 20, 21, 256], "split_traj": [1, 13, 14, 16, 17, 18, 19, 20, 21, 39, 256, 257, 258], "trajectori": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 23, 30, 34, 39, 44, 51, 54, 56, 57, 58, 90, 102, 115, 130, 151, 176, 188, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 214, 250, 253, 256, 257, 258, 261, 264, 265], "pad": [1, 23, 39, 116, 117, 118, 127, 220], "along": [1, 23, 39, 73, 74, 86, 90, 95, 101, 128, 132, 152, 154, 155, 175, 252, 256, 257, 261], "mask": [1, 4, 13, 14, 16, 23, 90, 220, 257, 265], "point": [1, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 40, 44, 46, 50, 51, 54, 56, 57, 58, 73, 76, 89, 99, 101, 103, 106, 129, 154, 162, 168, 175, 223, 251, 257, 258, 260, 261, 265], "boolean": [1, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 54, 90, 148, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 254], "repres": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 26, 34, 51, 54, 56, 57, 58, 82, 90, 107, 123, 137, 155, 184, 188, 220, 256, 258], "valid": [1, 23, 90, 103, 116, 128, 148, 150, 151, 174, 220, 254, 265], "exploration_mod": [1, 13, 14, 16, 18, 19, 20, 21, 219, 250, 252, 256, 257], "strategi": [1, 16, 252, 254, 256, 257], "reset_when_don": [1, 13, 14, 16, 18, 19, 20, 21], "These": [1, 2, 7, 30, 51, 54, 56, 57, 58, 89, 106, 252, 253, 256, 258, 261, 265], "tool": [1, 5, 261, 265], "backend": [1, 3, 7, 11, 18, 19, 21, 22, 254, 256, 258, 261], "gloo": [1, 18, 19, 22], "nccl": [1, 18, 19], "mpi": [1, 18, 19], "distributeddatacollector": [1, 22, 250], "rpc": [1, 20, 22], "rpcdatacollector": [1, 22, 250], "launcher": [1, 18, 19, 20, 22], "rai": [1, 21], "submitit": [1, 18, 19, 20, 22], "torch": [1, 3, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 44, 48, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 74, 76, 77, 78, 86, 89, 91, 94, 99, 101, 103, 106, 107, 112, 114, 115, 116, 121, 123, 124, 126, 127, 128, 130, 131, 132, 133, 136, 137, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 161, 175, 188, 189, 190, 191, 214, 221, 222, 229, 232, 234, 237, 239, 242, 244, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "multiprocess": [1, 18, 19, 20, 52, 53, 107, 257, 258, 261, 265], "synchron": [1, 13, 19, 21, 56, 246, 247, 257, 258], "mode": [1, 6, 13, 14, 16, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 103, 107, 110, 113, 121, 126, 136, 140, 141, 142, 152, 155, 219, 256, 257, 264, 265], "folder": [1, 257], "sub": [1, 2, 3, 13, 14, 18, 19, 20, 21, 51, 54, 56, 57, 58, 90, 156, 157, 214, 223, 256, 257, 258, 260, 264, 265], "all": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 52, 54, 55, 56, 57, 58, 76, 80, 86, 89, 95, 99, 100, 103, 106, 107, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 154, 155, 157, 160, 170, 175, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 218, 223, 226, 246, 247, 248, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 264, 265], "variou": [1, 3, 13, 14, 16, 17, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 246, 247, 256, 257, 258, 265], "machin": [1, 7, 18, 19, 20, 30, 40], "One": [1, 2, 4, 8, 29, 31, 136, 148, 150, 154, 184, 210, 256, 257, 265], "wonder": 1, "why": [1, 3, 261, 265], "parallelenv": [1, 2, 3, 13, 14, 16, 17, 20, 56, 58, 245, 250, 256, 257, 258, 260, 264, 265], "instead": [1, 4, 7, 8, 11, 27, 30, 51, 54, 56, 57, 58, 81, 99, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 192, 248, 252, 261, 265], "In": [1, 3, 4, 5, 7, 8, 10, 11, 17, 21, 22, 30, 39, 51, 54, 56, 57, 58, 76, 89, 96, 99, 102, 103, 106, 126, 128, 139, 141, 142, 154, 157, 162, 175, 225, 246, 247, 248, 252, 253, 256, 257, 258, 260, 261, 262, 265], "lower": [1, 2, 17, 21, 25, 107, 138, 139, 258, 261], "io": [1, 56], "footprint": [1, 2], "need": [1, 2, 4, 7, 8, 10, 18, 19, 20, 21, 30, 49, 51, 54, 56, 57, 58, 81, 89, 91, 103, 106, 107, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 131, 133, 134, 135, 138, 139, 148, 150, 151, 154, 160, 162, 167, 177, 178, 179, 181, 187, 192, 206, 223, 248, 252, 253, 256, 257, 258, 261, 264, 265], "commun": [1, 2, 3, 251, 258, 265], "yet": [1, 175, 262], "spec": [1, 2, 3, 15, 21, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 39, 51, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 109, 112, 123, 137, 139, 144, 148, 149, 150, 151, 152, 153, 154, 155, 157, 229, 232, 234, 237, 239, 242, 252, 256, 257, 258, 260, 264], "plai": [1, 73, 257, 258, 265], "role": [1, 257, 265], "opposit": 1, "direct": [1, 30, 51, 54, 56, 57, 58, 175, 257], "sinc": [1, 3, 4, 5, 7, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 114, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 256, 257, 258, 261, 262, 264, 265], "faster": [1, 4, 56], "share": [1, 2, 3, 6, 8, 41, 42, 43, 49, 52, 57, 58, 107, 145, 146, 147, 163, 164, 174, 176, 248, 252, 258, 260, 264, 265], "among": 1, "achiev": [1, 3, 4, 30, 51, 54, 56, 57, 58, 220, 254, 256, 257, 258, 261, 265], "via": [1, 3, 4, 7, 8, 32, 33, 34, 35, 39, 40, 57, 89, 102, 106, 253, 254, 256, 257, 258, 265], "capabl": [1, 7, 254, 256, 260, 262, 265], "prohibit": [1, 3], "slow": [1, 3, 4], "compar": [1, 3, 51, 219, 253, 256, 258, 265], "gpu": [1, 7, 8, 30, 51, 54, 56, 57, 58, 175, 256, 258, 265], "nativ": [1, 7, 9, 51, 54, 56, 57, 58, 73], "driver": [1, 7], "practic": [1, 4, 5, 8, 126, 141, 142, 162, 251, 256, 257, 258, 262, 265], "mean": [1, 2, 3, 4, 7, 13, 14, 16, 18, 19, 20, 21, 34, 44, 86, 107, 115, 121, 124, 127, 130, 140, 148, 152, 155, 175, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 252, 253, 256, 257, 258, 261, 264, 265], "keyword": [1, 3, 13, 14, 16, 18, 19, 20, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 144, 149, 152, 153, 154, 155, 158, 175, 183, 188, 189, 190, 191, 192, 245, 256, 257, 258, 265], "build": [1, 3, 7, 23, 26, 30, 51, 54, 56, 57, 58, 107, 115, 130, 152, 155, 223, 228, 233, 235, 236, 238, 240, 241, 243, 252, 254, 258, 261, 262, 264, 265], "central": [2, 256, 257], "part": [2, 4, 8, 30, 51, 54, 56, 57, 58, 86, 95, 158, 175, 214, 248, 256, 258, 261, 265], "algorithm": [2, 8, 9, 13, 14, 55, 82, 163, 176, 177, 178, 179, 214, 229, 230, 237, 252, 253, 254, 256, 257, 258, 262, 264], "implement": [2, 3, 9, 11, 16, 30, 49, 51, 54, 56, 57, 58, 91, 102, 107, 126, 140, 141, 142, 163, 173, 176, 179, 229, 237, 239, 242, 252, 254, 256, 257, 258, 261, 264], "wide": [2, 3, 5], "we": [2, 3, 5, 7, 9, 26, 30, 35, 39, 48, 51, 52, 54, 56, 57, 58, 89, 91, 99, 107, 115, 127, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "give": [2, 7, 34, 55, 251, 253, 256, 257, 261, 262, 264], "abil": [2, 261], "veri": [2, 3, 257, 261, 264, 265], "influenti": 2, "sampl": [2, 4, 8, 9, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 51, 54, 55, 56, 57, 58, 68, 90, 110, 113, 115, 121, 126, 130, 136, 138, 141, 142, 144, 148, 149, 150, 151, 152, 153, 154, 155, 163, 164, 165, 166, 174, 176, 181, 214, 220, 223, 226, 252, 256, 257, 258, 262, 264, 265], "latenc": 2, "especi": [2, 3, 7, 8, 74], "larger": [2, 4, 173], "volum": 2, "lazymemmapstorag": [2, 250, 256, 257, 262], "advis": [2, 265], "due": [2, 3, 5, 262, 265], "serialis": 2, "memmaptensor": [2, 262], "well": [2, 3, 8, 17, 21, 30, 32, 33, 34, 35, 49, 51, 54, 56, 57, 58, 138, 139, 175, 192, 256, 257, 262, 264, 265], "specifi": [2, 11, 13, 14, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 54, 56, 57, 58, 95, 97, 104, 115, 154, 155, 175, 252, 256, 258], "file": [2, 6, 7, 8, 205, 254, 256, 257, 263, 264], "locat": [2, 7, 54, 86, 94, 126, 133, 141, 142, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 256, 257, 258], "improv": [2, 4, 82, 163, 253], "failur": [2, 4], "recoveri": 2, "liststorag": [2, 32, 33, 34, 35, 250], "were": [2, 7, 57, 58, 258], "found": [2, 6, 7, 10, 21, 26, 30, 51, 54, 56, 57, 58, 107, 152, 155, 174, 175, 176, 256, 257, 264], "rough": 2, "benchmark": [2, 3, 9], "http": [2, 5, 6, 7, 10, 18, 19, 20, 32, 40, 44, 56, 73, 89, 117, 118, 119, 120, 123, 124, 125, 130, 132, 134, 135, 138, 139, 151, 163, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 188, 193, 200, 229, 232, 237, 239, 242, 256, 262, 264], "com": [2, 5, 6, 7, 10, 18, 19, 20, 262, 264], "tree": 2, "type": [2, 3, 14, 18, 19, 20, 21, 30, 32, 33, 34, 35, 36, 51, 54, 55, 56, 57, 58, 76, 89, 91, 99, 102, 103, 106, 107, 116, 128, 132, 148, 150, 152, 154, 155, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 183, 229, 232, 234, 237, 239, 242, 246, 252, 256, 257, 258, 261, 265], "1x": 2, "lazytensorstorag": [2, 34, 35, 250, 258], "83x": 2, "3": [2, 3, 6, 7, 10, 11, 13, 14, 15, 16, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 51, 54, 56, 57, 58, 68, 76, 77, 86, 89, 91, 99, 101, 103, 106, 112, 115, 116, 117, 118, 123, 125, 127, 128, 130, 133, 144, 145, 146, 147, 149, 152, 154, 157, 158, 170, 175, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 206, 222, 234, 252, 254, 256, 257, 258, 261, 262, 263, 264, 265], "44x": 2, "too": [2, 7, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 126, 141, 142, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 257, 258, 261, 265], "difficult": [2, 4], "element": [2, 13, 14, 16, 18, 19, 20, 21, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 68, 90, 116, 144, 148, 149, 153, 154, 155, 158, 214, 256, 258, 265], "pai": [2, 8, 256], "attent": [2, 8, 256], "alwai": [2, 20, 30, 51, 54, 56, 57, 58, 85, 168, 252, 253, 257, 258, 261], "lead": [2, 3, 4, 8, 10, 11, 26, 30, 32, 33, 34, 35, 39, 48, 99, 126, 141, 142, 256, 261, 264], "dimens": [2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 73, 74, 81, 86, 90, 97, 101, 104, 107, 116, 128, 131, 132, 140, 141, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 248, 252, 256, 257, 258, 261], "other": [2, 3, 4, 7, 8, 21, 22, 30, 32, 33, 34, 35, 39, 41, 42, 43, 48, 49, 51, 54, 55, 56, 57, 58, 77, 96, 107, 132, 133, 155, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 220, 229, 237, 239, 242, 246, 247, 250, 254, 256, 257, 258, 261, 262, 264, 265], "word": [2, 39, 175, 256, 261, 265], "creat": [2, 3, 4, 5, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 51, 52, 54, 56, 57, 58, 89, 95, 102, 103, 107, 112, 114, 116, 117, 118, 119, 120, 125, 128, 129, 155, 166, 168, 177, 206, 220, 227, 230, 231, 244, 246, 247, 252, 256, 257, 258, 261, 262, 264, 265], "1m": [2, 226, 256, 258, 262], "multidimension": [2, 34, 44], "doe": [2, 3, 18, 32, 34, 39, 44, 49, 131, 156, 157, 163, 164, 168, 174, 176, 187, 223, 252, 254, 256, 257, 258, 261, 265], "desir": [2, 3, 30, 51, 54, 56, 57, 58, 76, 86, 89, 90, 99, 103, 106, 113, 116, 128, 144, 149, 152, 153, 154, 155, 175, 252, 256, 261], "diversifi": 2, "make": [2, 4, 7, 30, 39, 40, 49, 51, 54, 56, 57, 58, 64, 67, 86, 89, 90, 109, 131, 155, 175, 176, 188, 189, 190, 191, 220, 231, 248, 252, 253, 256, 257, 258, 260, 261, 262, 264, 265], "more": [2, 3, 4, 6, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 108, 123, 128, 131, 133, 144, 148, 149, 150, 153, 154, 158, 163, 168, 175, 176, 188, 193, 200, 218, 232, 251, 253, 254, 256, 257, 258, 260, 261, 262, 265], "To": [2, 3, 4, 6, 7, 8, 18, 19, 20, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 107, 145, 146, 147, 151, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 252, 253, 256, 257, 258, 261, 262, 264, 265], "do": [2, 3, 4, 7, 54, 85, 90, 107, 114, 131, 146, 254, 256, 257, 258, 260, 261, 264, 265], "custom": [2, 3, 5, 30, 51, 54, 56, 57, 58, 168, 182, 248, 252, 256, 257, 258], "name": [2, 6, 7, 11, 30, 39, 40, 51, 54, 56, 57, 58, 61, 77, 79, 91, 95, 96, 103, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 229, 232, 234, 237, 239, 242, 254, 256, 257, 258, 261, 265], "randomcroptensordict": [2, 256], "here": [2, 3, 4, 7, 8, 9, 10, 252, 253, 256, 257, 258, 261, 264, 265], "how": [2, 3, 18, 19, 20, 30, 32, 34, 44, 51, 54, 56, 57, 58, 163, 164, 172, 174, 176, 223, 251, 252, 256, 257, 258, 260, 261, 262, 264, 265], "wrapper": [2, 3, 11, 15, 17, 34, 35, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 133, 148, 150, 151, 155, 159, 188, 211, 212, 213, 248, 250, 258, 262, 265], "around": [2, 5, 7, 15, 17, 34, 35, 55, 155, 188, 256, 257, 265], "offlin": [2, 8, 13, 14, 16, 17, 18, 19, 20, 21, 109, 173, 254, 262, 264], "present": [2, 3, 30, 32, 39, 44, 48, 51, 54, 56, 57, 58, 79, 95, 96, 114, 117, 118, 119, 120, 125, 132, 151, 154, 155, 156, 157, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 192, 248, 254, 256, 260, 264], "replaybuff": [2, 34, 35, 50, 90, 240, 244, 250, 258, 262, 264], "sampler": [2, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 48, 49, 90, 250, 256, 258], "By": [2, 3, 31, 54, 155, 219, 248, 256, 262, 265], "map": [2, 3, 8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 51, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 104, 107, 112, 123, 133, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 158, 159, 219, 250, 252, 253, 256, 257, 258, 262], "tensor": [2, 3, 8, 13, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 50, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 73, 74, 76, 77, 81, 84, 86, 89, 90, 91, 94, 99, 100, 101, 102, 103, 104, 106, 107, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 136, 137, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 165, 166, 170, 171, 175, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 229, 232, 234, 237, 239, 242, 252, 254, 256, 257, 258, 260, 261, 262, 264, 265], "allow": [2, 3, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 51, 54, 56, 57, 58, 91, 99, 114, 128, 182, 184, 252, 254, 256, 258, 261, 265], "promptli": 2, "virtual": 2, "instal": [2, 5, 10, 18, 19, 20, 39, 40, 223, 251, 258, 265], "respons": [2, 3, 8, 223, 265], "d4rl": [2, 39], "clone": [2, 4, 8, 145, 146, 147, 154, 173, 229, 237, 239, 242, 250, 256, 261, 264], "repositori": [2, 7, 40], "latest": [2, 10, 56, 220, 258, 261, 264], "wheel": [2, 258], "publish": 2, "pypi": [2, 264], "openml": [2, 40, 68], "scikit": [2, 40], "panda": [2, 40], "requir": [2, 3, 4, 7, 8, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 128, 154, 156, 157, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 252, 254, 256, 257, 258, 261, 265], "parent": [2, 3, 21, 36, 51, 74, 81, 82, 86, 89, 99, 102, 104, 145, 175, 176, 192, 256, 261, 264, 265], "subclass": [2, 3, 51, 54, 56, 57, 58, 102, 109, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 149, 150, 151, 153, 154, 155, 156, 160, 176, 257, 261], "basic": [2, 55, 252, 258, 265], "properti": [2, 3, 51, 54, 55, 56, 57, 58, 103, 121, 126, 131, 136, 140, 141, 142, 175, 261], "observ": [2, 3, 8, 13, 14, 16, 21, 30, 36, 39, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 87, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 104, 107, 114, 117, 118, 119, 120, 123, 127, 134, 135, 137, 138, 144, 145, 146, 147, 149, 150, 151, 152, 153, 158, 159, 166, 170, 188, 189, 190, 191, 192, 206, 229, 232, 234, 237, 239, 242, 244, 252, 254, 257, 258, 260, 261, 264, 265], "action": [2, 3, 8, 9, 13, 14, 15, 16, 21, 27, 31, 36, 51, 54, 55, 56, 57, 58, 60, 67, 69, 70, 77, 78, 82, 85, 91, 96, 103, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 128, 129, 130, 137, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 158, 166, 167, 175, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 229, 232, 234, 237, 239, 242, 244, 248, 252, 253, 254, 256, 257, 258, 260, 262, 264, 265], "shape": [2, 3, 13, 14, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 68, 70, 74, 86, 91, 99, 101, 107, 108, 109, 112, 114, 121, 122, 128, 131, 133, 136, 140, 144, 145, 146, 147, 149, 152, 154, 157, 158, 184, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 214, 220, 223, 244, 252, 256, 257, 258, 260, 262, 264, 265], "dtype": [2, 3, 13, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 44, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 76, 77, 78, 86, 89, 91, 99, 101, 103, 106, 109, 112, 114, 115, 123, 130, 131, 132, 137, 144, 145, 146, 147, 149, 151, 152, 153, 154, 157, 158, 175, 188, 189, 190, 191, 229, 232, 234, 237, 239, 242, 258, 260, 261, 262, 264, 265], "import": [2, 3, 4, 6, 7, 10, 13, 14, 15, 16, 21, 22, 32, 33, 34, 35, 39, 44, 52, 54, 55, 84, 86, 89, 91, 99, 106, 107, 112, 114, 115, 123, 128, 130, 133, 137, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 164, 188, 189, 190, 191, 216, 219, 229, 232, 234, 237, 239, 242, 244, 252, 253, 257, 258, 260, 261, 262, 264, 265], "match": [2, 3, 6, 8, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 52, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 107, 116, 121, 128, 140, 144, 149, 152, 153, 154, 155, 158, 167, 174, 177, 179, 220, 225, 252, 256, 258, 260, 261, 264, 265], "input": [2, 3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 55, 56, 57, 58, 68, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 104, 105, 106, 107, 109, 114, 116, 117, 118, 119, 120, 127, 128, 131, 132, 138, 139, 144, 149, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 217, 221, 226, 244, 252, 253, 254, 256, 257, 258, 261, 264, 265], "output": [2, 3, 4, 13, 14, 16, 17, 30, 32, 33, 34, 35, 39, 40, 51, 54, 55, 56, 57, 58, 68, 73, 86, 89, 91, 100, 102, 106, 109, 116, 117, 118, 122, 123, 124, 127, 128, 133, 137, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 188, 192, 206, 214, 252, 253, 256, 257, 258, 260, 261, 262, 264, 265], "send": [2, 3, 8, 264], "receiv": [2, 3, 30, 51, 54, 56, 57, 58, 102, 128, 253, 256, 258, 260, 261], "spawn": [2, 3, 4, 18, 22, 56], "check": [2, 3, 4, 5, 6, 7, 11, 18, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 52, 54, 55, 56, 57, 58, 74, 80, 90, 109, 144, 149, 152, 153, 154, 155, 252, 253, 257, 258, 260, 261, 262, 265], "check_env_spec": [2, 3, 250, 258, 261], "method": [2, 3, 4, 13, 14, 15, 16, 17, 21, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 49, 51, 54, 56, 57, 58, 73, 76, 81, 86, 89, 91, 92, 99, 102, 103, 106, 115, 127, 144, 145, 146, 147, 149, 152, 153, 154, 155, 156, 158, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 192, 205, 245, 253, 254, 255, 257, 258, 261, 265], "saniti": [2, 3, 7, 109, 258], "offer": [3, 7, 252, 257, 261, 265], "handl": [3, 21, 30, 51, 54, 56, 57, 58, 107, 128, 223, 246, 247, 256, 257, 258], "differ": [3, 4, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 73, 77, 86, 91, 103, 104, 123, 128, 130, 137, 173, 175, 176, 184, 188, 189, 190, 194, 195, 219, 223, 225, 246, 247, 252, 253, 254, 256, 257, 258, 260, 261, 262, 265], "dm": [3, 256, 265], "base": [3, 4, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 47, 50, 55, 56, 99, 105, 145, 169, 223, 229, 237, 239, 242, 252, 253, 254, 256, 257, 261, 265], "goal": [3, 4, 256, 257, 258, 261], "abl": [3, 256, 258, 260, 261, 264], "experi": [3, 32, 33, 34, 35, 39, 40, 44, 109, 208, 209, 210, 211, 212, 213, 251, 257, 258], "even": [3, 4, 8, 14, 18, 20, 21, 41, 42, 43, 49, 52, 256, 258, 261, 265], "simul": [3, 5, 7, 8, 71, 115, 130, 252, 256, 258], "some": [3, 4, 7, 8, 9, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 89, 109, 117, 155, 156, 157, 214, 226, 252, 254, 256, 257, 258, 261, 264, 265], "box": [3, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "under": [3, 4, 21, 30, 39, 51, 54, 56, 57, 58, 144, 149, 152, 153, 154, 155, 175, 188, 189, 190, 191, 192, 253, 256, 257, 261, 265], "lib": [3, 5, 6, 7, 9, 10, 13, 14, 16, 21, 22, 52, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 84, 86, 91, 99, 107, 229, 232, 234, 237, 239, 242, 244, 256, 257, 258, 260, 262, 264, 265], "hope": 3, "imit": 3, "nn": [3, 13, 14, 16, 21, 30, 51, 54, 55, 56, 57, 58, 76, 77, 89, 99, 103, 106, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 133, 137, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 168, 175, 188, 189, 190, 191, 239, 242, 244, 252, 253, 256, 257, 258, 260, 261, 262, 264], "typic": [3, 4, 8, 30, 51, 54, 56, 57, 58, 175, 179, 252, 253, 254, 258, 261], "organis": [3, 257, 261], "arbitrari": [3, 31, 57, 58, 252, 256, 257, 261], "nest": [3, 26, 30, 51, 54, 56, 57, 58, 188, 189, 190, 191, 192, 254, 257, 258, 261, 264], "structur": [3, 7, 32, 33, 34, 35, 151, 188, 189, 190, 191, 192, 253, 256, 258, 261, 262], "attribut": [3, 4, 30, 51, 54, 56, 57, 58, 89, 98, 155, 175, 256, 261], "batch_siz": [3, 8, 13, 14, 15, 16, 26, 32, 33, 34, 35, 39, 40, 45, 51, 53, 55, 60, 67, 68, 69, 70, 73, 91, 99, 114, 115, 123, 130, 137, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 214, 220, 229, 232, 234, 237, 239, 242, 256, 257, 258, 260, 261, 262, 264, 265], "togeth": [3, 13, 14, 16, 17, 18, 19, 20, 21, 90, 145, 146, 147, 159, 252, 257, 258], "expect": [3, 4, 7, 26, 30, 36, 48, 51, 54, 55, 56, 57, 58, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 104, 109, 144, 149, 151, 152, 153, 154, 157, 158, 163, 164, 174, 175, 176, 178, 227, 251, 252, 253, 254, 256, 258, 261, 265], "live": [3, 12, 13, 14, 16, 17, 19, 20, 30, 32, 33, 34, 35, 39, 40, 51, 54, 55, 56, 57, 58, 175], "actual": [3, 4, 7, 17, 51, 54, 56, 57, 58, 226, 253, 256, 258, 261], "just": [3, 4, 214, 252, 254, 256, 257, 258, 261, 264, 265], "retriev": [3, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 74, 86, 114, 115, 130, 152, 155, 163, 164, 174, 176, 188, 189, 190, 191, 229, 232, 234, 237, 239, 242, 248, 254, 257, 258, 261, 265], "care": [3, 8, 51, 54, 56, 57, 58, 102, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 256, 258, 261], "see": [3, 6, 7, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 30, 40, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 108, 116, 126, 128, 131, 141, 142, 145, 147, 154, 155, 175, 220, 256, 257, 258, 261, 265], "below": [3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 116, 126, 128, 141, 142, 154, 175, 220, 256, 257, 258, 261], "parametr": [3, 132, 155, 173, 179, 256, 258], "hardwar": 3, "input_spec": [3, 51, 55, 76, 77, 78, 86, 91, 96, 98, 102, 103, 104, 115, 130, 256, 258, 261, 265], "compositespec": [3, 51, 53, 54, 55, 56, 57, 58, 77, 91, 98, 99, 102, 112, 115, 130, 144, 148, 150, 152, 157, 250, 256, 258, 261, 265], "output_spec": [3, 91, 102, 103, 261], "reward": [3, 13, 14, 16, 30, 36, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 72, 76, 78, 91, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 112, 114, 115, 130, 159, 165, 166, 170, 175, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 216, 217, 219, 221, 248, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "observation_spec": [3, 51, 55, 73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 89, 92, 95, 96, 98, 99, 100, 101, 102, 103, 104, 115, 130, 227, 244, 256, 258, 260, 261, 265], "pair": [3, 30, 39, 51, 54, 56, 57, 58, 99, 145, 152, 155, 175, 252, 253, 256, 257, 258, 260, 261, 265], "pointer": [3, 6, 52, 175, 256], "action_spec": [3, 13, 14, 15, 16, 18, 19, 20, 51, 54, 55, 56, 57, 58, 60, 67, 103, 123, 137, 139, 144, 149, 152, 153, 244, 252, 257, 258, 260, 261, 262, 264, 265], "reward_spec": [3, 51, 55, 72, 76, 78, 93, 94, 95, 102, 103, 104, 115, 130, 258, 261, 265], "done_spec": [3, 102, 103, 261, 265], "flag": [3, 8, 32, 33, 34, 35, 39, 40, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 252, 261, 262], "importantli": [3, 152, 155], "4": [3, 7, 13, 14, 16, 24, 27, 31, 32, 33, 55, 61, 62, 63, 66, 107, 115, 116, 117, 118, 123, 124, 125, 127, 128, 130, 133, 137, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 205, 256, 257, 258, 261, 262, 263, 264, 265], "action_s": 3, "help": [3, 4, 30, 51, 54, 56, 57, 58, 251, 253, 256, 257, 258], "prealloc": [3, 261], "consist": [3, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 116, 128, 256, 257, 258, 261, 262, 265], "With": [3, 254, 256, 257, 265], "necessarili": 3, "If": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 54, 55, 56, 57, 58, 74, 75, 77, 79, 81, 85, 86, 89, 90, 95, 96, 99, 102, 103, 106, 107, 114, 116, 127, 128, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 201, 202, 203, 204, 218, 220, 223, 225, 227, 229, 237, 239, 242, 244, 248, 251, 256, 257, 258, 260, 261, 264, 265], "instanti": [3, 21, 57, 58, 102, 256, 257, 261, 265], "0": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 39, 44, 51, 54, 55, 56, 57, 58, 60, 67, 72, 74, 76, 77, 85, 86, 89, 99, 101, 103, 106, 107, 109, 115, 116, 117, 118, 120, 124, 126, 128, 130, 131, 132, 133, 138, 139, 140, 141, 142, 144, 148, 150, 151, 154, 157, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 194, 195, 214, 221, 244, 248, 253, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265], "stateless": [3, 102, 256, 261, 265], "set_se": [3, 13, 14, 16, 17, 21, 51, 54, 55, 56, 57, 58, 60, 67, 86, 91, 103, 261, 264, 265], "seed": [3, 13, 14, 16, 17, 21, 51, 54, 55, 56, 57, 58, 61, 69, 70, 103, 109, 223], "next": [3, 4, 8, 13, 14, 16, 26, 30, 32, 33, 34, 35, 39, 40, 51, 52, 54, 55, 56, 57, 58, 60, 67, 69, 70, 84, 91, 107, 112, 114, 115, 130, 139, 159, 166, 168, 177, 187, 188, 189, 190, 191, 192, 217, 219, 221, 256, 257, 260, 261, 262, 264, 265], "determinist": [3, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 124, 134, 139, 144, 150, 154, 155, 175, 252, 256, 257, 261, 265], "preced": [3, 127], "without": [3, 7, 9, 30, 51, 54, 56, 57, 58, 146, 147, 177, 187, 188, 189, 190, 191, 192, 244, 251, 252, 256, 257, 258, 261, 265], "risk": [3, 90], "overlap": [3, 34], "consecut": [3, 48, 151, 265], "still": [3, 9, 98, 148, 174, 175, 256, 257, 260, 261, 265], "reproduc": [3, 109, 256, 258], "maximum": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 25, 30, 41, 42, 43, 51, 54, 56, 57, 58, 77, 93, 98, 100, 112, 140, 141, 142, 152, 173, 175, 179, 220, 256, 257, 258, 261, 264, 265], "max_step": [3, 13, 51, 54, 55, 56, 57, 58, 69, 70, 98, 264, 265], "n": [3, 6, 7, 24, 27, 30, 31, 51, 54, 56, 57, 58, 73, 77, 81, 104, 130, 155, 163, 175, 187, 220, 252, 254, 257, 265], "tensordictmodul": [3, 13, 14, 16, 17, 20, 21, 55, 130, 145, 146, 147, 148, 150, 151, 152, 154, 156, 157, 159, 163, 164, 165, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 219, 244, 252, 256, 258, 260, 261, 262], "ani": [3, 5, 8, 26, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 81, 89, 90, 103, 107, 109, 116, 128, 132, 154, 155, 156, 157, 175, 176, 211, 223, 251, 256, 257, 258, 261, 264, 265], "compat": [3, 7, 11, 18, 19, 30, 49, 51, 54, 56, 57, 58, 65, 68, 73, 107, 175, 184, 256, 264], "figur": [3, 256, 258, 261, 265], "summar": [3, 261], "brief": [3, 258, 265], "popul": [3, 33, 84, 99, 256, 258, 261], "entri": [3, 13, 14, 16, 18, 19, 20, 21, 23, 30, 39, 40, 51, 54, 56, 57, 58, 75, 81, 84, 86, 89, 91, 98, 106, 107, 114, 179, 188, 189, 190, 191, 252, 256, 258, 261, 262], "deliveri": 3, "step_mdp": [3, 250, 261, 264, 265], "nasium": 3, "recent": [3, 7, 11, 256, 264, 265], "shift": [3, 30, 160, 258], "termin": [3, 30, 39, 156, 256, 257, 258, 261, 264], "trust": 3, "truncat": [3, 13, 14, 16, 18, 19, 20, 21, 98, 142, 256, 258, 265], "refer": [3, 7, 8, 21, 30, 51, 54, 56, 57, 58, 103, 107, 115, 123, 124, 130, 134, 135, 138, 139, 163, 168, 169, 170, 171, 176, 188, 193, 200, 232, 256, 258, 264], "stepcount": [3, 13, 256, 257, 258, 264], "chosen": [3, 99, 229, 237, 239, 242, 252], "someth": [3, 30, 51, 54, 56, 57, 58, 251, 257, 258, 261, 265], "els": [3, 252, 254, 256, 257, 258, 261, 262], "100": [3, 30, 34, 51, 54, 56, 57, 58, 86, 215, 244, 257, 258, 260, 261, 262, 264, 265], "truncated_kei": [3, 98], "assess": [3, 256], "split_trajectori": [3, 13, 14, 16, 17, 18, 19, 20, 21, 250], "slice": [3, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 39], "adjac": [3, 23, 81], "reli": [3, 163, 253, 256, 258, 261, 265], "traj_id": [3, 13, 14, 16, 23, 264], "junction": 3, "miss": [3, 4, 6, 7, 11, 26, 30, 51, 54, 56, 57, 58, 99, 103, 114, 156, 157, 251, 256], "context": [3, 5, 8, 30, 51, 52, 54, 56, 57, 58, 68, 99, 104, 131, 185, 186, 188, 189, 190, 191, 193, 200, 219, 252, 253, 256, 257, 258, 261, 262], "mark": 3, "through": [3, 4, 5, 8, 16, 18, 20, 21, 57, 58, 90, 128, 155, 156, 157, 160, 188, 189, 190, 191, 252, 256, 257, 258, 260, 261, 262, 265], "inittrack": 3, "our": [3, 7, 8, 18, 256, 257, 258, 260, 262, 264], "tutori": [3, 256, 257, 259, 260, 261, 262, 263, 264, 265], "inform": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 52, 54, 56, 57, 58, 116, 128, 253, 254, 256, 257, 258, 261], "design": [3, 13, 14, 30, 31, 51, 54, 56, 57, 58, 90, 103, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 256, 257, 258, 260, 261, 265], "scratch": [3, 8, 257, 261], "better": [3, 8, 253, 258, 261], "featur": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 31, 51, 54, 56, 57, 58, 73, 81, 99, 104, 107, 116, 124, 125, 128, 131, 132, 155, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 248, 252, 256, 257, 258, 261, 265], "intens": [3, 8], "gym3": 3, "envpool": [3, 56], "interfac": [3, 68, 128, 131, 252, 256, 258, 261], "simultan": [3, 20, 57, 58, 261], "often": [3, 8, 172, 223, 256, 257, 261, 265], "competit": 3, "advantag": [3, 8, 125, 163, 164, 174, 176, 178, 188, 189, 190, 191, 192, 193, 194, 196, 198, 200, 201, 203, 253, 254, 256, 257, 258, 261, 264, 265], "scale": [3, 4, 39, 86, 94, 124, 126, 133, 138, 139, 141, 142, 145, 146, 147, 152, 155, 157, 221, 227, 229, 237, 239, 242, 248, 252, 256, 257, 258, 264], "varieti": 3, "its": [3, 4, 5, 7, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 51, 54, 55, 56, 57, 58, 73, 102, 103, 107, 116, 148, 149, 150, 152, 155, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 223, 244, 254, 256, 257, 258, 261, 262, 265], "own": [3, 13, 14, 17, 22, 30, 51, 54, 56, 57, 58, 257, 258, 261], "As": [3, 4, 51, 54, 56, 57, 58, 155, 252, 256, 257, 258, 261, 262, 264, 265], "inherit": [3, 129, 175, 254, 258], "serialenv": [3, 99, 250, 265], "enjoi": 3, "exact": 3, "Of": [3, 7, 251, 261, 265], "cours": [3, 4, 251, 258, 261, 265], "correspond": [3, 4, 13, 14, 16, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 44, 51, 54, 55, 56, 57, 58, 89, 99, 103, 106, 107, 151, 152, 155, 188, 189, 190, 191, 192, 256, 257, 258, 261, 262], "count": [3, 52, 98, 151, 219, 223, 226, 256, 257, 258, 265], "def": [3, 11, 22, 30, 51, 52, 54, 55, 56, 57, 58, 115, 123, 130, 158, 254, 256, 257, 260, 261, 264, 265], "make_env": [3, 70, 107, 230, 231, 256, 257, 265], "gymenv": [3, 5, 13, 14, 16, 17, 21, 22, 52, 65, 76, 84, 86, 91, 99, 103, 107, 229, 232, 234, 237, 239, 242, 244, 250, 252, 256, 257, 258, 262, 264, 265], "v1": [3, 13, 14, 16, 21, 22, 39, 52, 56, 84, 86, 91, 99, 184, 196, 197, 198, 199, 201, 202, 203, 204, 252, 257, 261, 264, 265], "from_pixel": [3, 61, 62, 229, 237, 239, 242, 256, 257, 262, 264, 265], "9": [3, 7, 30, 32, 33, 34, 107, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 182, 253, 256, 257, 258, 261, 262, 263], "81": [3, 257, 261, 262], "must": [3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 41, 42, 43, 49, 51, 52, 54, 56, 57, 58, 82, 86, 99, 103, 104, 107, 116, 123, 128, 137, 144, 149, 152, 153, 154, 155, 158, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 232, 234, 237, 239, 242, 256, 257, 258, 260, 261, 264], "print": [3, 6, 7, 13, 14, 16, 21, 22, 24, 26, 27, 30, 31, 32, 33, 34, 35, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 74, 77, 78, 84, 86, 91, 99, 101, 107, 112, 114, 116, 123, 128, 133, 137, 144, 145, 146, 147, 149, 150, 151, 153, 154, 157, 158, 175, 229, 232, 234, 237, 239, 242, 244, 254, 257, 258, 260, 261, 262, 264, 265], "simpli": [3, 6, 79, 96, 175, 252, 253, 256, 258, 265], "b": [3, 7, 8, 23, 26, 34, 35, 131, 132, 188, 189, 190, 191, 192, 206, 252, 257, 262], "c": [3, 6, 7, 26, 34, 35, 40, 86, 229, 232, 234, 237, 239, 242, 257], "d": [3, 32, 40, 44, 155, 264], "get": [3, 4, 6, 7, 8, 32, 39, 49, 52, 57, 58, 74, 77, 78, 86, 90, 101, 107, 144, 150, 152, 155, 188, 189, 190, 191, 192, 210, 252, 256, 257, 258, 261, 264, 265], "forc": [3, 6, 7, 13, 14, 18, 20, 21, 257, 261], "reset_work": 3, "fals": [3, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 67, 68, 69, 70, 74, 76, 81, 84, 85, 86, 89, 90, 91, 94, 99, 101, 103, 104, 106, 107, 109, 114, 115, 116, 117, 123, 128, 130, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 184, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 216, 217, 219, 220, 221, 223, 229, 232, 234, 237, 239, 242, 248, 254, 256, 257, 258, 260, 261, 262, 264, 265], "field": [3, 13, 14, 16, 17, 26, 30, 34, 35, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 91, 99, 103, 114, 115, 123, 130, 137, 144, 145, 146, 147, 149, 151, 152, 153, 154, 157, 158, 227, 229, 232, 234, 237, 239, 242, 251, 257, 258, 260, 261, 262, 264, 265], "bool": [3, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 69, 70, 74, 77, 81, 84, 85, 86, 89, 91, 94, 99, 101, 103, 104, 106, 107, 109, 114, 115, 116, 117, 118, 126, 128, 130, 131, 132, 141, 142, 144, 148, 149, 151, 152, 153, 154, 155, 156, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 184, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 216, 217, 219, 220, 221, 223, 229, 232, 234, 237, 239, 242, 248, 257, 258, 260, 261, 262, 264, 265], "pixel": [3, 7, 26, 73, 75, 81, 83, 86, 89, 92, 101, 106, 117, 134, 135, 206, 229, 234, 237, 239, 242, 252, 256, 257, 262, 264, 265], "500": [3, 256, 257, 261, 264, 265], "uint8": [3, 38, 101, 257, 262, 264, 265], "none": [3, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 52, 54, 55, 56, 57, 58, 69, 70, 72, 73, 74, 75, 76, 78, 81, 83, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 132, 136, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 163, 164, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 217, 218, 219, 220, 221, 222, 223, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 246, 247, 248, 254, 256, 257, 258, 261, 264, 265], "is_shar": [3, 13, 14, 16, 26, 34, 35, 55, 60, 67, 68, 69, 70, 91, 99, 107, 114, 115, 123, 130, 137, 144, 145, 146, 147, 149, 151, 152, 153, 154, 157, 158, 229, 232, 234, 237, 239, 242, 258, 260, 261, 262, 264, 265], "note": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 107, 151, 152, 155, 253, 256, 257, 260, 265], "launch": [3, 18, 19, 20, 22], "quit": [3, 252, 256, 257, 258, 265], "time": [3, 4, 7, 8, 13, 14, 16, 17, 18, 20, 21, 30, 32, 33, 34, 35, 51, 52, 54, 56, 57, 58, 68, 74, 90, 99, 100, 107, 114, 124, 127, 151, 167, 170, 175, 177, 181, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 223, 252, 253, 257, 258, 260, 261, 262, 264, 265], "mani": [3, 4, 33, 163, 164, 167, 174, 176, 177, 181, 252, 256, 257, 258, 261, 265], "start": [3, 4, 5, 13, 21, 52, 114, 218, 256, 257, 261, 265], "bottleneck": [3, 8], "so": [3, 4, 6, 7, 10, 30, 51, 54, 56, 57, 58, 99, 107, 156, 157, 175, 258, 261, 265], "onc": [3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 103, 148, 150, 151, 221, 254, 257, 258, 261, 265], "great": [3, 7, 8, 264], "speedup": [3, 8, 265], "precis": [3, 101, 114, 256, 258], "anoth": [3, 8, 51, 54, 56, 57, 58, 102, 128, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 252, 253, 256, 258, 260, 261, 265], "misspecifi": 3, "caus": [3, 7, 8, 90], "breakag": 3, "t": [3, 4, 6, 7, 8, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 44, 48, 51, 52, 54, 56, 57, 58, 89, 100, 106, 107, 114, 154, 180, 188, 189, 190, 191, 192, 223, 225, 248, 251, 256, 257, 258, 260, 261, 262, 264, 265], "rais": [3, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 80, 103, 109, 256, 258, 264], "assert": [3, 6, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 54, 91, 107, 109, 112, 133, 188, 189, 190, 191, 214, 222, 260, 265], "mismatch": [3, 257], "mostli": [3, 17, 253, 265], "purpos": [3, 7, 244, 256, 258, 262, 265], "want": [3, 6, 7, 8, 86, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 252, 256, 257, 258, 261, 262, 264, 265], "subprocess": [3, 52], "addit": [3, 4, 30, 39, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 148, 154, 162, 175, 188, 253, 256, 257], "multithread": [3, 32, 33, 34, 35, 39, 40, 56], "multithreadedenv": [3, 250], "underneath": 3, "higher": [3, 4, 256, 257, 258, 265], "restrict": [3, 257, 262, 265], "flexibl": [3, 9, 56, 182, 254, 265], "cover": [3, 251, 258, 261, 264], "popular": 3, "atari": [3, 4, 73, 265], "classic": [3, 55, 257], "benchmark_batched_env": 3, "py": [3, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265], "case": [3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 30, 32, 34, 44, 51, 54, 56, 57, 58, 99, 103, 109, 128, 144, 149, 152, 153, 154, 155, 157, 158, 162, 214, 225, 246, 247, 248, 252, 254, 256, 257, 258, 261, 265], "raw": [3, 4, 126, 141, 142, 257, 261], "treat": 3, "logic": 3, "torchvis": [3, 89, 106, 264, 265], "transformedenv": [3, 13, 52, 76, 81, 84, 85, 86, 91, 99, 102, 107, 229, 232, 234, 237, 239, 242, 256, 257, 258, 260, 261, 262, 264, 265], "primit": [3, 4], "built": [3, 5, 7, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 182, 240, 244, 245, 248, 256, 257, 258, 265], "base_env": [3, 77, 78, 99, 256, 257, 258, 262, 264, 265], "totensorimag": [3, 234, 257, 264, 265], "in_kei": [3, 13, 14, 16, 21, 55, 72, 73, 74, 75, 77, 78, 81, 83, 86, 87, 89, 91, 92, 93, 94, 95, 100, 101, 102, 106, 107, 115, 130, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 158, 165, 166, 188, 189, 190, 191, 205, 206, 239, 242, 244, 252, 256, 257, 258, 260, 261, 262, 264, 265], "resiz": [3, 257, 265], "64": [3, 117, 118, 125, 256, 257, 258, 260, 261, 262, 264, 265], "now": [3, 7, 32, 256, 257, 258, 260, 262, 265], "appar": [3, 216], "bring": [3, 258, 265], "signific": [3, 5, 8, 258, 265], "kind": [3, 36, 114], "consult": 3, "interest": [3, 152, 155, 252, 257, 258, 261, 265], "abov": [3, 7, 30, 51, 54, 56, 57, 58, 126, 141, 142, 162, 253, 254, 256, 258, 261, 265], "resize_par": 3, "out_kei": [3, 13, 14, 16, 21, 55, 72, 73, 74, 75, 81, 83, 86, 87, 89, 91, 92, 93, 95, 100, 101, 102, 106, 115, 123, 130, 137, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 158, 188, 189, 190, 191, 219, 244, 252, 256, 257, 258, 260, 261, 262, 264, 265], "easi": [3, 5, 40, 252, 253, 256, 257, 258, 262, 265], "root": [3, 26, 114, 126, 141, 142, 261, 265], "graph": [3, 4, 8, 185, 186, 256, 261], "inv": [3, 77, 261], "appli": [3, 4, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 56, 57, 58, 73, 74, 76, 77, 79, 80, 81, 82, 84, 88, 90, 91, 95, 96, 98, 99, 100, 102, 103, 105, 107, 141, 188, 218, 254, 256, 257, 258, 261, 264, 265], "revers": 3, "order": [3, 16, 30, 31, 32, 33, 34, 35, 39, 40, 48, 51, 54, 56, 57, 58, 103, 144, 149, 153, 154, 156, 157, 158, 257], "chain": [3, 32, 33, 34, 35, 39, 40, 76, 77, 116, 157, 265], "taken": [3, 51, 54, 56, 57, 58, 253, 256, 258, 261], "includ": [3, 4, 7, 9, 21, 30, 41, 42, 43, 49, 51, 54, 55, 56, 57, 58, 103, 107, 175, 226, 252, 254, 256, 257, 258, 261, 265], "invers": [3, 4, 86, 161, 173, 261], "in_keys_inv": [3, 78, 86, 87, 91, 102, 256, 260, 261, 265], "append_transform": [3, 32, 33, 34, 35, 39, 40, 89, 99, 256, 261, 264, 265], "doubletofloat": [3, 229, 232, 237, 239, 242, 256, 258, 260], "float32": [3, 13, 14, 16, 26, 32, 34, 35, 36, 44, 55, 60, 67, 68, 69, 70, 78, 86, 91, 99, 101, 112, 114, 115, 123, 130, 137, 144, 145, 146, 147, 149, 151, 152, 153, 154, 157, 158, 229, 232, 234, 237, 239, 242, 258, 260, 261, 262, 264, 265], "float64": [3, 30, 51, 54, 56, 57, 58, 69, 76, 89, 99, 103, 106, 154, 175, 260, 265], "append": [3, 8, 32, 33, 34, 35, 39, 40, 52, 99, 256, 257, 258, 261, 262, 264], "regist": [3, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 103, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 175, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 254, 256, 258], "manipul": [3, 4, 8, 89, 265], "keep": [3, 4, 7, 8, 14, 35, 48, 86, 89, 106, 107, 114, 151, 216, 223, 256, 257, 258, 261, 264, 265], "mind": 3, "go": [3, 7, 90, 256, 257, 258, 260, 261, 262, 264, 265], "what": [3, 8, 32, 36, 51, 54, 56, 57, 58, 99, 114, 251, 252, 253, 257, 258, 261, 262, 264, 265], "third_transform": 3, "would": [3, 30, 51, 54, 56, 57, 58, 128, 254, 257, 258, 261, 265], "replac": [3, 6, 7, 30, 77, 114, 252], "unexpect": [3, 30, 51, 54, 56, 57, 58, 103, 265], "behviour": 3, "fortun": 3, "eras": [3, 51, 54, 56, 57, 58], "ident": [3, 13, 14, 16, 30, 57, 58, 246, 247, 257], "alreadi": [3, 8, 30, 51, 54, 56, 57, 58, 155, 256, 258], "place": [3, 13, 14, 16, 17, 26, 30, 51, 52, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 154, 175, 220, 225, 226, 257, 258, 261], "chang": [3, 5, 7, 30, 32, 33, 34, 35, 41, 42, 43, 48, 49, 51, 54, 56, 57, 58, 91, 102, 103, 107, 175, 253, 256, 258, 261, 262, 265], "happen": [3, 148, 257, 262, 265], "catfram": [3, 257], "hold": [3, 185, 186, 261], "about": [3, 5, 7, 18, 19, 20, 253, 256, 257, 258, 261, 264, 265], "notic": [3, 258, 261], "parenthood": 3, "reason": [3, 4, 8, 30, 51, 54, 56, 57, 58, 89, 253, 256, 257, 258], "henc": [3, 32, 90, 252, 256, 258, 261], "composit": [3, 26, 51, 54, 56, 57, 58, 258, 261], "transform1": 3, "transform2": 3, "transform3": 3, "last_two": 3, "isinst": [3, 261], "log": [3, 4, 8, 121, 136, 142, 152, 155, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 216, 217, 219, 223, 244, 252, 253, 254, 256, 257, 258, 261, 264], "reveal": 4, "bug": [4, 264], "curv": 4, "won": [4, 30, 51, 52, 54, 56, 57, 58, 89, 106, 223, 248, 257, 258], "tell": [4, 7, 256], "exploit": 4, "video": [4, 206, 219, 248], "game": [4, 5], "cannot": [4, 7, 22, 26, 90, 257, 258, 261], "cv": 4, "act": 4, "flip": 4, "imag": [4, 7, 61, 75, 89, 101, 106, 128, 256, 257, 262, 265], "correspondingli": 4, "relat": [4, 10, 32, 81, 257, 261], "prescript": 4, "tune": [4, 262], "coeffici": 4, "bonu": [4, 163, 164, 174, 176], "beta": [4, 32, 34, 44, 173, 174, 256, 257, 264], "altern": [4, 27, 56, 162, 175, 256, 258], "reduc": [4, 6, 27, 257, 258], "downstream": [4, 256], "formul": 4, "ob": [4, 8, 26, 78, 86, 101, 112, 114, 158, 188, 189, 190, 191, 257, 260, 261, 264, 265], "rate": [4, 107, 187, 257, 258], "gradient": [4, 30, 51, 54, 56, 57, 58, 103, 126, 132, 141, 142, 163, 164, 174, 175, 176, 178, 187, 188, 189, 190, 191, 223, 256, 258, 261], "norm": [4, 8, 223, 256, 257, 258, 261], "easier": [4, 252, 256], "behavior": [4, 30, 51, 54, 56, 57, 58, 103, 173, 175, 258], "local": [4, 7, 10, 16, 21, 30, 51, 54, 56, 57, 58, 103, 211, 256, 264], "optima": 4, "sens": [4, 261], "product": [4, 9, 246, 247], "sum": [4, 21, 29, 31, 54, 170, 187, 253, 256, 257, 258, 261, 265], "track": [4, 13, 14, 16, 17, 18, 19, 20, 21, 35, 48, 95, 107, 151, 211, 216, 257, 261], "stat": [4, 86, 227, 248, 257, 258], "w": [4, 75, 92, 101, 151, 206, 257], "r": [4, 30, 86, 155, 162, 187, 252, 256, 257, 261, 265], "yield": [4, 16, 21, 30, 51, 54, 56, 57, 58, 175, 256], "insight": 4, "auxiliari": 4, "credit": 4, "assign": [4, 13, 14, 165, 166, 258], "futur": [4, 30, 51, 54, 56, 57, 58, 89, 103, 106, 128, 251, 264], "past": [4, 257], "becom": [4, 21, 265], "between": [4, 5, 13, 14, 16, 17, 21, 30, 48, 51, 54, 56, 57, 58, 77, 85, 93, 101, 103, 109, 116, 128, 152, 155, 163, 164, 170, 171, 174, 175, 176, 184, 188, 219, 223, 253, 256, 257, 265], "spars": 4, "ineffici": 4, "interact": [4, 5, 7, 8, 13, 14, 16, 18, 19, 20, 21, 152, 155, 256, 258, 261, 265], "ad": [4, 13, 14, 16, 30, 32, 33, 34, 35, 39, 40, 44, 51, 54, 56, 57, 58, 95, 103, 131, 132, 151, 163, 164, 174, 176, 257, 265], "intermedi": [4, 256, 262], "instrument": 4, "greatli": 4, "soccer": 4, "kick": 4, "ball": 4, "likelihood": [4, 256], "discov": 4, "score": 4, "undesir": 4, "though": [4, 128, 258], "unintention": 4, "valuabl": 4, "idiosyncrat": 4, "zero": [4, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 74, 77, 86, 112, 114, 115, 127, 150, 151, 160, 175, 188, 189, 190, 191, 264], "subtask": 4, "hierarch": [4, 264], "framework": [4, 9, 22, 55, 264, 265], "individu": [4, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 256], "select": [4, 15, 32, 33, 34, 35, 39, 40, 73, 74, 76, 79, 80, 81, 82, 84, 85, 88, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 115, 222, 256], "fall": 4, "section": [4, 257], "explicit": [4, 11, 127], "mechan": [4, 30, 51, 54, 56, 57, 58, 103, 257, 261], "curios": 4, "magnitudin": 4, "domin": 4, "smaller": [4, 51, 54, 56, 57, 58, 173, 258], "addition": 4, "per": [4, 13, 14, 16, 17, 18, 19, 20, 21, 57, 124, 223, 246, 247, 256, 257, 258, 264], "timestep": [4, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "realli": 4, "larg": [4, 27, 257, 258], "target": [4, 8, 21, 30, 51, 52, 54, 56, 57, 58, 102, 154, 155, 163, 164, 165, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 191, 192, 226, 243, 244, 253, 254, 256, 261], "huge": 4, "std": [4, 86, 107, 133, 148, 256, 265], "torchrl": [4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 259, 260, 262, 263], "initi": [4, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 86, 89, 99, 102, 103, 108, 115, 130, 131, 132, 148, 150, 151, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 181, 229, 232, 234, 237, 239, 242, 248, 257, 261, 265], "estim": [4, 145, 146, 147, 163, 164, 168, 174, 175, 176, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 253, 257, 258, 260, 261, 262, 264, 265], "encount": [4, 57, 58, 251, 257, 261], "unseen": 4, "extrins": 4, "wrong": 4, "goe": [4, 256, 258, 265], "bonus": 4, "denser": 4, "prior": [4, 139, 170], "freshli": 4, "proper": [4, 6, 7, 188, 189, 190, 191, 257, 258], "doesn": [4, 11, 56], "drop": [4, 48, 114], "meant": [4, 55], "encourag": [4, 256, 257], "measur": [4, 258], "novelti": 4, "revisit": 4, "previous": [4, 258, 265], "diminish": 4, "decreas": 4, "ideal": [4, 86, 261], "down": [4, 13, 14, 16, 17], "gone": [4, 5], "anyth": 4, "try": [4, 7, 8, 257, 258, 261, 264, 265], "distil": 4, "add": [4, 6, 21, 30, 32, 33, 34, 35, 39, 40, 46, 50, 51, 54, 56, 57, 58, 131, 163, 175, 218, 258, 261, 264], "nois": [4, 108, 132, 143, 151, 177, 181, 219, 248, 256], "exploratori": [4, 163, 164, 174, 176], "could": [4, 6, 257, 258, 262, 265], "misalign": 4, "trade": 4, "unavoid": 4, "prioriti": [4, 32, 34, 35, 41, 42, 43, 44, 49, 165, 166, 167, 173, 177, 179, 181, 254, 256, 257], "schedul": [4, 7, 219, 258, 261], "separ": [4, 8, 13, 14, 17, 18, 20, 21, 23, 89, 106, 165, 167, 177, 179, 181, 256, 257, 265], "divers": [4, 57, 58], "bootstrap": [4, 168, 189, 194, 195, 256], "noisi": [4, 131, 132, 143], "unstabl": [4, 126, 141, 142], "inher": 4, "stochast": [4, 124, 132, 134, 139, 167, 173, 177, 179, 258], "enemi": 4, "variabl": [4, 7, 8, 27, 31, 130, 145, 146, 147, 175, 177, 254, 257], "pomdp": 4, "previou": [4, 10, 30, 34, 139, 258, 261, 265], "loos": [4, 252, 257, 258], "nonexist": 4, "sure": [4, 7, 40, 49, 248, 252, 256, 258, 261, 264, 265], "architectur": 4, "sequenc": [4, 13, 14, 16, 17, 26, 28, 29, 32, 33, 46, 50, 72, 73, 74, 75, 77, 78, 81, 83, 86, 87, 90, 92, 93, 94, 95, 100, 101, 102, 107, 116, 121, 128, 136, 144, 152, 155, 156, 157, 158, 205, 206, 218, 219, 220, 222, 223, 229, 237, 239, 242, 252, 256, 258, 260, 265], "rather": [4, 91, 256, 257, 258], "last": [4, 13, 14, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 48, 81, 86, 90, 100, 116, 127, 128, 134, 148, 150, 256, 257, 258, 261, 262, 264, 265], "lstm": [4, 127, 133], "explicitli": [4, 257], "rel": [4, 99, 121, 140, 256, 257], "tend": 4, "stabl": [4, 9, 10], "don": [4, 6, 7, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 51, 257, 258, 264, 265], "compens": 4, "descent": [4, 132], "1000": [4, 33, 107, 148, 150, 151, 152, 155, 172, 256, 257, 258, 262], "know": [4, 32, 33, 34, 35, 148, 150, 177, 219, 256, 257, 258], "minimum": [4, 25, 93, 112, 124, 133, 140, 141, 142, 152, 160, 162, 175, 214, 256, 258, 261, 264, 265], "rang": [4, 8, 11, 27, 32, 33, 52, 107, 174, 181, 253, 254, 256, 258, 261, 264], "manual": [4, 18, 20, 21, 256], "deviat": [4, 86, 107, 115, 124, 130, 131, 132, 148, 176, 181, 256], "radic": 4, "begin": [4, 13, 14, 16, 18, 19, 20, 21], "updat": [4, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 34, 44, 51, 54, 55, 56, 57, 58, 77, 103, 105, 107, 115, 130, 151, 152, 154, 155, 163, 172, 176, 180, 188, 189, 190, 191, 192, 219, 223, 225, 230, 231, 243, 244, 254, 256, 257, 258, 261, 264, 265], "stabil": [4, 82], "stage": [4, 256, 261], "never": 4, "prevent": [4, 126, 141, 142, 174, 176, 221], "solv": [4, 10, 251, 256, 257, 258, 261], "entir": [4, 258, 261], "submit": [4, 251, 264], "suffici": [4, 256], "recommend": [4, 7], "system": [4, 5, 258, 261], "adequ": [4, 109, 258], "infeas": 4, "allevi": [4, 252], "prune": 4, "develop": [4, 7, 256, 264], "filter": 4, "fire": [4, 30, 51, 54, 56, 57, 58], "certain": [4, 18, 20, 21, 30, 51, 54, 56, 57, 58, 82, 98, 103, 174, 252, 256, 257, 258, 265], "illeg": 4, "chess": 4, "combin": [4, 102, 257], "grasp": 4, "releas": [4, 7, 10, 30, 51, 54, 56, 57, 58, 103, 264], "top": [4, 115, 130], "p": [4, 52], "wherein": 4, "cumul": [4, 95, 115, 258], "probabl": [4, 8, 121, 128, 136, 142, 152, 155, 252, 257, 264], "q": [4, 117, 118, 119, 120, 122, 123, 125, 137, 147, 165, 166, 167, 168, 172, 173, 177, 179, 181, 239, 242, 250, 256], "flow": [4, 256, 258, 261], "directli": [4, 8, 55, 175, 248, 252, 258, 261], "reparameter": [4, 121, 136], "soft": [4, 172, 179, 180], "critic": [4, 8, 145, 163, 164, 174, 176, 178, 179, 256, 258], "clip": [4, 93, 164, 181, 223, 258, 261], "oppos": 4, "incorrect": 4, "thought": 4, "bound": [4, 17, 21, 25, 26, 30, 51, 54, 56, 57, 58, 107, 138, 139, 144, 149, 151, 152, 153, 154, 155, 252, 256, 257, 258, 265], "region": 4, "squash": [4, 264], "tanh": [4, 116, 126, 128, 140, 141, 142, 258, 261, 262, 264], "correct": [4, 226, 258], "prob": [4, 136, 258], "rememb": 4, "remap": 4, "origin": [4, 8, 13, 14, 16, 17, 77, 89, 103, 106, 152, 154, 155, 172, 175, 176, 239, 242, 256, 260, 261, 265], "side": [4, 265], "real": [5, 155, 253, 261], "world": [5, 55, 159, 170, 261, 265], "robot": [5, 7, 89, 106], "adopt": [5, 256, 265], "histor": 5, "wa": [5, 7, 51, 54, 56, 57, 58, 103, 172, 180, 253, 257, 258, 260, 264], "ceas": 5, "maintain": [5, 9, 261], "fork": 5, "gymnasium": [5, 11, 257, 258, 261, 264], "farama": [5, 258, 261], "foundat": [5, 258], "document": [5, 7, 18, 19, 21, 30, 51, 54, 56, 57, 58, 103, 257, 264], "further": [5, 258], "detail": [5, 6, 7, 30, 51, 54, 56, 57, 58, 103, 123, 163, 168, 176, 232, 251, 257, 260], "usag": [5, 7, 39, 173, 179, 182, 256, 257, 258, 260, 261, 262, 264, 265], "known": [5, 7, 8, 194, 195, 256, 257], "bc": [5, 264], "break": [5, 13, 14, 16, 21, 30, 33, 35, 51, 54, 56, 57, 58, 107, 257, 264], "face": [5, 8, 9, 265], "modif": [5, 26, 30, 51, 54, 56, 57, 58, 81, 175, 258, 261], "against": [5, 7, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 109, 144, 149, 152, 153, 154, 155, 258], "13": [5, 10, 11, 257, 258, 261, 262], "howev": [5, 7, 30, 51, 54, 56, 57, 58, 95, 98, 103, 252, 256, 257, 258, 265], "construct": [5, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 109, 139, 155, 175, 223, 229, 237, 252, 257, 258, 261, 265], "automat": [5, 51, 54, 56, 57, 58, 86, 144, 152, 252, 256, 258, 261, 264], "wrap": [5, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 109, 145, 146, 147, 159, 252, 256, 257, 258, 265], "best": [5, 9, 264], "gymwrapp": [5, 54, 250, 258, 264], "you": [5, 6, 7, 8, 10, 30, 51, 54, 56, 57, 58, 107, 251, 252, 256, 257, 258, 260, 262, 264, 265], "feel": [5, 251, 264], "free": [5, 7, 163, 170, 176, 254, 258, 264], "gladli": 5, "instruct": [6, 7, 10, 22, 39, 77, 256, 257, 258], "prepar": [6, 258], "conda": [6, 7, 251], "assum": [6, 26, 31, 34, 35, 39, 54, 57, 58, 75, 81, 89, 90, 95, 99, 106, 112, 127, 179, 196, 197, 198, 199, 201, 202, 203, 204, 206, 256, 258, 260, 261], "let": [6, 7, 30, 51, 54, 56, 57, 58, 219, 253, 256, 257, 258, 260, 261, 262, 264, 265], "7": [6, 10, 27, 31, 32, 33, 34, 115, 116, 127, 128, 130, 256, 257, 261, 262, 263, 264], "cmake": 6, "14": [6, 11, 86, 257, 258, 261, 263], "activ": [6, 7, 9, 116, 124, 128, 176, 252, 264], "sim": 6, "bullet": 6, "physic": [6, 7, 254, 256, 261], "headless": [6, 7], "cluster": [6, 7, 8, 18, 21, 251], "withbullet": 6, "forg": [6, 7], "aihabitat": 6, "nightli": 6, "y": [6, 7, 68, 127, 256, 258], "git": [6, 7, 10], "facebookresearch": 6, "subdirectori": 6, "verbos": 6, "export": [6, 7], "magnum_log": 6, "quiet": 6, "habitat_sim_log": 6, "remov": [6, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 97, 175, 265], "command": [6, 7, 10, 258, 261, 265], "readm": [6, 7], "md": [6, 7], "habitatenv": [6, 250], "_has_habitat": 6, "_env": [6, 265], "available_env": [6, 59, 60, 61, 62, 63, 64, 66, 67, 265], "startswith": [6, 253, 256], "oserror": 6, "load": [6, 7, 13, 14, 16, 17, 32, 33, 34, 35, 39, 40, 62, 248, 254, 256], "libllvmlit": 6, "ionstal": 6, "path": [6, 7, 30, 41, 51, 54, 56, 57, 58, 89, 106, 130, 223, 254, 257], "env_nam": [6, 56, 59, 61, 63, 66, 256, 258, 265], "llvmlite": 6, "config": [6, 7, 89, 106, 227, 229, 230, 231, 232, 234, 237, 239, 240, 242, 245], "var": [6, 7, 30, 51, 54, 56, 57, 58, 103, 175], "ld_preload": [6, 7], "python3": [6, 7, 10, 256, 264], "8": [6, 7, 33, 44, 60, 116, 117, 118, 125, 128, 145, 146, 147, 152, 154, 157, 173, 256, 257, 258, 261, 262, 264], "site": [6, 7], "bind": 6, "deactiv": [6, 7], "importerror": [6, 7, 10], "usr": [6, 7, 10, 256, 264], "x86_64": [6, 7], "linux": [6, 7], "gnu": [6, 7], "libopengl": [6, 7], "undefin": [6, 7, 10, 30, 51, 54, 56, 57, 58, 103, 175], "symbol": [6, 7, 10], "_glapi_tls_curr": [6, 7], "link": [6, 7, 257], "right": [6, 7, 127, 257, 258, 261, 265], "mujoco_env": [6, 7], "libglvnd": [6, 7], "glx": [6, 7], "cos7": [6, 7], "reinstal": [6, 7], "xvfbwrapper": [6, 7], "sysroot": [6, 7], "lib64": [6, 7], "libgldispatch": [6, 7], "offici": [7, 39], "stand": [7, 145, 146, 147, 260, 261, 265], "joint": [7, 257], "dynam": [7, 173, 258, 261], "contact": 7, "engin": [7, 261], "facilit": [7, 88, 89, 106, 145, 146, 147, 252, 256, 261], "biomechan": 7, "graphic": 7, "anim": 7, "area": 7, "demand": [7, 265], "fast": [7, 9, 60, 91, 177, 256, 257, 258], "accur": [7, 39, 257, 261], "articul": 7, "acquir": [7, 258], "deepmind": [7, 8, 9, 61, 62, 258], "access": [7, 8, 30, 32, 40, 51, 54, 56, 57, 58, 89, 175, 248, 251, 256, 261], "whomev": 7, "licenc": 7, "incorpor": [7, 261], "relianc": 7, "obsolet": 7, "seri": [7, 8, 31, 46, 50, 58, 85, 102, 206, 252, 253, 256, 257, 258, 265], "legaci": 7, "pro": [7, 251], "tip": [7, 251], "glfw": 7, "osmesa": 7, "egl": 7, "hand": [7, 21, 261], "advic": [7, 265], "sudo": [7, 251], "enabl": [7, 8, 39, 151, 219, 258, 261], "apt": 7, "libglfw3": 7, "libglew2": 7, "libgl1": 7, "mesa": 7, "libosmesa6": 7, "awar": [7, 41, 42, 43, 49, 257], "fact": [7, 8, 256, 258, 261, 262, 265], "indent": 7, "workflow": [7, 145, 146, 147], "glew": 7, "mesalib": 7, "anaconda": 7, "libgl": 7, "cos6": 7, "menpo": 7, "glfw3": 7, "both": [7, 30, 51, 52, 54, 56, 57, 58, 91, 103, 116, 128, 145, 146, 147, 163, 164, 174, 175, 176, 219, 252, 256, 258, 261, 262, 265], "mujoco_gl": 7, "pyopengl_platform": 7, "pre": [7, 22, 30, 42, 51, 54, 56, 57, 58, 89, 106, 265], "binari": [7, 24, 31, 72, 123, 137, 149, 153], "setup": 7, "mkdir": 7, "cd": 7, "tag": [7, 206, 211, 248], "earlier": [7, 256, 258], "roboti": 7, "u": [7, 10, 40, 256, 258, 261, 262, 264, 265], "download": [7, 10, 89, 106, 256, 257, 258, 259, 260, 261, 262, 264, 265], "html": [7, 56], "wget": 7, "mujoco210": 7, "tar": 7, "gz": 7, "xf": 7, "charg": 7, "obtain": [7, 54, 89, 106, 115, 220, 256, 258], "mjkei": 7, "txt": 7, "mjlib_path": 7, "home": [7, 262], "bin": [7, 252], "libmujoco210": 7, "ld_library_path": 7, "mujoco_py_mujoco_path": 7, "mujoco_py_mjkey_path": 7, "reload": 7, "hard": [7, 172, 257, 265], "later": [7, 120, 152, 155, 256, 258], "modifi": [7, 8, 30, 51, 54, 56, 57, 58, 76, 81, 89, 99, 102, 103, 106, 151, 154, 175, 226, 229, 237, 239, 242, 256, 257, 258], "nvidia": 7, "older": [7, 11], "hack": [7, 256], "line": [7, 30, 51, 54, 56, 57, 58, 256, 257, 264], "adatp": 7, "script": [7, 109, 229, 232, 234, 237, 239, 242, 244, 248, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265], "unnot": [7, 90], "until": [7, 21, 258], "complet": [7, 9, 48, 54, 251, 253, 256, 258, 260], "mujoco_pi": 7, "trigger": 7, "pipelin": [7, 258], "problem": [7, 8, 16, 257, 258, 261, 265], "troubleshoot": 7, "gl": 7, "h": [7, 75, 92, 101, 130, 206, 257], "eglshim": 7, "10": [7, 22, 26, 32, 33, 34, 35, 52, 55, 69, 70, 101, 115, 127, 130, 150, 151, 167, 177, 178, 179, 181, 188, 189, 190, 191, 214, 254, 256, 257, 258, 261, 263, 264, 265], "fatal": 7, "No": 7, "directori": [7, 41, 211, 254], "glu": 7, "38": [7, 257, 258, 261], "disappear": [7, 257, 260], "libstdc": 7, "6": [7, 13, 14, 16, 17, 33, 67, 86, 116, 121, 127, 128, 140, 158, 229, 232, 234, 237, 239, 242, 257, 258, 261, 262, 264, 265], "glibcxx_3": 7, "29": [7, 257, 258, 261, 262], "compil": 7, "libosmesa": 7, "libgcc": 7, "Then": [7, 258, 260], "filenotfounderror": 7, "errno": 7, "patchelf": 7, "fatalerror": 7, "gladloadgl": 7, "mj_env": 7, "__init__": [7, 55, 115, 123, 130, 158, 254, 261, 265], "912": 7, "glfwerror": 7, "65537": 7, "sovl": 7, "myscript": 7, "cymj": 7, "linuxgpuextensionbuild": 7, "filenam": [7, 257], "runtimeerror": [7, 8, 30, 51, 54, 56, 57, 58, 103, 265], "job": [7, 18, 19, 20, 22], "slurm": 7, "mjrendercontext": 7, "pyx": 7, "46": [7, 257, 258, 261], "114": [7, 261], "_setup_opengl_context": 7, "opengl_context": 7, "130": [7, 261], "offscreenopenglcontext": 7, "fail": [7, 22, 109], "opengl": 7, "global": [7, 30, 51, 54, 56, 57, 58, 152, 155, 254, 256], "cuda_visible_devic": 7, "id": [7, 23, 151, 177, 209, 239], "slurm_step_gpu": 7, "enviro": [7, 10], "black": 7, "read": [7, 17, 23, 41, 42, 43, 49, 54, 73, 74, 76, 77, 79, 80, 81, 82, 84, 88, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 136, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 158, 159, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 192, 206, 219, 223, 229, 237, 239, 242, 252, 256, 257, 258, 260, 261, 262, 265], "onscreen": 7, "101": [7, 261], "displai": [7, 223, 254, 256, 257, 261], "correctli": [7, 30, 51, 54, 56, 57, 58], "loop": [8, 13, 14, 16, 17, 54, 114, 223, 254, 256, 257, 260], "sketch": [8, 254], "_": [8, 52, 74, 77, 78, 86, 91, 101, 107, 144, 149, 153, 154, 158, 162, 188, 189, 190, 191, 256, 257, 258, 261, 264], "n_training_step": 8, "datapoint": 8, "onlin": [8, 13, 17, 163, 176, 214, 248, 258], "n_data_per_train": 8, "no_grad": [8, 30, 51, 54, 56, 57, 58, 188, 189, 190, 191, 258], "replay_buff": [8, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 220, 244, 256, 257, 258], "extend": [8, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 50, 220, 254, 256, 257, 258, 262, 264], "loss_fn": [8, 264], "backward": [8, 30, 51, 54, 56, 57, 58, 107, 256, 258, 261], "zero_grad": [8, 30, 51, 54, 56, 57, 58, 254, 256, 258, 261], "backpropag": [8, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 261], "decor": [8, 11, 188, 189, 190, 191], "differenti": [8, 188, 189, 190, 191, 261], "understand": [8, 256, 257], "denomin": 8, "artifact": 8, "numer": [8, 107, 126, 141, 142, 144, 149, 152, 153, 154, 155, 221, 258, 265], "misconcept": 8, "save": [8, 30, 51, 54, 56, 57, 58, 175, 205, 223, 254], "freed": 8, "appear": [8, 31, 261], "compuat": 8, "twice": 8, "fix": [8, 99, 179, 257, 261, 265], "retain_graph": 8, "discuss": [8, 9], "inplac": [8, 30, 51, 54, 56, 57, 58, 256], "accumul": 8, "onto": [8, 31, 112, 144, 148, 149, 150, 151, 152, 153, 154, 155, 261], "exclud": [8, 39, 79, 114], "forward": [8, 30, 51, 54, 56, 57, 58, 73, 74, 76, 77, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 138, 139, 144, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 192, 253, 261, 264], "submodul": [8, 30, 51, 54, 56, 57, 58, 175], "param": [8, 30, 51, 54, 55, 56, 57, 58, 91, 102, 121, 123, 137, 140, 144, 149, 152, 153, 154, 157, 158, 175, 183, 186, 188, 189, 190, 191, 192, 232, 256, 261, 262, 264], "grad": [8, 30, 51, 54, 56, 57, 58, 256, 258], "whose": [8, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 133, 154, 175], "strictli": [8, 30, 51, 54, 56, 57, 58, 103, 256, 258], "neg": [8, 13, 14, 16, 17, 18, 19, 20, 21, 32, 34, 44, 73, 81, 90, 104, 169, 253, 258, 261], "ask": [8, 256, 258, 262, 265], "core": [8, 229, 232, 234, 237, 239, 242, 254, 264], "much": [8, 32, 34, 44, 174, 176, 258, 261, 265], "render": [8, 219, 256, 257, 258], "upon": [8, 261], "factor": [8, 30, 126, 132, 141, 142, 151, 168, 169, 171, 256, 257, 265], "fit": [8, 11, 86, 253, 254, 256], "everi": [8, 17, 26, 30, 31, 49, 51, 54, 56, 57, 58, 107, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 223, 254, 256, 257, 258, 261], "bottlneck": 8, "affect": [8, 30, 51, 54, 56, 57, 58, 102, 103, 109], "brax": [8, 59, 60, 91, 265], "jax": [8, 11], "improperli": 8, "item": [8, 13, 26, 80, 165, 166, 214, 253, 254, 256, 258, 261], "underli": [8, 261], "tedeiou": 8, "priorit": [8, 32, 34, 44, 165, 166, 167, 173, 177, 179, 181, 256, 257], "amount": [8, 151, 257], "isn": [8, 154], "contigu": [8, 112, 258, 261, 264, 265], "costli": [8, 261], "concaten": [8, 21, 28, 29, 73, 74, 86, 102, 128, 157, 256, 257, 261, 265], "constitut": [8, 257, 261], "plain": 8, "profil": 8, "indic": [8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 48, 50, 51, 54, 56, 57, 58, 74, 98, 99, 116, 128, 151, 160, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 227, 248, 251, 254, 258, 261, 265], "fulli": [8, 30, 51, 54, 56, 57, 58, 257, 261], "frequent": 8, "techniqu": [8, 257], "program": [8, 173, 265], "functorch": [8, 10, 154, 157, 264], "incl": 8, "suit": [8, 62, 258, 265], "mujoco_instal": 8, "valueerror": 8, "bad": 8, "fds_to_keep": 8, "view": [8, 27, 30, 31, 51, 54, 56, 57, 58, 123, 128, 261, 264, 265], "expand": [8, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 154, 157, 175, 261, 264], "new_shap": 8, "content": [8, 13, 14, 16, 32, 33, 34, 35, 48, 56, 116, 128, 175, 258, 261, 264], "lost": 8, "permut": [8, 48, 264, 265], "spin": [9, 265], "deep": [9, 73, 117, 118, 119, 120, 122, 151, 163, 172, 179, 180, 232, 256], "hug": 9, "syllabu": 9, "lectur": 9, "awesom": 9, "curat": 9, "succinct": 9, "summari": [9, 86, 107, 256, 257, 258], "reddit": 9, "reagent": 9, "orient": [9, 265], "baselines3": 9, "tf": 9, "agent": [9, 132, 252, 261], "bandit": [9, 68], "tensorflow": 9, "kera": 9, "acm": 9, "dopamin": 9, "prototyp": 9, "salina": 9, "simpl": [9, 30, 31, 51, 54, 56, 57, 58, 117, 155, 175, 178, 188, 252, 253, 256, 257, 258, 265], "sequenti": [9, 30, 51, 54, 56, 57, 58, 156, 157, 252, 258, 261, 262, 265], "tianshou": 9, "eleg": 9, "rlpyt": 9, "rllib": 9, "industri": [9, 264], "grade": 9, "factori": 9, "throughput": [9, 256], "cherri": 9, "jaxrl": 9, "space": [9, 31, 36, 77, 112, 123, 135, 137, 144, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 167, 252, 257, 258, 261, 264, 265], "mbrl": [9, 55], "rlmeta": 9, "light": 9, "elegantrl": 9, "cloud": 9, "mtrl": 9, "baselin": 9, "689": 10, "dist": [10, 256, 264], "_torchrl": 10, "_zn8pybind116detail11type_casterin2at6tensoreve4loadens_6handleeb": 10, "colab": [10, 258], "notebook": [10, 256, 257, 258, 259, 260, 261, 262, 264, 265], "24": [10, 257, 258, 261], "11": [10, 27, 31, 52, 101, 115, 130, 257, 258, 260, 261], "2022": [10, 264], "12": [10, 257, 258, 261], "pip": [10, 40, 264, 265], "pip3": [10, 258], "extra": [10, 30, 51, 54, 56, 57, 58, 107, 114, 252, 258], "url": 10, "org": [10, 32, 44, 73, 89, 117, 118, 119, 120, 123, 124, 125, 130, 132, 134, 135, 138, 139, 151, 163, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 188, 193, 200, 229, 232, 237, 242, 256, 262], "whl": 10, "There": [10, 252, 254, 258, 261, 265], "upgrad": 10, "relas": 10, "lib_version_her": 10, "module_nam": [11, 175], "str": [11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 44, 51, 53, 54, 56, 57, 58, 61, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 106, 107, 110, 113, 115, 116, 117, 118, 119, 120, 123, 125, 127, 128, 129, 130, 131, 132, 133, 137, 144, 148, 149, 150, 151, 152, 153, 154, 155, 158, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 184, 187, 188, 189, 190, 191, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 229, 232, 237, 239, 240, 242, 248, 257, 258], "from_vers": 11, "to_vers": 11, "intersect": 11, "eg": [11, 41, 42, 43, 49, 77], "v": [11, 107, 127, 145, 173, 179, 252, 256, 257, 264], "longer": [11, 257], "fun": [11, 258], "self": [11, 30, 51, 54, 55, 56, 57, 58, 76, 89, 99, 103, 106, 115, 123, 130, 148, 150, 154, 158, 175, 188, 189, 190, 191, 192, 254, 256, 257, 261, 264], "x": [11, 23, 26, 30, 101, 116, 122, 123, 125, 127, 128, 130, 160, 162, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 223, 256, 258, 261, 264], "27": [11, 257, 258, 261], "arg": [12, 14, 26, 30, 41, 42, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 97, 103, 104, 105, 106, 116, 128, 149, 153, 175, 192, 213, 216, 220, 223, 248, 256, 257, 264], "kwd": 12, "policy_weight": [12, 13, 14, 16, 17, 19, 20], "tensordictbas": [12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 26, 30, 34, 35, 39, 40, 51, 53, 54, 56, 57, 58, 73, 74, 76, 79, 80, 81, 84, 85, 88, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 114, 115, 129, 130, 148, 150, 151, 154, 155, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 223, 256, 261], "udpdat": [12, 13, 14, 16, 17, 19, 20], "create_env_fn": [13, 14, 16, 17, 18, 19, 20, 21, 52, 57, 58, 256, 264], "callabl": [13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 52, 54, 55, 56, 57, 58, 162, 175, 230, 231, 246, 247, 248, 257], "int": [13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 54, 55, 56, 57, 58, 61, 73, 74, 75, 76, 77, 81, 82, 85, 86, 89, 90, 92, 97, 98, 100, 103, 104, 106, 109, 112, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 148, 150, 151, 152, 154, 155, 163, 164, 167, 169, 170, 171, 173, 174, 175, 176, 177, 179, 181, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 214, 215, 216, 219, 220, 223, 225, 229, 232, 237, 239, 240, 242, 246, 247, 248, 261], "200": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 69, 70, 117, 118, 124, 138, 139, 256, 261], "total_fram": [13, 14, 16, 17, 18, 19, 20, 21, 223, 226, 244, 254, 256, 257, 258, 264], "create_env_kwarg": [13, 14, 16, 17, 52, 56, 57, 58, 256], "dict": [13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 30, 51, 52, 54, 56, 57, 58, 99, 103, 107, 116, 117, 118, 119, 120, 125, 127, 128, 152, 155, 210, 211, 219, 230, 231, 232, 239, 242, 246, 247, 248, 256, 257, 258, 265], "postproc": [13, 14, 16, 17, 18, 19, 20, 21, 257], "preemptive_threshold": [13, 14], "float": [13, 14, 25, 27, 30, 31, 32, 34, 37, 44, 51, 54, 56, 57, 58, 76, 78, 86, 89, 93, 94, 99, 101, 103, 106, 107, 121, 124, 126, 128, 130, 131, 132, 138, 139, 140, 142, 148, 150, 151, 154, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 221, 256, 257, 265], "given": [13, 14, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 55, 56, 57, 58, 76, 77, 86, 89, 99, 103, 106, 114, 115, 123, 124, 130, 137, 144, 149, 151, 153, 154, 155, 156, 157, 158, 162, 165, 166, 175, 187, 188, 189, 190, 191, 192, 215, 219, 244, 252, 254, 256, 257, 258, 261, 265], "datacollector": [13, 14, 16, 17, 152, 155, 258], "recept": 13, "safe": [13, 14, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 144, 148, 149, 151, 152, 153, 154, 155, 157, 252, 264], "env_mak": [13, 14, 16, 21, 244, 265], "lambda": [13, 14, 16, 17, 21, 22, 52, 169, 171, 191, 198, 199, 203, 204, 244, 253, 256, 257, 264, 265], "50": [13, 14, 16, 21, 257, 258, 261, 263], "linear": [13, 14, 16, 21, 30, 51, 54, 55, 56, 57, 58, 76, 89, 99, 103, 106, 115, 116, 123, 128, 130, 131, 132, 133, 137, 138, 139, 144, 145, 146, 147, 150, 151, 152, 153, 154, 157, 158, 175, 188, 189, 190, 191, 244, 252, 257, 260, 262, 264], "2000": [13, 14, 16, 258], "enumer": [13, 14, 16, 21, 30, 33, 35, 51, 54, 56, 57, 58, 182, 253, 256, 257, 258, 264], "step_count": [13, 14, 16, 98, 258, 264], "int64": [13, 14, 16, 24, 27, 28, 29, 31, 34, 68, 123, 137, 149, 151, 153, 234, 258, 261, 264, 265], "shutdown": [13, 14, 16, 17, 21, 256, 264], "del": [13, 14, 16, 256, 258, 260, 264, 265], "randompolici": [13, 14, 16, 18, 19, 20, 22, 250], "total": [13, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 31, 54, 164, 174, 176, 214, 216, 219, 223, 226, 227, 256, 257, 258, 260, 261, 262, 263, 264, 265], "lifespan": [13, 14, 16, 18, 19, 20, 257], "divis": [13, 14, 16, 18, 19, 20], "endless": [13, 14, 16, 18, 19, 20], "accommod": [13, 14, 16, 17], "kept": [13, 14, 16, 17, 48, 57, 58, 77, 102, 109, 114, 126, 141, 142], "long": [13, 14, 16, 17, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 77], "dictionari": [13, 14, 16, 17, 18, 19, 20, 21, 26, 30, 51, 54, 56, 57, 58, 99, 103, 152, 155, 219, 246, 247, 248, 254, 257, 258, 261, 265], "span": [13, 14, 16, 17, 18, 19, 20, 21], "unless": [13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 48, 51, 54, 56, 57, 58, 258], "n_step": [13, 14, 16, 17, 18, 19, 20, 21, 30, 151, 257, 258], "independ": [13, 14, 16, 17, 18, 19, 20, 21, 102, 104, 253, 254, 256, 257, 264], "ignor": [13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 77, 79, 96, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 175, 265], "mainli": [13, 14, 16, 17, 18, 19, 20, 21, 252, 261], "post": [13, 14, 16, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58], "multistep": [13, 14, 16, 18, 19, 20, 21, 250, 257], "accord": [13, 14, 16, 17, 18, 19, 20, 21, 86, 94, 126, 131, 138, 141, 142, 252, 261], "return_same_td": [13, 14, 16], "cautious": [13, 14, 16, 176], "whole": [13, 14, 16, 26, 30, 51, 54, 56, 57, 58, 103, 214, 256, 258], "boolm": [13, 14], "update_policy_weight_": [13, 14], "sync": [13, 14, 18, 19, 20, 21, 225, 244, 254, 256, 264], "async": [13, 14, 18, 19, 20, 21, 256, 264], "ratio": [13, 14, 256, 258], "finish": [13, 14, 21], "rest": [13, 14, 252, 258, 264], "earli": [13, 14, 264], "load_state_dict": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 103, 107, 254, 256], "state_dict": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 103, 107, 175, 248, 254, 256, 257, 265], "ordereddict": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 103, 107, 257], "form": [13, 14, 17, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 107, 162, 163, 164, 174, 176, 223, 252], "worker0": [13, 14, 17], "state_dict0": [13, 14, 17], "worker1": [13, 14, 17], "state_dict1": [13, 14, 17], "reset_idx": [13, 14, 17], "static_se": [13, 14, 16, 17, 21, 51, 54, 56, 57, 58, 103], "integ": [13, 14, 16, 17, 23, 28, 29, 30, 31, 38, 49, 51, 54, 56, 57, 58, 82, 86, 98, 116, 128, 173, 179], "increment": [13, 14, 16, 17, 51, 54, 56, 57, 58, 98, 174], "env_fn": [13, 14, 16, 17, 52, 246, 247], "v0": [13, 14, 17, 54, 63, 64, 66, 67, 76, 103, 107, 244], "env_fn_parallel": [13, 14, 16, 17], "out_se": [13, 14, 16, 17, 265], "shut": [13, 14, 16, 17], "irrevers": [13, 14, 17], "kwarg": [14, 16, 17, 21, 26, 30, 39, 41, 42, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 97, 99, 103, 104, 105, 106, 116, 117, 118, 119, 120, 125, 126, 128, 129, 136, 140, 142, 144, 149, 152, 153, 155, 164, 174, 175, 183, 187, 188, 189, 190, 191, 192, 206, 210, 211, 213, 216, 223, 229, 230, 231, 232, 237, 239, 242, 245, 246, 247, 253, 256, 258, 264], "rand": [15, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 55, 60, 67, 115, 130, 261, 264, 265], "describ": [15, 36, 74, 102, 140, 141, 209, 229, 237, 253, 256, 258, 261, 265], "tensor_spec": [15, 155], "boundedtensorspec": [15, 22, 26, 150, 151, 152, 250, 258, 261, 264, 265], "td": [15, 26, 59, 60, 61, 62, 63, 64, 66, 67, 74, 77, 78, 84, 86, 101, 103, 107, 114, 115, 123, 129, 130, 137, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 189, 190, 191, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 214, 222, 229, 232, 234, 237, 239, 242, 253, 256, 261, 264, 265], "cube": 15, "envcreat": [16, 22, 244, 245, 248, 250, 256, 257, 264, 265], "interruptor": 16, "_interruptor": 16, "outsid": 16, "start_collect": 16, "stop_collect": 16, "preeptiv": 16, "stop": [16, 21, 51, 54, 56, 57, 58, 258, 264, 265], "chunk": 16, "policy_state_dict": 16, "env_state_dict": 16, "close": [16, 17, 54, 56, 163, 164, 174, 176, 256, 260, 261, 264], "pin_memori": [17, 32, 33, 34, 35, 39, 40, 57, 58, 88, 256, 264], "paradigm": 17, "regular": [17, 137, 154, 155, 168, 225, 252, 254, 256, 257, 265], "prefer": [17, 20, 32, 33, 34, 35, 90, 96, 220, 252, 258], "mere": 17, "greater": [17, 256, 257, 264], "signal": [17, 39, 98, 253, 256, 258], "sent": [17, 41, 42, 107], "server": 17, "length": [17, 20, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 57, 58, 90, 107, 115, 116, 117, 119, 122, 128, 130, 144, 149, 153, 154, 158, 214, 220, 256, 258, 261, 265], "postprocessor": 17, "format": [17, 29, 30, 31, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175, 256, 257, 265], "collector_class": [18, 19, 20, 21], "collector_kwarg": [18, 19, 20, 21], "num_workers_per_collector": [18, 19, 20, 21], "slurm_kwarg": [18, 19, 20], "update_after_each_batch": [18, 20, 21], "max_weight_update_interv": [18, 19, 20, 21], "tcp_port": [18, 19, 20, 22], "deriv": [18, 19, 20, 21, 223], "string": [18, 19, 20, 30, 51, 54, 56, 57, 58, 89, 106, 152, 155, 162, 205, 222, 229, 237, 239, 242, 253, 256, 258], "respect": [18, 19, 20, 30, 51, 54, 56, 57, 58, 72, 76, 89, 90, 99, 103, 106, 139, 154, 158, 175, 218, 258], "copi": [18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 91, 103, 114, 175, 253, 256, 257], "subnod": [18, 19, 20, 21], "readi": [18, 20, 21, 251, 257, 258, 260], "serv": [18, 20, 21, 65, 265], "fashion": [18, 20, 21], "executor": [18, 19, 20], "distributed_back": [18, 19], "ucc": [18, 19], "overwritten": [18, 20, 21, 51, 54, 56, 57, 58, 81], "seen": [18, 20, 21, 253, 256, 257], "turn": [18, 20, 21, 83, 104, 219, 253, 256, 257, 261, 262], "mp": [18, 19, 20, 52, 107], "submitit_delai": [18, 22], "former": [18, 19, 20, 32, 33, 34, 35, 39, 51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 256], "whilst": [18, 19, 20], "latter": [18, 19, 20, 30, 39, 51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 175, 246, 247], "homonym": [18, 19, 20, 261], "visit": [18, 19, 20], "facebookincub": [18, 19, 20], "tcp": [18, 19, 20, 22], "port": [18, 19, 20, 22], "10003": [18, 19, 20, 22], "worker_rank": [18, 19, 21], "update_interv": 19, "frequenc": [19, 256], "visible_devic": 20, "tensorpipe_opt": 20, "experiment": [20, 31, 152, 155], "union": [20, 54, 116, 167, 177], "tensorpiperpcbackendopt": 20, "ray_init_config": 21, "remote_config": 21, "num_collector": [21, 246, 247, 256, 257], "coordin": 21, "hood": [21, 261], "init": [21, 30, 51, 54, 56, 57, 58, 256, 257, 258], "autodetect": 21, "advanc": [21, 32, 33, 34, 35], "similarli": [21, 30, 48, 51, 54, 56, 57, 58, 156, 157, 173, 265], "num_cpu": 21, "num_gpu": 21, "1024": [21, 257], "carri": [21, 51, 54, 56, 57, 58, 175, 257, 261], "equat": [21, 151, 162, 164, 180, 258, 261], "exce": [21, 258], "indefinit": 21, "raydistributedcollector": 21, "distributed_collector": 21, "10000": [21, 223, 258], "add_collector": 21, "num_env": [21, 69, 70], "local_polici": 21, "remote_collector": 21, "stop_remote_collector": 21, "num_job": 22, "tcpport": 22, "submitit_main_conf": 22, "slurm_cpus_per_task": 22, "32": [22, 26, 69, 70, 116, 117, 118, 125, 128, 134, 135, 257, 258, 261, 262, 264, 265], "slurm_gpus_per_nod": 22, "slurm_partit": 22, "timeout_min": 22, "submitit_collection_conf": 22, "delai": 22, "jump": 22, "host": [22, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "wherea": [22, 77, 175, 254], "otherwis": [22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 77, 86, 99, 103, 107, 126, 141, 142, 170, 175, 179, 219, 220, 254, 256, 257, 258, 261, 265], "satellit": 22, "rendezv": 22, "hang": 22, "forev": 22, "default_config": 22, "default_slurm_conf_main": 22, "default_slurm_conf": 22, "__name__": [22, 52, 257], "__main__": [22, 52], "rollout_tensordict": 23, "prefix": [23, 30, 51, 54, 56, 57, 58, 103, 175, 205, 265], "max": [23, 31, 34, 44, 77, 100, 140, 141, 142, 164, 167, 177, 179, 256, 258], "durat": 23, "tupl": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 56, 57, 58, 86, 91, 117, 127, 128, 133, 165, 169, 175, 188, 189, 190, 191, 217, 219, 221, 233, 235, 238, 241, 256], "meta": [23, 36, 39, 53, 254, 258], "aren": 23, "discret": [24, 27, 28, 29, 31, 38, 77, 123, 136, 137, 167, 168, 252, 257, 265], "5": [24, 32, 33, 34, 35, 52, 56, 67, 69, 70, 115, 116, 123, 124, 126, 127, 128, 130, 137, 141, 142, 149, 153, 173, 174, 181, 256, 257, 261, 262, 263, 264, 265], "assert_is_in": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "belong": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 107, 252, 256], "encod": [24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 77, 123, 135, 136, 137, 138, 149, 153, 162, 252, 257, 258, 261], "val": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 264], "ndarrai": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 54, 151], "np": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 54, 261], "compli": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "current": [24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 65, 90, 103, 110, 114, 123, 124, 127, 137, 139, 151, 168, 209, 229, 237, 254, 256, 257, 258, 261, 264, 265], "least": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "complient": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "singleton": [24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 116, 128], "classmethod": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "implements_for_spec": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "torch_funct": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "overrid": [24, 25, 26, 27, 28, 29, 31, 33, 36, 37, 38, 248, 252], "tensor_to_index": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "is_in": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 265], "project": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 77, 144, 148, 149, 150, 151, 152, 153, 154, 155, 252, 264, 265], "back": [24, 25, 26, 27, 28, 29, 31, 32, 36, 37, 38, 144, 149, 152, 153, 154, 155, 258, 261], "uniform": [24, 25, 26, 27, 28, 29, 31, 32, 34, 36, 37, 38, 44], "unbound": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 99, 112, 261], "squeez": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 97, 116, 256, 261], "dim": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 73, 74, 99, 104, 107, 127, 248, 257, 261], "to_numpi": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "transformed_in": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 102, 103, 133, 140, 248], "to_one_hot": [24, 27, 28], "hot": [24, 27, 28, 29, 31, 77, 123, 136, 137, 149, 153], "to_one_hot_spec": [24, 27, 28], "onehotdiscretetensorspec": [24, 27, 123, 137, 149, 153, 250], "convert": [24, 27, 28, 29, 30, 31, 51, 54, 56, 57, 58, 76, 78, 89, 99, 103, 106, 107, 154, 162, 175, 256, 257, 258, 261], "type_check": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "fill": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 99, 261, 262], "upper": 25, "unnam": 26, "effect": [26, 30, 51, 54, 56, 57, 58, 95, 103, 223, 256, 265], "pixels_spec": 26, "observation_vector_spec": 26, "33": [26, 30, 51, 54, 56, 57, 58, 116, 128, 257, 261, 262, 263], "composite_spec": 26, "observation_vector": [26, 74, 229, 232, 237, 239, 242, 256], "within": [26, 30, 34, 35, 51, 54, 56, 57, 58, 107, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 252, 261, 264], "randn": [26, 86, 112, 123, 127, 133, 137, 144, 145, 146, 147, 149, 152, 153, 154, 157, 158, 188, 189, 190, 191, 222, 264, 265], "td_project": 26, "include_nest": 26, "leaves_onli": 26, "itemsview": 26, "immedi": [26, 30, 51, 54, 56, 57, 58, 187], "children": [26, 30, 51, 54, 56, 57, 58], "keysview": 26, "reflect": [26, 114, 175, 226, 257, 258], "selected_kei": [26, 96, 256], "valuesview": 26, "onehottensorspec": 27, "categor": [27, 29, 31, 123, 136, 137, 149, 153], "action_valu": [27, 31, 123, 137, 149, 153, 234], "arang": [27, 31, 123, 149, 214], "argmax": [27, 123, 137, 149, 153], "chosen_action_valu": [27, 31, 153, 234], "outcom": [27, 31, 121, 140], "nvec": [28, 29], "cardin": [28, 29, 123, 137, 258], "ax": [28, 131, 132], "multionehotdiscretetensorspec": [28, 250], "use_regist": [29, 31], "to_categor": [29, 31], "to_categorical_spec": [29, 31], "multidiscretetensorspec": [29, 250], "gamma": [30, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 244, 253, 256, 257, 258, 264], "sutton": [30, 253], "1988": 30, "predict": [30, 124, 129, 130, 159, 168, 170, 171, 187, 252, 256, 257], "tempor": [30, 130, 189, 190, 194, 195], "44": [30, 257, 258, 261, 262], "discount": [30, 52, 168, 169, 171, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 253, 257, 258], "ahead": [30, 265], "add_modul": [30, 51, 54, 56, 57, 58], "child": [30, 51, 54, 56, 57, 58], "fn": [30, 51, 54, 56, 57, 58, 133, 246, 247], "recurs": [30, 51, 54, 56, 57, 58, 175], "init_weight": [30, 51, 54, 56, 57, 58], "m": [30, 51, 54, 56, 57, 58, 77, 155, 252, 257, 261], "fill_": [30, 51, 54, 56, 57, 58, 257, 265], "net": [30, 51, 54, 56, 57, 58, 127, 177, 239, 244, 257, 261, 262, 264], "in_featur": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 116, 117, 118, 119, 120, 127, 128, 131, 132, 145, 154, 175, 264], "out_featur": [30, 51, 54, 55, 56, 57, 58, 76, 89, 99, 103, 106, 115, 116, 117, 118, 119, 120, 124, 125, 127, 128, 130, 131, 132, 145, 149, 154, 175, 256, 264], "bia": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 116, 124, 128, 131, 132, 133, 150, 151, 154, 160, 161, 162, 175, 253, 256, 257, 258, 264], "requires_grad": [30, 51, 54, 56, 57, 58], "bfloat16": [30, 51, 54, 56, 57, 58], "cast": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 154, 175, 229, 232, 234, 237, 239, 242, 265], "datatyp": [30, 51, 54, 56, 57, 58, 175], "member": [30, 51, 54, 56, 57, 58, 175], "xdoctest": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "skip": [30, 51, 54, 56, 57, 58, 82, 103, 109, 152, 155, 175, 205, 206, 216, 219, 256, 257, 258, 261], "buf": [30, 51, 54, 56, 57, 58], "20l": [30, 51, 54, 56, 57, 58, 175], "1l": [30, 51, 54, 56, 57, 58, 175], "5l": [30, 51, 54, 56, 57, 58, 175], "associ": [30, 51, 54, 56, 57, 58, 138, 175, 248, 256], "doubl": [30, 37, 51, 54, 56, 57, 58, 76, 78, 89, 99, 101, 103, 106, 154, 166, 168, 172, 175, 177, 180, 256, 257, 258, 265], "eval": [30, 51, 54, 56, 57, 58, 103, 107, 256, 257, 258], "evalu": [30, 51, 54, 56, 57, 58, 103, 121, 136, 142, 177, 230, 231, 257, 258], "particular": [30, 39, 51, 54, 56, 57, 58, 103, 253, 254, 257, 260], "dropout": [30, 51, 54, 56, 57, 58, 103, 128], "batchnorm": [30, 51, 54, 56, 57, 58, 103, 175], "disabl": [30, 51, 54, 56, 57, 58, 103, 126, 141, 142, 256], "comparison": [30, 51, 54, 56, 57, 58, 103, 175, 256, 257], "similar": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 105, 106, 107, 145, 147, 152, 154, 155, 175, 253, 256, 257, 258, 261, 265], "confus": [30, 51, 54, 56, 57, 58, 103], "extra_repr": [30, 51, 54, 56, 57, 58], "represent": [30, 51, 54, 56, 57, 58, 89, 106, 256, 261, 262, 265], "nontermin": 30, "original_reward": 30, "newli": 30, "OR": 30, "reshap": [30, 128, 258], "get_buff": [30, 51, 54, 56, 57, 58], "throw": [30, 51, 54, 56, 57, 58, 265], "docstr": [30, 51, 54, 56, 57, 58], "get_submodul": [30, 51, 54, 56, 57, 58], "explan": [30, 51, 54, 56, 57, 58], "qualifi": [30, 51, 54, 56, 57, 58], "referenc": [30, 51, 54, 56, 57, 58], "attributeerror": [30, 51, 54, 56, 57, 58, 256], "invalid": [30, 51, 54, 56, 57, 58], "resolv": [30, 51, 54, 56, 57, 58], "get_extra_st": [30, 51, 54, 56, 57, 58, 107], "set_extra_st": [30, 51, 54, 56, 57, 58, 107], "picklabl": [30, 51, 54, 56, 57, 58, 107], "ensur": [30, 32, 34, 44, 48, 51, 54, 56, 57, 58, 73, 89, 107, 252, 257, 258, 261], "guarante": [30, 41, 42, 43, 49, 51, 54, 56, 57, 58, 107, 264], "pickl": [30, 51, 54, 56, 57, 58, 107], "get_paramet": [30, 51, 54, 56, 57, 58], "sai": [30, 51, 54, 56, 57, 58, 262, 265], "net_b": [30, 51, 54, 56, 57, 58], "net_c": [30, 51, 54, 56, 57, 58], "conv": [30, 51, 54, 56, 57, 58, 116, 257], "conv2d": [30, 51, 54, 56, 57, 58, 116, 264], "16": [30, 51, 54, 56, 57, 58, 257, 258, 261, 262], "kernel_s": [30, 51, 54, 56, 57, 58, 116, 117, 118, 257, 264], "stride": [30, 51, 54, 56, 57, 58, 116, 117, 118, 125, 257, 264], "diagram": [30, 51, 54, 56, 57, 58], "show": [30, 51, 54, 56, 57, 58, 252, 256, 258, 261, 264], "itself": [30, 51, 54, 56, 57, 58, 175, 258], "degre": [30, 51, 54, 56, 57, 58], "named_modul": [30, 51, 54, 56, 57, 58], "o": [30, 51, 54, 56, 57, 58, 257], "transit": [30, 39, 51, 54, 56, 57, 58, 159, 256, 261], "half": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175, 256], "ipu": [30, 51, 54, 56, 57, 58], "strict": [30, 51, 54, 56, 57, 58, 103], "descend": [30, 51, 54, 56, 57, 58, 103], "exactli": [30, 51, 54, 56, 57, 58, 65, 103, 256], "persist": [30, 51, 54, 56, 57, 58, 103, 114, 175], "enforc": [30, 48, 51, 54, 56, 57, 58, 103, 156, 261], "missing_kei": [30, 51, 54, 56, 57, 58, 103], "unexpected_kei": [30, 51, 54, 56, 57, 58, 103], "namedtupl": [30, 51, 54, 56, 57, 58, 103], "duplic": [30, 48, 51, 54, 56, 57, 58, 166, 168, 175], "l": [30, 51, 54, 56, 57, 58, 187, 258, 261], "idx": [30, 51, 54, 56, 57, 58], "named_buff": [30, 51, 54, 56, 57, 58], "remove_dupl": [30, 51, 54, 56, 57, 58, 175], "prepend": [30, 51, 54, 56, 57, 58, 175], "running_var": [30, 51, 54, 56, 57, 58], "named_children": [30, 51, 54, 56, 57, 58], "conv4": [30, 51, 54, 56, 57, 58], "conv5": [30, 51, 54, 56, 57, 58], "memo": [30, 51, 54, 56, 57, 58], "named_paramet": [30, 51, 54, 56, 57, 58, 175], "register_backward_hook": [30, 51, 54, 56, 57, 58], "removablehandl": [30, 51, 54, 56, 57, 58], "deprec": [30, 51, 54, 56, 57, 58, 103, 110, 113, 265], "favor": [30, 51, 54, 56, 57, 58, 258], "register_full_backward_hook": [30, 51, 54, 56, 57, 58], "register_buff": [30, 51, 54, 56, 57, 58, 175], "running_mean": [30, 51, 54, 56, 57, 58, 175], "alongsid": [30, 51, 54, 56, 57, 58, 175], "num_featur": [30, 51, 54, 56, 57, 58, 175], "register_forward_hook": [30, 51, 54, 56, 57, 58, 123, 137], "with_kwarg": [30, 51, 54, 56, 57, 58], "posit": [30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 81, 82, 97, 98, 100, 103, 104, 133, 253, 258, 261], "signatur": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175, 253, 256, 261], "possibli": [30, 51, 54, 56, 57, 58, 116, 144, 149, 152, 153, 154, 158, 223, 252, 258, 261, 265], "register_module_forward_hook": [30, 51, 54, 56, 57, 58], "register_forward_pre_hook": [30, 51, 54, 56, 57, 58], "invok": [30, 51, 54, 56, 57, 58], "And": [30, 51, 54, 56, 57, 58], "forward_pr": [30, 51, 54, 56, 57, 58], "register_module_forward_pre_hook": [30, 51, 54, 56, 57, 58], "grad_input": [30, 51, 54, 56, 57, 58], "grad_output": [30, 51, 54, 56, 57, 58], "subsequ": [30, 51, 54, 56, 57, 58], "technic": [30, 51, 54, 56, 57, 58, 257], "caller": [30, 51, 54, 56, 57, 58], "register_module_full_backward_hook": [30, 51, 54, 56, 57, 58], "register_full_backward_pre_hook": [30, 51, 54, 56, 57, 58], "backward_pr": [30, 51, 54, 56, 57, 58], "register_module_full_backward_pre_hook": [30, 51, 54, 56, 57, 58], "register_load_state_dict_post_hook": [30, 51, 54, 56, 57, 58], "incompatible_kei": [30, 51, 54, 56, 57, 58], "thrown": [30, 51, 54, 56, 57, 58], "clear": [30, 51, 54, 56, 57, 58, 215], "register_modul": [30, 51, 54, 56, 57, 58, 254], "alia": [30, 51, 54, 56, 57, 58], "register_paramet": [30, 51, 54, 56, 57, 58], "register_state_dict_pre_hook": [30, 51, 54, 56, 57, 58], "keep_var": [30, 51, 54, 56, 57, 58, 103], "made": [30, 41, 42, 43, 49, 51, 54, 56, 57, 58, 151, 175, 256, 257, 262], "requires_grad_": [30, 51, 54, 56, 57, 58], "autograd": [30, 51, 54, 56, 57, 58, 103], "freez": [30, 51, 54, 56, 57, 58], "finetun": [30, 51, 54, 56, 57, 58], "gan": [30, 51, 54, 56, 57, 58], "share_memori": [30, 51, 52, 54, 56, 57, 58, 256], "share_memory_": [30, 51, 54, 56, 57, 58, 264], "destin": [30, 51, 54, 56, 57, 58, 103, 114], "averag": [30, 51, 54, 56, 57, 58, 103, 107, 151, 169, 170, 221, 256, 258], "shallow": [30, 51, 54, 56, 57, 58, 103], "pleas": [30, 51, 54, 56, 57, 58, 103, 251], "detach": [30, 51, 54, 56, 57, 58, 103, 175, 188, 189, 190, 191, 256], "non_block": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "memory_format": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "channels_last": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "Its": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 154, 175, 192], "complex": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175, 256, 257], "integr": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 120, 130, 154, 175, 252, 261, 262], "unchang": [30, 51, 54, 56, 57, 58, 76, 77, 89, 99, 103, 106, 154, 175, 220, 256], "tri": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "pin": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "4d": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "ignore_w": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "1913": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "3420": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "5113": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "2325": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "torch_doctest_cuda1": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "gpu1": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "1914": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "5112": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "2324": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "float16": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "cdoubl": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "3741": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175, 257], "j": [30, 32, 44, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175, 254], "2382": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "5593": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "4443": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "complex128": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "6122": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "1150": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 154, 175], "to_empti": [30, 51, 54, 56, 57, 58], "dst_type": [30, 51, 54, 56, 57, 58], "xpu": [30, 51, 54, 56, 57, 58], "set_to_non": [30, 51, 54, 56, 57, 58], "unidimension": 31, "keepdim": 31, "user_regist": 31, "priori": 31, "definit": [31, 49], "uniqu": 31, "discretebox": [31, 265], "discretetensorspec": [31, 250, 265], "alpha": [32, 34, 44, 116, 167, 177, 179, 256, 264], "ep": [32, 34, 44, 107, 151, 164, 180, 221, 256], "1e": [32, 34, 44, 107, 121, 124, 133, 140, 256, 257, 258], "08": [32, 34, 44, 257, 258, 261], "collate_fn": [32, 33, 34, 35, 39, 40, 264], "prefetch": [32, 33, 34, 35, 39, 40, 256, 257], "schaul": [32, 44], "quan": [32, 44], "antonogl": [32, 44], "silver": [32, 44], "2015": [32, 44], "arxiv": [32, 44, 73, 89, 117, 118, 119, 120, 123, 124, 125, 130, 132, 134, 135, 138, 139, 151, 163, 168, 169, 170, 171, 172, 173, 176, 179, 180, 188, 193, 200, 229, 232, 237, 242, 256, 262], "ab": [32, 44, 89, 107, 124, 125, 130, 132, 134, 135, 138, 139, 163, 169, 170, 171, 172, 173, 176, 179, 229, 237, 256, 262], "1511": [32, 44, 125], "05952": [32, 44], "expon": [32, 34, 44], "\u03b1": [32, 34, 44], "determin": [32, 34, 39, 44, 89, 106, 151, 257], "delta": [32, 34, 44, 140, 152, 155, 250, 253], "null": [32, 34, 44, 72], "max_siz": [32, 33, 34, 35, 41, 43, 49], "1_000": [32, 33, 34, 35], "merg": [32, 33, 34, 35, 39, 40, 261], "mini": [32, 33, 34, 35, 39, 40], "style": [32, 33, 34, 35, 39, 40], "decid": [32, 33, 34, 35, 264], "rb": [32, 33, 34, 35, 39, 40, 257, 262, 264], "meth": [32, 33, 34, 35], "incompat": [32, 33, 34, 35], "drop_last": [32, 33, 34, 35, 48], "return_info": [32, 33, 34, 35, 39, 40], "tensordictprioritizedreplaybuff": [32, 250, 264], "simplifi": [32, 261], "manual_se": [32, 33, 34, 35, 77, 86, 144, 150, 151, 261, 264, 265], "info": [32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 69, 70, 108], "_weight": [32, 34, 264], "arrai": [32, 256], "update_prior": [32, 44, 220, 254, 257, 264], "36278465": 32, "insert_transform": [32, 33, 34, 35, 39, 40], "insert": [32, 33, 34, 35, 39, 40, 46, 50, 104], "writer": [33, 35, 39, 40, 46, 250, 258], "randomsampl": [33, 35, 39, 40, 250, 256], "roundrobinwrit": [33, 35, 39, 40, 250], "priority_kei": [34, 35, 166, 167, 168, 173, 177, 179, 181, 264], "td_error": [34, 35, 165, 166, 167, 168, 173, 177, 179, 181, 256, 264], "reduct": [34, 44], "prioritizedreplaybuff": [34, 250, 264], "update_tensordict_prior": [34, 256, 264], "prioritizedsampl": [34, 35, 250, 256], "min": [34, 44, 140, 141, 142, 164, 167, 177, 179, 257, 258], "median": [34, 44, 152, 155], "len": [34, 116, 128, 256, 261, 262, 264], "include_info": [34, 35, 39, 40], "kw": [35, 46], "int32": [35, 67, 112], "from_env": 39, "use_timeout_as_don": 39, "env_kwarg": [39, 246, 247, 256], "metadata": [39, 258, 265], "reconstruct": [39, 170, 256, 265], "timeout": 39, "recov": [39, 148, 150, 151, 156, 173, 260], "regard": [39, 123, 163, 168, 176, 256, 258, 261], "get_dataset": 39, "qlearning_dataset": 39, "less": [39, 56, 246, 247, 253, 258, 264], "left": [39, 89, 91, 100, 102, 106, 257, 258], "terminate_on_end": 39, "possess": 39, "unexpectedli": 39, "episod": [39, 95, 115, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 257], "absent": 39, "traj_split": 39, "observationnorm": [39, 107, 248, 256, 257, 258, 264], "maze2d": 39, "umaz": 39, "loc": [39, 86, 94, 126, 133, 141, 142, 145, 146, 147, 152, 155, 157, 227, 229, 237, 239, 242, 248, 252, 256, 257, 258, 264], "128": [39, 118, 257, 261, 262], "public": [40, 89, 106], "dua": 40, "graff": 40, "2017": 40, "uci": 40, "archiv": 40, "ic": 40, "edu": 40, "ml": 40, "sklearn": 40, "adult_num": [40, 68], "adult_onehot": [40, 68], "mushroom_num": [40, 68], "mushroom_onehot": [40, 68], "covertyp": [40, 68], "shuttl": [40, 68], "magic": [40, 68], "scratch_dir": [41, 256], "memmap": [41, 57, 58, 107, 220], "attach": [41, 42, 43, 49, 257], "entiti": [41, 42, 43, 49], "alloc": [42, 256], "max_capac": [44, 256], "uniformli": [45, 175, 265], "roundrobin": 46, "piec": [46, 50, 256, 257, 258, 261], "consum": [48, 257, 258], "incomplet": 48, "unlik": [48, 168, 176, 257, 264], "fresh": 48, "caution": [48, 109, 265], "shuffl": 48, "haven": [48, 262], "remain": [48, 77, 132], "draw": 48, "__len__": 49, "_inplace_upd": [51, 56, 57, 58, 59, 60, 68, 69, 70, 103], "_batch_lock": [51, 56, 57, 58, 59, 60, 68, 69, 70, 103], "run_type_check": [51, 55], "batch_lock": [51, 53, 54, 56, 57, 58, 99, 103, 261], "environn": [51, 54, 55, 56, 57, 58, 103], "immut": [51, 54, 56, 57, 58, 91, 103, 229, 237], "fake_tensordict": [51, 54, 56, 57, 58, 257], "fake": [51, 54, 56, 57, 58, 256, 257], "overridden": [51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160], "recip": [51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160], "afterward": [51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160, 265], "silent": [51, 54, 56, 57, 58, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 133, 134, 135, 138, 139, 148, 150, 151, 160], "rand_act": [51, 54, 56, 57, 58], "_step": [51, 54, 56, 57, 58, 81, 91], "privat": [51, 54, 56, 57, 58, 261, 265], "_reset": [51, 54, 55, 56, 57, 58, 115, 130], "callback": [51, 54, 56, 57, 58], "auto_reset": [51, 54, 56, 57, 58, 261], "auto_cast_to_devic": [51, 54, 56, 57, 58], "break_when_any_don": [51, 54, 56, 57, 58], "return_contigu": [51, 54, 56, 57, 58, 109, 260], "soon": [51, 54, 56, 57, 58], "lazystackedtensordict": [51, 54, 55, 56, 57, 58, 115, 130, 260, 264, 265], "concomitt": [51, 54, 56, 57, 58], "workspac": [51, 54, 56, 57, 58], "creator": [52, 230, 231, 246, 247, 248], "substitut": [52, 107], "vecnorm": [52, 248], "env_creat": [52, 256], "test_env1": 52, "_td": 52, "observation_count": [52, 265], "test_env2": 52, "sleep": [52, 265], "p1": 52, "p2": 52, "join": [52, 229, 237, 250, 257, 258], "9934": 52, "env_str": 53, "discard": [54, 114, 205, 265], "info_dict_read": 54, "set_info_dict_read": 54, "put": [54, 107, 248, 252, 257, 258, 261], "f": [54, 162, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 256, 257, 258, 261, 265], "read_act": 54, "read_don": 54, "reader": [54, 257], "frame_skip": [54, 61, 62, 63, 66, 82, 216, 219, 226, 254, 256, 257, 258, 264], "broken": [54, 109], "read_ob": 54, "dictat": [54, 152, 155, 256, 261], "inner": [54, 77, 254, 257, 258, 265], "read_reward": 54, "total_reward": [54, 257], "step_reward": 54, "far": [54, 126, 141, 142, 261, 265], "baseinfodictread": 54, "info_dict": 54, "hoc": 54, "manner": [54, 89, 252, 256, 257, 258, 260, 261], "dict_read": 54, "default_info_dict_read": 54, "my_info_kei": 54, "some_env": 54, "limit": [55, 256, 257, 261], "safeti": 55, "constraint": [55, 258], "behav": [55, 65, 136, 173, 262], "unboundedcontinuoustensorspec": [55, 99, 112, 115, 144, 154, 157, 158, 250, 258, 261, 265], "mymbenv": [55, 115, 130], "world_model": [55, 115, 130, 170], "super": [55, 115, 123, 130, 158, 256, 261, 264], "hidden_observ": [55, 115, 130], "mlp": [55, 115, 116, 117, 118, 119, 120, 127, 130, 145, 149, 229, 237, 239, 242, 250, 257, 260, 262, 264], "worldmodelwrapp": [55, 115, 130], "activation_class": [55, 115, 116, 117, 118, 119, 120, 124, 125, 128, 130, 257, 264], "relu": [55, 115, 130, 133, 162], "activate_last_lay": [55, 115, 120, 128, 130], "depth": [55, 115, 116, 117, 118, 119, 120, 124, 125, 128, 130, 134, 135, 149, 257, 260], "equal": [56, 57, 58, 85, 86, 116, 122, 128, 184, 214, 246, 247, 256, 258, 262], "readthedoc": 56, "en": 56, "python_interfac": 56, "num_work": [56, 57, 58, 256, 257], "thread": 56, "task_id": 56, "my_env_fun": [57, 58], "custom_attribute_list": [57, 58], "custom_attribut": [57, 58], "custom_method_list": [57, 58], "custom_method": [57, 58], "deploi": [57, 58], "creation": [57, 58, 256, 265], "slight": [57, 58, 257], "overhead": [57, 58], "share_individual_td": [57, 58], "lazi": [57, 58, 89, 131, 156, 157, 256, 257, 260, 265], "shared_memori": [57, 58], "policy_proof": [57, 58], "ll": [57, 58, 256, 257, 258, 265], "hidden": [57, 58, 124, 127, 134, 135, 138, 139, 145, 146, 147, 154, 157, 229, 237, 252, 260, 264], "allow_step_when_don": [57, 58], "update_kwarg": [57, 58], "googl": [59, 60, 258], "ant": [59, 60, 262], "get_environ": 60, "87": [60, 257, 261, 262], "acrobot": [60, 265], "fetch": [60, 262, 265], "dm_control": [61, 62, 256, 260, 265], "task_nam": 61, "cheetah": [61, 62, 256, 265], "placehold": [65, 103], "secur": 65, "jumanji": [66, 67], "snake": [66, 67], "6x6": [66, 67], "td1": [67, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 256], "12x12": 67, "tsp50": 67, "tsp100": 67, "dataset_nam": 68, "empti": [68, 89, 100, 103, 106, 256, 261], "106": [68, 258, 261], "vma": [69, 70], "scenario": [69, 70, 256, 261], "flock": [69, 70], "continuous_act": [69, 70], "n_agent": [69, 70], "cohesion_rew": 69, "collision_rew": 69, "separation_rew": 69, "velocity_rew": 69, "18": [69, 70, 257, 258, 261, 265], "agent_collision_rew": 70, "agent_distance_rew": 70, "model_bas": [71, 115, 130], "transform_reward_spec": [72, 76, 78, 91, 93, 94, 102, 104], "success": [73, 102, 257, 261, 264], "account": [73, 252, 257], "movement": 73, "veloc": [73, 261, 265], "propos": [73, 129, 172, 180, 239, 242, 252], "pdf": [73, 117, 118, 119, 120, 123, 151, 168, 177, 180, 188, 193, 200, 232, 239, 242], "1312": [73, 257], "5602": 73, "_buffer": [73, 100], "transform_observation_spec": [73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 91, 92, 95, 96, 98, 99, 100, 101, 102, 104, 261], "del_kei": [74, 260, 261], "unsqueeze_if_oor": 74, "observation_posit": 74, "observation_veloc": 74, "delet": 74, "unsqueez": [74, 101, 104, 127, 256, 261], "key1": [74, 214, 222], "key2": [74, 214, 222], "crop": [75, 90, 206], "center": [75, 206], "width": [75, 92], "height": [75, 92], "squar": [75, 126, 141, 142, 206], "rewardsc": [76, 103, 256, 257], "rewardclip": 76, "transformed_env": [76, 102, 103], "tranform": [76, 79, 84, 96, 98, 102, 105], "dest": [76, 89, 106, 154], "transform_input_spec": [76, 77, 78, 86, 91, 98, 102, 104], "num_actions_effect": 77, "max_act": 77, "action_kei": [77, 115, 129, 130, 148, 150, 151], "include_forward": 77, "dimension": [77, 188, 193, 200], "num_act": [77, 167], "action_out": 77, "_call": [77, 81, 261], "inde": [77, 258, 261], "expos": [78, 156, 257], "extern": [78, 265], "excluded_kei": 79, "finit": 80, "first_dim": 81, "last_dim": 81, "allow_positive_dim": [81, 104], "flatten": [81, 220], "th": [81, 104, 261], "permit": [81, 104], "exclus": [81, 248, 252], "frameskip": 81, "repeatedli": [82, 258], "init_kei": 84, "is_init": 84, "tracker": 84, "noop": [85, 264], "30": [85, 138, 139, 257, 258, 261], "op": [85, 148, 150, 225], "randomli": [85, 86, 99, 152, 155, 261], "noop_max": 85, "out_keys_inv": [86, 87, 91, 102, 261], "standard_norm": [86, 94, 256, 257], "affin": [86, 94], "layer": [86, 107, 116, 117, 118, 124, 128, 131, 132, 134, 135, 143, 257, 258, 262], "normal": [86, 107, 116, 126, 128, 133, 141, 142, 148, 152, 155, 164, 174, 176, 219, 221, 248, 252, 254, 265], "set_default_tensor_typ": 86, "doubletensor": 86, "isclos": 86, "next_ob": [86, 188, 189, 190, 191, 264], "rubric": [86, 157], "init_stat": [86, 256, 257, 258], "3752e": 86, "01": [86, 151, 160, 163, 164, 174, 176, 257, 258, 261, 262, 263], "5087e": 86, "03": [86, 257, 258, 261, 262, 263], "9294e": 86, "9636": 86, "5608": [86, 261], "6408": 86, "num_it": [86, 257, 258], "reduce_dim": [86, 256, 257, 258], "cat_dim": [86, 256, 257, 258], "keep_dim": [86, 257], "constant": [86, 254, 256, 258, 265], "statist": [86, 107, 178, 248, 256, 257, 258, 265], "approach": [86, 256, 258, 265], "gaussian": [86, 99, 115, 130, 131, 132, 148, 258], "empir": [86, 115, 130, 152, 155, 256, 258], "3d": 86, "third": 86, "r3m": [89, 262], "resnet": [89, 106], "visual": [89, 106, 258, 261], "embed": [89, 105, 106, 144, 145, 146, 147, 149, 153, 154, 158, 262], "ego4d": [89, 106], "paper": [89, 106, 172, 239, 242, 256, 258], "univers": [89, 106], "suraj": 89, "nair": 89, "aravind": 89, "rajeswaran": 89, "vikash": [89, 106], "kumar": [89, 106], "chelsea": 89, "finn": 89, "abhinav": 89, "gupta": 89, "2203": [89, 130, 262], "12601": [89, 262], "_init": [89, 256], "snippet": [89, 256], "resnet50": [89, 106, 262], "model_nam": [89, 106, 209], "resnet34": 89, "resnet18": 89, "r3m_vec": [89, 262], "feed": [89, 106, 175, 252, 256], "244": [89, 106, 261], "stack_imag": [89, 106], "tread": [89, 106], "separet": [89, 106], "hub": [89, 106, 262], "cach": [89, 103, 106, 215, 262], "resnet50_weight": [89, 106], "imagenet1k_v1": [89, 106], "download_path": [89, 106], "tensor_pixels_kei": [89, 106], "sub_seq_len": 90, "sample_dim": [90, 256], "mask_kei": 90, "primarili": 90, "hesit": 90, "request": 90, "robust": 90, "vari": 90, "mix": [90, 256], "NOT": 90, "improp": 90, "create_copi": 91, "renam": [91, 114, 256], "stuff": 91, "braxenv": [91, 250], "newnam": 91, "transform_output_spec": [91, 102], "untouch": [91, 102], "transform_done_spec": [91, 102], "interpol": [92, 257], "bilinear": 92, "clamp_min": [93, 151], "clamp_max": 93, "clip_min": 93, "scalar": [93, 118, 120, 131, 132, 148, 150, 151, 160, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 252, 257, 261], "clip_max": 93, "episode_": 95, "reward1": 95, "reward2": 95, "ho": 95, "excludetransform": 96, "squeeze_dim": 97, "recognis": 98, "primer": 99, "default_valu": 99, "drawn": [99, 152, 155, 258], "unit": [99, 115, 124, 134, 135, 138, 139, 258], "transfomedenv": 99, "lock": [99, 107, 261], "mykei": 99, "dtype_or_devic": 99, "pool": 100, "255": [101, 261], "ri": 101, "randint": 101, "principl": 102, "cattransform": 102, "notabl": 102, "cache_spec": 103, "anymor": [103, 154], "unsqueeze_dim": [104, 261], "danger": 104, "vip": [105, 106, 262], "toward": 106, "implicit": [106, 173], "jason": 106, "ma": 106, "shagun": 106, "sodhani": 106, "dinesh": 106, "jayaraman": 106, "osbert": 106, "bastani": 106, "ami": 106, "zhang": 106, "vip_vec": 106, "shared_td": 107, "decai": [107, 148, 150, 221, 256, 257, 265], "9999": [107, 261], "0001": [107, 124, 133, 258, 261], "fly": [107, 174, 253, 258, 261, 265], "to_observation_norm": 107, "99": [107, 130, 171, 183, 187, 244, 256, 257, 258, 261, 262, 264], "underflow": [107, 221], "trail": 107, "build_td_for_shared_vecnorm": 107, "memmori": 107, "memmap_": 107, "queue": 107, "td_share": 107, "state_dim": [108, 138, 139], "action_dim": [108, 117, 119, 256, 260], "gsde": [108, 177, 248], "func": 108, "gsdemodul": 108, "check_dtyp": 109, "short": [109, 257, 258], "discrep": [109, 163, 164, 165, 166, 174, 176, 178], "imposs": 109, "heterogen": [109, 256, 257], "continuousbox": [112, 258, 261, 264, 265], "zero_": 112, "probabilistictdmodul": [113, 128, 152, 155, 187, 219], "next_tensordict": 114, "keep_oth": [114, 261], "exclude_reward": 114, "exclude_don": 114, "exclude_act": 114, "THe": 114, "next_": 114, "funtion": [114, 261], "planning_horizon": [115, 130], "optim_step": [115, 130, 257], "num_candid": [115, 130], "top_k": [115, 130], "reward_kei": [115, 130, 217, 221], "cross": 115, "entropi": [115, 163, 164, 167, 174, 176, 177, 179], "botev": 115, "et": 115, "al": [115, 234, 265], "2013": 115, "cem": 115, "plan": [115, 129, 130], "varianc": [115, 126, 133, 141, 142, 253, 256, 258], "rank": 115, "k": 115, "repeat": [115, 258, 261], "maximis": [115, 117, 119, 130, 252, 256, 257, 258, 261], "horizon": [115, 130, 258], "modelbasedenv": [115, 130], "mpc": [115, 129, 130], "candid": [115, 130], "modelbasedenvbas": [115, 129, 130, 250], "safemodul": [115, 129, 145, 147, 155, 230, 231, 244, 250, 264], "next_hidden_observ": 115, "num_cel": [116, 117, 118, 119, 120, 124, 125, 128, 145, 257, 258, 264], "elu": [116, 117, 118, 119, 120, 124, 125, 257, 264], "activation_kwarg": [116, 128], "norm_class": [116, 117, 118, 128], "norm_kwarg": [116, 128], "bias_last_lay": [116, 117, 118, 119, 120, 125, 128], "aggregator_class": [116, 117, 118, 257, 264], "squashdim": [116, 117, 264], "aggregator_kwarg": [116, 117, 118, 257], "squeeze_output": [116, 117, 118, 257], "convolut": [116, 117, 118], "neural": [116, 154, 252, 257, 258, 261, 265], "produc": [116, 128, 136, 145, 147, 206, 258, 265], "cell": [116, 128, 258], "kernel": [116, 125, 127], "device_typ": [116, 117, 118, 119, 120, 125, 128, 131, 132], "cnet": 116, "34": [116, 128, 257, 258, 261], "35": [116, 128, 257, 258, 261, 262, 263, 264], "rectangular": 116, "conv_net_kwarg": [117, 118], "mlp_net_kwarg": [117, 118, 119], "use_avg_pool": [117, 118], "WITH": [117, 118, 119, 120, 151, 180, 232], "1509": [117, 118, 119, 120, 130, 151, 172, 180, 232, 256], "02971": [117, 118, 119, 120, 151, 180, 232, 256], "convnet": [117, 250, 264], "ndims_in": 117, "avgpool": [117, 118], "adaptiveavgpool2d": [118, 257], "400": [119, 120, 261], "300": [119, 120, 229, 237, 261], "mlp_net_kwargs_net1": 120, "mlp_net_kwargs_net2": 120, "atol": [121, 140], "06": [121, 140, 257, 258, 261], "rtol": [121, 140], "batch_shap": [121, 140], "event_shap": [121, 140], "absolut": [121, 140, 256], "toler": [121, 140], "log_prob": [121, 136, 142], "densiti": [121, 136, 142], "mass": [121, 136, 142, 261], "rsampl": [121, 136, 155], "sample_shap": [121, 136], "dqnet": 122, "atom": 122, "action_spac": [123, 137, 149, 153], "var_num": [123, 137], "perspect": [123, 168, 258], "1707": [123, 168, 176, 229, 237], "06887": [123, 168], "mult_one_hot": [123, 137, 149, 153], "functional_modul": [123, 137, 153, 154, 157, 256], "make_funct": [123, 137, 152, 153, 154, 157, 158, 175, 264], "tensordict_modul": [123, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 252], "nbin": [123, 149], "customdistributionalqv": 123, "log_softmax": 123, "one_hot": [123, 137, 149, 153], "qvalue_actor": [123, 137, 149, 153], "std_bia": 124, "std_min_val": 124, "belief": [124, 134, 138, 139], "1912": [124, 169, 170, 171], "01603": [124, 169, 170, 171], "softplu": [124, 133, 160, 161, 162], "out_features_valu": 125, "cnn_kwarg": [125, 257], "mlp_kwarg": [125, 127, 257], "duel": 125, "cnn": [125, 257, 264], "06581": 125, "512": [125, 257, 261, 263, 265], "upscal": [126, 141, 142], "tanh_loc": [126, 141, 142], "event_dim": [126, 140, 141], "ultim": [126, 141, 142], "poor": [126, 141, 142], "explos": [126, 141, 142], "switch": [126, 141, 142], "sigma": [126, 141, 142, 148, 151, 258], "formula": [126, 141, 142, 163, 164, 174, 176, 253, 258], "lstm_kwarg": 127, "embedd": 127, "next_observ": [127, 260], "time_step": 127, "2d": 127, "hidden_s": 127, "input_s": 127, "hidden0_in": 127, "hidden1_in": 127, "hidden0_out": 127, "hidden1_out": 127, "single_bias_last_lay": 128, "layer_class": 128, "layer_kwarg": 128, "perceptron": 128, "seamless": 128, "lazylinear": [128, 252, 258, 261, 262, 264], "42": [128, 257, 258, 261], "noisylinear": [128, 131, 250, 257], "noisylazylinear": [128, 250], "At": [129, 257, 258, 260, 261, 262], "mpcplanner": 129, "tensordict_out": [129, 265], "advantage_modul": [130, 258], "temperatur": [130, 173], "mppi": 130, "covari": 130, "william": [130, 178], "aldrich": 130, "theodor": 130, "01149": 130, "hansen": 130, "wang": 130, "su": 130, "04955": 130, "ndunboundedcontinuoustensorspec": [130, 157], "valueoper": [130, 145, 146, 147, 163, 164, 174, 176, 178, 244, 252, 256, 258], "tdlambdaestim": [130, 250, 256], "value_net": [130, 188, 189, 190, 191, 258], "adv": 130, "95": [130, 183, 257, 258, 261], "std_init": [131, 132], "term": [131, 132, 162, 163, 167, 225, 257, 258], "matrix": [131, 132], "initialize_paramet": 131, "isol": 131, "1706": 132, "10295v3": 132, "induc": 132, "aid": 132, "emploi": 132, "scale_map": 133, "biased_softplus_1": 133, "scale_lb": [133, 138, 139], "exp": [133, 162], "module_norm": 133, "decod": 134, "1803": [134, 135], "10122": [134, 135], "rnn_hidden": 134, "latent": 135, "logit": 136, "excacli": 136, "greedi": [137, 150, 257], "hidden_dim": [138, 139], "posterior": [138, 170], "rssm": [138, 139, 170], "1811": [138, 139, 261], "04551": [138, 139], "obs_embed": 138, "rnn_hidden_dim": 139, "dream": 139, "recurr": [139, 257], "tanhtransform": 141, "translat": [144, 152], "character": [144, 149, 152, 153, 154], "overflow": [144, 149, 152, 153, 154, 155], "td_modul": [144, 145, 146, 147, 152, 154, 155, 157, 158, 264], "3635": 144, "0340": 144, "1476": 144, "3911": 144, "1664": [144, 257], "5455": [144, 261], "2247": 144, "4583": 144, "2916": 144, "2160": 144, "5337": 144, "5193": 144, "grad_fn": [144, 150, 264], "addmmbackward0": 144, "common_oper": [145, 147], "policy_oper": [145, 146, 147], "value_oper": [145, 146, 147], "actorvalueoper": [145, 229, 237, 252], "get_policy_oper": [145, 146, 147, 229, 237, 252], "alon": [145, 146, 147], "tdmodul": [145, 146, 147, 244], "get_critic_oper": 145, "probabilisticactor": [145, 146, 147, 167, 173, 179, 252, 256, 258], "tanhnorm": [145, 146, 147, 152, 157, 250, 258, 264], "normalparamwrapp": [145, 146, 147, 152, 157, 250, 264], "module_hidden": [145, 147], "td_module_hidden": [145, 147], "module_act": [145, 147], "td_module_act": [145, 146, 147], "distribution_class": [145, 146, 147, 152, 155, 157, 252, 256, 258, 264], "return_log_prob": [145, 146, 147, 152, 155, 157, 252, 258, 264], "module_valu": [145, 146, 147], "td_module_valu": [145, 146, 147], "state_action_valu": [145, 158, 179, 187, 232, 239, 242, 244, 252, 256, 264], "td_clone": [145, 146, 147], "sample_log_prob": [145, 146, 147, 152, 155, 157, 229, 237, 239, 258, 264], "tensordictmodulewrapp": [145, 230, 231, 244], "get_value_oper": [145, 146, 147, 229, 237], "action_modul": 146, "state_valu": [146, 147, 158, 179, 188, 189, 190, 191, 193, 194, 196, 198, 200, 201, 203, 229, 237, 242, 252, 256, 258], "safesequenti": [146, 147], "qualiti": [147, 252], "actorcriticoper": [147, 229, 237, 252], "embeddig": 147, "refet": 147, "actorcriticwrapp": [147, 252, 256], "sigma_init": 148, "sigma_end": 148, "annealing_num_step": [148, 150, 151, 256, 257], "po": [148, 150], "epsilon": [148, 150, 151, 180, 221, 257, 258], "eps_init": [150, 151, 257], "eps_end": [150, 151, 257], "explorative_polici": [150, 151], "0000": [150, 258, 261, 264], "9055": 150, "9277": [150, 261], "6295": 150, "2532": 150, "addbackward0": [150, 264], "theta": [151, 258, 261], "15": [151, 169, 257, 258, 261], "mu": [151, 258], "dt": [151, 261], "x0": 151, "sigma_min": 151, "n_steps_ann": 151, "ornstein": 151, "uhlenbeck": 151, "ou": [151, 256], "introduc": [151, 256], "auto": [151, 167, 177, 179, 253], "correl": 151, "sort": 151, "prev_nois": 151, "current_sigma": 151, "sqrt": 151, "ou_prev_nois": 151, "ou_step": 151, "increas": 151, "anneal": 151, "_ou_prev_nois": 151, "_ou_step": 151, "probabilist": [152, 250, 258, 264], "default_interaction_mod": [152, 155], "interaction_mod": [152, 155], "set_interaction_mod": [152, 155], "distribution_kwarg": [152, 155, 258], "cache_dist": [152, 155], "diverg": [152, 155, 170, 174], "n_empirical_estim": [152, 155], "functionalmodul": 154, "functionalmodulewithbuff": 154, "grucel": 154, "td_fmodul": 154, "td_function": 154, "td_state": 154, "vmap": [154, 157, 264], "ensembl": [154, 177], "params_repeat": 154, "td_vmap": [154, 157], "irrespect": [154, 155], "random_sampl": [154, 155], "probabilistictensordictmodul": [155, 156, 264], "rule": [155, 252, 258], "get_dist": [155, 156], "__call__": [155, 254], "suppli": 155, "fist": 155, "partial_toler": [156, 157, 260], "probabilistictensordictsequenti": [156, 163, 164, 174, 176, 178, 230, 231, 264], "tensordictsequenti": [156, 252, 256, 260, 262, 264], "who": [156, 157], "AND": [156, 157], "scan": [156, 157], "tensordictsequenci": 157, "tensordictsequ": 157, "safeprobabilisticmodul": [157, 252], "spec1": 157, "net1": 157, "module1": 157, "td_module1": 157, "spec2": 157, "module2": 157, "td_module2": 157, "custommodul": 158, "cat": [158, 264], "transition_model": 159, "reward_model": 159, "imaginari": 159, "imagin": 159, "get_reward_oper": 159, "get_transition_model_oper": 159, "min_val": [160, 162], "bias": [160, 253, 256], "_bia": 160, "invert": [161, 258], "surject": 162, "expln": 162, "biased_softplu": [162, 250], "beggin": 162, "biased_softplus_": 162, "syntax": [162, 256], "condit": [162, 256, 261], "met": [162, 261], "advantage_kei": [163, 164, 174, 176, 178, 188, 189, 190, 191, 258], "value_target_kei": [163, 164, 174, 176, 178, 188, 189, 190, 191, 258], "value_target": [163, 164, 174, 176, 178, 188, 189, 190, 191, 258], "entropy_bonu": [163, 164, 174, 176, 258], "samples_mc_entropi": [163, 164, 174, 176], "entropy_coef": [163, 164, 174, 176, 258], "critic_coef": [163, 164, 174, 176, 258], "loss_critic_typ": [163, 164, 174, 176, 178, 258], "smooth_l1": [163, 164, 165, 166, 167, 173, 174, 176, 177, 178, 179, 181, 184, 258], "separate_loss": [163, 164, 174, 176], "1602": 163, "01783v2": 163, "favour": [163, 164, 174, 176], "mont": [163, 164, 174, 176, 256], "carlo": [163, 164, 174, 176, 256], "l1": [163, 164, 165, 166, 167, 174, 176, 177, 178, 181, 184, 252, 256], "l2": [163, 164, 165, 166, 167, 170, 171, 174, 176, 177, 178, 181, 184, 256], "propag": [163, 164, 174, 176, 188, 189, 190, 191, 258], "throughout": [163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 258, 265], "essenti": [163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 257, 261], "make_value_estim": [163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 182, 253, 256], "value_typ": [163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 183, 256], "valueestim": [163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 183, 250, 253, 256], "hyperparam": [163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 256, 261], "enum": [163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 183, 256], "default_value_kwarg": [163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 250, 256], "dqn_loss": [163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 181, 182], "dqnloss": [163, 165, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 235, 250, 253, 257], "clip_epsilon": [164, 258], "normalize_advantag": [164, 174, 176], "threshold": [164, 258], "multipli": [164, 167, 174, 176, 177, 179, 221, 256], "actor_network": [165, 167, 173, 177, 179, 181, 256], "value_network": [165, 166, 168, 173, 179, 188, 189, 190, 191, 253, 256, 258], "loss_funct": [165, 166, 167, 173, 177, 179, 181, 184, 256], "delay_actor": [165, 179, 181], "delay_valu": [165, 166, 168, 178, 179, 257], "input_tensordict": [165, 166, 168, 256], "qvalueactor": [166, 252, 257], "qvalue_network": [167, 173, 177, 179, 181], "num_qvalue_net": [167, 173, 177, 179, 181], "alpha_init": [167, 177, 179], "min_alpha": [167, 177, 179], "max_alpha": [167, 177, 179], "fixed_alpha": [167, 177, 179], "target_entropy_weight": 167, "98": [167, 188, 189, 190, 191, 257, 258, 261], "target_entropi": [167, 177, 179], "delay_qvalu": [167, 177, 179, 181], "distributionalqvalueactor": [168, 252], "disctount": 168, "actor_model": 169, "value_model": [169, 171], "model_based_env": 169, "dreamerenv": [169, 250], "imagination_horizon": 169, "discount_loss": [169, 171], "lmbda": [169, 183, 188, 191, 193, 198, 199, 200, 203, 204, 253, 256, 258], "unrol": [169, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204], "lambda_kl": 170, "lambda_reco": 170, "lambda_reward": 170, "reco_loss": 170, "reward_loss": 170, "free_nat": 170, "delayed_clamp": 170, "global_averag": 170, "kl": [170, 174], "nat": 170, "clamp": [170, 223, 261], "value_loss": 171, "fake_data": 171, "loss_modul": [172, 175, 180, 223, 243, 244, 253, 254, 256, 257, 258], "ddpgloss": [172, 180, 233, 244, 250, 256, 264], "sacloss": [172, 180, 241, 250], "td3loss": [172, 180, 250], "value_network_update_interv": 172, "contrast": 172, "06461": 172, "expectil": 173, "2110": 173, "06169": 173, "tau": [173, 256, 257], "antmaz": 173, "sticht": 173, "loss_value_diff": 173, "diff": 173, "dtarg": 174, "decrement": 174, "samples_mc_kl": 174, "penalti": 174, "old_polici": 174, "new_polici": 174, "adapt": [174, 256, 261], "old": [174, 265], "thu": 174, "distanc": [174, 184, 187, 188], "apart": 174, "analyt": 174, "loss_": [175, 218, 253, 256], "defaylt_value_typ": 175, "equip": 175, "convert_to_funct": [175, 256], "expand_dim": 175, "create_target_param": [175, 256], "compare_against": [175, 256], "funs_to_decor": 175, "stuctur": 175, "_param": 175, "expans": 175, "resampl": 175, "_target_param": 175, "value_estim": [175, 188, 189, 190, 191, 192, 253, 256, 264], "valueestimatorbas": [175, 250], "blend": 175, "upcom": [175, 196, 197, 198, 199, 201, 202, 203, 204, 256], "proxim": [176, 229, 237, 258], "optimis": [176, 219, 258], "flavour": [176, 264], "constrain": 176, "clipppoloss": [176, 250, 258], "klpenppoloss": [176, 250], "regularis": 176, "06347": [176, 229, 237], "sub_sample_len": 177, "openreview": [177, 239], "ay8zfzm0tdd": [177, 239], "idea": [177, 254], "subsampl": [177, 214, 254], "connectionist": 178, "1992": 178, "doi": 178, "1007": 178, "bf00992696": 178, "1801": [179, 242], "01290": [179, 242], "applic": [179, 261], "1812": 179, "05905": 179, "prod": 179, "n_action": 179, "redqloss": [180, 250], "999": [180, 221, 257], "math": 180, "theta_t": [180, 261], "theta_": [180, 261], "policy_nois": 181, "noise_clip": 181, "td0": [182, 256], "tdlambda": [183, 253, 256], "v2": [184, 196, 197, 198, 199, 201, 202, 203, 204, 229, 232, 237, 239, 242], "strict_shap": 184, "view_a": 184, "next_val_kei": 187, "pred_next_v": 187, "usus": 187, "mse": 187, "q_valu": 187, "target_valu": [187, 253, 256, 264], "n_steps_to_next": 187, "value_next_st": 187, "average_ga": [188, 258], "value_kei": [188, 189, 190, 191, 192, 256], "1506": [188, 193, 200], "02438": [188, 193, 200], "exponenti": [188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 221], "advang": 188, "gradient_mod": 188, "value_error": [188, 189, 190, 191, 192], "sign": 188, "unused_arg": 188, "target_param": [188, 189, 190, 191, 192, 256], "relev": [188, 189, 190, 191, 192, 261], "94": [188, 191, 257, 258, 261, 262], "unpack": [188, 189, 190, 191], "recur": [188, 189, 190, 191, 192], "average_reward": [189, 190, 191], "aka": [189, 257], "tdestim": [189, 190, 192], "infti": 190, "valuefunctionbas": 192, "next_state_valu": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 250], "time_dim": [193, 196, 197, 198, 199, 200, 201, 202, 203, 204], "old_stat": [193, 194, 196, 198, 200, 201, 203], "new_stat": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "rolling_gamma": [196, 197, 198, 199, 201, 202, 203, 204], "ti": [196, 197, 198, 199, 201, 202, 203, 204, 257], "event": [196, 197, 198, 199, 201, 202, 203, 204], "g1": [196, 197, 198, 199, 201, 202, 203, 204], "g2": [196, 197, 198, 199, 201, 202, 203, 204], "g3": [196, 197, 198, 199, 201, 202, 203, 204], "g4": [196, 197, 198, 199, 201, 202, 203, 204], "v3": [196, 197, 198, 199, 201, 202, 203, 204], "v4": [196, 197, 198, 199, 201, 202, 203, 204, 256, 258, 262], "out_file_bas": 205, "skip_reset": 205, "dump": 205, "interv": [205, 206, 215, 225, 257, 261], "center_crop": 206, "make_grid": 206, "Will": 206, "grid": 206, "exp_nam": [207, 208, 211, 212, 213, 244, 257], "log_dir": [207, 208, 210, 212, 257], "templat": 207, "csv": [208, 210, 257], "minim": 208, "dependeci": 208, "experiment_nam": [209, 210], "uuid": [209, 257, 265], "date": 209, "logger_typ": 210, "logger_nam": 210, "tensorboard": [210, 212, 264], "wandb": [210, 213, 264], "mlflow": [210, 211], "might": [210, 251, 256, 265], "wandb_kwarg": 210, "mlflow_kwarg": 210, "tracking_uri": 211, "uri": 211, "datastor": 211, "tb_log": 212, "tensoarboard": 212, "sub_traj_len": 214, "min_sub_traj_len": 214, "full": [214, 256, 257, 258, 260, 261, 262, 264, 265], "20": [214, 257, 258, 261, 262, 264, 265], "register_op": [214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 254, 257], "process_optim_batch": [214, 220, 221, 254], "td_out": [214, 222], "_process_optim_batch_hook": [214, 254], "batch_subsampl": 214, "clear_cuda": 215, "pre_optim_step": [215, 254], "counter": [216, 254], "log_pbar": [216, 217, 219, 221, 254, 257], "progress": [216, 217, 219, 223, 254, 257, 265], "bar": [216, 217, 219, 223, 254, 257], "count_fram": 216, "pre_steps_log": [216, 217, 254], "count_frames_log": 216, "lognam": 217, "r_train": [217, 257], "log_reward": [217, 257], "loss_compon": 218, "appl": 218, "omit": [218, 258, 261], "optimizer_hook": 218, "loss_actor": [218, 256], "record_interv": [219, 256, 257], "record_fram": [219, 226, 256, 257], "policy_explor": [219, 244, 256, 257], "log_kei": [219, 257], "suffix": 219, "underestim": 219, "suppos": [219, 254, 265], "set_exploration_mod": [219, 250, 258, 264], "r_evalu": [219, 256], "tensordictreplaybuff": [220, 244, 250, 256, 257], "flatten_tensordict": [220, 257], "max_dim": 220, "rb_trainer": 220, "batch_process": [220, 221, 222, 254], "post_loss": [220, 254], "jitter": 221, "finfo": 221, "default_dtyp": 221, "get_default_dtyp": 221, "reward_norm": 221, "update_reward_stat": 221, "normalize_reward": 221, "make_train": [222, 250], "_process_batch_hook": [222, 254], "select_kei": [222, 254], "versatil": 223, "lossmodul": [223, 243, 244, 250], "optim_steps_per_batch": [223, 254, 257], "epoch": [223, 258], "clip_grad_norm": 223, "partial": 223, "clip_norm": 223, "progress_bar": 223, "tqdm": [223, 256, 258, 261], "save_trainer_interv": 223, "disk": [223, 254, 256, 257], "log_interv": [223, 257], "save_trainer_fil": [223, 254], "datacollectorbas": [225, 230, 231, 244, 250], "update_weights_interv": [225, 257], "sit": [225, 257], "update_weight": 225, "post_step": [225, 254], "cfg": [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248], "dictconfig": [226, 227, 229, 230, 231, 232, 234, 237, 239, 240, 242, 243, 244, 245, 248], "divid": [226, 252, 256], "unknowingli": 226, "annealing_fram": [226, 256], "init_env_step": [226, 227, 256], "proof_environ": [227, 229, 232, 234, 237, 239, 242, 256], "sta": 227, "ot": 227, "a2closs": [228, 250], "in_keys_actor": [229, 237], "observation_kei": [229, 237, 239, 242], "dummi": [229, 232, 234, 237, 239, 242, 256, 265], "parser_env_arg": [229, 237, 239], "make_ppo_model": [229, 250], "parser_model_args_continu": [229, 237, 239, 242], "cattensor": [229, 232, 237, 239, 242, 256, 260, 261, 265], "hydra": [229, 232, 234, 237, 239, 242], "config_stor": [229, 232, 234, 237, 239, 242], "configstor": [229, 232, 234, 237, 239, 242], "dataclass": [229, 232, 234, 237, 239, 242], "halfcheetah": [229, 232, 237, 239, 242, 256], "config_field": [229, 232, 234, 237, 239, 242], "config_cl": [229, 232, 234, 237, 239, 242], "ppomodelconfig": [229, 237], "envconfig": [229, 232, 234, 237, 239, 242], "make_dataclass": [229, 232, 234, 237, 239, 242], "cls_name": [229, 232, 234, 237, 239, 242], "config_path": [229, 232, 234, 237, 239, 242], "config_nam": [229, 232, 234, 237, 239, 242], "actor_valu": [229, 237], "17": [229, 232, 237, 239, 242, 257, 258, 261, 262], "actor_model_explor": [230, 231, 256], "make_env_kwarg": [230, 231], "actor_net_kwarg": [232, 239, 242], "value_net_kwarg": [232, 242], "modulelist": [232, 239, 242, 256, 264], "ddpgcnnactor": [232, 250], "ddpgmlpactor": [232, 250, 256], "ddpgcnnqnet": [232, 250], "ddpgmlpqnet": [232, 250, 256], "ddpgmodelconfig": 232, "targetnetupdat": [233, 235, 238, 241, 243, 244], "discretemodelconfig": 234, "pong": [234, 265], "v5": [234, 265], "pixels_onli": [234, 256, 257, 264, 265], "210": [234, 261, 265], "160": [234, 257, 258, 261, 265], "ppoloss": [236, 250], "redqloss_deprec": 238, "qvalue_net_kwarg": [239, 242], "qvalu": [239, 242], "redqmodelconfig": 239, "replayargsconfig": 240, "sacmodelconfig": 242, "target_net_updat": [244, 256, 257], "constitu": 244, "learnt": [244, 256, 258], "tempfil": [244, 256, 257], "tensorboardlogg": [244, 250], "egreedywrapp": [244, 257], "env_proof": 244, "obs_spec": [244, 261], "net_valu": 244, "dir": [244, 254, 257], "gettempdir": 244, "argpars": [245, 248], "namespac": [245, 248], "parser": [245, 248], "transformed_env_constructor": [245, 250], "num_env_per_collector": [246, 247], "video_tag": 248, "norm_obs_onli": 248, "use_env_cr": 248, "custom_env_mak": 248, "custom_env": 248, "return_transformed_env": 248, "action_dim_gsd": 248, "state_dim_gsd": 248, "batch_dim": 248, "obs_norm_state_dict": 248, "wheter": 248, "maker": 248, "asyncdatacollector": 250, "distributedsyncdatacollector": 250, "submitit_delayed_launch": 250, "raycollector": 250, "samplerwithoutreplac": [250, 258], "d4rlexperiencereplai": 250, "openmlexperiencereplai": 250, "binarydiscretetensorspec": 250, "unboundeddiscretetensorspec": [250, 258, 265], "tensordictrecord": 250, "videorecord": [250, 258], "get_available_librari": 250, "make_composite_from_td": [250, 261], "braxwrapp": 250, "dmcontrolenv": [250, 256, 260, 265], "dmcontrolwrapp": 250, "jumanjienv": 250, "jumanjiwrapp": 250, "openmlenv": 250, "vmasenv": 250, "vmaswrapp": 250, "qvaluehook": 250, "distributionalqvaluehook": 250, "duelingcnndqnet": [250, 257], "distributionaldqnnet": 250, "lstmnet": 250, "dreameractor": 250, "obsencod": 250, "obsdecod": 250, "rssmprior": 250, "rssmposterior": 250, "reset_nois": 250, "cemplann": 250, "mpcplannerbas": 250, "mppiplann": 250, "independentnorm": 250, "truncatednorm": 250, "tanhdelta": [250, 256], "onehotcategor": 250, "inv_softplu": 250, "distributionaldqnloss": [250, 257], "discretesacloss": 250, "iqlloss": 250, "reinforceloss": 250, "dreameractorloss": 250, "dreamermodelloss": 250, "dreamervalueloss": 250, "td0estim": [250, 256], "td1estim": [250, 256], "gae": [250, 253, 256, 258], "td0_return_estim": 250, "td0_advantage_estim": 250, "td1_return_estim": 250, "vec_td1_return_estim": 250, "td1_advantage_estim": 250, "vec_td1_advantage_estim": 250, "td_lambda_return_estim": 250, "vec_td_lambda_return_estim": 250, "td_lambda_advantage_estim": 250, "vec_td_lambda_advantage_estim": 250, "generalized_advantage_estim": 250, "vec_generalized_advantage_estim": 250, "distance_loss": [250, 256], "hold_out_net": 250, "hold_out_param": [250, 256], "softupd": [250, 256, 257], "hardupd": [250, 256], "batchsubsampl": [250, 254], "clearcudacach": 250, "countframeslog": 250, "logreward": [250, 254, 257], "optimizerhook": [250, 257], "replaybuffertrain": [250, 254, 257], "rewardnorm": 250, "selectkei": [250, 254], "trainerhookbas": [250, 254, 257], "updateweight": [250, 254, 257], "make_a2c_loss": 250, "make_a2c_model": 250, "make_collector_offpolici": 250, "make_collector_onpolici": 250, "make_ddpg_actor": [250, 256], "make_ddpg_loss": 250, "make_dqn_actor": 250, "make_dqn_loss": 250, "make_ppo_loss": 250, "make_redq_loss": 250, "make_redq_model": 250, "make_replay_buff": [250, 256], "make_sac_loss": 250, "make_sac_model": 250, "make_target_updat": 250, "parallel_env_constructor": [250, 256], "sync_async_collector": 250, "sync_sync_collector": 250, "correct_for_frame_skip": 250, "get_stats_random_rollout": 250, "csvlogger": [250, 257], "mlflowlogg": 250, "wandblogg": 250, "get_logg": 250, "generate_exp_nam": 250, "journei": 251, "guid": [251, 256], "textbook": 251, "highlight": 251, "ever": 251, "bump": 251, "think": [251, 258, 265], "benefit": 251, "pr": 251, "ground": [252, 256, 261], "three": [252, 254, 258, 261], "categori": [252, 254], "recycl": 252, "satisfi": 252, "impos": 252, "violat": 252, "noisier": 252, "Their": 252, "normalparamextractor": [252, 258], "sd": 252, "prob_modul": 252, "special": [252, 256, 265], "pick": [252, 256, 257], "tabl": [252, 257], "customari": 252, "semant": 252, "hopefulli": [252, 257], "mathbb": [252, 257], "rightarrow": [252, 257], "soften": 252, "block": 252, "group": [252, 257, 258], "backbon": [252, 260, 264], "make_actor": 252, "make_valu": 252, "shared_param": 252, "make_common": 252, "reusabl": [253, 256], "swappabl": [253, 256], "characterist": [253, 256, 261], "trainabl": [253, 256, 262], "whatev": [253, 256], "convent": [253, 256, 261], "smth": [253, 256], "metric": [253, 256], "loss_val": [253, 256, 258], "nutshel": [253, 256], "barto": 253, "chapter": 253, "proxi": 253, "significantli": [253, 256, 257], "next_stat": 253, "value_net_loss": 253, "pow": [253, 256], "therebi": 253, "room": 253, "convers": 253, "signifi": 253, "underperform": 253, "thin": 253, "intric": 253, "flexibli": 253, "outer": [254, 256, 257, 265], "believ": 254, "scheme": [254, 265], "substenti": 254, "_pre_steps_log_hook": 254, "_pre_optim_hook": 254, "sub_batch": 254, "_post_loss_hook": 254, "_post_optim_hook": 254, "post_optim": [254, 257], "_post_optim_log": 254, "post_optim_log": 254, "_post_steps_hook": 254, "_post_steps_log_hook": 254, "post_steps_log": 254, "comment": [254, 257, 264], "extens": 254, "reserv": 254, "logginghook": 254, "logging_hook": 254, "save_dict": 254, "some_valu": 254, "torchsnapshot": 254, "ckpt_backend": 254, "pt": [254, 262], "filepath": 254, "save_train": 254, "load_from_fil": 254, "perfectli": [254, 256, 261], "intern": 255, "author": [256, 257, 258, 261], "vincent": [256, 257, 258, 261], "moen": [256, 257, 258, 261], "assembl": 256, "focus": 256, "straightforward": [256, 257], "overview": [256, 258, 264], "transpar": 256, "understood": 256, "sota": [256, 257, 264], "illustr": [256, 257], "device_count": [256, 257, 262, 265], "loss_dict": 256, "modal": 256, "oblivi": [256, 258], "elementari": 256, "didact": 256, "extract": [256, 258], "speak": 256, "dilut": 256, "pessimist": [256, 257, 258], "target_actor_network_param": 256, "actor_in_kei": 256, "actor_crit": 256, "loss_funt": 256, "noth": [256, 258], "compromis": 256, "simplest": [256, 258, 265], "default_value_estim": 256, "hp": 256, "hasattr": 256, "_value_estim": 256, "elif": [256, 257], "notimplementederror": 256, "unknown": 256, "_loss_actor": 256, "td_copi": 256, "value_network_param": 256, "_loss_valu": [256, 264], "pred_val": [256, 264], "target_value_network_param": 256, "smooth": [256, 257], "loss_valu": [256, 258, 264], "glue": 256, "_forward": 256, "ndimens": 256, "pred_valu": 256, "pred_value_max": 256, "target_value_max": 256, "remaind": 256, "focu": [256, 257, 258], "env_librari": 256, "env_task": 256, "env_arg": 256, "friendli": 256, "torchr": 256, "rescal": 256, "presum": 256, "leav": 256, "make_transformed_env": 256, "reward_sc": 256, "double_to_float_list": 256, "double_to_float_inv_list": 256, "dmcontrol": 256, "leverag": [256, 265], "env_per_collector": 256, "transform_state_dict": 256, "make_t_env": 256, "copy_": 256, "parallel_env": [256, 264, 265], "adjust": [256, 261], "seem": 256, "cheat": 256, "10m": 256, "cautiou": 256, "deal": [256, 258], "magnitud": 256, "thousand": 256, "get_env_stat": 256, "proof_env": 256, "5000": [256, 257, 258], "maxim": [256, 261], "recal": [256, 258], "materi": 256, "small": [256, 258, 265], "ornsteinuhlenbeckprocesswrapp": 256, "env_spec": 256, "actor_net": [256, 258], "q_net": 256, "qnet": 256, "moduless": 256, "sugges": 256, "1_000_000": 256, "tight": 256, "natur": 256, "10_000": 256, "traj_len": 256, "make_record": 256, "recorder_obj": 256, "flavor": 256, "circular": 256, "buffer_s": [256, 257], "random_crop_len": 256, "prb": 256, "buffer_scratch_dir": 256, "temporari": 256, "dirrectori": 256, "tmpdir": [256, 257], "temporarydirectori": [256, 257], "trajecotri": 256, "25": [256, 257, 258, 261], "balanc": [256, 257, 265], "sampel": 256, "dataflow": 256, "ceil_div": 256, "utd": 256, "update_to_data": 256, "realiz": 256, "ve": 256, "_must_": 256, "001": [256, 261], "outdat": 256, "trick": [256, 257], "despit": 256, "thank": 256, "init_": [256, 257], "adam": [256, 257, 258, 261], "optimizer_actor": 256, "actor_network_param": 256, "lr": [256, 257, 258, 261], "weight_decai": [256, 257], "optimizer_valu": 256, "total_collection_step": 256, "pretti": 256, "rewards_ev": 256, "collected_fram": 256, "pbar": [256, 258, 261], "r0": 256, "numel": [256, 258, 262], "current_fram": 256, "sampled_tensordict": 256, "gn1": 256, "clip_grad_norm_": [256, 258, 261], "gn2": 256, "gn": [256, 261], "td_record": 256, "rn": 256, "set_descript": [256, 258, 261], "2f": 256, "traceback": [256, 264], "__w": [256, 264], "doc": [256, 257, 264], "coding_ddpg": [256, 263], "1119": 256, "1501": [256, 264], "_call_impl": [256, 264], "forward_cal": [256, 264], "351": [256, 261], "272": [256, 261], "391": [256, 261], "new_fun": 256, "old_param": 256, "_assign_param": 256, "468": [256, 261], "_swap_stat": 256, "make_stateless": 256, "return_old_tensordict": 256, "307": [256, 261], "old_attr": 256, "getattr": 256, "461": [256, 261], "__getattr__": 256, "err2": 256, "err1": 256, "459": [256, 261], "1614": 256, "plot": [256, 258, 261], "mention": [256, 265], "matplotlib": [256, 258, 261, 265], "pyplot": [256, 258, 261, 265], "plt": [256, 258, 261, 265], "zip": [256, 259], "label": 256, "legend": 256, "xlabel": [256, 261], "ylabel": 256, "tight_layout": 256, "concret": [256, 258], "takeawai": [256, 257], "minut": [256, 257, 258, 260, 261, 262, 264, 265], "732": [256, 261, 263], "7571": [256, 263], "mb": [256, 257, 258, 260, 261, 262, 263, 264, 265], "jupyt": [256, 257, 258, 259, 260, 261, 262, 264, 265], "ipynb": [256, 257, 258, 260, 261, 262, 264, 265], "galleri": [256, 257, 258, 259, 260, 261, 262, 264, 265], "sphinx": [256, 257, 258, 259, 260, 261, 262, 264, 265], "cartpol": [257, 265], "customis": 257, "road": 257, "aspect": 257, "grayscal": [257, 265], "did": [257, 258, 265], "highest": 257, "preprocess": 257, "prerequisit": 257, "familiar": [257, 265], "lookup": 257, "amort": [257, 258], "conjunct": 257, "cart": 257, "pole": 257, "un": 257, "actuat": 257, "frictionless": 257, "upright": [257, 265], "is_notebook": 257, "shell": 257, "get_ipython": 257, "__class__": 257, "zmqinteractiveshel": 257, "qtconsol": 257, "terminalinteractiveshel": 257, "ipython": [257, 261], "nameerror": 257, "interpret": 257, "umbrella": 257, "misplac": 257, "misus": 257, "orchestr": 257, "everyth": [257, 258], "five": 257, "64x64": 257, "channel": 257, "motion": [257, 261], "obs_norm_sd": 257, "simpler": 257, "get_norm_stat": 257, "test_env": 257, "make_model": 257, "dummy_env": 257, "output_s": 257, "init_bia": 257, "actor_explor": 257, "eps_greedy_v": 257, "eps_greedy_val_env": 257, "get_replay_buff": 257, "n_optim": 257, "themselv": 257, "simplic": [257, 258, 262], "get_collector": 257, "data_collector": 257, "bunch": 257, "concept": 257, "power": 257, "ubiquit": 257, "get_loss_modul": 257, "target_updat": 257, "sensit": 257, "variat": 257, "2e": [257, 261], "wd": 257, "upd": 257, "02": [257, 258, 261, 262, 263], "harder": [257, 264], "5_000": 257, "500000": 257, "256": [257, 258, 261], "100000": 257, "005": 257, "mandatori": [257, 258, 261], "fairer": 257, "budget": [257, 258], "dqn_exp_": 257, "uuid1": [257, 265], "warn": [257, 265], "9921": 257, "0786": 257, "tmp": 257, "tmp8x00oakt": 257, "dqn_exp_ddcdffbc": 257, "da00": [257, 265], "11ed": [257, 265], "a357": [257, 265], "0242ac120002": [257, 265], "registr": 257, "cumbersom": 257, "buffer_hook": 257, "weight_updat": 257, "descript": [257, 258], "aliv": 257, "00": [257, 258, 261, 262, 263], "31": [257, 258, 261, 262], "59": [257, 258, 261, 262], "59it": [257, 258, 261], "4045": 257, "9346": 257, "04": [257, 258, 261, 262, 263], "85it": [257, 258], "4497": 257, "96": [257, 258, 261, 262], "83it": 257, "3772": 257, "05": [257, 258, 261], "39it": [257, 261], "07": [257, 258, 261], "19": [257, 258, 261], "52it": [257, 261], "3923": 257, "192": [257, 258, 261], "74it": 257, "224": [257, 261], "39": [257, 258, 261, 262], "92it": [257, 258, 261], "3621": [257, 261], "48it": [257, 261], "3440": 257, "288": [257, 261], "35it": [257, 258], "4074": [257, 261], "320": [257, 261, 265], "53": [257, 258, 260, 261, 262, 263], "41": [257, 258, 261, 263, 265], "18it": 257, "352": [257, 261], "43": [257, 258, 261], "70it": [257, 258, 261], "3712": 257, "384": [257, 261], "40": [257, 258, 261], "45": [257, 261], "89it": 257, "4073": 257, "416": [257, 261], "37": [257, 258, 261, 262], "82it": [257, 258], "448": [257, 261, 263], "48": [257, 258, 261, 262], "05it": 257, "3742": 257, "480": [257, 261, 262], "21": [257, 258, 260, 261], "94it": 257, "3802": 257, "81it": 257, "544": [257, 261], "22": [257, 258, 261, 262], "28": [257, 258, 261], "25it": [257, 261], "576": [257, 261], "23": [257, 258, 261, 263], "65it": [257, 261], "3650": [257, 261], "608": [257, 261], "26": [257, 258, 261, 262], "51": [257, 258, 261, 262], "06it": 257, "640": 257, "14it": [257, 261], "4345": [257, 261], "672": 257, "69it": 257, "704": 257, "63it": [257, 261], "4314": 257, "736": [257, 261], "53it": [257, 261], "4134": 257, "768": 257, "27it": [257, 261], "800": 257, "64it": [257, 261], "3892": [257, 261], "832": 257, "90it": [257, 258, 261], "3620": 257, "864": 257, "52": [257, 258, 261], "01it": [257, 258], "896": 257, "928": 257, "4586": 257, "960": 257, "22it": 257, "992": 257, "28it": [257, 261], "50it": 257, "3469": 257, "1056": 257, "91it": 257, "4223": 257, "1088": 257, "97it": [257, 258], "1120": 257, "1152": 257, "26it": [257, 258, 261], "1184": 257, "1216": 257, "34it": 257, "1248": 257, "36": [257, 258, 261, 263], "30it": [257, 258], "3951": 257, "1280": 257, "46it": [257, 261], "1344": 257, "00it": [257, 258], "1376": 257, "3830": 257, "1408": 257, "1440": 257, "09": [257, 258, 261], "1472": 257, "08it": 257, "3893": 257, "1504": 257, "1536": 257, "1568": 257, "17it": [257, 258], "1600": 257, "55it": [257, 261], "3982": 257, "1632": [257, 261], "78it": [257, 258], "12it": [257, 261], "1696": 257, "16it": [257, 258], "1728": 257, "1760": 257, "51it": [257, 258, 261], "1792": 257, "62it": [257, 258, 261], "1824": 257, "47": [257, 258, 261], "20it": [257, 258], "4254": 257, "1856": 257, "47it": [257, 261], "3560": 257, "1888": 257, "60it": [257, 258, 261], "1920": [257, 261], "49": [257, 258, 261, 262], "43it": 257, "1952": 257, "4102": 257, "1984": 257, "58": [257, 258, 261], "2016": 257, "57": [257, 258, 261, 262], "2048": [257, 262], "2080": [257, 261], "56": [257, 258, 261, 263, 265], "86it": 257, "2112": [257, 261], "55": [257, 258, 261], "2144": 257, "71it": [257, 258], "2176": 257, "54": [257, 258, 261], "2208": [257, 261], "2240": 257, "84it": 257, "2272": 257, "77it": [257, 258], "2304": 257, "2336": 257, "2368": 257, "2400": [257, 261], "45it": [257, 258, 261], "4375": 257, "2432": [257, 261], "29it": [257, 258, 261], "2464": [257, 258], "87it": 257, "2496": 257, "2528": 257, "15it": [257, 258, 261], "2560": 257, "2592": [257, 261], "95it": [257, 258, 261], "2624": 257, "49it": 257, "4948": [257, 261, 262, 263], "2656": 257, "2688": 257, "4526": 257, "2720": 257, "54it": [257, 258, 261], "3439": 257, "2752": 257, "4676": 257, "2784": 257, "2816": 257, "56it": [257, 261], "2848": [257, 261], "2880": 257, "32it": [257, 258], "4524": 257, "2912": [257, 261], "73it": [257, 258], "2944": 257, "60": [257, 258, 261, 264], "2976": 257, "3008": 257, "88it": [257, 258], "61": [257, 258, 261, 262], "3040": 257, "3072": [257, 258], "4164": 257, "62": [257, 258, 261], "3104": 257, "19it": 257, "63": [257, 261, 262], "3136": 257, "3168": 257, "79it": 257, "3200": 257, "65": [257, 261, 262], "3232": 257, "9434": [257, 261], "3264": [257, 261], "66": [257, 258, 261, 262], "3296": 257, "23it": 257, "3500": [257, 261], "67": [257, 260, 261, 262], "3328": 257, "3360": 257, "68": [257, 258, 261], "3392": 257, "4434": 257, "3424": [257, 261], "4224": 257, "69": [257, 258, 261], "3456": 257, "70": [257, 258, 261, 262], "3488": 257, "76it": 257, "3520": 257, "71": [257, 261], "3552": 257, "10it": [257, 261], "72": [257, 258, 261, 262], "3584": 257, "3616": 257, "98it": 257, "73": [257, 258, 261, 262], "3648": 257, "3501": [257, 261], "74": [257, 258, 261, 262], "3680": 257, "75": [257, 261], "3744": 257, "76": [257, 258, 261, 262], "3776": 257, "3808": 257, "77": [257, 261, 262], "3840": [257, 261], "58it": [257, 261], "3872": 257, "78": [257, 258, 261, 262], "3904": 257, "79": [257, 261], "3936": 257, "3740": [257, 261], "3968": 257, "80": [257, 258, 261, 262], "4000": [257, 258], "21it": [257, 258], "4032": 257, "4064": 257, "3862": 257, "82": [257, 258, 261, 262], "4096": 257, "11it": [257, 258, 261], "83": [257, 258, 261, 262], "4128": 257, "4160": 257, "84": [257, 258, 261], "4192": 257, "66it": [257, 261], "80it": 257, "85": [257, 261, 262], "4256": 257, "86": [257, 258, 261, 262], "4288": 257, "57it": [257, 258, 261], "4320": 257, "4352": 257, "37it": [257, 261], "88": [257, 258, 261, 262], "4384": 257, "4416": 257, "89": [257, 261], "4448": 257, "90": [257, 258, 261], "4480": 257, "4162": 257, "4512": 257, "91": [257, 261, 262], "4544": 257, "96it": [257, 258, 261], "92": [257, 258, 261, 262], "4576": 257, "4608": 257, "93": [257, 261], "4640": 257, "4672": 257, "4704": 257, "4736": 257, "4768": 257, "07it": [257, 258], "4800": 257, "67it": [257, 258, 261], "97": [257, 261, 262], "4832": [257, 261], "4864": 257, "4193": [257, 261], "4896": 257, "40it": [257, 261], "4928": 257, "4960": 257, "3652": 257, "4992": 257, "5024it": 257, "quickli": [257, 265], "print_csv_files_in_fold": 257, "folder_path": 257, "csv_file": 257, "output_str": 257, "dirpath": 257, "walk": [257, 260, 265], "endswith": 257, "strip": 257, "4044681191444397": 257, "34694361686706543": 257, "37120291590690613": 257, "38930565118789673": 257, "45859628915786743": 257, "4163855016231537": 257, "4074399471282959": 257, "45262259244918823": 257, "8263044357299805": 257, "262533664703369": 257, "418959617614746": 257, "6976406574249268": 257, "211003541946411": 257, "393632650375366": 257, "731800079345703": 257, "686136484146118": 257, "5082943439483643": 257, "grad_norm_0": 257, "136": [257, 258, 261], "66990661621094": 257, "521690368652344": 257, "46949005126953": 257, "726444244384766": 257, "334753036499023": 257, "748297691345215": 257, "26910400390625": 257, "363964080810547": 257, "601936340332031": 257, "10000000894069672": 257, "9433963894844055": 257, "qvaluenetwork": 257, "worst": 257, "accuraci": 257, "fanci": 257, "897": [257, 263], "4555": 257, "coding_dqn": [257, 263], "demonstr": [258, 261, 265], "talk": 258, "repetit": 258, "six": 258, "sophist": 258, "invent": 258, "theta_k": 258, "frac": 258, "pi_": 258, "exceed": 258, "discourag": [258, 261], "indispens": 258, "loader": 258, "analyz": 258, "lingua": 258, "franca": 258, "defaultdict": [258, 261], "has_cuda": [258, 265], "3e": 258, "max_grad_norm": 258, "big": [258, 265], "ourselv": [258, 265], "benefici": 258, "errat": 258, "hamper": 258, "reactiv": 258, "xy": 258, "50_000": 258, "sub_batch_s": 258, "num_epoch": 258, "intro": 258, "entropy_ep": 258, "generalist": 258, "interchang": [258, 262], "panel": 258, "charact": 258, "inverteddoublependulum": 258, "transmit": 258, "stai": 258, "thumb": 258, "supplementari": [258, 265], "told": 258, "stringent": 258, "nevertheless": 258, "environemnt": 258, "confid": 258, "succeed": [258, 261], "pack": [258, 265], "ran": 258, "mutli": 258, "boundari": 258, "f_": 258, "text": 258, "mu_": 258, "difficulti": [258, 265], "brought": 258, "scrictli": 258, "d_ob": 258, "d_action": 258, "carrier": 258, "policy_modul": 258, "That": 258, "said": 258, "value_modul": [258, 264], "briefli": 258, "refil": 258, "capac": 258, "conveni": [258, 261], "easiest": 258, "hide": 258, "awai": 258, "mathemat": 258, "tradeoff": 258, "lr_schedul": [258, 261], "cosineannealinglr": [258, 261], "eval_str": 258, "tensordict_data": 258, "data_view": 258, "subdata": 258, "loss_object": 258, "loss_crit": 258, "loss_entropi": 258, "cum_reward_str": 258, "4f": [258, 261], "stepcount_str": 258, "param_group": 258, "lr_str": 258, "eval_rollout": 258, "nice": 258, "50000": 258, "329": [258, 261], "7560": 258, "0944": 258, "0003": [258, 261], "332": [258, 261], "1303": 258, "3000": 258, "334": [258, 261], "1597": 258, "336": [258, 261], "1879": 258, "338": [258, 261], "2024": 258, "6000": 258, "339": [258, 261], "2232": 258, "7000": 258, "341": [258, 261], "04it": 258, "2406": 258, "8000": 258, "342": [258, 261], "2418": 258, "9000": 258, "343": [258, 261], "344": [258, 261], "2507": [258, 261], "11000": 258, "269": [258, 261], "8453": 258, "2582": 258, "12000": 258, "2527": 258, "13000": 258, "2493": 258, "14000": 258, "345": [258, 261], "2544": 258, "15000": 258, "2706": 258, "0002": [258, 261], "16000": 258, "346": [258, 261], "2672": 258, "17000": 258, "347": [258, 261], "2799": 258, "18000": 258, "2868": 258, "19000": 258, "2751": 258, "20000": 258, "348": [258, 261], "2875": 258, "21000": 258, "577": [258, 261], "7198": 258, "2881": 258, "22000": 258, "2911": 258, "23000": 258, "2892": 258, "163": [258, 261, 262], "24000": 258, "2777": 258, "25000": 258, "3004": 258, "124": [258, 261], "26000": 258, "3109": 258, "171": [258, 261], "27000": 258, "3017": 258, "28000": 258, "68it": [258, 261], "156": [258, 261], "29000": 258, "349": [258, 261], "3038": 258, "123": [258, 261], "30000": 258, "13it": 258, "3070": 258, "182": [258, 261], "31000": 258, "38it": [258, 261], "679": 258, "3622": 258, "32000": 258, "3071": 258, "33000": 258, "3163": 258, "226": [258, 261], "34000": 258, "3035": 258, "162": [258, 261], "35000": 258, "3009": [258, 261], "109": [258, 261], "36000": 258, "2980": 258, "102": [258, 261, 264], "37000": 258, "3101": [258, 261], "168": [258, 261], "38000": 258, "3074": 258, "152": [258, 261], "39000": 258, "350": [258, 261], "3092": 258, "175": [258, 261], "40000": 258, "3154": 258, "165": [258, 261], "41000": 258, "41it": 258, "986": 258, "8796": 258, "105": [258, 261], "3195": 258, "218": [258, 261], "42000": 258, "93it": 258, "3178": 258, "43000": 258, "169": [258, 261], "44000": 258, "3174": 258, "270": [258, 261], "45000": 258, "3224": 258, "186": [258, 261], "46000": 258, "3176": [258, 261], "172": [258, 261], "47000": 258, "3193": 258, "48000": 258, "3175": 258, "177": [258, 261], "49000": 258, "3252": 258, "275": [258, 261], "3223": 258, "276": [258, 261], "cap": 258, "figsiz": [258, 261], "subplot": [258, 261, 265], "titl": [258, 261], "bit": 258, "852": [258, 263], "coding_ppo": [258, 263], "tutorials_python": 259, "tutorials_jupyt": 259, "distinct": 260, "humanoid": [260, 265], "env1": 260, "env1_obs_kei": 260, "observation_stand": 260, "env2": 260, "env2_obs_kei": 260, "observation_walk": 260, "tdreset1": 260, "tdreset2": 260, "tdreset": 260, "policy_common": 260, "policy_stand": 260, "policy_walk": 260, "seq": 260, "But": 260, "env1_mak": 260, "env2_mak": 260, "_single_task": 260, "td_rollout": 260, "shown": 260, "252": [260, 261, 263], "multi_task": [260, 263], "freeli": 261, "inspir": 261, "sep": 261, "touch": 261, "undertaken": 261, "broader": 261, "challeng": [261, 262], "wider": 261, "algebra": 261, "seamlessli": 261, "acquaint": 261, "avenu": 261, "unsqueezetransform": 261, "_apply_to_composit": 261, "default_x": 261, "pi": 261, "default_i": 261, "four": 261, "_set_se": 261, "torqu": 261, "upward": 261, "angular": 261, "dot": 261, "_t": 261, "sin": 261, "rad": 261, "sec": 261, "gravit": 261, "angl": 261, "deleg": 261, "new_th": 261, "plu": 261, "new_thdot": 261, "thdot": 261, "g_forc": 261, "max_torqu": 261, "angle_norm": 261, "max_spe": 261, "zeros_lik": 261, "albeit": 261, "is_empti": 261, "gen_param": 261, "high_th": 261, "high_thdot": 261, "low_th": 261, "low_thdot": 261, "rng": 261, "lazili": 261, "shortcut": [261, 265], "irrelev": 261, "_make_spec": 261, "td_param": 261, "commong": 261, "pseudo": 261, "pendulumenv": 261, "render_mod": 261, "human": 261, "rgb_arrai": 261, "render_fp": 261, "random_": 261, "_make_step": 261, "staticmethod": 261, "coupl": 261, "complic": [261, 265], "showcas": 261, "skeleton": 261, "_apply_transform": [261, 265], "_inv_apply_transform": [261, 265], "eventu": 261, "subset": [261, 262], "unitari": 261, "sine": 261, "cosin": 261, "sintransform": 261, "costransform": 261, "co": 261, "t_sin": 261, "t_co": 261, "cat_transform": 261, "mdp": 261, "convin": 261, "simple_rollout": 261, "_data": 261, "unexplor": 261, "assumpt": 261, "recreat": 261, "20_000": 261, "init_td": 261, "traj_return": 261, "last_reward": 261, "is_ipython": 261, "inlin": 261, "get_backend": 261, "ion": 261, "gcf": 261, "clear_output": 261, "625": 261, "9981": 261, "3292": 261, "8997": 261, "7032": 261, "696": 261, "8466": 261, "0202": 261, "807": 261, "2897": 261, "6322": 261, "0338": 261, "4880": 261, "504": 261, "1698": 261, "9674": 261, "188": 261, "0643": 261, "9703": 261, "127": 261, "3363": 261, "0207": 261, "048": 261, "5927": 261, "5956": 261, "7665": 261, "3527": 261, "0354": 261, "2219": 261, "2999": 261, "8446": 261, "7448": 261, "961": 261, "7403": 261, "5034": 261, "411": 261, "9381": 261, "7937": 261, "619": 261, "8760": 261, "1022": 261, "6977": 261, "0331": 261, "987": 261, "8657": 261, "4508": 261, "919": 261, "9990": 261, "8757": 261, "921": 261, "9021": 261, "9585": 261, "518": 261, "6612": 261, "6255": 261, "648": 261, "7181": 261, "7913": 261, "089": 261, "0750": 261, "5913": 261, "596": 261, "8299": 261, "4152": 261, "9993": 261, "4527": 261, "2555": 261, "551": 261, "3655": 261, "3651": 261, "6557": 261, "3352": 261, "9137": 261, "7104": 261, "8728": [261, 264], "144": 261, "8547": 261, "6320": 261, "871": 261, "7414": 261, "4717": 261, "211": 261, "7268": 261, "1833": 261, "6634": 261, "3899": 261, "6083": 261, "3508": 261, "5830": 261, "6835": 261, "8209": 261, "3483": 261, "7688": 261, "599": 261, "8693": 261, "3066": 261, "008": 261, "5190": 261, "2003": 261, "5916": 261, "0074": 261, "053": 261, "3596": 261, "3337": 261, "3250": 261, "4695": 261, "556": 261, "4941": 261, "0976": 261, "436": 261, "5073": 261, "6267": 261, "7900": 261, "7116": 261, "0649": 261, "206": 261, "9751": 261, "0522": 261, "328": 261, "0844": 261, "7387": 261, "845": 261, "2246": 261, "5251": 261, "3373": 261, "9479": 261, "2709": 261, "3046": 261, "3977": 261, "3212": 261, "642": 261, "3854": 261, "9375": 261, "837": 261, "6287": 261, "6260": 261, "7219": 261, "8860": 261, "6979": 261, "2648": 261, "4459": 261, "3812": 261, "3433": 261, "222": 261, "4411": 261, "6690": 261, "3777": 261, "1538": 261, "322": 261, "8743": 261, "4807": 261, "22e": 261, "3545": 261, "0107": 261, "2255": 261, "3131": 261, "1588": 261, "4491": 261, "076": 261, "2076": 261, "831": 261, "7440": 261, "6878": 261, "2344": 261, "1025": 261, "902": 261, "9207": 261, "3350": 261, "2087": 261, "2254": 261, "9928": 261, "3105": 261, "6532": 261, "8399": 261, "5124": 261, "8030": 261, "6501": 261, "4525": 261, "8541": 261, "8998": 261, "796e": 261, "2027": 261, "1556": 261, "3472": 261, "3081": 261, "396": 261, "3959": 261, "7512": 261, "3240": 261, "8101": 261, "2314": 261, "4188": 261, "295": 261, "9779": 261, "5535": 261, "5627": 261, "6739": 261, "8125": 261, "6816": 261, "755": 261, "6262": 261, "0773": 261, "8989": 261, "1044": 261, "4514": 261, "0407": 261, "0062": 261, "4916": 261, "0404": 261, "61it": 261, "3795": 261, "3577": 261, "122": [261, 265], "4141": 261, "134": 261, "9704": 261, "9697": 261, "1513": [261, 265], "4501": 261, "285": 261, "2994": 261, "4022": 261, "579": 261, "2008": 261, "9061": 261, "558": 261, "0307": 261, "9752": 261, "5623": 261, "5012": 261, "2079": 261, "5742": 261, "125": 261, "2724": 261, "3876": 261, "2708": 261, "7700": 261, "058": 261, "1960": 261, "1463": 261, "3716": 261, "0288": 261, "2872": 261, "0933": 261, "9320": 261, "1261": 261, "1747": 261, "4484": 261, "0453": 261, "3530": 261, "209": 261, "103": 261, "3564": 261, "3918": 261, "104": 261, "4985": 261, "5372": 261, "6419": 261, "238": 261, "4172": 261, "1033": 261, "107": 261, "5129": 261, "1738": 261, "982": 261, "108": 261, "6379": 261, "2202": 261, "9865": 261, "110": 261, "6413": 261, "0470": 261, "111": 261, "7870": 261, "4711": 261, "386": 261, "112": 261, "8113": 261, "5438": 261, "113": 261, "7211": 261, "2379": 261, "054": 261, "4828": 261, "5023": 261, "115": 261, "9169": 261, "8205": 261, "116": 261, "0791": 261, "4240": 261, "117": 261, "0138": 261, "3126": 261, "651": 261, "118": 261, "6676": 261, "3220": 261, "119": 261, "0057": 261, "120": 261, "4148": 261, "9243": 261, "121": [261, 265], "2873": 261, "2469": 261, "1979": 261, "1586": 261, "6911": 261, "8230": 261, "7729": 261, "9686": 261, "126": 261, "2032": 261, "0313": 261, "656": 261, "9053": 261, "4081": 261, "9441": 261, "3413": 261, "5864": 261, "006": 261, "129": 261, "0038": 261, "5304": 261, "7869": 261, "2975": 261, "131": 261, "7712": 261, "1618": 261, "132": 261, "7366": 261, "133": 261, "4165": 261, "0684": 261, "188e": 261, "8963": 261, "1896": 261, "135": 261, "7390": 261, "9629": 261, "9319": 261, "137": 261, "138": 261, "7266": 261, "1210": 261, "139": 261, "8384": 261, "5619": 261, "140": 261, "0575": 261, "5144": 261, "141": 261, "8710": 261, "7681": 261, "142": 261, "8321": 261, "8516": 261, "945": 261, "143": 261, "0932": 261, "2351": 261, "773": 261, "0999": 261, "1744": 261, "145": 261, "2118": 261, "8154": 261, "146": 261, "7484": 261, "4035": 261, "147": 261, "5152": 261, "0088": 261, "148": 261, "5423": 261, "7286": 261, "149": 261, "7692": 261, "1465": 261, "150": 261, "0797": 261, "1392": 261, "151": 261, "9611": 261, "9006": 261, "7773": 261, "6767": 261, "153": 261, "4340": 261, "2778": 261, "154": 261, "5407": 261, "8302": 261, "595": 261, "155": 261, "4597": 261, "1627": 261, "7073": 261, "3922": 261, "157": 261, "7815": 261, "9858": 261, "158": 261, "6953": 261, "7051": 261, "159": 261, "6165": 261, "0605": 261, "3321": 261, "9367": 261, "161": 261, "3238": 261, "1825": 261, "6537": 261, "6867": 261, "8555": 261, "0956": 261, "164": 261, "3248": 261, "0159": 261, "2370": 261, "7480": 261, "166": [261, 264], "8993": 261, "8285": 261, "167": 261, "5465": 261, "3198": 261, "9088": 261, "3417": 261, "2199": 261, "2993": 261, "170": 261, "7042": 261, "1570": 261, "6141": 261, "284": 261, "9925": 261, "2946": 261, "173": 261, "5968": 261, "174": 261, "1712": 261, "6813": 261, "9453": 261, "176": 261, "5664": 261, "3610": 261, "9569": 261, "178": 261, "0602": 261, "9931": 261, "179": 261, "7767": 261, "8155": 261, "180": 261, "0498": 261, "7331": 261, "568": 261, "181": 261, "0781": 261, "1768": 261, "9178": 261, "6354": 261, "183": 261, "1244": 261, "8991": 261, "184": 261, "8262": 261, "2116": 261, "185": 261, "2508": 261, "7676": 261, "0428": 261, "2621": 261, "187": 261, "0812": 261, "9802": 261, "199": 261, "9924": 261, "0870": 261, "189": 261, "3196": 261, "2363": 261, "190": 261, "9864": 261, "0182": 261, "191": 261, "0345": 261, "9245": 261, "9191": 261, "1752": 261, "491": 261, "193": 261, "1470": 261, "8907": 261, "257": 261, "194": 261, "1925": 261, "676": 261, "195": 261, "1042": 261, "5107": 261, "842": 261, "196": 261, "0179": 261, "2845": 261, "197": 261, "9784": 261, "0536": 261, "198": 261, "8914": 261, "3151": 261, "2599": 261, "7948": 261, "4072": 261, "201": 261, "5997": 261, "8325": 261, "202": 261, "8960": 261, "203": 261, "0600": 261, "8070": 261, "204": 261, "0523": 261, "0025": 261, "205": 261, "5027": 261, "0148": 261, "0363": 261, "3280": 261, "207": 261, "1871": 261, "1571": 261, "208": 261, "8204": 261, "6373": 261, "9863": 261, "2612": 261, "0748": 261, "9467": 261, "8050": 261, "6954": 261, "291": 261, "212": 261, "4752": 261, "1008": 261, "016": 261, "213": 261, "8463": 261, "1723": 261, "214": 261, "6868": 261, "215": 261, "5380": 261, "1126": 261, "891": 261, "216": 261, "2657": 261, "2562": 261, "217": 261, "5513": 261, "0549": 261, "566": 261, "0561": 261, "1288": 261, "607": 261, "219": 261, "3470": 261, "0052": 261, "220": 261, "4686": 261, "0242": 261, "941": 261, "221": 261, "8202": 261, "9284": 261, "1519": 261, "799": 261, "223": 261, "9705": 261, "0056": 261, "027": 261, "9204": 261, "2680": 261, "991": 261, "225": 261, "0383": 261, "1037": 261, "7906": 261, "227": 261, "3671": 261, "5151": 261, "228": 261, "9767": 261, "9817": 261, "229": 261, "6483": 261, "0955": 261, "230": 261, "6856": 261, "5156": 261, "231": 261, "7647": 261, "4922": 261, "232": 261, "3724": 261, "4932": 261, "233": 261, "3750": 261, "873": 261, "234": 261, "7854": 261, "2685": 261, "839": 261, "235": 261, "2902": 261, "1122": 261, "618": 261, "236": 261, "0771": 261, "428": 261, "237": 261, "0086": 261, "324": 261, "3233": 261, "239": 261, "4450": 261, "1583": 261, "240": [261, 264, 265], "241": 261, "2403": 261, "0024": 261, "569": 261, "242": 261, "1011": 261, "0112": 261, "251": 261, "243": 261, "6538": 261, "0162": 261, "9349": 261, "7379": 261, "245": 261, "8236": 261, "0259": 261, "8227": 261, "246": 261, "4424": 261, "6078": 261, "247": 261, "1075": 261, "2630": 261, "248": 261, "0820": 261, "684": 261, "249": 261, "2719": 261, "7146": 261, "364": 261, "250": 261, "4423": 261, "9679": 261, "4463": 261, "5761": 261, "0347": 261, "0947": 261, "253": 261, "4200": 261, "0638": 261, "254": 261, "4313": 261, "0403": 261, "074": 261, "6630": 261, "0239": 261, "1293": 261, "0677": 261, "638": 261, "8976": 261, "0517": 261, "092": 261, "258": 261, "1411": 261, "259": 261, "0897": 261, "0417": 261, "013": 261, "260": 261, "9226": 261, "0016": 261, "4881": 261, "261": 261, "1743": 261, "0167": 261, "262": 261, "1668": 261, "0481": 261, "263": 261, "1277": 261, "0092": 261, "8715": 261, "264": 261, "0661": 261, "0067": 261, "7747": 261, "265": 261, "2779": 261, "0430": 261, "9998": 261, "266": 261, "9067": 261, "0251": 261, "015": 261, "267": 261, "4558": 261, "0186": 261, "268": 261, "1901": 261, "1413": 261, "1785": 261, "0324": 261, "562": 261, "2759": 261, "826": 261, "271": 261, "1844": 261, "0168": [261, 265], "587": 261, "0362": 261, "273": 261, "7069": 261, "274": 261, "0793": 261, "5345": 261, "0513": 261, "0211": 261, "088": 261, "4400": 261, "0433": 261, "866": 261, "277": 261, "2846": 261, "0157": 261, "427": 261, "278": 261, "2392": 261, "1046": 261, "408": 261, "279": 261, "1373": 261, "5125": 261, "280": 261, "1448": 261, "0560": 261, "678": 261, "281": 261, "5425": 261, "0506": 261, "282": 261, "5210": 261, "0940": 261, "283": 261, "0558": 261, "876": 261, "2645": 261, "0130": 261, "5357": 261, "7399": 261, "8931": 261, "286": [261, 264], "2394": 261, "9803": 261, "287": 261, "6626": 261, "8780": 261, "2521": 261, "0027": 261, "289": 261, "1452": 261, "0534": 261, "877": 261, "290": 261, "2637": 261, "0477": 261, "519": 261, "2021": 261, "0382": 261, "742": 261, "292": 261, "1473": 261, "0208": 261, "293": 261, "3379": 261, "0450": 261, "294": 261, "2145": 261, "0270": 261, "3688": 261, "7527": 261, "296": 261, "8627": 261, "297": 261, "2180": 261, "0066": 261, "298": 261, "0373": 261, "0055": 261, "299": 261, "5879": 261, "9401": 261, "6223": 261, "8889": 261, "301": 261, "2797": 261, "1580": 261, "302": 261, "9936": 261, "4949": 261, "303": 261, "4579": 261, "9796": 261, "304": 261, "0070": 261, "9057": 261, "305": 261, "2540": 261, "746": 261, "306": 261, "5077": 261, "1406": 261, "7956": 261, "7657": 261, "308": 261, "9119": 261, "1691": 261, "309": 261, "2513": 261, "3036": 261, "310": 261, "0779": 261, "0079": 261, "8692": 261, "311": 261, "9439": 261, "0460": 261, "592": 261, "312": 261, "8099": 261, "0491": 261, "313": 261, "516": 261, "314": 261, "8046": 261, "0147": 261, "404": 261, "315": 261, "0122": 261, "0017": 261, "6365": 261, "316": 261, "1499": 261, "0109": 261, "717": 261, "317": 261, "0034": 261, "4328": 261, "318": 261, "1559": 261, "0010": 261, "3445": 261, "319": 261, "2862": 261, "9168": 261, "0020": 261, "7494": 261, "321": 261, "7114": 261, "004": 261, "2146": 261, "323": 261, "8207": 261, "0008": 261, "093": 261, "0291": 261, "0036": 261, "733": 261, "325": 261, "0031": 261, "0059": 261, "9693": 261, "326": 261, "4539": 261, "4015": 261, "327": 261, "2260": 261, "0032": 261, "8712": 261, "2449": 261, "0100": 261, "7291": 261, "0009": 261, "5744": 261, "330": 261, "9889": 261, "0205": 261, "563": 261, "331": 261, "9478": 261, "0578": 261, "3117": 261, "3474": 261, "333": 261, "3562": 261, "2034": 261, "0292": 261, "335": 261, "6824": 261, "2522": 261, "565": 261, "337": 261, "9085": 261, "0041": 261, "798": 261, "0409": 261, "0278": 261, "0081": 261, "077": 261, "340": 261, "1038": 261, "0184": 261, "5232": 261, "2485": 261, "948": 261, "3397": 261, "1390": 261, "1946": 261, "3108": 261, "9773": 261, "9628": 261, "8776": 261, "593": 261, "4281": 261, "3059": 261, "9241": 261, "0303": 261, "4747": 261, "3566": 261, "5687": 261, "1356": 261, "9195": 261, "2604": 261, "5555": 261, "353": 261, "4093": 261, "354": 261, "3465": 261, "0412": 261, "498": 261, "355": 261, "4612": 261, "0659": 261, "888": 261, "356": 261, "0915": 261, "6161": 261, "357": 261, "4199": 261, "6984": 261, "358": 261, "1434": 261, "5982": 261, "359": 261, "6443": 261, "8121": 261, "360": 261, "9721": 261, "559": 261, "361": 261, "5386": 261, "0893": 261, "362": 261, "1242": [261, 264], "0828": 261, "507": 261, "363": 261, "8708": 261, "548": 261, "9075": 261, "4399": 261, "365": 261, "6237": 261, "0761": 261, "929": 261, "366": 261, "1787": 261, "1726": 261, "367": 261, "4725": 261, "368": 261, "0309": 261, "502": 261, "369": 261, "6823": 261, "0098": 261, "370": 261, "2397": 261, "371": 261, "4634": 261, "0099": 261, "699": 261, "372": 261, "9857": 261, "9962": 261, "373": 261, "9991": 261, "2484": 261, "374": 261, "8959": 261, "737": 261, "375": 261, "1581": 261, "376": 261, "8401": 261, "377": 261, "9562": 261, "0272": 261, "378": 261, "9824": 261, "4239": 261, "379": 261, "2841": 261, "380": 261, "9922": 261, "4334": 261, "381": 261, "9613": 261, "6321": 261, "382": 261, "0516": 261, "8370": 261, "383": 261, "9549": 261, "7350": 261, "1794": 261, "4433": 261, "385": 261, "5432": 261, "738": 261, "9084": 261, "387": 261, "8010": 261, "388": 261, "9532": 261, "6513": 261, "389": 261, "8265": 261, "0729": 261, "390": 261, "8901": 261, "3721": 261, "8347": 261, "7444": 261, "392": 261, "6952": 261, "7052": 261, "393": 261, "4568": 261, "1346": 261, "394": 261, "2150": 261, "0438": 261, "943": 261, "395": 261, "2904": 261, "9225": 261, "3052": 261, "0075": 261, "8393": 261, "397": 261, "1268": 261, "398": 261, "4296": 261, "1481": 261, "399": 261, "5538": 261, "3458": 261, "2728": 261, "1060": 261, "401": 261, "7887": 261, "2564": 261, "402": 261, "9080": 261, "5411": 261, "403": 261, "1620": 261, "7441": 261, "7703": 261, "405": 261, "6127": 261, "3102": 261, "406": 261, "4175": 261, "5960": 261, "407": 261, "0043": 261, "8779": 261, "409": 261, "6928": 261, "410": 261, "2700": 261, "022": 261, "0357": 261, "0019": 261, "028": 261, "412": 261, "0935": 261, "0060": 261, "7993": 261, "413": 261, "9033": 261, "0065": 261, "6378": 261, "414": 261, "9597": 261, "415": 261, "0110": 261, "0005": 261, "4133": 261, "8585": 261, "0042": [261, 265], "6746": 261, "417": 261, "7328": 261, "1174": 261, "4613": 261, "418": 261, "2442": 261, "0233": 261, "419": 261, "3477": 261, "018": 261, "420": 261, "6869": 261, "0289": 261, "4806": 261, "421": 261, "1528": 261, "0134": 261, "422": 261, "1684": 261, "2155": 261, "423": 261, "0116": 261, "5719": 261, "424": 261, "0214": 261, "2801": 261, "425": 261, "4760": 261, "0224": 261, "6168": 261, "426": 261, "2511": 261, "0045": 261, "1865": 261, "8317": 261, "1415": 261, "2207": 261, "0841": 261, "429": 261, "0849": 261, "985": 261, "430": 261, "9495": 261, "0372": 261, "9485": 261, "431": 261, "9242": 261, "0039": 261, "4826": 261, "432": 261, "1635": 261, "433": 261, "9218": 261, "1003": 261, "434": 261, "7468": 261, "1522": 261, "435": 261, "7471": 261, "5852": 261, "9354": 261, "0013": 261, "037": 261, "437": 261, "3633": 261, "0187": 261, "061": 261, "438": 261, "7091": 261, "0212": 261, "439": 261, "0950": 261, "6344": 261, "440": 261, "1945": 261, "5790": 261, "441": 261, "6370": 261, "7047": 261, "442": 261, "9447": 261, "0551": 261, "443": 261, "0674": 261, "0146": 261, "046": 261, "444": 261, "0087": 261, "0247": 261, "445": 261, "2640": 261, "0129": 261, "8987": 261, "446": 261, "1670": 261, "5398": 261, "447": 261, "9180": 261, "7940": 261, "2948": 261, "0588": 261, "449": 261, "0486": 261, "0029": 261, "1134": 261, "450": 261, "3267": 261, "5681": 261, "451": 261, "0151": 261, "452": 261, "6647": 261, "0316": 261, "453": 261, "5449": 261, "0209": 261, "097": 261, "454": 261, "9321": 261, "3687": 261, "953": 261, "455": 261, "9511": 261, "2701": 261, "456": 261, "0406": 261, "8281": 261, "457": 261, "0379": 261, "458": 261, "2470": 261, "0437": 261, "5843": 261, "0072": 261, "460": 261, "6838": 261, "3447": 261, "7313": 261, "0355": 261, "462": 261, "9268": 261, "0265": 261, "9834": 261, "463": 261, "8536": 261, "9786": 261, "464": 261, "0696": 261, "7232": 261, "465": 261, "9096": 261, "4422": 261, "466": 261, "3227": 261, "0026": 261, "467": 261, "9565": 261, "9563": 261, "9941": 261, "1284": 261, "469": 261, "1401": 261, "2850": 261, "470": 261, "1807": 261, "8859": 261, "471": 261, "0268": 261, "2992": 261, "472": 261, "7436": 261, "0048": 261, "034": 261, "473": 261, "7046": 261, "0352": 261, "474": 261, "2023": 261, "3258": 261, "515": 261, "475": 261, "0141": 261, "9798": 261, "476": 261, "4474": 261, "0912": 261, "477": 261, "9181": 261, "5476": 261, "478": 261, "1264": 261, "3269": 261, "479": 261, "0714": 261, "0030": 261, "5317": 261, "5477": 261, "0255": 261, "8628": 261, "481": 261, "1258": 261, "0015": 261, "482": 261, "9650": 261, "4266": 261, "483": 261, "8081": 261, "0004": 261, "4455": 261, "484": 261, "5812": 261, "1719": 261, "485": 261, "1741": 261, "486": 261, "1595": 261, "0089": 261, "936": 261, "487": 261, "1667": 261, "488": 261, "3824": 261, "0093": 261, "6528": 261, "489": 261, "1727": 261, "1435": 261, "059": 261, "490": 261, "0916": 261, "0018": 261, "4518": 261, "9310": 261, "0006": 261, "3553": 261, "492": 261, "9972": 261, "4515": 261, "493": 261, "9493": 261, "8759": 261, "494": 261, "3700": 261, "495": 261, "0269": 261, "4107": 261, "496": 261, "6094": 261, "497": 261, "9116": 261, "1518": 261, "6022": 261, "0047": 261, "2026": 261, "499": 261, "8009": 261, "0007": 261, "1845": 261, "6948": 261, "501": 261, "0971": 261, "0387": 261, "951": 261, "2885": 261, "503": 261, "0894": 261, "2552": 261, "0191": 261, "505": 261, "8276": 261, "506": 261, "9520": 261, "0037": 261, "5835": 261, "0374": 261, "7556": 261, "508": 261, "0579": 261, "0399": 261, "509": 261, "0094": 261, "7127": 261, "510": 261, "0119": 261, "0121": 261, "511": 261, "6013": 261, "0220": 261, "8064": 261, "2684": 261, "8179": 261, "513": 261, "4730": 261, "0046": 261, "5481": 261, "514": 261, "0234": 261, "4331": 261, "8143": 261, "2915": [261, 264], "9051": 261, "0353": 261, "9127": 261, "517": 261, "0527": 261, "6465": 261, "7579": 261, "2010": 261, "3927": 261, "5383": 261, "862": 261, "520": 261, "7386": 261, "1014": 261, "521": 261, "9163": 261, "4487": 261, "522": 261, "5626": 261, "523": 261, "2899": 261, "0113": 261, "524": 261, "6441": 261, "0044": 261, "3965": 261, "525": 261, "5001": 261, "2060": 261, "526": 261, "8905": 261, "4168": 261, "527": 261, "4458": 261, "0012": 261, "051": 261, "528": 261, "9446": 261, "3096": 261, "529": 261, "2399": 261, "1971": 261, "530": 261, "4471": 261, "531": 261, "1270": 261, "0023": 261, "532": 261, "533": 261, "6550": 261, "583": 261, "534": 261, "1092": 261, "0049": 261, "787": 261, "535": 261, "7641": 261, "6674": 261, "536": 261, "0083": 261, "6375": 261, "537": 261, "1713": 261, "4933": 261, "538": 261, "3557": 261, "3964": 261, "539": 261, "0040": 261, "4129": 261, "540": 261, "7999": 261, "541": 261, "2613": 261, "4742": 261, "542": 261, "1826": 261, "934": 261, "543": 261, "3158": 261, "3686": 261, "4047": 261, "545": 261, "7943": 261, "0902": 261, "546": 261, "3889": 261, "547": 261, "4309": 261, "4762": 261, "1662": 261, "9526": 261, "549": 261, "2170": 261, "0520": 261, "4367": 261, "550": 261, "4584": 261, "6931": 261, "0306": 261, "752": 261, "552": 261, "9054": 261, "2062": 261, "553": 261, "9523": 261, "4382": 261, "554": 261, "3534": 261, "0136": 261, "663": 261, "555": 261, "0279": 261, "0171": 261, "5679": 261, "0145": 261, "4652": 261, "557": 261, "1205": 261, "0091": 261, "4838": 261, "0630": 261, "1721": 261, "3604": 261, "560": 261, "1695": 261, "561": 261, "6994": 261, "3646": 261, "0192": 261, "4547": 261, "564": 261, "2580": 261, "2356": 261, "1397": 261, "8400": 261, "7309": 261, "567": 261, "0101": 261, "8539": 261, "1256": 261, "4851": 261, "0284": 261, "570": 261, "7214": 261, "2575": 261, "571": 261, "3996": 261, "572": 261, "2542": 261, "4089": 261, "573": 261, "5782": 261, "0071": 261, "7487": 261, "574": 261, "3665": 261, "0050": 261, "7797": 261, "575": 261, "5660": 261, "1355": 261, "932": 261, "8266": 261, "3782": 261, "743": [261, 264], "578": 261, "1228": 261, "2931": 261, "043": 261, "6242": 261, "580": 261, "7491": 261, "6910": 261, "581": 261, "2258": 261, "0262": 261, "582": 261, "2386": 261, "0249": 261, "816": 261, "2947": 261, "2122": 261, "584": 261, "0096": 261, "0124": 261, "585": 261, "2979": 261, "0156": 261, "586": 261, "3268": 261, "0369": 261, "6409": 261, "4034": 261, "4395": 261, "588": 261, "8407": 261, "4432": 261, "589": 261, "0069": 261, "3628": 261, "590": 261, "591": 261, "3404": 261, "2964": 261, "594": 261, "8374": 261, "4346": 261, "7782": 261, "3826": 261, "7098": 261, "597": 261, "8646": 261, "0526": 261, "598": 261, "7452": 261, "9579": 261, "0991": 261, "889": 261, "600": 261, "0332": 261, "0199": 261, "601": 261, "602": 261, "7237": 261, "3591": 261, "603": 261, "3797": 261, "0022": 261, "6776": 261, "604": 261, "9337": 261, "1918": 261, "605": 261, "6301": 261, "606": 261, "5972": 261, "5044": 261, "2131": 261, "664": 261, "609": 261, "1180": 261, "6142": 261, "610": 261, "5289": 261, "6693": 261, "611": 261, "4947": 261, "612": 261, "2196": 261, "4060": 261, "613": 261, "7377": 261, "3732": 261, "614": 261, "4574": 261, "0997": 261, "3581": 261, "615": 261, "9247": 261, "3012": 261, "616": 261, "3761": 261, "5136": 261, "617": 261, "4771": 261, "894": 261, "0177": 261, "3644": 261, "620": 261, "5914": 261, "621": 261, "4353": 261, "7637": 261, "622": 261, "7577": 261, "1609": 261, "809": 261, "623": [261, 262, 263], "8873": 261, "624": 261, "6568": 261, "5234": 261, "subject": 261, "saw": 261, "880": [261, 263], "explain": 262, "fine": 262, "semat": 262, "r3mtransform": 262, "sake": 262, "embodi": 262, "ai": 262, "env_transform": [262, 265], "s3": 262, "amazonaw": 262, "r3m_50": 262, "374m": 262, "4m": 262, "2mb": 262, "8m": 262, "4mb": 262, "8mb": 262, "0m": 262, "9m": 262, "9mb": 262, "6m": 262, "6mb": 262, "3mb": 262, "107m": 262, "1mb": 262, "115m": 262, "130m": 262, "0mb": 262, "139m": 262, "148m": 262, "164m": 262, "179m": 262, "104mb": 262, "190m": 262, "7mb": 262, "200m": 262, "212m": 262, "5mb": 262, "220m": 262, "229m": 262, "246m": 262, "261m": 262, "270m": 262, "277m": 262, "284m": 262, "293m": 262, "299m": 262, "311m": 262, "328m": 262, "342m": 262, "350m": 262, "360m": 262, "wiser": 262, "again": [262, 265], "conclud": 262, "_storag": 262, "pretrained_model": [262, 263], "torchrl_demo": [263, 264], "701": [263, 264], "7574": [263, 264], "torchrl_env": [263, 265], "4554": 263, "demo": 264, "icml": 264, "dai": 264, "vmoen": 264, "fb": 264, "question": 264, "team": 264, "invest": 264, "platform": 264, "media": 264, "truli": 264, "predominantli": 264, "tensordict1": 264, "tensordict2": 264, "tensordict_sampl": 264, "_sampler": 264, "_sum_tre": 264, "modulenotfounderror": 264, "06984968483448029": 264, "28791671991348267": 264, "gym_env": 264, "noopresetenv": [264, 265], "lazyconv2d": 264, "6400": 264, "backbone_modul": 264, "actor_modul": 264, "params_expand": 264, "tensordict_exp": 264, "base_modul": 264, "0137": 264, "1524": 264, "0641": 264, "copybackward": 264, "1335": 264, "9833": 264, "3497": 264, "6889": 264, "6433": 264, "clampbackward1": 264, "1131": 264, "1761": 264, "3425": 264, "2665": 264, "6207": 264, "1441": 264, "2375": 264, "1372": 264, "3810": 264, "meanbackward1": 264, "roughli": 264, "tensordicts_prealloc": 264, "tensordicts_stack": 264, "tensordict_rollout": [264, 265], "disclaim": 264, "concatmodul": 264, "loss_td": 264, "3391": 264, "_default_get": 264, "1012": 264, "keyerror": 264, "year": 264, "roadmap": 264, "compris": 264, "contributor": 264, "curiou": 264, "feedback": 264, "nascent": 264, "supervis": 265, "unsupervis": 265, "rom": 265, "licens": 265, "pygam": 265, "unifi": 265, "insid": 265, "_build_env": 265, "sphinx_gallery_start_ignor": 265, "filterwarn": 265, "sphinx_gallery_end_ignor": 265, "adventur": 265, "ram": 265, "airraid": 265, "alien": 265, "amidar": 265, "assault": 265, "2029": 265, "exectut": 265, "reproduct": 265, "tensordict_tprim": 265, "imshow": 265, "axesimag": 265, "0x7f49a1462ca0": 265, "inconsist": 265, "swingup": 265, "swingup_spars": 265, "ball_in_cup": 265, "catch": 265, "balance_spars": 265, "three_pol": 265, "two_pol": 265, "finger": 265, "turn_easi": 265, "turn_hard": 265, "fish": 265, "swim": 265, "hopper": 265, "hop": 265, "run_pure_st": 265, "bring_bal": 265, "bring_peg": 265, "insert_bal": 265, "insert_peg": 265, "point_mass": 265, "reacher": 265, "swimmer": 265, "swimmer6": 265, "swimmer15": 265, "walker": 265, "dog": 265, "trot": 265, "humanoid_cmu": 265, "lqr": 265, "lqr_2_1": 265, "lqr_6_2": 265, "quadrup": 265, "escap": 265, "stacker": 265, "stack_2": 265, "stack_4": 265, "wrapper1": 265, "wrapper2": 265, "obviou": 265, "truth": 265, "env0": 265, "env_transformed_bi": 265, "stanc": 265, "transformeddistribut": 265, "base_dist": 265, "concat": 265, "mofidi": 265, "transformedenviron": 265, "moderet": 265, "computation": 265, "legitim": 265, "incom": 265, "amongst": 265, "wor": 265, "convention": 265, "scope": 265, "markovian": 265, "3288080526": 265, "sometim": 265, "constain": 265, "foo": 265, "bar_": 265, "get_someth": 265, "bar_17fa2e8c": 265, "aargh": 265, "foo_list": 265, "vec_env": 265, "_dispatch_caller_parallel": 265, "0x7f493fe9f7f0": 265, "bar_1f637264": 265, "bdfb": 265, "bar_1f65ef9": 265, "b71f": 265, "bar_1f681f94": 265, "be66": 265, "parallen": 265, "carefulli": 265, "commonli": 265, "approxim": 265, "particularili": 265, "evolv": 265, "steadi": 265, "approx": 265, "3506": 265, "1593": 265, "1521": 265, "1352": 265, "_extra_st": 265, "observation_ssq": 265, "observation_sum": 265, "0021": 265, "1500": 265, "1002": 265, "2039": 265, "1990": 265, "dispach": 265, "absor": 265}, "objects": {"torchrl._utils": [[11, 0, 1, "", "implement_for"]], "torchrl.collectors.collectors": [[12, 0, 1, "", "DataCollectorBase"], [13, 0, 1, "", "MultiSyncDataCollector"], [14, 0, 1, "", "MultiaSyncDataCollector"], [15, 0, 1, "", "RandomPolicy"], [16, 0, 1, "", "SyncDataCollector"], [17, 0, 1, "", "aSyncDataCollector"]], "torchrl.collectors.collectors.DataCollectorBase": [[12, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.MultiSyncDataCollector": [[13, 1, 1, "", "load_state_dict"], [13, 1, 1, "", "reset"], [13, 1, 1, "", "set_seed"], [13, 1, 1, "", "shutdown"], [13, 1, 1, "", "state_dict"], [13, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.MultiaSyncDataCollector": [[14, 1, 1, "", "load_state_dict"], [14, 1, 1, "", "reset"], [14, 1, 1, "", "set_seed"], [14, 1, 1, "", "shutdown"], [14, 1, 1, "", "state_dict"], [14, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.SyncDataCollector": [[16, 1, 1, "", "iterator"], [16, 1, 1, "", "load_state_dict"], [16, 1, 1, "", "reset"], [16, 1, 1, "", "rollout"], [16, 1, 1, "", "set_seed"], [16, 1, 1, "", "shutdown"], [16, 1, 1, "", "state_dict"], [16, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.aSyncDataCollector": [[17, 1, 1, "", "load_state_dict"], [17, 1, 1, "", "reset"], [17, 1, 1, "", "set_seed"], [17, 1, 1, "", "shutdown"], [17, 1, 1, "", "state_dict"], [17, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed": [[18, 0, 1, "", "DistributedDataCollector"], [19, 0, 1, "", "DistributedSyncDataCollector"], [20, 0, 1, "", "RPCDataCollector"], [21, 0, 1, "", "RayCollector"], [22, 0, 1, "", "submitit_delayed_launcher"]], "torchrl.collectors.distributed.DistributedDataCollector": [[18, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.DistributedSyncDataCollector": [[19, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.RPCDataCollector": [[20, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.RayCollector": [[21, 1, 1, "", "add_collectors"], [21, 1, 1, "", "load_state_dict"], [21, 1, 1, "", "local_policy"], [21, 1, 1, "", "remote_collectors"], [21, 1, 1, "", "set_seed"], [21, 1, 1, "", "shutdown"], [21, 1, 1, "", "state_dict"], [21, 1, 1, "", "stop_remote_collectors"], [21, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.utils": [[23, 2, 1, "", "split_trajectories"]], "torchrl.data": [[24, 0, 1, "", "BinaryDiscreteTensorSpec"], [25, 0, 1, "", "BoundedTensorSpec"], [26, 0, 1, "", "CompositeSpec"], [27, 0, 1, "", "DiscreteTensorSpec"], [28, 0, 1, "", "MultiDiscreteTensorSpec"], [29, 0, 1, "", "MultiOneHotDiscreteTensorSpec"], [30, 0, 1, "", "MultiStep"], [31, 0, 1, "", "OneHotDiscreteTensorSpec"], [32, 0, 1, "", "PrioritizedReplayBuffer"], [33, 0, 1, "", "ReplayBuffer"], [34, 0, 1, "", "TensorDictPrioritizedReplayBuffer"], [35, 0, 1, "", "TensorDictReplayBuffer"], [36, 0, 1, "", "TensorSpec"], [37, 0, 1, "", "UnboundedContinuousTensorSpec"], [38, 0, 1, "", "UnboundedDiscreteTensorSpec"]], "torchrl.data.BinaryDiscreteTensorSpec": [[24, 1, 1, "", "assert_is_in"], [24, 1, 1, "", "encode"], [24, 1, 1, "", "expand"], [24, 1, 1, "", "implements_for_spec"], [24, 1, 1, "", "index"], [24, 1, 1, "", "is_in"], [24, 1, 1, "", "project"], [24, 1, 1, "", "rand"], [24, 1, 1, "", "squeeze"], [24, 1, 1, "", "to_numpy"], [24, 1, 1, "", "to_one_hot"], [24, 1, 1, "", "to_one_hot_spec"], [24, 1, 1, "", "type_check"], [24, 1, 1, "", "zero"]], "torchrl.data.BoundedTensorSpec": [[25, 1, 1, "", "assert_is_in"], [25, 1, 1, "", "encode"], [25, 1, 1, "", "expand"], [25, 1, 1, "", "implements_for_spec"], [25, 1, 1, "", "index"], [25, 1, 1, "", "is_in"], [25, 1, 1, "", "project"], [25, 1, 1, "", "rand"], [25, 1, 1, "", "squeeze"], [25, 1, 1, "", "to_numpy"], [25, 1, 1, "", "type_check"], [25, 1, 1, "", "zero"]], "torchrl.data.CompositeSpec": [[26, 1, 1, "", "assert_is_in"], [26, 1, 1, "", "encode"], [26, 1, 1, "", "expand"], [26, 1, 1, "", "implements_for_spec"], [26, 1, 1, "", "index"], [26, 1, 1, "", "is_in"], [26, 1, 1, "", "items"], [26, 1, 1, "", "keys"], [26, 1, 1, "", "project"], [26, 1, 1, "", "rand"], [26, 1, 1, "", "squeeze"], [26, 1, 1, "", "to_numpy"], [26, 1, 1, "", "type_check"], [26, 1, 1, "", "values"], [26, 1, 1, "", "zero"]], "torchrl.data.DiscreteTensorSpec": [[27, 1, 1, "", "assert_is_in"], [27, 1, 1, "", "encode"], [27, 1, 1, "", "expand"], [27, 1, 1, "", "implements_for_spec"], [27, 1, 1, "", "index"], [27, 1, 1, "", "is_in"], [27, 1, 1, "", "project"], [27, 1, 1, "", "rand"], [27, 1, 1, "", "squeeze"], [27, 1, 1, "", "to_numpy"], [27, 1, 1, "", "to_one_hot"], [27, 1, 1, "", "to_one_hot_spec"], [27, 1, 1, "", "type_check"], [27, 1, 1, "", "zero"]], "torchrl.data.MultiDiscreteTensorSpec": [[28, 1, 1, "", "assert_is_in"], [28, 1, 1, "", "encode"], [28, 1, 1, "", "expand"], [28, 1, 1, "", "implements_for_spec"], [28, 1, 1, "", "index"], [28, 1, 1, "", "is_in"], [28, 1, 1, "", "project"], [28, 1, 1, "", "rand"], [28, 1, 1, "", "squeeze"], [28, 1, 1, "", "to_numpy"], [28, 1, 1, "", "to_one_hot"], [28, 1, 1, "", "to_one_hot_spec"], [28, 1, 1, "", "type_check"], [28, 1, 1, "", "zero"]], "torchrl.data.MultiOneHotDiscreteTensorSpec": [[29, 1, 1, "", "assert_is_in"], [29, 1, 1, "", "encode"], [29, 1, 1, "", "expand"], [29, 1, 1, "", "implements_for_spec"], [29, 1, 1, "", "index"], [29, 1, 1, "", "is_in"], [29, 1, 1, "", "project"], [29, 1, 1, "", "rand"], [29, 1, 1, "", "squeeze"], [29, 1, 1, "", "to_categorical"], [29, 1, 1, "", "to_categorical_spec"], [29, 1, 1, "", "to_numpy"], [29, 1, 1, "", "type_check"], [29, 1, 1, "", "zero"]], "torchrl.data.MultiStep": [[30, 1, 1, "", "add_module"], [30, 1, 1, "", "apply"], [30, 1, 1, "", "bfloat16"], [30, 1, 1, "", "buffers"], [30, 1, 1, "", "children"], [30, 1, 1, "", "cpu"], [30, 1, 1, "", "cuda"], [30, 1, 1, "", "double"], [30, 1, 1, "", "eval"], [30, 1, 1, "", "extra_repr"], [30, 1, 1, "", "float"], [30, 1, 1, "", "forward"], [30, 1, 1, "", "get_buffer"], [30, 1, 1, "", "get_extra_state"], [30, 1, 1, "", "get_parameter"], [30, 1, 1, "", "get_submodule"], [30, 1, 1, "", "half"], [30, 1, 1, "", "ipu"], [30, 1, 1, "", "load_state_dict"], [30, 1, 1, "", "modules"], [30, 1, 1, "", "named_buffers"], [30, 1, 1, "", "named_children"], [30, 1, 1, "", "named_modules"], [30, 1, 1, "", "named_parameters"], [30, 1, 1, "", "parameters"], [30, 1, 1, "", "register_backward_hook"], [30, 1, 1, "", "register_buffer"], [30, 1, 1, "", "register_forward_hook"], [30, 1, 1, "", "register_forward_pre_hook"], [30, 1, 1, "", "register_full_backward_hook"], [30, 1, 1, "", "register_full_backward_pre_hook"], [30, 1, 1, "", "register_load_state_dict_post_hook"], [30, 1, 1, "", "register_module"], [30, 1, 1, "", "register_parameter"], [30, 1, 1, "", "register_state_dict_pre_hook"], [30, 1, 1, "", "requires_grad_"], [30, 1, 1, "", "set_extra_state"], [30, 1, 1, "", "share_memory"], [30, 1, 1, "", "state_dict"], [30, 1, 1, "", "to"], [30, 1, 1, "", "to_empty"], [30, 1, 1, "", "train"], [30, 1, 1, "", "type"], [30, 1, 1, "", "xpu"], [30, 1, 1, "", "zero_grad"]], "torchrl.data.OneHotDiscreteTensorSpec": [[31, 1, 1, "", "assert_is_in"], [31, 1, 1, "", "encode"], [31, 1, 1, "", "expand"], [31, 1, 1, "", "implements_for_spec"], [31, 1, 1, "", "index"], [31, 1, 1, "", "is_in"], [31, 1, 1, "", "project"], [31, 1, 1, "", "rand"], [31, 1, 1, "", "squeeze"], [31, 1, 1, "", "to_categorical"], [31, 1, 1, "", "to_categorical_spec"], [31, 1, 1, "", "to_numpy"], [31, 1, 1, "", "type_check"], [31, 1, 1, "", "zero"]], "torchrl.data.PrioritizedReplayBuffer": [[32, 1, 1, "", "add"], [32, 1, 1, "", "append_transform"], [32, 1, 1, "", "extend"], [32, 1, 1, "", "insert_transform"], [32, 1, 1, "", "sample"]], "torchrl.data.ReplayBuffer": [[33, 1, 1, "", "add"], [33, 1, 1, "", "append_transform"], [33, 1, 1, "", "extend"], [33, 1, 1, "", "insert_transform"], [33, 1, 1, "", "sample"]], "torchrl.data.TensorDictPrioritizedReplayBuffer": [[34, 1, 1, "", "add"], [34, 1, 1, "", "append_transform"], [34, 1, 1, "", "extend"], [34, 1, 1, "", "insert_transform"], [34, 1, 1, "", "sample"]], "torchrl.data.TensorDictReplayBuffer": [[35, 1, 1, "", "add"], [35, 1, 1, "", "append_transform"], [35, 1, 1, "", "extend"], [35, 1, 1, "", "insert_transform"], [35, 1, 1, "", "sample"]], "torchrl.data.TensorSpec": [[36, 1, 1, "", "assert_is_in"], [36, 1, 1, "", "encode"], [36, 1, 1, "", "expand"], [36, 1, 1, "", "implements_for_spec"], [36, 1, 1, "", "index"], [36, 1, 1, "", "is_in"], [36, 1, 1, "", "project"], [36, 1, 1, "", "rand"], [36, 1, 1, "", "squeeze"], [36, 1, 1, "", "to_numpy"], [36, 1, 1, "", "type_check"], [36, 1, 1, "", "zero"]], "torchrl.data.UnboundedContinuousTensorSpec": [[37, 1, 1, "", "assert_is_in"], [37, 1, 1, "", "encode"], [37, 1, 1, "", "expand"], [37, 1, 1, "", "implements_for_spec"], [37, 1, 1, "", "index"], [37, 1, 1, "", "is_in"], [37, 1, 1, "", "project"], [37, 1, 1, "", "rand"], [37, 1, 1, "", "squeeze"], [37, 1, 1, "", "to_numpy"], [37, 1, 1, "", "type_check"], [37, 1, 1, "", "zero"]], "torchrl.data.UnboundedDiscreteTensorSpec": [[38, 1, 1, "", "assert_is_in"], [38, 1, 1, "", "encode"], [38, 1, 1, "", "expand"], [38, 1, 1, "", "implements_for_spec"], [38, 1, 1, "", "index"], [38, 1, 1, "", "is_in"], [38, 1, 1, "", "project"], [38, 1, 1, "", "rand"], [38, 1, 1, "", "squeeze"], [38, 1, 1, "", "to_numpy"], [38, 1, 1, "", "type_check"], [38, 1, 1, "", "zero"]], "torchrl.data.datasets": [[39, 0, 1, "", "D4RLExperienceReplay"], [40, 0, 1, "", "OpenMLExperienceReplay"]], "torchrl.data.datasets.D4RLExperienceReplay": [[39, 1, 1, "", "add"], [39, 1, 1, "", "append_transform"], [39, 1, 1, "", "extend"], [39, 1, 1, "", "insert_transform"], [39, 1, 1, "", "sample"]], "torchrl.data.datasets.OpenMLExperienceReplay": [[40, 1, 1, "", "add"], [40, 1, 1, "", "append_transform"], [40, 1, 1, "", "extend"], [40, 1, 1, "", "insert_transform"], [40, 1, 1, "", "sample"]], "torchrl.data.replay_buffers": [[41, 0, 1, "", "LazyMemmapStorage"], [42, 0, 1, "", "LazyTensorStorage"], [43, 0, 1, "", "ListStorage"], [44, 0, 1, "", "PrioritizedSampler"], [45, 0, 1, "", "RandomSampler"], [46, 0, 1, "", "RoundRobinWriter"], [47, 0, 1, "", "Sampler"], [48, 0, 1, "", "SamplerWithoutReplacement"], [49, 0, 1, "", "Storage"], [50, 0, 1, "", "Writer"]], "torchrl.data.replay_buffers.LazyMemmapStorage": [[41, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.LazyTensorStorage": [[42, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.ListStorage": [[43, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.PrioritizedSampler": [[44, 1, 1, "", "update_priority"]], "torchrl.data.replay_buffers.RoundRobinWriter": [[46, 1, 1, "", "add"], [46, 1, 1, "", "extend"]], "torchrl.data.replay_buffers.Storage": [[49, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.Writer": [[50, 1, 1, "", "add"], [50, 1, 1, "", "extend"]], "torchrl.envs": [[51, 0, 1, "", "EnvBase"], [52, 0, 1, "", "EnvCreator"], [53, 0, 1, "", "EnvMetaData"], [54, 0, 1, "", "GymLikeEnv"], [55, 2, 1, "", "ModelBasedEnvBase"], [56, 0, 1, "", "MultiThreadedEnv"], [57, 0, 1, "", "ParallelEnv"], [58, 0, 1, "", "SerialEnv"], [55, 1, 1, "", "rand_step"], [55, 1, 1, "", "reset"], [55, 1, 1, "", "rollout"], [55, 1, 1, "", "set_seed"], [55, 1, 1, "", "step"]], "torchrl.envs.EnvBase": [[51, 1, 1, "", "add_module"], [51, 1, 1, "", "apply"], [51, 3, 1, "", "batch_locked"], [51, 1, 1, "", "bfloat16"], [51, 1, 1, "", "buffers"], [51, 1, 1, "", "children"], [51, 1, 1, "", "cpu"], [51, 1, 1, "", "cuda"], [51, 1, 1, "", "double"], [51, 1, 1, "", "eval"], [51, 1, 1, "", "extra_repr"], [51, 1, 1, "", "fake_tensordict"], [51, 1, 1, "", "float"], [51, 1, 1, "", "forward"], [51, 1, 1, "", "get_buffer"], [51, 1, 1, "", "get_extra_state"], [51, 1, 1, "", "get_parameter"], [51, 1, 1, "", "get_submodule"], [51, 1, 1, "", "half"], [51, 1, 1, "", "ipu"], [51, 1, 1, "", "load_state_dict"], [51, 1, 1, "", "modules"], [51, 1, 1, "", "named_buffers"], [51, 1, 1, "", "named_children"], [51, 1, 1, "", "named_modules"], [51, 1, 1, "", "named_parameters"], [51, 1, 1, "", "parameters"], [51, 1, 1, "", "rand_action"], [51, 1, 1, "id0", "rand_step"], [51, 1, 1, "", "register_backward_hook"], [51, 1, 1, "", "register_buffer"], [51, 1, 1, "", "register_forward_hook"], [51, 1, 1, "", "register_forward_pre_hook"], [51, 1, 1, "", "register_full_backward_hook"], [51, 1, 1, "", "register_full_backward_pre_hook"], [51, 1, 1, "", "register_load_state_dict_post_hook"], [51, 1, 1, "", "register_module"], [51, 1, 1, "", "register_parameter"], [51, 1, 1, "", "register_state_dict_pre_hook"], [51, 1, 1, "", "requires_grad_"], [51, 1, 1, "id1", "reset"], [51, 1, 1, "id2", "rollout"], [51, 1, 1, "", "set_extra_state"], [51, 1, 1, "id3", "set_seed"], [51, 1, 1, "", "share_memory"], [51, 3, 1, "", "specs"], [51, 1, 1, "", "state_dict"], [51, 1, 1, "id4", "step"], [51, 1, 1, "", "to"], [51, 1, 1, "", "to_empty"], [51, 1, 1, "", "train"], [51, 1, 1, "", "type"], [51, 1, 1, "", "xpu"], [51, 1, 1, "", "zero_grad"]], "torchrl.envs.GymLikeEnv": [[54, 1, 1, "", "add_module"], [54, 1, 1, "", "apply"], [54, 3, 1, "", "batch_locked"], [54, 1, 1, "", "bfloat16"], [54, 1, 1, "", "buffers"], [54, 1, 1, "", "children"], [54, 1, 1, "", "close"], [54, 1, 1, "", "cpu"], [54, 1, 1, "", "cuda"], [54, 1, 1, "", "double"], [54, 1, 1, "", "eval"], [54, 1, 1, "", "extra_repr"], [54, 1, 1, "", "fake_tensordict"], [54, 1, 1, "", "float"], [54, 1, 1, "", "forward"], [54, 1, 1, "", "get_buffer"], [54, 1, 1, "", "get_extra_state"], [54, 1, 1, "", "get_parameter"], [54, 1, 1, "", "get_submodule"], [54, 1, 1, "", "half"], [54, 1, 1, "", "ipu"], [54, 1, 1, "", "load_state_dict"], [54, 1, 1, "", "modules"], [54, 1, 1, "", "named_buffers"], [54, 1, 1, "", "named_children"], [54, 1, 1, "", "named_modules"], [54, 1, 1, "", "named_parameters"], [54, 1, 1, "", "parameters"], [54, 1, 1, "", "rand_action"], [54, 1, 1, "", "rand_step"], [54, 1, 1, "", "read_action"], [54, 1, 1, "", "read_done"], [54, 1, 1, "", "read_obs"], [54, 1, 1, "", "read_reward"], [54, 1, 1, "", "register_backward_hook"], [54, 1, 1, "", "register_buffer"], [54, 1, 1, "", "register_forward_hook"], [54, 1, 1, "", "register_forward_pre_hook"], [54, 1, 1, "", "register_full_backward_hook"], [54, 1, 1, "", "register_full_backward_pre_hook"], [54, 1, 1, "", "register_load_state_dict_post_hook"], [54, 1, 1, "", "register_module"], [54, 1, 1, "", "register_parameter"], [54, 1, 1, "", "register_state_dict_pre_hook"], [54, 1, 1, "", "requires_grad_"], [54, 1, 1, "", "reset"], [54, 1, 1, "", "rollout"], [54, 1, 1, "", "set_extra_state"], [54, 1, 1, "", "set_info_dict_reader"], [54, 1, 1, "", "set_seed"], [54, 1, 1, "", "share_memory"], [54, 3, 1, "", "specs"], [54, 1, 1, "", "state_dict"], [54, 1, 1, "", "step"], [54, 1, 1, "", "to"], [54, 1, 1, "", "to_empty"], [54, 1, 1, "", "train"], [54, 1, 1, "", "type"], [54, 1, 1, "", "xpu"], [54, 1, 1, "", "zero_grad"]], "torchrl.envs.MultiThreadedEnv": [[56, 1, 1, "", "add_module"], [56, 1, 1, "", "apply"], [56, 3, 1, "", "batch_locked"], [56, 1, 1, "", "bfloat16"], [56, 1, 1, "", "buffers"], [56, 1, 1, "", "children"], [56, 1, 1, "", "close"], [56, 1, 1, "", "cpu"], [56, 1, 1, "", "cuda"], [56, 1, 1, "", "double"], [56, 1, 1, "", "eval"], [56, 1, 1, "", "extra_repr"], [56, 1, 1, "", "fake_tensordict"], [56, 1, 1, "", "float"], [56, 1, 1, "", "forward"], [56, 1, 1, "", "get_buffer"], [56, 1, 1, "", "get_extra_state"], [56, 1, 1, "", "get_parameter"], [56, 1, 1, "", "get_submodule"], [56, 1, 1, "", "half"], [56, 1, 1, "", "ipu"], [56, 1, 1, "", "load_state_dict"], [56, 1, 1, "", "modules"], [56, 1, 1, "", "named_buffers"], [56, 1, 1, "", "named_children"], [56, 1, 1, "", "named_modules"], [56, 1, 1, "", "named_parameters"], [56, 1, 1, "", "parameters"], [56, 1, 1, "", "rand_action"], [56, 1, 1, "", "rand_step"], [56, 1, 1, "", "register_backward_hook"], [56, 1, 1, "", "register_buffer"], [56, 1, 1, "", "register_forward_hook"], [56, 1, 1, "", "register_forward_pre_hook"], [56, 1, 1, "", "register_full_backward_hook"], [56, 1, 1, "", "register_full_backward_pre_hook"], [56, 1, 1, "", "register_load_state_dict_post_hook"], [56, 1, 1, "", "register_module"], [56, 1, 1, "", "register_parameter"], [56, 1, 1, "", "register_state_dict_pre_hook"], [56, 1, 1, "", "requires_grad_"], [56, 1, 1, "", "reset"], [56, 1, 1, "", "rollout"], [56, 1, 1, "", "set_extra_state"], [56, 1, 1, "", "set_seed"], [56, 1, 1, "", "share_memory"], [56, 3, 1, "", "specs"], [56, 1, 1, "", "state_dict"], [56, 1, 1, "", "step"], [56, 1, 1, "", "to"], [56, 1, 1, "", "to_empty"], [56, 1, 1, "", "train"], [56, 1, 1, "", "type"], [56, 1, 1, "", "xpu"], [56, 1, 1, "", "zero_grad"]], "torchrl.envs.ParallelEnv": [[57, 1, 1, "", "add_module"], [57, 1, 1, "", "apply"], [57, 3, 1, "", "batch_locked"], [57, 1, 1, "", "bfloat16"], [57, 1, 1, "", "buffers"], [57, 1, 1, "", "children"], [57, 1, 1, "", "cpu"], [57, 1, 1, "", "cuda"], [57, 1, 1, "", "double"], [57, 1, 1, "", "eval"], [57, 1, 1, "", "extra_repr"], [57, 1, 1, "", "fake_tensordict"], [57, 1, 1, "", "float"], [57, 1, 1, "", "forward"], [57, 1, 1, "", "get_buffer"], [57, 1, 1, "", "get_extra_state"], [57, 1, 1, "", "get_parameter"], [57, 1, 1, "", "get_submodule"], [57, 1, 1, "", "half"], [57, 1, 1, "", "ipu"], [57, 1, 1, "", "load_state_dict"], [57, 1, 1, "", "modules"], [57, 1, 1, "", "named_buffers"], [57, 1, 1, "", "named_children"], [57, 1, 1, "", "named_modules"], [57, 1, 1, "", "named_parameters"], [57, 1, 1, "", "parameters"], [57, 1, 1, "", "rand_action"], [57, 1, 1, "", "rand_step"], [57, 1, 1, "", "register_backward_hook"], [57, 1, 1, "", "register_buffer"], [57, 1, 1, "", "register_forward_hook"], [57, 1, 1, "", "register_forward_pre_hook"], [57, 1, 1, "", "register_full_backward_hook"], [57, 1, 1, "", "register_full_backward_pre_hook"], [57, 1, 1, "", "register_load_state_dict_post_hook"], [57, 1, 1, "", "register_module"], [57, 1, 1, "", "register_parameter"], [57, 1, 1, "", "register_state_dict_pre_hook"], [57, 1, 1, "", "requires_grad_"], [57, 1, 1, "", "reset"], [57, 1, 1, "", "rollout"], [57, 1, 1, "", "set_extra_state"], [57, 1, 1, "", "set_seed"], [57, 1, 1, "", "share_memory"], [57, 3, 1, "", "specs"], [57, 1, 1, "", "state_dict"], [57, 1, 1, "", "step"], [57, 1, 1, "", "to"], [57, 1, 1, "", "to_empty"], [57, 1, 1, "", "train"], [57, 1, 1, "", "type"], [57, 1, 1, "", "update_kwargs"], [57, 1, 1, "", "xpu"], [57, 1, 1, "", "zero_grad"]], "torchrl.envs.SerialEnv": [[58, 1, 1, "", "add_module"], [58, 1, 1, "", "apply"], [58, 3, 1, "", "batch_locked"], [58, 1, 1, "", "bfloat16"], [58, 1, 1, "", "buffers"], [58, 1, 1, "", "children"], [58, 1, 1, "", "cpu"], [58, 1, 1, "", "cuda"], [58, 1, 1, "", "double"], [58, 1, 1, "", "eval"], [58, 1, 1, "", "extra_repr"], [58, 1, 1, "", "fake_tensordict"], [58, 1, 1, "", "float"], [58, 1, 1, "", "forward"], [58, 1, 1, "", "get_buffer"], [58, 1, 1, "", "get_extra_state"], [58, 1, 1, "", "get_parameter"], [58, 1, 1, "", "get_submodule"], [58, 1, 1, "", "half"], [58, 1, 1, "", "ipu"], [58, 1, 1, "", "load_state_dict"], [58, 1, 1, "", "modules"], [58, 1, 1, "", "named_buffers"], [58, 1, 1, "", "named_children"], [58, 1, 1, "", "named_modules"], [58, 1, 1, "", "named_parameters"], [58, 1, 1, "", "parameters"], [58, 1, 1, "", "rand_action"], [58, 1, 1, "", "rand_step"], [58, 1, 1, "", "register_backward_hook"], [58, 1, 1, "", "register_buffer"], [58, 1, 1, "", "register_forward_hook"], [58, 1, 1, "", "register_forward_pre_hook"], [58, 1, 1, "", "register_full_backward_hook"], [58, 1, 1, "", "register_full_backward_pre_hook"], [58, 1, 1, "", "register_load_state_dict_post_hook"], [58, 1, 1, "", "register_module"], [58, 1, 1, "", "register_parameter"], [58, 1, 1, "", "register_state_dict_pre_hook"], [58, 1, 1, "", "requires_grad_"], [58, 1, 1, "", "reset"], [58, 1, 1, "", "rollout"], [58, 1, 1, "", "set_extra_state"], [58, 1, 1, "", "set_seed"], [58, 1, 1, "", "share_memory"], [58, 3, 1, "", "specs"], [58, 1, 1, "", "state_dict"], [58, 1, 1, "", "step"], [58, 1, 1, "", "to"], [58, 1, 1, "", "to_empty"], [58, 1, 1, "", "train"], [58, 1, 1, "", "type"], [58, 1, 1, "", "update_kwargs"], [58, 1, 1, "", "xpu"], [58, 1, 1, "", "zero_grad"]], "torchrl.envs.libs.brax": [[59, 2, 1, "", "BraxEnv"], [60, 2, 1, "", "BraxWrapper"]], "torchrl.envs.libs.dm_control": [[61, 2, 1, "", "DMControlEnv"], [62, 2, 1, "", "DMControlWrapper"]], "torchrl.envs.libs.gym": [[63, 2, 1, "", "GymEnv"], [64, 2, 1, "", "GymWrapper"]], "torchrl.envs.libs.habitat": [[65, 2, 1, "", "HabitatEnv"]], "torchrl.envs.libs.jumanji": [[66, 2, 1, "", "JumanjiEnv"], [67, 2, 1, "", "JumanjiWrapper"]], "torchrl.envs.libs.openml": [[68, 2, 1, "", "OpenMLEnv"]], "torchrl.envs.libs.vmas": [[69, 2, 1, "", "VmasEnv"], [70, 2, 1, "", "VmasWrapper"]], "torchrl.envs.model_based.dreamer": [[71, 2, 1, "", "DreamerEnv"]], "torchrl.envs.transforms": [[72, 0, 1, "", "BinarizeReward"], [73, 0, 1, "", "CatFrames"], [74, 0, 1, "", "CatTensors"], [75, 0, 1, "", "CenterCrop"], [76, 0, 1, "", "Compose"], [77, 0, 1, "", "DiscreteActionProjection"], [78, 0, 1, "", "DoubleToFloat"], [79, 0, 1, "", "ExcludeTransform"], [80, 0, 1, "", "FiniteTensorDictCheck"], [81, 0, 1, "", "FlattenObservation"], [82, 0, 1, "", "FrameSkipTransform"], [83, 0, 1, "", "GrayScale"], [84, 0, 1, "", "InitTracker"], [85, 0, 1, "", "NoopResetEnv"], [86, 0, 1, "", "ObservationNorm"], [87, 0, 1, "", "ObservationTransform"], [88, 0, 1, "", "PinMemoryTransform"], [89, 0, 1, "", "R3MTransform"], [90, 0, 1, "", "RandomCropTensorDict"], [91, 0, 1, "", "RenameTransform"], [92, 0, 1, "", "Resize"], [93, 0, 1, "", "RewardClipping"], [94, 0, 1, "", "RewardScaling"], [95, 0, 1, "", "RewardSum"], [96, 0, 1, "", "SelectTransform"], [97, 0, 1, "", "SqueezeTransform"], [98, 0, 1, "", "StepCounter"], [99, 0, 1, "", "TensorDictPrimer"], [100, 0, 1, "", "TimeMaxPool"], [101, 0, 1, "", "ToTensorImage"], [102, 0, 1, "", "Transform"], [103, 0, 1, "", "TransformedEnv"], [104, 0, 1, "", "UnsqueezeTransform"], [105, 0, 1, "", "VIPRewardTransform"], [106, 0, 1, "", "VIPTransform"], [107, 0, 1, "", "VecNorm"], [108, 0, 1, "", "gSDENoise"]], "torchrl.envs.transforms.BinarizeReward": [[72, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.CatFrames": [[73, 1, 1, "", "forward"], [73, 1, 1, "", "reset"], [73, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CatTensors": [[74, 1, 1, "", "forward"], [74, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CenterCrop": [[75, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Compose": [[76, 1, 1, "", "forward"], [76, 1, 1, "", "reset"], [76, 1, 1, "", "to"], [76, 1, 1, "", "transform_input_spec"], [76, 1, 1, "", "transform_observation_spec"], [76, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.DiscreteActionProjection": [[77, 1, 1, "", "transform_input_spec"]], "torchrl.envs.transforms.DoubleToFloat": [[78, 1, 1, "", "transform_input_spec"], [78, 1, 1, "", "transform_observation_spec"], [78, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.ExcludeTransform": [[79, 1, 1, "", "forward"], [79, 1, 1, "", "reset"], [79, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FiniteTensorDictCheck": [[80, 1, 1, "", "forward"]], "torchrl.envs.transforms.FlattenObservation": [[81, 1, 1, "", "forward"], [81, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FrameSkipTransform": [[82, 1, 1, "", "forward"]], "torchrl.envs.transforms.GrayScale": [[83, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.InitTracker": [[84, 1, 1, "", "forward"], [84, 1, 1, "", "reset"], [84, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.NoopResetEnv": [[85, 1, 1, "", "reset"]], "torchrl.envs.transforms.ObservationNorm": [[86, 1, 1, "", "init_stats"], [86, 1, 1, "", "transform_input_spec"], [86, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.PinMemoryTransform": [[88, 1, 1, "", "forward"]], "torchrl.envs.transforms.R3MTransform": [[89, 1, 1, "", "to"]], "torchrl.envs.transforms.RandomCropTensorDict": [[90, 1, 1, "", "forward"]], "torchrl.envs.transforms.RenameTransform": [[91, 1, 1, "", "forward"], [91, 1, 1, "", "transform_input_spec"], [91, 1, 1, "", "transform_output_spec"]], "torchrl.envs.transforms.Resize": [[92, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.RewardClipping": [[93, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardScaling": [[94, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardSum": [[95, 1, 1, "", "forward"], [95, 1, 1, "", "reset"], [95, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.SelectTransform": [[96, 1, 1, "", "forward"], [96, 1, 1, "", "reset"], [96, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.StepCounter": [[98, 1, 1, "", "forward"], [98, 1, 1, "", "reset"], [98, 1, 1, "", "transform_input_spec"], [98, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TensorDictPrimer": [[99, 1, 1, "", "forward"], [99, 1, 1, "", "reset"], [99, 1, 1, "", "to"], [99, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TimeMaxPool": [[100, 1, 1, "", "forward"], [100, 1, 1, "", "reset"], [100, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.ToTensorImage": [[101, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Transform": [[102, 1, 1, "", "forward"], [102, 1, 1, "", "reset"], [102, 1, 1, "", "transform_done_spec"], [102, 1, 1, "", "transform_input_spec"], [102, 1, 1, "", "transform_observation_spec"], [102, 1, 1, "", "transform_output_spec"], [102, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.TransformedEnv": [[103, 3, 1, "", "action_spec"], [103, 3, 1, "", "batch_locked"], [103, 3, 1, "", "done_spec"], [103, 1, 1, "", "eval"], [103, 3, 1, "", "input_spec"], [103, 1, 1, "", "load_state_dict"], [103, 3, 1, "", "observation_spec"], [103, 3, 1, "", "output_spec"], [103, 3, 1, "", "reward_spec"], [103, 1, 1, "", "set_seed"], [103, 1, 1, "", "state_dict"], [103, 1, 1, "", "to"], [103, 1, 1, "", "train"]], "torchrl.envs.transforms.UnsqueezeTransform": [[104, 1, 1, "", "transform_input_spec"], [104, 1, 1, "", "transform_observation_spec"], [104, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.VIPRewardTransform": [[105, 1, 1, "", "forward"], [105, 1, 1, "", "reset"]], "torchrl.envs.transforms.VIPTransform": [[106, 1, 1, "", "to"]], "torchrl.envs.transforms.VecNorm": [[107, 1, 1, "", "build_td_for_shared_vecnorm"], [107, 1, 1, "", "forward"], [107, 1, 1, "", "get_extra_state"], [107, 1, 1, "", "set_extra_state"], [107, 1, 1, "", "to_observation_norm"]], "torchrl.envs.utils": [[109, 2, 1, "", "check_env_specs"], [110, 2, 1, "", "exploration_mode"], [111, 2, 1, "", "get_available_libraries"], [112, 2, 1, "", "make_composite_from_td"], [113, 2, 1, "", "set_exploration_mode"], [114, 2, 1, "", "step_mdp"]], "torchrl.modules": [[115, 0, 1, "", "CEMPlanner"], [116, 0, 1, "", "ConvNet"], [117, 0, 1, "", "DdpgCnnActor"], [118, 0, 1, "", "DdpgCnnQNet"], [119, 0, 1, "", "DdpgMlpActor"], [120, 0, 1, "", "DdpgMlpQNet"], [121, 0, 1, "", "Delta"], [122, 0, 1, "", "DistributionalDQNnet"], [123, 0, 1, "", "DistributionalQValueHook"], [124, 0, 1, "", "DreamerActor"], [125, 0, 1, "", "DuelingCnnDQNet"], [126, 0, 1, "", "IndependentNormal"], [127, 0, 1, "", "LSTMNet"], [128, 0, 1, "", "MLP"], [129, 0, 1, "", "MPCPlannerBase"], [130, 0, 1, "", "MPPIPlanner"], [131, 0, 1, "", "NoisyLazyLinear"], [132, 0, 1, "", "NoisyLinear"], [133, 0, 1, "", "NormalParamWrapper"], [134, 0, 1, "", "ObsDecoder"], [135, 0, 1, "", "ObsEncoder"], [136, 0, 1, "", "OneHotCategorical"], [137, 0, 1, "", "QValueHook"], [138, 0, 1, "", "RSSMPosterior"], [139, 0, 1, "", "RSSMPrior"], [140, 0, 1, "", "TanhDelta"], [141, 0, 1, "", "TanhNormal"], [142, 0, 1, "", "TruncatedNormal"], [143, 0, 1, "", "reset_noise"]], "torchrl.modules.CEMPlanner": [[115, 1, 1, "", "planning"]], "torchrl.modules.ConvNet": [[116, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnActor": [[117, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnQNet": [[118, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpActor": [[119, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpQNet": [[120, 1, 1, "", "forward"]], "torchrl.modules.Delta": [[121, 1, 1, "", "log_prob"], [121, 3, 1, "", "mean"], [121, 3, 1, "", "mode"], [121, 1, 1, "", "rsample"], [121, 1, 1, "", "sample"]], "torchrl.modules.DistributionalDQNnet": [[122, 1, 1, "", "forward"]], "torchrl.modules.DreamerActor": [[124, 1, 1, "", "forward"]], "torchrl.modules.DuelingCnnDQNet": [[125, 1, 1, "", "forward"]], "torchrl.modules.IndependentNormal": [[126, 3, 1, "", "mode"]], "torchrl.modules.LSTMNet": [[127, 1, 1, "", "forward"]], "torchrl.modules.MLP": [[128, 1, 1, "", "forward"]], "torchrl.modules.MPCPlannerBase": [[129, 1, 1, "", "forward"], [129, 1, 1, "", "planning"]], "torchrl.modules.MPPIPlanner": [[130, 1, 1, "", "planning"]], "torchrl.modules.NoisyLazyLinear": [[131, 1, 1, "", "initialize_parameters"]], "torchrl.modules.NormalParamWrapper": [[133, 1, 1, "", "forward"]], "torchrl.modules.ObsDecoder": [[134, 1, 1, "", "forward"]], "torchrl.modules.ObsEncoder": [[135, 1, 1, "", "forward"]], "torchrl.modules.OneHotCategorical": [[136, 1, 1, "", "log_prob"], [136, 3, 1, "", "mode"], [136, 1, 1, "", "rsample"], [136, 1, 1, "", "sample"]], "torchrl.modules.RSSMPosterior": [[138, 1, 1, "", "forward"]], "torchrl.modules.RSSMPrior": [[139, 1, 1, "", "forward"]], "torchrl.modules.TanhDelta": [[140, 3, 1, "", "mean"], [140, 3, 1, "", "mode"]], "torchrl.modules.TanhNormal": [[141, 3, 1, "", "mode"]], "torchrl.modules.TruncatedNormal": [[142, 1, 1, "", "log_prob"], [142, 3, 1, "", "mode"]], "torchrl.modules.tensordict_module": [[144, 0, 1, "", "Actor"], [145, 0, 1, "", "ActorCriticOperator"], [146, 0, 1, "", "ActorCriticWrapper"], [147, 0, 1, "", "ActorValueOperator"], [148, 0, 1, "", "AdditiveGaussianWrapper"], [149, 0, 1, "", "DistributionalQValueActor"], [150, 0, 1, "", "EGreedyWrapper"], [151, 0, 1, "", "OrnsteinUhlenbeckProcessWrapper"], [152, 0, 1, "", "ProbabilisticActor"], [153, 0, 1, "", "QValueActor"], [154, 0, 1, "", "SafeModule"], [155, 0, 1, "", "SafeProbabilisticModule"], [156, 0, 1, "", "SafeProbabilisticTensorDictSequential"], [157, 0, 1, "", "SafeSequential"], [158, 0, 1, "", "ValueOperator"], [159, 0, 1, "", "WorldModelWrapper"]], "torchrl.modules.tensordict_module.ActorCriticOperator": [[145, 1, 1, "", "get_critic_operator"], [145, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorCriticWrapper": [[146, 1, 1, "", "get_policy_operator"], [146, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorValueOperator": [[147, 1, 1, "", "get_policy_operator"], [147, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.AdditiveGaussianWrapper": [[148, 1, 1, "", "forward"], [148, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.EGreedyWrapper": [[150, 1, 1, "", "forward"], [150, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper": [[151, 1, 1, "", "forward"], [151, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.SafeModule": [[154, 1, 1, "", "random"], [154, 1, 1, "", "random_sample"], [154, 1, 1, "", "to"]], "torchrl.modules.tensordict_module.SafeProbabilisticModule": [[155, 1, 1, "", "random"], [155, 1, 1, "", "random_sample"]], "torchrl.modules.tensordict_module.WorldModelWrapper": [[159, 1, 1, "", "get_reward_operator"], [159, 1, 1, "", "get_transition_model_operator"]], "torchrl.modules.utils": [[160, 0, 1, "", "biased_softplus"], [161, 0, 1, "", "inv_softplus"], [162, 0, 1, "", "mappings"]], "torchrl.modules.utils.biased_softplus": [[160, 1, 1, "", "forward"]], "torchrl.objectives": [[163, 0, 1, "", "A2CLoss"], [164, 0, 1, "", "ClipPPOLoss"], [165, 0, 1, "", "DDPGLoss"], [166, 0, 1, "", "DQNLoss"], [167, 0, 1, "", "DiscreteSACLoss"], [168, 0, 1, "", "DistributionalDQNLoss"], [169, 0, 1, "", "DreamerActorLoss"], [170, 0, 1, "", "DreamerModelLoss"], [171, 0, 1, "", "DreamerValueLoss"], [172, 0, 1, "", "HardUpdate"], [173, 0, 1, "", "IQLLoss"], [174, 0, 1, "", "KLPENPPOLoss"], [175, 0, 1, "", "LossModule"], [176, 0, 1, "", "PPOLoss"], [177, 0, 1, "", "REDQLoss"], [178, 0, 1, "", "ReinforceLoss"], [179, 0, 1, "", "SACLoss"], [180, 0, 1, "", "SoftUpdate"], [181, 0, 1, "", "TD3Loss"], [182, 0, 1, "", "ValueEstimators"], [183, 0, 1, "", "default_value_kwargs"], [184, 0, 1, "", "distance_loss"], [185, 0, 1, "", "hold_out_net"], [186, 0, 1, "", "hold_out_params"], [187, 0, 1, "", "next_state_value"]], "torchrl.objectives.A2CLoss": [[163, 1, 1, "", "forward"], [163, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.ClipPPOLoss": [[164, 1, 1, "", "forward"]], "torchrl.objectives.DDPGLoss": [[165, 1, 1, "", "forward"], [165, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DQNLoss": [[166, 1, 1, "", "forward"], [166, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DiscreteSACLoss": [[167, 1, 1, "", "forward"], [167, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DistributionalDQNLoss": [[168, 1, 1, "", "forward"], [168, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DreamerActorLoss": [[169, 1, 1, "", "forward"], [169, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DreamerModelLoss": [[170, 1, 1, "", "forward"]], "torchrl.objectives.DreamerValueLoss": [[171, 1, 1, "", "forward"]], "torchrl.objectives.IQLLoss": [[173, 1, 1, "", "forward"], [173, 1, 1, "", "loss_value_diff"], [173, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.KLPENPPOLoss": [[174, 1, 1, "", "forward"]], "torchrl.objectives.LossModule": [[175, 1, 1, "", "convert_to_functional"], [175, 1, 1, "", "cpu"], [175, 1, 1, "", "cuda"], [175, 1, 1, "", "double"], [175, 1, 1, "", "float"], [175, 1, 1, "", "forward"], [175, 1, 1, "", "half"], [175, 1, 1, "", "make_value_estimator"], [175, 1, 1, "", "named_parameters"], [175, 1, 1, "", "parameters"], [175, 1, 1, "", "register_buffer"], [175, 1, 1, "", "to"], [175, 3, 1, "", "value_estimator"]], "torchrl.objectives.PPOLoss": [[176, 1, 1, "", "forward"], [176, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.REDQLoss": [[177, 1, 1, "", "forward"], [177, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.ReinforceLoss": [[178, 1, 1, "", "forward"], [178, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.SACLoss": [[179, 1, 1, "", "forward"], [179, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.TD3Loss": [[181, 1, 1, "", "forward"], [181, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.value": [[188, 0, 1, "", "GAE"], [189, 0, 1, "", "TD0Estimator"], [190, 0, 1, "", "TD1Estimator"], [191, 0, 1, "", "TDLambdaEstimator"], [192, 0, 1, "", "ValueEstimatorBase"]], "torchrl.objectives.value.GAE": [[188, 1, 1, "", "forward"], [188, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.TD0Estimator": [[189, 1, 1, "", "forward"], [189, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.TD1Estimator": [[190, 1, 1, "", "forward"], [190, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.TDLambdaEstimator": [[191, 1, 1, "", "forward"], [191, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.ValueEstimatorBase": [[192, 1, 1, "", "forward"], [192, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.functional": [[193, 0, 1, "", "generalized_advantage_estimate"], [194, 0, 1, "", "td0_advantage_estimate"], [195, 0, 1, "", "td0_return_estimate"], [196, 0, 1, "", "td1_advantage_estimate"], [197, 0, 1, "", "td1_return_estimate"], [198, 0, 1, "", "td_lambda_advantage_estimate"], [199, 0, 1, "", "td_lambda_return_estimate"], [200, 0, 1, "", "vec_generalized_advantage_estimate"], [201, 0, 1, "", "vec_td1_advantage_estimate"], [202, 0, 1, "", "vec_td1_return_estimate"], [203, 0, 1, "", "vec_td_lambda_advantage_estimate"], [204, 0, 1, "", "vec_td_lambda_return_estimate"]], "torchrl.record": [[205, 2, 1, "", "TensorDictRecorder"], [206, 2, 1, "", "VideoRecorder"]], "torchrl.record.loggers": [[207, 2, 1, "", "Logger"], [209, 2, 1, "", "generate_exp_name"], [210, 2, 1, "", "get_logger"]], "torchrl.record.loggers.csv": [[208, 2, 1, "", "CSVLogger"]], "torchrl.record.loggers.mlflow": [[211, 2, 1, "", "MLFlowLogger"]], "torchrl.record.loggers.tensorboard": [[212, 2, 1, "", "TensorboardLogger"]], "torchrl.record.loggers.wandb": [[213, 2, 1, "", "WandbLogger"]], "torchrl.trainers": [[214, 0, 1, "", "BatchSubSampler"], [215, 0, 1, "", "ClearCudaCache"], [216, 0, 1, "", "CountFramesLog"], [217, 0, 1, "", "LogReward"], [218, 0, 1, "", "OptimizerHook"], [219, 0, 1, "", "Recorder"], [220, 0, 1, "", "ReplayBufferTrainer"], [221, 0, 1, "", "RewardNormalizer"], [222, 0, 1, "", "SelectKeys"], [223, 0, 1, "", "Trainer"], [224, 0, 1, "", "TrainerHookBase"], [225, 0, 1, "", "UpdateWeights"]], "torchrl.trainers.BatchSubSampler": [[214, 1, 1, "", "register"]], "torchrl.trainers.ClearCudaCache": [[215, 1, 1, "", "register"]], "torchrl.trainers.CountFramesLog": [[216, 1, 1, "", "register"]], "torchrl.trainers.LogReward": [[217, 1, 1, "", "register"]], "torchrl.trainers.OptimizerHook": [[218, 1, 1, "", "register"]], "torchrl.trainers.Recorder": [[219, 1, 1, "", "register"]], "torchrl.trainers.ReplayBufferTrainer": [[220, 1, 1, "", "register"]], "torchrl.trainers.RewardNormalizer": [[221, 1, 1, "", "register"]], "torchrl.trainers.SelectKeys": [[222, 1, 1, "", "register"]], "torchrl.trainers.TrainerHookBase": [[224, 1, 1, "", "register"]], "torchrl.trainers.UpdateWeights": [[225, 1, 1, "", "register"]], "torchrl.trainers.helpers": [[226, 2, 1, "", "correct_for_frame_skip"], [227, 2, 1, "", "get_stats_random_rollout"], [228, 2, 1, "", "make_a2c_loss"], [229, 2, 1, "", "make_a2c_model"], [230, 2, 1, "", "make_collector_offpolicy"], [231, 2, 1, "", "make_collector_onpolicy"], [232, 2, 1, "", "make_ddpg_actor"], [233, 2, 1, "", "make_ddpg_loss"], [234, 2, 1, "", "make_dqn_actor"], [235, 2, 1, "", "make_dqn_loss"], [236, 2, 1, "", "make_ppo_loss"], [237, 2, 1, "", "make_ppo_model"], [238, 2, 1, "", "make_redq_loss"], [239, 2, 1, "", "make_redq_model"], [240, 2, 1, "", "make_replay_buffer"], [241, 2, 1, "", "make_sac_loss"], [242, 2, 1, "", "make_sac_model"], [243, 2, 1, "", "make_target_updater"], [244, 2, 1, "", "make_trainer"], [245, 2, 1, "", "parallel_env_constructor"], [246, 2, 1, "", "sync_async_collector"], [247, 2, 1, "", "sync_sync_collector"], [248, 2, 1, "", "transformed_env_constructor"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "property", "Python property"]}, "titleterms": {"welcom": 0, "torchrl": [0, 1, 2, 3, 6, 252, 253, 254, 255, 256, 257, 258, 261, 264, 265], "document": [0, 9], "tutori": [0, 258], "basic": 0, "intermedi": [0, 8], "advanc": 0, "refer": [0, 250], "knowledg": [0, 251], "base": [0, 7, 251], "indic": 0, "tabl": 0, "collector": [1, 256, 257, 258, 264], "packag": [1, 2, 3, 252, 253, 254, 255], "singl": [1, 4], "node": 1, "data": [1, 2, 4, 256, 257, 258, 264], "distribut": [1, 252], "helper": [1, 3], "function": [1, 4, 253, 257, 258, 264], "replai": [2, 256, 257, 258, 264], "buffer": [2, 256, 257, 258, 264], "compos": [2, 76], "store": [2, 257], "trajectori": 2, "dataset": 2, "tensorspec": [2, 36], "util": [2, 252, 253, 254], "env": [3, 261, 264, 265], "vector": [3, 264], "transform": [3, 102, 256, 258, 261, 264, 265], "clone": [3, 7], "record": [3, 219, 254, 256], "domain": 3, "specif": [3, 260], "librari": [3, 264], "thing": [4, 256, 261], "consid": 4, "when": [4, 7], "debug": 4, "rl": [4, 9, 264], "gener": [4, 252], "have": 4, "you": 4, "valid": 4, "your": [4, 6, 256, 261], "algorithm": 4, "implement": 4, "few": 4, "small": 4, "toi": 4, "problem": 4, "known": 4, "optim": [4, 256, 257], "return": [4, 253], "e": 4, "g": 4, "gridworld": 4, "mountaincar": 4, "visual": 4, "agent": 4, "Be": 4, "veri": 4, "care": 4, "ani": 4, "augment": 4, "polici": [4, 256, 258, 260, 261], "doe": 4, "entropi": 4, "converg": 4, "too": [4, 8], "quickli": 4, "slowli": 4, "chang": [4, 264], "drastic": 4, "reward": 4, "beyond": 4, "go": 4, "up": [4, 6], "i": [4, 5, 8], "favor": 4, "compon": 4, "veloc": 4, "v": 4, "l2": 4, "action": [4, 261], "magnitud": 4, "task": [4, 260], "horizon": 4, "extrem": 4, "long": 4, "ar": 4, "normal": [4, 256, 257, 258], "standard": 4, "explor": [4, 252, 256, 257], "valu": [4, 252, 253, 256, 258], "loss": [4, 256, 257, 258], "earli": 4, "train": [4, 8, 253, 256, 258, 261], "roughli": 4, "uniformli": 4, "random": 4, "intrins": 4, "decai": 4, "learn": [4, 258], "progress": 4, "singleton": 4, "episod": 4, "remain": 4, "constant": [4, 257], "increas": 4, "an": [4, 258, 261], "environ": [4, 6, 7, 256, 257, 258, 260, 261, 264, 265], "dynam": 4, "can": 4, "low": 4, "forward": [4, 256], "model": [4, 252, 256, 257, 262, 264], "also": 4, "us": [4, 6, 9, 262, 264], "offlin": 4, "observ": [4, 256], "space": 4, "effect": [4, 261], "dramat": 4, "dure": 4, "high": 4, "dimension": 4, "work": [5, 6, 7], "gym": [5, 265], "what": 5, "openai": 5, "version": [5, 7, 10], "habitat": 6, "lab": 6, "set": 6, "instal": [6, 7, 264], "from": [6, 7], "pip": [6, 7], "common": [6, 7, 8], "issu": [6, 7, 10], "mujoco": 7, "prerequisit": 7, "render": [7, 265], "all": 7, "new": 7, "bindindg": 7, "2": 7, "1": 7, "old": 7, "bind": 7, "py": 7, "option": 7, "repo": [7, 9], "pytorch": [8, 9, 10], "error": 8, "solut": 8, "gradient": 8, "relat": 8, "newcom": 8, "my": 8, "slow": 8, "bug": 8, "resourc": 9, "functorch": 9, "blog": 9, "websit": 9, "educ": 9, "forum": 9, "how": 10, "reproduc": [10, 261], "workaround": 10, "implement_for": 11, "datacollectorbas": 12, "multisyncdatacollector": 13, "multiasyncdatacollector": 14, "randompolici": 15, "syncdatacollector": 16, "asyncdatacollector": 17, "distributeddatacollector": 18, "distributedsyncdatacollector": 19, "rpcdatacollector": 20, "raycollector": 21, "submitit_delayed_launch": 22, "split_trajectori": 23, "binarydiscretetensorspec": 24, "boundedtensorspec": 25, "compositespec": 26, "discretetensorspec": 27, "multidiscretetensorspec": 28, "multionehotdiscretetensorspec": 29, "multistep": 30, "onehotdiscretetensorspec": 31, "prioritizedreplaybuff": 32, "replaybuff": 33, "tensordictprioritizedreplaybuff": 34, "tensordictreplaybuff": 35, "unboundedcontinuoustensorspec": 37, "unboundeddiscretetensorspec": 38, "d4rlexperiencereplai": 39, "openmlexperiencereplai": 40, "lazymemmapstorag": 41, "lazytensorstorag": 42, "liststorag": 43, "prioritizedsampl": 44, "randomsampl": 45, "roundrobinwrit": 46, "sampler": 47, "samplerwithoutreplac": 48, "storag": 49, "writer": 50, "envbas": [51, 261], "envcreat": 52, "envmetadata": 53, "gymlikeenv": 54, "modelbasedenvbas": 55, "multithreadedenv": 56, "parallelenv": 57, "serialenv": 58, "braxenv": 59, "braxwrapp": 60, "dmcontrolenv": 61, "dmcontrolwrapp": 62, "gymenv": 63, "gymwrapp": 64, "habitatenv": 65, "jumanjienv": 66, "jumanjiwrapp": 67, "openmlenv": 68, "vmasenv": 69, "vmaswrapp": 70, "dreamerenv": 71, "binarizereward": 72, "catfram": 73, "cattensor": 74, "centercrop": 75, "discreteactionproject": 77, "doubletofloat": 78, "excludetransform": 79, "finitetensordictcheck": 80, "flattenobserv": 81, "frameskiptransform": 82, "grayscal": 83, "inittrack": 84, "noopresetenv": 85, "observationnorm": 86, "observationtransform": 87, "pinmemorytransform": 88, "r3mtransform": 89, "randomcroptensordict": 90, "renametransform": 91, "resiz": 92, "rewardclip": 93, "rewardsc": 94, "rewardsum": 95, "selecttransform": 96, "squeezetransform": 97, "stepcount": 98, "tensordictprim": 99, "timemaxpool": 100, "totensorimag": 101, "transformedenv": 103, "unsqueezetransform": 104, "viprewardtransform": 105, "viptransform": 106, "vecnorm": [107, 265], "gsdenois": 108, "check_env_spec": 109, "exploration_mod": 110, "get_available_librari": 111, "make_composite_from_td": 112, "set_exploration_mod": 113, "step_mdp": 114, "cemplann": 115, "convnet": 116, "ddpgcnnactor": 117, "ddpgcnnqnet": 118, "ddpgmlpactor": 119, "ddpgmlpqnet": 120, "delta": 121, "distributionaldqnnet": 122, "distributionalqvaluehook": 123, "dreameractor": 124, "duelingcnndqnet": 125, "independentnorm": 126, "lstmnet": 127, "mlp": 128, "mpcplannerbas": 129, "mppiplann": 130, "noisylazylinear": 131, "noisylinear": 132, "normalparamwrapp": 133, "obsdecod": 134, "obsencod": 135, "onehotcategor": 136, "qvaluehook": 137, "rssmposterior": 138, "rssmprior": 139, "tanhdelta": 140, "tanhnorm": 141, "truncatednorm": 142, "reset_nois": 143, "actor": [144, 252, 256], "actorcriticoper": 145, "actorcriticwrapp": 146, "actorvalueoper": 147, "additivegaussianwrapp": 148, "distributionalqvalueactor": 149, "egreedywrapp": 150, "ornsteinuhlenbeckprocesswrapp": 151, "probabilisticactor": 152, "qvalueactor": 153, "safemodul": [154, 252], "safeprobabilisticmodul": 155, "safeprobabilistictensordictsequenti": 156, "safesequenti": 157, "valueoper": 158, "worldmodelwrapp": 159, "biased_softplu": 160, "inv_softplu": 161, "map": 162, "a2closs": 163, "clipppoloss": 164, "ddpgloss": 165, "dqnloss": 166, "discretesacloss": 167, "distributionaldqnloss": 168, "dreameractorloss": 169, "dreamermodelloss": 170, "dreamervalueloss": 171, "hardupd": 172, "iqlloss": 173, "klpenppoloss": 174, "lossmodul": [175, 256], "ppoloss": 176, "redqloss": 177, "reinforceloss": 178, "sacloss": 179, "softupd": 180, "td3loss": 181, "valueestim": 182, "default_value_kwarg": 183, "distance_loss": 184, "hold_out_net": 185, "hold_out_param": 186, "next_state_valu": 187, "gae": 188, "td0estim": 189, "td1estim": 190, "tdlambdaestim": 191, "valueestimatorbas": 192, "generalized_advantage_estim": 193, "td0_advantage_estim": 194, "td0_return_estim": 195, "td1_advantage_estim": 196, "td1_return_estim": 197, "td_lambda_advantage_estim": 198, "td_lambda_return_estim": 199, "vec_generalized_advantage_estim": 200, "vec_td1_advantage_estim": 201, "vec_td1_return_estim": 202, "vec_td_lambda_advantage_estim": 203, "vec_td_lambda_return_estim": 204, "tensordictrecord": 205, "videorecord": 206, "logger": [207, 254], "csvlogger": 208, "generate_exp_nam": 209, "get_logg": 210, "mlflowlogg": 211, "tensorboardlogg": 212, "wandblogg": 213, "batchsubsampl": 214, "clearcudacach": 215, "countframeslog": 216, "logreward": 217, "optimizerhook": 218, "replaybuffertrain": 220, "rewardnorm": 221, "selectkei": 222, "trainer": [223, 254, 257], "trainerhookbas": 224, "updateweight": 225, "correct_for_frame_skip": 226, "get_stats_random_rollout": 227, "make_a2c_loss": 228, "make_a2c_model": 229, "make_collector_offpolici": 230, "make_collector_onpolici": 231, "make_ddpg_actor": 232, "make_ddpg_loss": 233, "make_dqn_actor": 234, "make_dqn_loss": 235, "make_ppo_loss": 236, "make_ppo_model": 237, "make_redq_loss": 238, "make_redq_model": 239, "make_replay_buff": 240, "make_sac_loss": 241, "make_sac_model": 242, "make_target_updat": 243, "make_train": 244, "parallel_env_constructor": 245, "sync_async_collector": 246, "sync_sync_collector": 247, "transformed_env_constructor": 248, "readm": [249, 259], "tuto": [249, 259], "api": 250, "contribut": [251, 264], "content": 251, "modul": [252, 256, 264], "tensordict": [252, 264], "wrapper": 252, "probabilist": 252, "q": [252, 257], "oper": 252, "join": 252, "other": 252, "hook": [252, 254, 257], "planner": 252, "object": [253, 256, 264], "dqn": [253, 257], "ddpg": [253, 256], "sac": 253, "redq": 253, "iql": 253, "td3": 253, "ppo": [253, 258], "a2c": 253, "reinforc": [253, 258], "dreamer": 253, "checkpoint": 254, "builder": 254, "_util": 255, "code": [256, 261], "import": 256, "setup": 256, "The": 256, "__init__": 256, "method": 256, "estim": 256, "put": 256, "togeth": [256, 261], "call": 256, "parallel": [256, 260, 265], "execut": [256, 260, 261], "stat": 256, "build": [256, 257], "evalu": 256, "construct": 256, "time": [256, 263], "experi": [256, 261], "result": [256, 258], "conclus": [256, 257, 258, 261], "A": 257, "exampl": 257, "comput": [257, 261, 263], "deep": 257, "network": [257, 258], "collect": [257, 258], "target": 257, "paramet": [257, 258], "hyperparamet": [257, 258], "regist": 257, "possibl": 257, "improv": 257, "defin": 258, "loop": [258, 261], "next": 258, "step": [258, 265], "multi": 260, "divers": 260, "rollout": [260, 261, 265], "pendulum": 261, "write": 261, "_step": 261, "reset": [261, 265], "simul": 261, "_reset": 261, "metadata": 261, "_spec": 261, "spec": [261, 265], "shape": 261, "seed": [261, 265], "wrap": 261, "class": [261, 264], "test": 261, "our": 261, "custom": 261, "batch": 261, "simpl": 261, "pretrain": 262, "introduct": 264, "config": 264, "tensordictmodul": 264, "sequenc": 264, "program": 264, "ensembl": 264, "meta": 264, "special": 264, "state": 264, "frame_skip": 265, "deepmind": 265, "control": 265, "devic": 265, "run": 265, "close": 265, "access": 265, "attribut": 265, "kwarg": 265}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Welcome to the TorchRL Documentation!": [[0, "welcome-to-the-torchrl-documentation"]], "Tutorials": [[0, "tutorials"]], "Basics": [[0, "basics"]], "Intermediate": [[0, "intermediate"]], "Advanced": [[0, "advanced"]], "References": [[0, "references"]], "Knowledge Base": [[0, "knowledge-base"], [251, "knowledge-base"]], "Indices and tables": [[0, "indices-and-tables"]], "torchrl.collectors package": [[1, "torchrl-collectors-package"]], "Single node data collectors": [[1, "single-node-data-collectors"]], "Distributed data collectors": [[1, "distributed-data-collectors"]], "Helper functions": [[1, "helper-functions"]], "torchrl.data package": [[2, "torchrl-data-package"]], "Replay Buffers": [[2, "replay-buffers"]], "Composable Replay Buffers": [[2, "composable-replay-buffers"]], "Storing trajectories": [[2, "storing-trajectories"]], "Datasets": [[2, "datasets"]], "TensorSpec": [[2, "tensorspec"], [36, "tensorspec"]], "Utils": [[2, "utils"], [252, "utils"], [253, "utils"], [254, "utils"]], "torchrl.envs package": [[3, "torchrl-envs-package"]], "Vectorized envs": [[3, "vectorized-envs"]], "Transforms": [[3, "transforms"], [256, "transforms"], [258, "transforms"], [264, "transforms"]], "Cloning transforms": [[3, "cloning-transforms"]], "Recorders": [[3, "recorders"]], "Helpers": [[3, "helpers"]], "Domain-specific": [[3, "domain-specific"]], "Libraries": [[3, "libraries"]], "Things to consider when debugging RL": [[4, "things-to-consider-when-debugging-rl"]], "General": [[4, "general"]], "Have you validated your algorithm implementation on a few small, toy problems with known optimal returns e.g. gridworlds, mountaincar?": [[4, "have-you-validated-your-algorithm-implementation-on-a-few-small-toy-problems-with-known-optimal-returns-e-g-gridworlds-mountaincar"]], "Have you visualized your agents?": [[4, "have-you-visualized-your-agents"]], "Be very careful with any data augmentation.": [[4, "be-very-careful-with-any-data-augmentation"]], "Policy": [[4, "policy"], [258, "policy"], [260, "policy"]], "Does the entropy of your policy converge too quickly, too slowly or change drastically?": [[4, "does-the-entropy-of-your-policy-converge-too-quickly-too-slowly-or-change-drastically"]], "Rewards (beyond \u201cgoing up\u201d)": [[4, "rewards-beyond-going-up"]], "Is the agent favoring a single component of the reward function (i.e. velocity vs L2 action magnitude)?": [[4, "is-the-agent-favoring-a-single-component-of-the-reward-function-i-e-velocity-vs-l2-action-magnitude"]], "Is the task horizon extremely long?": [[4, "is-the-task-horizon-extremely-long"]], "Are your rewards normalized/standardized?": [[4, "are-your-rewards-normalized-standardized"]], "Exploration": [[4, "exploration"], [252, "exploration"], [256, "exploration"]], "Is value loss going up early in training?": [[4, "is-value-loss-going-up-early-in-training"]], "Are actions (roughly) uniformly/normally random early in training?": [[4, "are-actions-roughly-uniformly-normally-random-early-in-training"]], "Are intrinsic rewards decaying as learning progresses in a singleton task?": [[4, "are-intrinsic-rewards-decaying-as-learning-progresses-in-a-singleton-task"]], "Are episodic intrinsic rewards remaining constant or increasing as learning progresses in an episodic task?": [[4, "are-episodic-intrinsic-rewards-remaining-constant-or-increasing-as-learning-progresses-in-an-episodic-task"]], "Environment Dynamics": [[4, "environment-dynamics"]], "Can you train a low entropy forward dynamics and/or reward model (also useful for offline RL)?": [[4, "can-you-train-a-low-entropy-forward-dynamics-and-or-reward-model-also-useful-for-offline-rl"]], "Observation Space": [[4, "observation-space"]], "Are your observations normalized/standardized?": [[4, "are-your-observations-normalized-standardized"]], "Action Space": [[4, "action-space"]], "Is the effect of an action changing dramatically during an episode?": [[4, "is-the-effect-of-an-action-changing-dramatically-during-an-episode"]], "Is the action space too high dimensional?": [[4, "is-the-action-space-too-high-dimensional"]], "Are your actions normalized/standardized?": [[4, "are-your-actions-normalized-standardized"]], "Working with gym": [[5, "working-with-gym"]], "What is OpenAI Gym?": [[5, "what-is-openai-gym"]], "Versioning": [[5, "versioning"]], "Working with habitat-lab": [[6, "working-with-habitat-lab"]], "Setting up your environment for habitat and torchrl": [[6, "setting-up-your-environment-for-habitat-and-torchrl"]], "Installing habitat-lab from pip": [[6, "installing-habitat-lab-from-pip"]], "Installing TorchRL": [[6, "installing-torchrl"]], "Using Habitat": [[6, "using-habitat"]], "Common issues": [[6, "common-issues"]], "Working with MuJoCo-based environments": [[7, "working-with-mujoco-based-environments"]], "Installing MuJoCo": [[7, "installing-mujoco"]], "Prerequisite for rendering (all mujoco versions)": [[7, "prerequisite-for-rendering-all-mujoco-versions"]], "New bindindgs (\u2265 2.1.2)": [[7, "new-bindindgs-2-1-2"]], "Old bindings (\u2264 2.1.1): mujoco-py": [[7, "old-bindings-2-1-1-mujoco-py"]], "Option 1: installing mujoco-py with pip": [[7, "option-1-installing-mujoco-py-with-pip"]], "Option 2: installing mujoco-py from a cloned repo": [[7, "option-2-installing-mujoco-py-from-a-cloned-repo"]], "Common Issues when rendering Mujoco Environments": [[7, "common-issues-when-rendering-mujoco-environments"]], "Common PyTorch errors and solutions": [[8, "common-pytorch-errors-and-solutions"]], "Gradient-related errors [Newcomers]": [[8, "gradient-related-errors-newcomers"]], "My Training is too slow [Newcomers / intermediate]": [[8, "my-training-is-too-slow-newcomers-intermediate"]], "Common bugs": [[8, "common-bugs"]], "Useful resources": [[9, "useful-resources"]], "Pytorch documentation": [[9, "pytorch-documentation"]], "functorch documentation": [[9, "functorch-documentation"]], "Useful RL repos, blogs and websites": [[9, "useful-rl-repos-blogs-and-websites"]], "Educational resource": [[9, "educational-resource"]], "Forums": [[9, "forums"]], "Repos": [[9, "repos"]], "Versioning Issues": [[10, "versioning-issues"]], "Pytorch version": [[10, "pytorch-version"]], "How to reproduce": [[10, "how-to-reproduce"]], "Workarounds": [[10, "workarounds"]], "implement_for": [[11, "implement-for"]], "DataCollectorBase": [[12, "datacollectorbase"]], "MultiSyncDataCollector": [[13, "multisyncdatacollector"]], "MultiaSyncDataCollector": [[14, "multiasyncdatacollector"]], "RandomPolicy": [[15, "randompolicy"]], "SyncDataCollector": [[16, "syncdatacollector"]], "aSyncDataCollector": [[17, "asyncdatacollector"]], "DistributedDataCollector": [[18, "distributeddatacollector"]], "DistributedSyncDataCollector": [[19, "distributedsyncdatacollector"]], "RPCDataCollector": [[20, "rpcdatacollector"]], "RayCollector": [[21, "raycollector"]], "submitit_delayed_launcher": [[22, "submitit-delayed-launcher"]], "split_trajectories": [[23, "split-trajectories"]], "BinaryDiscreteTensorSpec": [[24, "binarydiscretetensorspec"]], "BoundedTensorSpec": [[25, "boundedtensorspec"]], "CompositeSpec": [[26, "compositespec"]], "DiscreteTensorSpec": [[27, "discretetensorspec"]], "MultiDiscreteTensorSpec": [[28, "multidiscretetensorspec"]], "MultiOneHotDiscreteTensorSpec": [[29, "multionehotdiscretetensorspec"]], "MultiStep": [[30, "multistep"]], "OneHotDiscreteTensorSpec": [[31, "onehotdiscretetensorspec"]], "PrioritizedReplayBuffer": [[32, "prioritizedreplaybuffer"]], "ReplayBuffer": [[33, "replaybuffer"]], "TensorDictPrioritizedReplayBuffer": [[34, "tensordictprioritizedreplaybuffer"]], "TensorDictReplayBuffer": [[35, "tensordictreplaybuffer"]], "UnboundedContinuousTensorSpec": [[37, "unboundedcontinuoustensorspec"]], "UnboundedDiscreteTensorSpec": [[38, "unboundeddiscretetensorspec"]], "D4RLExperienceReplay": [[39, "d4rlexperiencereplay"]], "OpenMLExperienceReplay": [[40, "openmlexperiencereplay"]], "LazyMemmapStorage": [[41, "lazymemmapstorage"]], "LazyTensorStorage": [[42, "lazytensorstorage"]], "ListStorage": [[43, "liststorage"]], "PrioritizedSampler": [[44, "prioritizedsampler"]], "RandomSampler": [[45, "randomsampler"]], "RoundRobinWriter": [[46, "roundrobinwriter"]], "Sampler": [[47, "sampler"]], "SamplerWithoutReplacement": [[48, "samplerwithoutreplacement"]], "Storage": [[49, "storage"]], "Writer": [[50, "writer"]], "EnvBase": [[51, "envbase"]], "EnvCreator": [[52, "envcreator"]], "EnvMetaData": [[53, "envmetadata"]], "GymLikeEnv": [[54, "gymlikeenv"]], "ModelBasedEnvBase": [[55, "modelbasedenvbase"]], "MultiThreadedEnv": [[56, "multithreadedenv"]], "ParallelEnv": [[57, "parallelenv"]], "SerialEnv": [[58, "serialenv"]], "BraxEnv": [[59, "braxenv"]], "BraxWrapper": [[60, "braxwrapper"]], "DMControlEnv": [[61, "dmcontrolenv"]], "DMControlWrapper": [[62, "dmcontrolwrapper"]], "GymEnv": [[63, "gymenv"]], "GymWrapper": [[64, "gymwrapper"]], "HabitatEnv": [[65, "habitatenv"]], "JumanjiEnv": [[66, "jumanjienv"]], "JumanjiWrapper": [[67, "jumanjiwrapper"]], "OpenMLEnv": [[68, "openmlenv"]], "VmasEnv": [[69, "vmasenv"]], "VmasWrapper": [[70, "vmaswrapper"]], "DreamerEnv": [[71, "dreamerenv"]], "BinarizeReward": [[72, "binarizereward"]], "CatFrames": [[73, "catframes"]], "CatTensors": [[74, "cattensors"]], "CenterCrop": [[75, "centercrop"]], "Compose": [[76, "compose"]], "DiscreteActionProjection": [[77, "discreteactionprojection"]], "DoubleToFloat": [[78, "doubletofloat"]], "ExcludeTransform": [[79, "excludetransform"]], "FiniteTensorDictCheck": [[80, "finitetensordictcheck"]], "FlattenObservation": [[81, "flattenobservation"]], "FrameSkipTransform": [[82, "frameskiptransform"]], "GrayScale": [[83, "grayscale"]], "InitTracker": [[84, "inittracker"]], "NoopResetEnv": [[85, "noopresetenv"]], "ObservationNorm": [[86, "observationnorm"]], "ObservationTransform": [[87, "observationtransform"]], "PinMemoryTransform": [[88, "pinmemorytransform"]], "R3MTransform": [[89, "r3mtransform"]], "RandomCropTensorDict": [[90, "randomcroptensordict"]], "RenameTransform": [[91, "renametransform"]], "Resize": [[92, "resize"]], "RewardClipping": [[93, "rewardclipping"]], "RewardScaling": [[94, "rewardscaling"]], "RewardSum": [[95, "rewardsum"]], "SelectTransform": [[96, "selecttransform"]], "SqueezeTransform": [[97, "squeezetransform"]], "StepCounter": [[98, "stepcounter"]], "TensorDictPrimer": [[99, "tensordictprimer"]], "TimeMaxPool": [[100, "timemaxpool"]], "ToTensorImage": [[101, "totensorimage"]], "Transform": [[102, "transform"]], "TransformedEnv": [[103, "transformedenv"]], "UnsqueezeTransform": [[104, "unsqueezetransform"]], "VIPRewardTransform": [[105, "viprewardtransform"]], "VIPTransform": [[106, "viptransform"]], "VecNorm": [[107, "vecnorm"], [265, "vecnorm"]], "gSDENoise": [[108, "gsdenoise"]], "check_env_specs": [[109, "check-env-specs"]], "exploration_mode": [[110, "exploration-mode"]], "get_available_libraries": [[111, "get-available-libraries"]], "make_composite_from_td": [[112, "make-composite-from-td"]], "set_exploration_mode": [[113, "set-exploration-mode"]], "step_mdp": [[114, "step-mdp"]], "CEMPlanner": [[115, "cemplanner"]], "ConvNet": [[116, "convnet"]], "DdpgCnnActor": [[117, "ddpgcnnactor"]], "DdpgCnnQNet": [[118, "ddpgcnnqnet"]], "DdpgMlpActor": [[119, "ddpgmlpactor"]], "DdpgMlpQNet": [[120, "ddpgmlpqnet"]], "Delta": [[121, "delta"]], "DistributionalDQNnet": [[122, "distributionaldqnnet"]], "DistributionalQValueHook": [[123, "distributionalqvaluehook"]], "DreamerActor": [[124, "dreameractor"]], "DuelingCnnDQNet": [[125, "duelingcnndqnet"]], "IndependentNormal": [[126, "independentnormal"]], "LSTMNet": [[127, "lstmnet"]], "MLP": [[128, "mlp"]], "MPCPlannerBase": [[129, "mpcplannerbase"]], "MPPIPlanner": [[130, "mppiplanner"]], "NoisyLazyLinear": [[131, "noisylazylinear"]], "NoisyLinear": [[132, "noisylinear"]], "NormalParamWrapper": [[133, "normalparamwrapper"]], "ObsDecoder": [[134, "obsdecoder"]], "ObsEncoder": [[135, "obsencoder"]], "OneHotCategorical": [[136, "onehotcategorical"]], "QValueHook": [[137, "qvaluehook"]], "RSSMPosterior": [[138, "rssmposterior"]], "RSSMPrior": [[139, "rssmprior"]], "TanhDelta": [[140, "tanhdelta"]], "TanhNormal": [[141, "tanhnormal"]], "TruncatedNormal": [[142, "truncatednormal"]], "reset_noise": [[143, "reset-noise"]], "Actor": [[144, "actor"]], "ActorCriticOperator": [[145, "actorcriticoperator"]], "ActorCriticWrapper": [[146, "actorcriticwrapper"]], "ActorValueOperator": [[147, "actorvalueoperator"]], "AdditiveGaussianWrapper": [[148, "additivegaussianwrapper"]], "DistributionalQValueActor": [[149, "distributionalqvalueactor"]], "EGreedyWrapper": [[150, "egreedywrapper"]], "OrnsteinUhlenbeckProcessWrapper": [[151, "ornsteinuhlenbeckprocesswrapper"]], "ProbabilisticActor": [[152, "probabilisticactor"]], "QValueActor": [[153, "qvalueactor"]], "SafeModule": [[154, "safemodule"]], "SafeProbabilisticModule": [[155, "safeprobabilisticmodule"]], "SafeProbabilisticTensorDictSequential": [[156, "safeprobabilistictensordictsequential"]], "SafeSequential": [[157, "safesequential"]], "ValueOperator": [[158, "valueoperator"]], "WorldModelWrapper": [[159, "worldmodelwrapper"]], "biased_softplus": [[160, "biased-softplus"]], "inv_softplus": [[161, "inv-softplus"]], "mappings": [[162, "mappings"]], "A2CLoss": [[163, "a2closs"]], "ClipPPOLoss": [[164, "clipppoloss"]], "DDPGLoss": [[165, "ddpgloss"]], "DQNLoss": [[166, "dqnloss"]], "DiscreteSACLoss": [[167, "discretesacloss"]], "DistributionalDQNLoss": [[168, "distributionaldqnloss"]], "DreamerActorLoss": [[169, "dreameractorloss"]], "DreamerModelLoss": [[170, "dreamermodelloss"]], "DreamerValueLoss": [[171, "dreamervalueloss"]], "HardUpdate": [[172, "hardupdate"]], "IQLLoss": [[173, "iqlloss"]], "KLPENPPOLoss": [[174, "klpenppoloss"]], "LossModule": [[175, "lossmodule"]], "PPOLoss": [[176, "ppoloss"]], "REDQLoss": [[177, "redqloss"]], "ReinforceLoss": [[178, "reinforceloss"]], "SACLoss": [[179, "sacloss"]], "SoftUpdate": [[180, "softupdate"]], "TD3Loss": [[181, "td3loss"]], "ValueEstimators": [[182, "valueestimators"]], "default_value_kwargs": [[183, "default-value-kwargs"]], "distance_loss": [[184, "distance-loss"]], "hold_out_net": [[185, "hold-out-net"]], "hold_out_params": [[186, "hold-out-params"]], "next_state_value": [[187, "next-state-value"]], "GAE": [[188, "gae"]], "TD0Estimator": [[189, "td0estimator"]], "TD1Estimator": [[190, "td1estimator"]], "TDLambdaEstimator": [[191, "tdlambdaestimator"]], "ValueEstimatorBase": [[192, "valueestimatorbase"]], "generalized_advantage_estimate": [[193, "generalized-advantage-estimate"]], "td0_advantage_estimate": [[194, "td0-advantage-estimate"]], "td0_return_estimate": [[195, "td0-return-estimate"]], "td1_advantage_estimate": [[196, "td1-advantage-estimate"]], "td1_return_estimate": [[197, "td1-return-estimate"]], "td_lambda_advantage_estimate": [[198, "td-lambda-advantage-estimate"]], "td_lambda_return_estimate": [[199, "td-lambda-return-estimate"]], "vec_generalized_advantage_estimate": [[200, "vec-generalized-advantage-estimate"]], "vec_td1_advantage_estimate": [[201, "vec-td1-advantage-estimate"]], "vec_td1_return_estimate": [[202, "vec-td1-return-estimate"]], "vec_td_lambda_advantage_estimate": [[203, "vec-td-lambda-advantage-estimate"]], "vec_td_lambda_return_estimate": [[204, "vec-td-lambda-return-estimate"]], "TensorDictRecorder": [[205, "tensordictrecorder"]], "VideoRecorder": [[206, "videorecorder"]], "Logger": [[207, "logger"]], "CSVLogger": [[208, "csvlogger"]], "generate_exp_name": [[209, "generate-exp-name"]], "get_logger": [[210, "get-logger"]], "MLFlowLogger": [[211, "mlflowlogger"]], "TensorboardLogger": [[212, "tensorboardlogger"]], "WandbLogger": [[213, "wandblogger"]], "BatchSubSampler": [[214, "batchsubsampler"]], "ClearCudaCache": [[215, "clearcudacache"]], "CountFramesLog": [[216, "countframeslog"]], "LogReward": [[217, "logreward"]], "OptimizerHook": [[218, "optimizerhook"]], "Recorder": [[219, "recorder"]], "ReplayBufferTrainer": [[220, "replaybuffertrainer"]], "RewardNormalizer": [[221, "rewardnormalizer"]], "SelectKeys": [[222, "selectkeys"]], "Trainer": [[223, "trainer"]], "TrainerHookBase": [[224, "trainerhookbase"]], "UpdateWeights": [[225, "updateweights"]], "correct_for_frame_skip": [[226, "correct-for-frame-skip"]], "get_stats_random_rollout": [[227, "get-stats-random-rollout"]], "make_a2c_loss": [[228, "make-a2c-loss"]], "make_a2c_model": [[229, "make-a2c-model"]], "make_collector_offpolicy": [[230, "make-collector-offpolicy"]], "make_collector_onpolicy": [[231, "make-collector-onpolicy"]], "make_ddpg_actor": [[232, "make-ddpg-actor"]], "make_ddpg_loss": [[233, "make-ddpg-loss"]], "make_dqn_actor": [[234, "make-dqn-actor"]], "make_dqn_loss": [[235, "make-dqn-loss"]], "make_ppo_loss": [[236, "make-ppo-loss"]], "make_ppo_model": [[237, "make-ppo-model"]], "make_redq_loss": [[238, "make-redq-loss"]], "make_redq_model": [[239, "make-redq-model"]], "make_replay_buffer": [[240, "make-replay-buffer"]], "make_sac_loss": [[241, "make-sac-loss"]], "make_sac_model": [[242, "make-sac-model"]], "make_target_updater": [[243, "make-target-updater"]], "make_trainer": [[244, "make-trainer"]], "parallel_env_constructor": [[245, "parallel-env-constructor"]], "sync_async_collector": [[246, "sync-async-collector"]], "sync_sync_collector": [[247, "sync-sync-collector"]], "transformed_env_constructor": [[248, "transformed-env-constructor"]], "README Tutos": [[249, "readme-tutos"], [259, "readme-tutos"]], "API Reference": [[250, "api-reference"]], "Contributing": [[251, "contributing"], [264, "contributing"]], "Contents:": [[251, null]], "torchrl.modules package": [[252, "torchrl-modules-package"]], "TensorDict modules: Actors, exploration, value models and generative models": [[252, "tensordict-modules-actors-exploration-value-models-and-generative-models"]], "SafeModules": [[252, "safemodules"]], "Exploration wrappers": [[252, "exploration-wrappers"]], "Probabilistic actors": [[252, "probabilistic-actors"]], "Q-Value actors": [[252, "q-value-actors"]], "Value operators and joined models": [[252, "value-operators-and-joined-models"]], "Other modules": [[252, "other-modules"]], "Hooks": [[252, "hooks"]], "Models": [[252, "models"], [264, "models"]], "Planners": [[252, "planners"]], "Distributions": [[252, "distributions"]], "torchrl.objectives package": [[253, "torchrl-objectives-package"]], "Training value functions": [[253, "training-value-functions"]], "DQN": [[253, "dqn"], [257, "dqn"]], "DDPG": [[253, "ddpg"]], "SAC": [[253, "sac"]], "REDQ": [[253, "redq"]], "IQL": [[253, "iql"]], "TD3": [[253, "td3"]], "PPO": [[253, "ppo"]], "A2C": [[253, "a2c"]], "Reinforce": [[253, "reinforce"]], "Dreamer": [[253, "dreamer"]], "Returns": [[253, "returns"]], "torchrl.trainers package": [[254, "torchrl-trainers-package"]], "Checkpointing": [[254, "checkpointing"]], "Trainer and hooks": [[254, "trainer-and-hooks"]], "Builders": [[254, "builders"]], "Loggers": [[254, "loggers"]], "Recording utils": [[254, "recording-utils"]], "torchrl._utils package": [[255, "torchrl-utils-package"]], "TorchRL objectives: Coding a DDPG loss": [[256, "torchrl-objectives-coding-a-ddpg-loss"]], "Imports and setup": [[256, "imports-and-setup"]], "torchrl LossModule": [[256, "torchrl-lossmodule"]], "The __init__ method": [[256, "the-init-method"]], "The value estimator loss method": [[256, "the-value-estimator-loss-method"]], "The actor loss method": [[256, "the-actor-loss-method"]], "The value loss method": [[256, "the-value-loss-method"]], "Putting things together in a forward call": [[256, "putting-things-together-in-a-forward-call"]], "Environment": [[256, "environment"]], "Parallel execution": [[256, "parallel-execution"]], "Normalization of the observations": [[256, "normalization-of-the-observations"]], "Normalization stats": [[256, "normalization-stats"]], "Building the model": [[256, "building-the-model"]], "Data collector": [[256, "data-collector"], [257, "data-collector"], [258, "data-collector"]], "Evaluator: building your recorder object": [[256, "evaluator-building-your-recorder-object"]], "Replay buffer": [[256, "replay-buffer"], [258, "replay-buffer"]], "Loss module construction": [[256, "loss-module-construction"]], "Optimizer": [[256, "optimizer"], [257, "optimizer"]], "Time to train the policy": [[256, "time-to-train-the-policy"]], "Experiment results": [[256, "experiment-results"]], "Conclusion": [[256, "conclusion"], [261, "conclusion"]], "TorchRL trainer: A DQN example": [[257, "torchrl-trainer-a-dqn-example"]], "Building the environment": [[257, "building-the-environment"]], "Compute normalizing constants": [[257, "compute-normalizing-constants"]], "Building the model (Deep Q-network)": [[257, "building-the-model-deep-q-network"]], "Collecting and storing data": [[257, "collecting-and-storing-data"]], "Replay buffers": [[257, "replay-buffers"], [264, "replay-buffers"]], "Loss function": [[257, "loss-function"], [258, "loss-function"]], "Target parameters": [[257, "target-parameters"]], "Hyperparameters": [[257, "hyperparameters"]], "DQN parameters": [[257, "dqn-parameters"]], "Data collection and replay buffer": [[257, "data-collection-and-replay-buffer"]], "Environment and exploration": [[257, "environment-and-exploration"]], "Building a Trainer": [[257, "building-a-trainer"]], "Registering hooks": [[257, "registering-hooks"]], "Conclusion and possible improvements": [[257, "conclusion-and-possible-improvements"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[258, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[258, "define-hyperparameters"]], "Data collection parameters": [[258, "data-collection-parameters"]], "PPO parameters": [[258, "ppo-parameters"]], "Define an environment": [[258, "define-an-environment"]], "Normalization": [[258, "normalization"]], "Value network": [[258, "value-network"]], "Training loop": [[258, "training-loop"], [261, "training-loop"]], "Results": [[258, "results"]], "Conclusion and next steps": [[258, "conclusion-and-next-steps"]], "Task-specific policy in multi-task environments": [[260, "task-specific-policy-in-multi-task-environments"]], "Executing diverse tasks in parallel": [[260, "executing-diverse-tasks-in-parallel"]], "Rollout": [[260, "rollout"]], "Pendulum: Writing your environment and transforms with TorchRL": [[261, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[261, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[261, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[261, "environment-metadata-env-spec"]], "Specs shape": [[261, "specs-shape"]], "Reproducible experiments: seeding": [[261, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[261, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[261, "testing-our-environment"]], "Transforming an environment": [[261, "transforming-an-environment"]], "Writing custom transforms": [[261, "writing-custom-transforms"]], "Executing a rollout": [[261, "executing-a-rollout"]], "Batching computations": [[261, "batching-computations"]], "Training a simple policy": [[261, "training-a-simple-policy"]], "Using pretrained models": [[262, "using-pretrained-models"]], "Computation times": [[263, "computation-times"]], "Introduction to TorchRL": [[264, "introduction-to-torchrl"]], "Data": [[264, "data"]], "TensorDict": [[264, "tensordict"]], "Envs": [[264, "envs"]], "Changing environments config": [[264, "changing-environments-config"]], "Vectorized Environments": [[264, "vectorized-environments"]], "Modules": [[264, "modules"]], "TensorDictModules": [[264, "tensordictmodules"]], "Sequences of Modules": [[264, "sequences-of-modules"]], "Functional Programming (Ensembling / Meta-RL)": [[264, "functional-programming-ensembling-meta-rl"]], "Specialized Classes": [[264, "specialized-classes"]], "Using Environments and Modules": [[264, "using-environments-and-modules"]], "Collectors": [[264, "collectors"]], "Objectives": [[264, "objectives"]], "State of the Library": [[264, "state-of-the-library"]], "Installing the Library": [[264, "installing-the-library"]], "TorchRL envs": [[265, "torchrl-envs"]], "Gym environments": [[265, "gym-environments"]], "Env Specs": [[265, "env-specs"]], "Seeding, resetting and steps": [[265, "seeding-resetting-and-steps"]], "Rollouts": [[265, "rollouts"]], "frame_skip": [[265, "frame-skip"]], "Rendering": [[265, "rendering"]], "DeepMind Control environments": [[265, "deepmind-control-environments"]], "Transforming envs": [[265, "transforming-envs"]], "Environment device": [[265, "environment-device"]], "Running environments in parallel": [[265, "running-environments-in-parallel"]], "Closing parallel environments": [[265, "closing-parallel-environments"]], "Seeding": [[265, "seeding"]], "Accessing environment attributes": [[265, "accessing-environment-attributes"]], "kwargs for parallel environments": [[265, "kwargs-for-parallel-environments"]], "Transforming parallel environments": [[265, "transforming-parallel-environments"]]}, "indexentries": {"implement_for (class in torchrl._utils)": [[11, "torchrl._utils.implement_for"]], "datacollectorbase (class in torchrl.collectors.collectors)": [[12, "torchrl.collectors.collectors.DataCollectorBase"]], "update_policy_weights_() (torchrl.collectors.collectors.datacollectorbase method)": [[12, "torchrl.collectors.collectors.DataCollectorBase.update_policy_weights_"]], "multisyncdatacollector (class in torchrl.collectors.collectors)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.update_policy_weights_"]], "multiasyncdatacollector (class in torchrl.collectors.collectors)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.update_policy_weights_"]], "randompolicy (class in torchrl.collectors.collectors)": [[15, "torchrl.collectors.collectors.RandomPolicy"]], "syncdatacollector (class in torchrl.collectors.collectors)": [[16, "torchrl.collectors.collectors.SyncDataCollector"]], "iterator() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.iterator"]], "load_state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.reset"]], "rollout() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.rollout"]], "set_seed() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.update_policy_weights_"]], "asyncdatacollector (class in torchrl.collectors.collectors)": [[17, "torchrl.collectors.collectors.aSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.update_policy_weights_"]], "distributeddatacollector (class in torchrl.collectors.distributed)": [[18, "torchrl.collectors.distributed.DistributedDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.distributeddatacollector method)": [[18, "torchrl.collectors.distributed.DistributedDataCollector.update_policy_weights_"]], "distributedsyncdatacollector (class in torchrl.collectors.distributed)": [[19, "torchrl.collectors.distributed.DistributedSyncDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.distributedsyncdatacollector method)": [[19, "torchrl.collectors.distributed.DistributedSyncDataCollector.update_policy_weights_"]], "rpcdatacollector (class in torchrl.collectors.distributed)": [[20, "torchrl.collectors.distributed.RPCDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.rpcdatacollector method)": [[20, "torchrl.collectors.distributed.RPCDataCollector.update_policy_weights_"]], "raycollector (class in torchrl.collectors.distributed)": [[21, "torchrl.collectors.distributed.RayCollector"]], "add_collectors() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.add_collectors"]], "load_state_dict() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.load_state_dict"]], "local_policy() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.local_policy"]], "remote_collectors() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.remote_collectors"]], "set_seed() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.set_seed"]], "shutdown() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.shutdown"]], "state_dict() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.state_dict"]], "stop_remote_collectors() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.stop_remote_collectors"]], "update_policy_weights_() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.update_policy_weights_"]], "submitit_delayed_launcher (class in torchrl.collectors.distributed)": [[22, "torchrl.collectors.distributed.submitit_delayed_launcher"]], "split_trajectories() (in module torchrl.collectors.utils)": [[23, "torchrl.collectors.utils.split_trajectories"]], "binarydiscretetensorspec (class in torchrl.data)": [[24, "torchrl.data.BinaryDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.encode"]], "expand() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.binarydiscretetensorspec class method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.index"]], "is_in() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.is_in"]], "project() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.project"]], "rand() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.zero"]], "boundedtensorspec (class in torchrl.data)": [[25, "torchrl.data.BoundedTensorSpec"]], "assert_is_in() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.assert_is_in"]], "encode() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.encode"]], "expand() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.expand"]], "implements_for_spec() (torchrl.data.boundedtensorspec class method)": [[25, "torchrl.data.BoundedTensorSpec.implements_for_spec"]], "index() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.index"]], "is_in() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.is_in"]], "project() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.project"]], "rand() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.rand"]], "squeeze() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.squeeze"]], "to_numpy() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.to_numpy"]], "type_check() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.type_check"]], "zero() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.zero"]], "compositespec (class in torchrl.data)": [[26, "torchrl.data.CompositeSpec"]], "assert_is_in() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.assert_is_in"]], "encode() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.encode"]], "expand() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.expand"]], "implements_for_spec() (torchrl.data.compositespec class method)": [[26, "torchrl.data.CompositeSpec.implements_for_spec"]], "index() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.index"]], "is_in() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.is_in"]], "items() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.items"]], "keys() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.keys"]], "project() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.project"]], "rand() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.rand"]], "squeeze() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.squeeze"]], "to_numpy() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.to_numpy"]], "type_check() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.type_check"]], "values() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.values"]], "zero() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.zero"]], "discretetensorspec (class in torchrl.data)": [[27, "torchrl.data.DiscreteTensorSpec"]], "assert_is_in() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.encode"]], "expand() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.discretetensorspec class method)": [[27, "torchrl.data.DiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.index"]], "is_in() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.is_in"]], "project() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.project"]], "rand() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.type_check"]], "zero() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.zero"]], "multidiscretetensorspec (class in torchrl.data)": [[28, "torchrl.data.MultiDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.multidiscretetensorspec class method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.project"]], "rand() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.zero"]], "multionehotdiscretetensorspec (class in torchrl.data)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.multionehotdiscretetensorspec class method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.squeeze"]], "to_categorical() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_categorical"]], "to_categorical_spec() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_categorical_spec"]], "to_numpy() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.zero"]], "multistep (class in torchrl.data)": [[30, "torchrl.data.MultiStep"]], "add_module() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.add_module"]], "apply() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.apply"]], "bfloat16() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.bfloat16"]], "buffers() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.buffers"]], "children() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.children"]], "cpu() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.cpu"]], "cuda() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.cuda"]], "double() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.double"]], "eval() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.eval"]], "extra_repr() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.extra_repr"]], "float() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.float"]], "forward() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.forward"]], "get_buffer() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_buffer"]], "get_extra_state() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_extra_state"]], "get_parameter() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_parameter"]], "get_submodule() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_submodule"]], "half() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.half"]], "ipu() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.ipu"]], "load_state_dict() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.load_state_dict"]], "modules() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.modules"]], "named_buffers() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_buffers"]], "named_children() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_children"]], "named_modules() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_modules"]], "named_parameters() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_parameters"]], "parameters() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.parameters"]], "register_backward_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_backward_hook"]], "register_buffer() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_buffer"]], "register_forward_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_forward_hook"]], "register_forward_pre_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_load_state_dict_post_hook"]], "register_module() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_module"]], "register_parameter() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_parameter"]], "register_state_dict_pre_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.requires_grad_"]], "set_extra_state() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.set_extra_state"]], "share_memory() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.share_memory"]], "state_dict() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.state_dict"]], "to() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.to"]], "to_empty() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.to_empty"]], "train() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.train"]], "type() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.type"]], "xpu() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.xpu"]], "zero_grad() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.zero_grad"]], "onehotdiscretetensorspec (class in torchrl.data)": [[31, "torchrl.data.OneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.onehotdiscretetensorspec class method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.squeeze"]], "to_categorical() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.to_categorical"]], "to_categorical_spec() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.to_categorical_spec"]], "to_numpy() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.zero"]], "prioritizedreplaybuffer (class in torchrl.data)": [[32, "torchrl.data.PrioritizedReplayBuffer"]], "add() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.sample"]], "replaybuffer (class in torchrl.data)": [[33, "torchrl.data.ReplayBuffer"]], "add() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.add"]], "append_transform() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.append_transform"]], "extend() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.extend"]], "insert_transform() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.insert_transform"]], "sample() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.sample"]], "tensordictprioritizedreplaybuffer (class in torchrl.data)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer"]], "add() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.sample"]], "tensordictreplaybuffer (class in torchrl.data)": [[35, "torchrl.data.TensorDictReplayBuffer"]], "add() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.sample"]], "tensorspec (class in torchrl.data)": [[36, "torchrl.data.TensorSpec"]], "assert_is_in() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.assert_is_in"]], "encode() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.encode"]], "expand() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.expand"]], "implements_for_spec() (torchrl.data.tensorspec class method)": [[36, "torchrl.data.TensorSpec.implements_for_spec"]], "index() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.index"]], "is_in() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.is_in"]], "project() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.project"]], "rand() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.rand"]], "squeeze() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.squeeze"]], "to_numpy() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.to_numpy"]], "type_check() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.type_check"]], "zero() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.zero"]], "unboundedcontinuoustensorspec (class in torchrl.data)": [[37, "torchrl.data.UnboundedContinuousTensorSpec"]], "assert_is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.encode"]], "expand() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.expand"]], "implements_for_spec() (torchrl.data.unboundedcontinuoustensorspec class method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.implements_for_spec"]], "index() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.index"]], "is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.is_in"]], "project() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.project"]], "rand() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.rand"]], "squeeze() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.squeeze"]], "to_numpy() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.type_check"]], "zero() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.zero"]], "unboundeddiscretetensorspec (class in torchrl.data)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.encode"]], "expand() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.unboundeddiscretetensorspec class method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.index"]], "is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.is_in"]], "project() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.project"]], "rand() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.zero"]], "d4rlexperiencereplay (class in torchrl.data.datasets)": [[39, "torchrl.data.datasets.D4RLExperienceReplay"]], "add() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.add"]], "append_transform() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.append_transform"]], "extend() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.extend"]], "insert_transform() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.insert_transform"]], "sample() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.sample"]], "openmlexperiencereplay (class in torchrl.data.datasets)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay"]], "add() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.add"]], "append_transform() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.append_transform"]], "extend() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.extend"]], "insert_transform() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.insert_transform"]], "sample() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.sample"]], "lazymemmapstorage (class in torchrl.data.replay_buffers)": [[41, "torchrl.data.replay_buffers.LazyMemmapStorage"]], "attach() (torchrl.data.replay_buffers.lazymemmapstorage method)": [[41, "torchrl.data.replay_buffers.LazyMemmapStorage.attach"]], "lazytensorstorage (class in torchrl.data.replay_buffers)": [[42, "torchrl.data.replay_buffers.LazyTensorStorage"]], "attach() (torchrl.data.replay_buffers.lazytensorstorage method)": [[42, "torchrl.data.replay_buffers.LazyTensorStorage.attach"]], "liststorage (class in torchrl.data.replay_buffers)": [[43, "torchrl.data.replay_buffers.ListStorage"]], "attach() (torchrl.data.replay_buffers.liststorage method)": [[43, "torchrl.data.replay_buffers.ListStorage.attach"]], "prioritizedsampler (class in torchrl.data.replay_buffers)": [[44, "torchrl.data.replay_buffers.PrioritizedSampler"]], "update_priority() (torchrl.data.replay_buffers.prioritizedsampler method)": [[44, "torchrl.data.replay_buffers.PrioritizedSampler.update_priority"]], "randomsampler (class in torchrl.data.replay_buffers)": [[45, "torchrl.data.replay_buffers.RandomSampler"]], "roundrobinwriter (class in torchrl.data.replay_buffers)": [[46, "torchrl.data.replay_buffers.RoundRobinWriter"]], "add() (torchrl.data.replay_buffers.roundrobinwriter method)": [[46, "torchrl.data.replay_buffers.RoundRobinWriter.add"]], "extend() (torchrl.data.replay_buffers.roundrobinwriter method)": [[46, "torchrl.data.replay_buffers.RoundRobinWriter.extend"]], "sampler (class in torchrl.data.replay_buffers)": [[47, "torchrl.data.replay_buffers.Sampler"]], "samplerwithoutreplacement (class in torchrl.data.replay_buffers)": [[48, "torchrl.data.replay_buffers.SamplerWithoutReplacement"]], "storage (class in torchrl.data.replay_buffers)": [[49, "torchrl.data.replay_buffers.Storage"]], "attach() (torchrl.data.replay_buffers.storage method)": [[49, "torchrl.data.replay_buffers.Storage.attach"]], "writer (class in torchrl.data.replay_buffers)": [[50, "torchrl.data.replay_buffers.Writer"]], "add() (torchrl.data.replay_buffers.writer method)": [[50, "torchrl.data.replay_buffers.Writer.add"]], "extend() (torchrl.data.replay_buffers.writer method)": [[50, "torchrl.data.replay_buffers.Writer.extend"]], "envbase (class in torchrl.envs)": [[51, "torchrl.envs.EnvBase"]], "add_module() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.add_module"]], "apply() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.apply"]], "batch_locked (torchrl.envs.envbase property)": [[51, "torchrl.envs.EnvBase.batch_locked"]], "bfloat16() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.bfloat16"]], "buffers() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.buffers"]], "children() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.children"]], "cpu() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.cpu"]], "cuda() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.cuda"]], "double() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.double"]], "eval() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.eval"]], "extra_repr() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.extra_repr"]], "fake_tensordict() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.fake_tensordict"]], "float() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.float"]], "forward() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.forward"]], "get_buffer() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_buffer"]], "get_extra_state() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_extra_state"]], "get_parameter() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_parameter"]], "get_submodule() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_submodule"]], "half() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.half"]], "ipu() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.ipu"]], "load_state_dict() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.load_state_dict"]], "modules() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.modules"]], "named_buffers() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_buffers"]], "named_children() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_children"]], "named_modules() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_modules"]], "named_parameters() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_parameters"]], "parameters() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.parameters"]], "rand_action() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.rand_action"]], "rand_step() (torchrl.envs.envbase method)": [[51, "id0"], [51, "torchrl.envs.EnvBase.rand_step"]], "register_backward_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_backward_hook"]], "register_buffer() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_buffer"]], "register_forward_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_module"]], "register_parameter() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.requires_grad_"]], "reset() (torchrl.envs.envbase method)": [[51, "id1"], [51, "torchrl.envs.EnvBase.reset"]], "rollout() (torchrl.envs.envbase method)": [[51, "id2"], [51, "torchrl.envs.EnvBase.rollout"]], "set_extra_state() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.set_extra_state"]], "set_seed() (torchrl.envs.envbase method)": [[51, "id3"], [51, "torchrl.envs.EnvBase.set_seed"]], "share_memory() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.share_memory"]], "specs (torchrl.envs.envbase property)": [[51, "torchrl.envs.EnvBase.specs"]], "state_dict() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.state_dict"]], "step() (torchrl.envs.envbase method)": [[51, "id4"], [51, "torchrl.envs.EnvBase.step"]], "to() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.to"]], "to_empty() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.to_empty"]], "train() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.train"]], "type() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.type"]], "xpu() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.xpu"]], "zero_grad() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.zero_grad"]], "envcreator (class in torchrl.envs)": [[52, "torchrl.envs.EnvCreator"]], "envmetadata (class in torchrl.envs)": [[53, "torchrl.envs.EnvMetaData"]], "gymlikeenv (class in torchrl.envs)": [[54, "torchrl.envs.GymLikeEnv"]], "add_module() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.add_module"]], "apply() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.apply"]], "batch_locked (torchrl.envs.gymlikeenv property)": [[54, "torchrl.envs.GymLikeEnv.batch_locked"]], "bfloat16() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.bfloat16"]], "buffers() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.buffers"]], "children() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.children"]], "close() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.close"]], "cpu() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.cpu"]], "cuda() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.cuda"]], "double() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.double"]], "eval() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.eval"]], "extra_repr() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.fake_tensordict"]], "float() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.float"]], "forward() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.forward"]], "get_buffer() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_buffer"]], "get_extra_state() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_extra_state"]], "get_parameter() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_parameter"]], "get_submodule() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_submodule"]], "half() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.half"]], "ipu() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.ipu"]], "load_state_dict() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.load_state_dict"]], "modules() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.modules"]], "named_buffers() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_buffers"]], "named_children() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_children"]], "named_modules() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_modules"]], "named_parameters() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_parameters"]], "parameters() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.parameters"]], "rand_action() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.rand_action"]], "rand_step() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.rand_step"]], "read_action() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_action"]], "read_done() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_done"]], "read_obs() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_obs"]], "read_reward() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_reward"]], "register_backward_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_module"]], "register_parameter() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.requires_grad_"]], "reset() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.reset"]], "rollout() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.rollout"]], "set_extra_state() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.set_extra_state"]], "set_info_dict_reader() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.set_info_dict_reader"]], "set_seed() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.set_seed"]], "share_memory() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.share_memory"]], "specs (torchrl.envs.gymlikeenv property)": [[54, "torchrl.envs.GymLikeEnv.specs"]], "state_dict() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.state_dict"]], "step() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.step"]], "to() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.to"]], "to_empty() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.to_empty"]], "train() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.train"]], "type() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.type"]], "xpu() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.xpu"]], "zero_grad() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.zero_grad"]], "modelbasedenvbase() (in module torchrl.envs)": [[55, "torchrl.envs.ModelBasedEnvBase"]], "rand_step() (in module torchrl.envs)": [[55, "torchrl.envs.rand_step"]], "reset() (in module torchrl.envs)": [[55, "torchrl.envs.reset"]], "rollout() (in module torchrl.envs)": [[55, "torchrl.envs.rollout"]], "set_seed() (in module torchrl.envs)": [[55, "torchrl.envs.set_seed"]], "step() (in module torchrl.envs)": [[55, "torchrl.envs.step"]], "multithreadedenv (class in torchrl.envs)": [[56, "torchrl.envs.MultiThreadedEnv"]], "add_module() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.add_module"]], "apply() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.apply"]], "batch_locked (torchrl.envs.multithreadedenv property)": [[56, "torchrl.envs.MultiThreadedEnv.batch_locked"]], "bfloat16() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.bfloat16"]], "buffers() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.buffers"]], "children() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.children"]], "close() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.close"]], "cpu() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.cpu"]], "cuda() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.cuda"]], "double() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.double"]], "eval() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.eval"]], "extra_repr() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.fake_tensordict"]], "float() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.float"]], "forward() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.forward"]], "get_buffer() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_buffer"]], "get_extra_state() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_extra_state"]], "get_parameter() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_parameter"]], "get_submodule() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_submodule"]], "half() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.half"]], "ipu() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.ipu"]], "load_state_dict() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.load_state_dict"]], "modules() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.modules"]], "named_buffers() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_buffers"]], "named_children() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_children"]], "named_modules() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_modules"]], "named_parameters() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_parameters"]], "parameters() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.parameters"]], "rand_action() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.rand_action"]], "rand_step() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.rand_step"]], "register_backward_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_module"]], "register_parameter() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.requires_grad_"]], "reset() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.reset"]], "rollout() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.rollout"]], "set_extra_state() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.set_extra_state"]], "set_seed() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.set_seed"]], "share_memory() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.share_memory"]], "specs (torchrl.envs.multithreadedenv property)": [[56, "torchrl.envs.MultiThreadedEnv.specs"]], "state_dict() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.state_dict"]], "step() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.step"]], "to() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.to"]], "to_empty() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.to_empty"]], "train() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.train"]], "type() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.type"]], "xpu() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.xpu"]], "zero_grad() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.zero_grad"]], "parallelenv (class in torchrl.envs)": [[57, "torchrl.envs.ParallelEnv"]], "add_module() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.add_module"]], "apply() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.apply"]], "batch_locked (torchrl.envs.parallelenv property)": [[57, "torchrl.envs.ParallelEnv.batch_locked"]], "bfloat16() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.bfloat16"]], "buffers() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.buffers"]], "children() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.children"]], "cpu() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.cpu"]], "cuda() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.cuda"]], "double() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.double"]], "eval() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.eval"]], "extra_repr() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.fake_tensordict"]], "float() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.float"]], "forward() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.forward"]], "get_buffer() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_buffer"]], "get_extra_state() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_extra_state"]], "get_parameter() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_parameter"]], "get_submodule() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_submodule"]], "half() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.half"]], "ipu() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.ipu"]], "load_state_dict() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.load_state_dict"]], "modules() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.modules"]], "named_buffers() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_buffers"]], "named_children() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_children"]], "named_modules() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_modules"]], "named_parameters() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_parameters"]], "parameters() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.parameters"]], "rand_action() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.rand_action"]], "rand_step() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.rand_step"]], "register_backward_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_module"]], "register_parameter() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.requires_grad_"]], "reset() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.reset"]], "rollout() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.rollout"]], "set_extra_state() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.set_extra_state"]], "set_seed() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.set_seed"]], "share_memory() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.share_memory"]], "specs (torchrl.envs.parallelenv property)": [[57, "torchrl.envs.ParallelEnv.specs"]], "state_dict() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.state_dict"]], "step() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.step"]], "to() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.to"]], "to_empty() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.to_empty"]], "train() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.train"]], "type() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.type"]], "update_kwargs() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.update_kwargs"]], "xpu() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.xpu"]], "zero_grad() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.zero_grad"]], "serialenv (class in torchrl.envs)": [[58, "torchrl.envs.SerialEnv"]], "add_module() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.add_module"]], "apply() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.apply"]], "batch_locked (torchrl.envs.serialenv property)": [[58, "torchrl.envs.SerialEnv.batch_locked"]], "bfloat16() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.bfloat16"]], "buffers() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.buffers"]], "children() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.children"]], "cpu() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.cpu"]], "cuda() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.cuda"]], "double() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.double"]], "eval() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.eval"]], "extra_repr() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.fake_tensordict"]], "float() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.float"]], "forward() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.forward"]], "get_buffer() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_buffer"]], "get_extra_state() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_extra_state"]], "get_parameter() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_parameter"]], "get_submodule() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_submodule"]], "half() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.half"]], "ipu() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.ipu"]], "load_state_dict() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.load_state_dict"]], "modules() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.modules"]], "named_buffers() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_buffers"]], "named_children() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_children"]], "named_modules() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_modules"]], "named_parameters() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_parameters"]], "parameters() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.parameters"]], "rand_action() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.rand_action"]], "rand_step() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.rand_step"]], "register_backward_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_module"]], "register_parameter() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.requires_grad_"]], "reset() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.reset"]], "rollout() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.rollout"]], "set_extra_state() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.set_extra_state"]], "set_seed() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.set_seed"]], "share_memory() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.share_memory"]], "specs (torchrl.envs.serialenv property)": [[58, "torchrl.envs.SerialEnv.specs"]], "state_dict() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.state_dict"]], "step() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.step"]], "to() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.to"]], "to_empty() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.to_empty"]], "train() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.train"]], "type() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.type"]], "update_kwargs() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.update_kwargs"]], "xpu() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.xpu"]], "zero_grad() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.zero_grad"]], "braxenv() (in module torchrl.envs.libs.brax)": [[59, "torchrl.envs.libs.brax.BraxEnv"]], "braxwrapper() (in module torchrl.envs.libs.brax)": [[60, "torchrl.envs.libs.brax.BraxWrapper"]], "dmcontrolenv() (in module torchrl.envs.libs.dm_control)": [[61, "torchrl.envs.libs.dm_control.DMControlEnv"]], "dmcontrolwrapper() (in module torchrl.envs.libs.dm_control)": [[62, "torchrl.envs.libs.dm_control.DMControlWrapper"]], "gymenv() (in module torchrl.envs.libs.gym)": [[63, "torchrl.envs.libs.gym.GymEnv"]], "gymwrapper() (in module torchrl.envs.libs.gym)": [[64, "torchrl.envs.libs.gym.GymWrapper"]], "habitatenv() (in module torchrl.envs.libs.habitat)": [[65, "torchrl.envs.libs.habitat.HabitatEnv"]], "jumanjienv() (in module torchrl.envs.libs.jumanji)": [[66, "torchrl.envs.libs.jumanji.JumanjiEnv"]], "jumanjiwrapper() (in module torchrl.envs.libs.jumanji)": [[67, "torchrl.envs.libs.jumanji.JumanjiWrapper"]], "openmlenv() (in module torchrl.envs.libs.openml)": [[68, "torchrl.envs.libs.openml.OpenMLEnv"]], "vmasenv() (in module torchrl.envs.libs.vmas)": [[69, "torchrl.envs.libs.vmas.VmasEnv"]], "vmaswrapper() (in module torchrl.envs.libs.vmas)": [[70, "torchrl.envs.libs.vmas.VmasWrapper"]], "dreamerenv() (in module torchrl.envs.model_based.dreamer)": [[71, "torchrl.envs.model_based.dreamer.DreamerEnv"]], "binarizereward (class in torchrl.envs.transforms)": [[72, "torchrl.envs.transforms.BinarizeReward"]], "transform_reward_spec() (torchrl.envs.transforms.binarizereward method)": [[72, "torchrl.envs.transforms.BinarizeReward.transform_reward_spec"]], "catframes (class in torchrl.envs.transforms)": [[73, "torchrl.envs.transforms.CatFrames"]], "forward() (torchrl.envs.transforms.catframes method)": [[73, "torchrl.envs.transforms.CatFrames.forward"]], "reset() (torchrl.envs.transforms.catframes method)": [[73, "torchrl.envs.transforms.CatFrames.reset"]], "transform_observation_spec() (torchrl.envs.transforms.catframes method)": [[73, "torchrl.envs.transforms.CatFrames.transform_observation_spec"]], "cattensors (class in torchrl.envs.transforms)": [[74, "torchrl.envs.transforms.CatTensors"]], "forward() (torchrl.envs.transforms.cattensors method)": [[74, "torchrl.envs.transforms.CatTensors.forward"]], "transform_observation_spec() (torchrl.envs.transforms.cattensors method)": [[74, "torchrl.envs.transforms.CatTensors.transform_observation_spec"]], "centercrop (class in torchrl.envs.transforms)": [[75, "torchrl.envs.transforms.CenterCrop"]], "transform_observation_spec() (torchrl.envs.transforms.centercrop method)": [[75, "torchrl.envs.transforms.CenterCrop.transform_observation_spec"]], "compose (class in torchrl.envs.transforms)": [[76, "torchrl.envs.transforms.Compose"]], "forward() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.forward"]], "reset() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.reset"]], "to() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.to"]], "transform_input_spec() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.transform_reward_spec"]], "discreteactionprojection (class in torchrl.envs.transforms)": [[77, "torchrl.envs.transforms.DiscreteActionProjection"]], "transform_input_spec() (torchrl.envs.transforms.discreteactionprojection method)": [[77, "torchrl.envs.transforms.DiscreteActionProjection.transform_input_spec"]], "doubletofloat (class in torchrl.envs.transforms)": [[78, "torchrl.envs.transforms.DoubleToFloat"]], "transform_input_spec() (torchrl.envs.transforms.doubletofloat method)": [[78, "torchrl.envs.transforms.DoubleToFloat.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.doubletofloat method)": [[78, "torchrl.envs.transforms.DoubleToFloat.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.doubletofloat method)": [[78, "torchrl.envs.transforms.DoubleToFloat.transform_reward_spec"]], "excludetransform (class in torchrl.envs.transforms)": [[79, "torchrl.envs.transforms.ExcludeTransform"]], "forward() (torchrl.envs.transforms.excludetransform method)": [[79, "torchrl.envs.transforms.ExcludeTransform.forward"]], "reset() (torchrl.envs.transforms.excludetransform method)": [[79, "torchrl.envs.transforms.ExcludeTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.excludetransform method)": [[79, "torchrl.envs.transforms.ExcludeTransform.transform_observation_spec"]], "finitetensordictcheck (class in torchrl.envs.transforms)": [[80, "torchrl.envs.transforms.FiniteTensorDictCheck"]], "forward() (torchrl.envs.transforms.finitetensordictcheck method)": [[80, "torchrl.envs.transforms.FiniteTensorDictCheck.forward"]], "flattenobservation (class in torchrl.envs.transforms)": [[81, "torchrl.envs.transforms.FlattenObservation"]], "forward() (torchrl.envs.transforms.flattenobservation method)": [[81, "torchrl.envs.transforms.FlattenObservation.forward"]], "transform_observation_spec() (torchrl.envs.transforms.flattenobservation method)": [[81, "torchrl.envs.transforms.FlattenObservation.transform_observation_spec"]], "frameskiptransform (class in torchrl.envs.transforms)": [[82, "torchrl.envs.transforms.FrameSkipTransform"]], "forward() (torchrl.envs.transforms.frameskiptransform method)": [[82, "torchrl.envs.transforms.FrameSkipTransform.forward"]], "grayscale (class in torchrl.envs.transforms)": [[83, "torchrl.envs.transforms.GrayScale"]], "transform_observation_spec() (torchrl.envs.transforms.grayscale method)": [[83, "torchrl.envs.transforms.GrayScale.transform_observation_spec"]], "inittracker (class in torchrl.envs.transforms)": [[84, "torchrl.envs.transforms.InitTracker"]], "forward() (torchrl.envs.transforms.inittracker method)": [[84, "torchrl.envs.transforms.InitTracker.forward"]], "reset() (torchrl.envs.transforms.inittracker method)": [[84, "torchrl.envs.transforms.InitTracker.reset"]], "transform_observation_spec() (torchrl.envs.transforms.inittracker method)": [[84, "torchrl.envs.transforms.InitTracker.transform_observation_spec"]], "noopresetenv (class in torchrl.envs.transforms)": [[85, "torchrl.envs.transforms.NoopResetEnv"]], "reset() (torchrl.envs.transforms.noopresetenv method)": [[85, "torchrl.envs.transforms.NoopResetEnv.reset"]], "observationnorm (class in torchrl.envs.transforms)": [[86, "torchrl.envs.transforms.ObservationNorm"]], "init_stats() (torchrl.envs.transforms.observationnorm method)": [[86, "torchrl.envs.transforms.ObservationNorm.init_stats"]], "transform_input_spec() (torchrl.envs.transforms.observationnorm method)": [[86, "torchrl.envs.transforms.ObservationNorm.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.observationnorm method)": [[86, "torchrl.envs.transforms.ObservationNorm.transform_observation_spec"]], "observationtransform (class in torchrl.envs.transforms)": [[87, "torchrl.envs.transforms.ObservationTransform"]], "pinmemorytransform (class in torchrl.envs.transforms)": [[88, "torchrl.envs.transforms.PinMemoryTransform"]], "forward() (torchrl.envs.transforms.pinmemorytransform method)": [[88, "torchrl.envs.transforms.PinMemoryTransform.forward"]], "r3mtransform (class in torchrl.envs.transforms)": [[89, "torchrl.envs.transforms.R3MTransform"]], "to() (torchrl.envs.transforms.r3mtransform method)": [[89, "torchrl.envs.transforms.R3MTransform.to"]], "randomcroptensordict (class in torchrl.envs.transforms)": [[90, "torchrl.envs.transforms.RandomCropTensorDict"]], "forward() (torchrl.envs.transforms.randomcroptensordict method)": [[90, "torchrl.envs.transforms.RandomCropTensorDict.forward"]], "renametransform (class in torchrl.envs.transforms)": [[91, "torchrl.envs.transforms.RenameTransform"]], "forward() (torchrl.envs.transforms.renametransform method)": [[91, "torchrl.envs.transforms.RenameTransform.forward"]], "transform_input_spec() (torchrl.envs.transforms.renametransform method)": [[91, "torchrl.envs.transforms.RenameTransform.transform_input_spec"]], "transform_output_spec() (torchrl.envs.transforms.renametransform method)": [[91, "torchrl.envs.transforms.RenameTransform.transform_output_spec"]], "resize (class in torchrl.envs.transforms)": [[92, "torchrl.envs.transforms.Resize"]], "transform_observation_spec() (torchrl.envs.transforms.resize method)": [[92, "torchrl.envs.transforms.Resize.transform_observation_spec"]], "rewardclipping (class in torchrl.envs.transforms)": [[93, "torchrl.envs.transforms.RewardClipping"]], "transform_reward_spec() (torchrl.envs.transforms.rewardclipping method)": [[93, "torchrl.envs.transforms.RewardClipping.transform_reward_spec"]], "rewardscaling (class in torchrl.envs.transforms)": [[94, "torchrl.envs.transforms.RewardScaling"]], "transform_reward_spec() (torchrl.envs.transforms.rewardscaling method)": [[94, "torchrl.envs.transforms.RewardScaling.transform_reward_spec"]], "rewardsum (class in torchrl.envs.transforms)": [[95, "torchrl.envs.transforms.RewardSum"]], "forward() (torchrl.envs.transforms.rewardsum method)": [[95, "torchrl.envs.transforms.RewardSum.forward"]], "reset() (torchrl.envs.transforms.rewardsum method)": [[95, "torchrl.envs.transforms.RewardSum.reset"]], "transform_observation_spec() (torchrl.envs.transforms.rewardsum method)": [[95, "torchrl.envs.transforms.RewardSum.transform_observation_spec"]], "selecttransform (class in torchrl.envs.transforms)": [[96, "torchrl.envs.transforms.SelectTransform"]], "forward() (torchrl.envs.transforms.selecttransform method)": [[96, "torchrl.envs.transforms.SelectTransform.forward"]], "reset() (torchrl.envs.transforms.selecttransform method)": [[96, "torchrl.envs.transforms.SelectTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.selecttransform method)": [[96, "torchrl.envs.transforms.SelectTransform.transform_observation_spec"]], "squeezetransform (class in torchrl.envs.transforms)": [[97, "torchrl.envs.transforms.SqueezeTransform"]], "stepcounter (class in torchrl.envs.transforms)": [[98, "torchrl.envs.transforms.StepCounter"]], "forward() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.forward"]], "reset() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.reset"]], "transform_input_spec() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.transform_observation_spec"]], "tensordictprimer (class in torchrl.envs.transforms)": [[99, "torchrl.envs.transforms.TensorDictPrimer"]], "forward() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.forward"]], "reset() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.reset"]], "to() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.to"]], "transform_observation_spec() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.transform_observation_spec"]], "timemaxpool (class in torchrl.envs.transforms)": [[100, "torchrl.envs.transforms.TimeMaxPool"]], "forward() (torchrl.envs.transforms.timemaxpool method)": [[100, "torchrl.envs.transforms.TimeMaxPool.forward"]], "reset() (torchrl.envs.transforms.timemaxpool method)": [[100, "torchrl.envs.transforms.TimeMaxPool.reset"]], "transform_observation_spec() (torchrl.envs.transforms.timemaxpool method)": [[100, "torchrl.envs.transforms.TimeMaxPool.transform_observation_spec"]], "totensorimage (class in torchrl.envs.transforms)": [[101, "torchrl.envs.transforms.ToTensorImage"]], "transform_observation_spec() (torchrl.envs.transforms.totensorimage method)": [[101, "torchrl.envs.transforms.ToTensorImage.transform_observation_spec"]], "transform (class in torchrl.envs.transforms)": [[102, "torchrl.envs.transforms.Transform"]], "forward() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.forward"]], "reset() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.reset"]], "transform_done_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_done_spec"]], "transform_input_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_observation_spec"]], "transform_output_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_output_spec"]], "transform_reward_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_reward_spec"]], "transformedenv (class in torchrl.envs.transforms)": [[103, "torchrl.envs.transforms.TransformedEnv"]], "action_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.action_spec"]], "batch_locked (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.batch_locked"]], "done_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.done_spec"]], "eval() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.eval"]], "input_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.input_spec"]], "load_state_dict() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.load_state_dict"]], "observation_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.observation_spec"]], "output_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.output_spec"]], "reward_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.reward_spec"]], "set_seed() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.set_seed"]], "state_dict() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.state_dict"]], "to() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.to"]], "train() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.train"]], "unsqueezetransform (class in torchrl.envs.transforms)": [[104, "torchrl.envs.transforms.UnsqueezeTransform"]], "transform_input_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[104, "torchrl.envs.transforms.UnsqueezeTransform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[104, "torchrl.envs.transforms.UnsqueezeTransform.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[104, "torchrl.envs.transforms.UnsqueezeTransform.transform_reward_spec"]], "viprewardtransform (class in torchrl.envs.transforms)": [[105, "torchrl.envs.transforms.VIPRewardTransform"]], "forward() (torchrl.envs.transforms.viprewardtransform method)": [[105, "torchrl.envs.transforms.VIPRewardTransform.forward"]], "reset() (torchrl.envs.transforms.viprewardtransform method)": [[105, "torchrl.envs.transforms.VIPRewardTransform.reset"]], "viptransform (class in torchrl.envs.transforms)": [[106, "torchrl.envs.transforms.VIPTransform"]], "to() (torchrl.envs.transforms.viptransform method)": [[106, "torchrl.envs.transforms.VIPTransform.to"]], "vecnorm (class in torchrl.envs.transforms)": [[107, "torchrl.envs.transforms.VecNorm"]], "build_td_for_shared_vecnorm() (torchrl.envs.transforms.vecnorm static method)": [[107, "torchrl.envs.transforms.VecNorm.build_td_for_shared_vecnorm"]], "forward() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.forward"]], "get_extra_state() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.get_extra_state"]], "set_extra_state() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.set_extra_state"]], "to_observation_norm() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.to_observation_norm"]], "gsdenoise (class in torchrl.envs.transforms)": [[108, "torchrl.envs.transforms.gSDENoise"]], "check_env_specs() (in module torchrl.envs.utils)": [[109, "torchrl.envs.utils.check_env_specs"]], "exploration_mode() (in module torchrl.envs.utils)": [[110, "torchrl.envs.utils.exploration_mode"]], "get_available_libraries() (in module torchrl.envs.utils)": [[111, "torchrl.envs.utils.get_available_libraries"]], "make_composite_from_td() (in module torchrl.envs.utils)": [[112, "torchrl.envs.utils.make_composite_from_td"]], "set_exploration_mode() (in module torchrl.envs.utils)": [[113, "torchrl.envs.utils.set_exploration_mode"]], "step_mdp() (in module torchrl.envs.utils)": [[114, "torchrl.envs.utils.step_mdp"]], "cemplanner (class in torchrl.modules)": [[115, "torchrl.modules.CEMPlanner"]], "planning() (torchrl.modules.cemplanner method)": [[115, "torchrl.modules.CEMPlanner.planning"]], "convnet (class in torchrl.modules)": [[116, "torchrl.modules.ConvNet"]], "forward() (torchrl.modules.convnet method)": [[116, "torchrl.modules.ConvNet.forward"]], "ddpgcnnactor (class in torchrl.modules)": [[117, "torchrl.modules.DdpgCnnActor"]], "forward() (torchrl.modules.ddpgcnnactor method)": [[117, "torchrl.modules.DdpgCnnActor.forward"]], "ddpgcnnqnet (class in torchrl.modules)": [[118, "torchrl.modules.DdpgCnnQNet"]], "forward() (torchrl.modules.ddpgcnnqnet method)": [[118, "torchrl.modules.DdpgCnnQNet.forward"]], "ddpgmlpactor (class in torchrl.modules)": [[119, "torchrl.modules.DdpgMlpActor"]], "forward() (torchrl.modules.ddpgmlpactor method)": [[119, "torchrl.modules.DdpgMlpActor.forward"]], "ddpgmlpqnet (class in torchrl.modules)": [[120, "torchrl.modules.DdpgMlpQNet"]], "forward() (torchrl.modules.ddpgmlpqnet method)": [[120, "torchrl.modules.DdpgMlpQNet.forward"]], "delta (class in torchrl.modules)": [[121, "torchrl.modules.Delta"]], "log_prob() (torchrl.modules.delta method)": [[121, "torchrl.modules.Delta.log_prob"]], "mean (torchrl.modules.delta property)": [[121, "torchrl.modules.Delta.mean"]], "mode (torchrl.modules.delta property)": [[121, "torchrl.modules.Delta.mode"]], "rsample() (torchrl.modules.delta method)": [[121, "torchrl.modules.Delta.rsample"]], "sample() (torchrl.modules.delta method)": [[121, "torchrl.modules.Delta.sample"]], "distributionaldqnnet (class in torchrl.modules)": [[122, "torchrl.modules.DistributionalDQNnet"]], "forward() (torchrl.modules.distributionaldqnnet method)": [[122, "torchrl.modules.DistributionalDQNnet.forward"]], "distributionalqvaluehook (class in torchrl.modules)": [[123, "torchrl.modules.DistributionalQValueHook"]], "dreameractor (class in torchrl.modules)": [[124, "torchrl.modules.DreamerActor"]], "forward() (torchrl.modules.dreameractor method)": [[124, "torchrl.modules.DreamerActor.forward"]], "duelingcnndqnet (class in torchrl.modules)": [[125, "torchrl.modules.DuelingCnnDQNet"]], "forward() (torchrl.modules.duelingcnndqnet method)": [[125, "torchrl.modules.DuelingCnnDQNet.forward"]], "independentnormal (class in torchrl.modules)": [[126, "torchrl.modules.IndependentNormal"]], "mode (torchrl.modules.independentnormal property)": [[126, "torchrl.modules.IndependentNormal.mode"]], "lstmnet (class in torchrl.modules)": [[127, "torchrl.modules.LSTMNet"]], "forward() (torchrl.modules.lstmnet method)": [[127, "torchrl.modules.LSTMNet.forward"]], "mlp (class in torchrl.modules)": [[128, "torchrl.modules.MLP"]], "forward() (torchrl.modules.mlp method)": [[128, "torchrl.modules.MLP.forward"]], "mpcplannerbase (class in torchrl.modules)": [[129, "torchrl.modules.MPCPlannerBase"]], "forward() (torchrl.modules.mpcplannerbase method)": [[129, "torchrl.modules.MPCPlannerBase.forward"]], "planning() (torchrl.modules.mpcplannerbase method)": [[129, "torchrl.modules.MPCPlannerBase.planning"]], "mppiplanner (class in torchrl.modules)": [[130, "torchrl.modules.MPPIPlanner"]], "planning() (torchrl.modules.mppiplanner method)": [[130, "torchrl.modules.MPPIPlanner.planning"]], "noisylazylinear (class in torchrl.modules)": [[131, "torchrl.modules.NoisyLazyLinear"]], "initialize_parameters() (torchrl.modules.noisylazylinear method)": [[131, "torchrl.modules.NoisyLazyLinear.initialize_parameters"]], "noisylinear (class in torchrl.modules)": [[132, "torchrl.modules.NoisyLinear"]], "normalparamwrapper (class in torchrl.modules)": [[133, "torchrl.modules.NormalParamWrapper"]], "forward() (torchrl.modules.normalparamwrapper method)": [[133, "torchrl.modules.NormalParamWrapper.forward"]], "obsdecoder (class in torchrl.modules)": [[134, "torchrl.modules.ObsDecoder"]], "forward() (torchrl.modules.obsdecoder method)": [[134, "torchrl.modules.ObsDecoder.forward"]], "obsencoder (class in torchrl.modules)": [[135, "torchrl.modules.ObsEncoder"]], "forward() (torchrl.modules.obsencoder method)": [[135, "torchrl.modules.ObsEncoder.forward"]], "onehotcategorical (class in torchrl.modules)": [[136, "torchrl.modules.OneHotCategorical"]], "log_prob() (torchrl.modules.onehotcategorical method)": [[136, "torchrl.modules.OneHotCategorical.log_prob"]], "mode (torchrl.modules.onehotcategorical property)": [[136, "torchrl.modules.OneHotCategorical.mode"]], "rsample() (torchrl.modules.onehotcategorical method)": [[136, "torchrl.modules.OneHotCategorical.rsample"]], "sample() (torchrl.modules.onehotcategorical method)": [[136, "torchrl.modules.OneHotCategorical.sample"]], "qvaluehook (class in torchrl.modules)": [[137, "torchrl.modules.QValueHook"]], "rssmposterior (class in torchrl.modules)": [[138, "torchrl.modules.RSSMPosterior"]], "forward() (torchrl.modules.rssmposterior method)": [[138, "torchrl.modules.RSSMPosterior.forward"]], "rssmprior (class in torchrl.modules)": [[139, "torchrl.modules.RSSMPrior"]], "forward() (torchrl.modules.rssmprior method)": [[139, "torchrl.modules.RSSMPrior.forward"]], "tanhdelta (class in torchrl.modules)": [[140, "torchrl.modules.TanhDelta"]], "mean (torchrl.modules.tanhdelta property)": [[140, "torchrl.modules.TanhDelta.mean"]], "mode (torchrl.modules.tanhdelta property)": [[140, "torchrl.modules.TanhDelta.mode"]], "tanhnormal (class in torchrl.modules)": [[141, "torchrl.modules.TanhNormal"]], "mode (torchrl.modules.tanhnormal property)": [[141, "torchrl.modules.TanhNormal.mode"]], "truncatednormal (class in torchrl.modules)": [[142, "torchrl.modules.TruncatedNormal"]], "log_prob() (torchrl.modules.truncatednormal method)": [[142, "torchrl.modules.TruncatedNormal.log_prob"]], "mode (torchrl.modules.truncatednormal property)": [[142, "torchrl.modules.TruncatedNormal.mode"]], "reset_noise (class in torchrl.modules)": [[143, "torchrl.modules.reset_noise"]], "actor (class in torchrl.modules.tensordict_module)": [[144, "torchrl.modules.tensordict_module.Actor"]], "actorcriticoperator (class in torchrl.modules.tensordict_module)": [[145, "torchrl.modules.tensordict_module.ActorCriticOperator"]], "get_critic_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[145, "torchrl.modules.tensordict_module.ActorCriticOperator.get_critic_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[145, "torchrl.modules.tensordict_module.ActorCriticOperator.get_value_operator"]], "actorcriticwrapper (class in torchrl.modules.tensordict_module)": [[146, "torchrl.modules.tensordict_module.ActorCriticWrapper"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[146, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[146, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_value_operator"]], "actorvalueoperator (class in torchrl.modules.tensordict_module)": [[147, "torchrl.modules.tensordict_module.ActorValueOperator"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[147, "torchrl.modules.tensordict_module.ActorValueOperator.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[147, "torchrl.modules.tensordict_module.ActorValueOperator.get_value_operator"]], "additivegaussianwrapper (class in torchrl.modules.tensordict_module)": [[148, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper"]], "forward() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[148, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.forward"]], "step() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[148, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.step"]], "distributionalqvalueactor (class in torchrl.modules.tensordict_module)": [[149, "torchrl.modules.tensordict_module.DistributionalQValueActor"]], "egreedywrapper (class in torchrl.modules.tensordict_module)": [[150, "torchrl.modules.tensordict_module.EGreedyWrapper"]], "forward() (torchrl.modules.tensordict_module.egreedywrapper method)": [[150, "torchrl.modules.tensordict_module.EGreedyWrapper.forward"]], "step() (torchrl.modules.tensordict_module.egreedywrapper method)": [[150, "torchrl.modules.tensordict_module.EGreedyWrapper.step"]], "ornsteinuhlenbeckprocesswrapper (class in torchrl.modules.tensordict_module)": [[151, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper"]], "forward() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[151, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.forward"]], "step() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[151, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.step"]], "probabilisticactor (class in torchrl.modules.tensordict_module)": [[152, "torchrl.modules.tensordict_module.ProbabilisticActor"]], "qvalueactor (class in torchrl.modules.tensordict_module)": [[153, "torchrl.modules.tensordict_module.QValueActor"]], "safemodule (class in torchrl.modules.tensordict_module)": [[154, "torchrl.modules.tensordict_module.SafeModule"]], "random() (torchrl.modules.tensordict_module.safemodule method)": [[154, "torchrl.modules.tensordict_module.SafeModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safemodule method)": [[154, "torchrl.modules.tensordict_module.SafeModule.random_sample"]], "to() (torchrl.modules.tensordict_module.safemodule method)": [[154, "torchrl.modules.tensordict_module.SafeModule.to"]], "safeprobabilisticmodule (class in torchrl.modules.tensordict_module)": [[155, "torchrl.modules.tensordict_module.SafeProbabilisticModule"]], "random() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[155, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[155, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random_sample"]], "safeprobabilistictensordictsequential (class in torchrl.modules.tensordict_module)": [[156, "torchrl.modules.tensordict_module.SafeProbabilisticTensorDictSequential"]], "safesequential (class in torchrl.modules.tensordict_module)": [[157, "torchrl.modules.tensordict_module.SafeSequential"]], "valueoperator (class in torchrl.modules.tensordict_module)": [[158, "torchrl.modules.tensordict_module.ValueOperator"]], "worldmodelwrapper (class in torchrl.modules.tensordict_module)": [[159, "torchrl.modules.tensordict_module.WorldModelWrapper"]], "get_reward_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[159, "torchrl.modules.tensordict_module.WorldModelWrapper.get_reward_operator"]], "get_transition_model_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[159, "torchrl.modules.tensordict_module.WorldModelWrapper.get_transition_model_operator"]], "biased_softplus (class in torchrl.modules.utils)": [[160, "torchrl.modules.utils.biased_softplus"]], "forward() (torchrl.modules.utils.biased_softplus method)": [[160, "torchrl.modules.utils.biased_softplus.forward"]], "inv_softplus (class in torchrl.modules.utils)": [[161, "torchrl.modules.utils.inv_softplus"]], "mappings (class in torchrl.modules.utils)": [[162, "torchrl.modules.utils.mappings"]], "a2closs (class in torchrl.objectives)": [[163, "torchrl.objectives.A2CLoss"]], "forward() (torchrl.objectives.a2closs method)": [[163, "torchrl.objectives.A2CLoss.forward"]], "make_value_estimator() (torchrl.objectives.a2closs method)": [[163, "torchrl.objectives.A2CLoss.make_value_estimator"]], "clipppoloss (class in torchrl.objectives)": [[164, "torchrl.objectives.ClipPPOLoss"]], "forward() (torchrl.objectives.clipppoloss method)": [[164, "torchrl.objectives.ClipPPOLoss.forward"]], "ddpgloss (class in torchrl.objectives)": [[165, "torchrl.objectives.DDPGLoss"]], "forward() (torchrl.objectives.ddpgloss method)": [[165, "torchrl.objectives.DDPGLoss.forward"]], "make_value_estimator() (torchrl.objectives.ddpgloss method)": [[165, "torchrl.objectives.DDPGLoss.make_value_estimator"]], "dqnloss (class in torchrl.objectives)": [[166, "torchrl.objectives.DQNLoss"]], "forward() (torchrl.objectives.dqnloss method)": [[166, "torchrl.objectives.DQNLoss.forward"]], "make_value_estimator() (torchrl.objectives.dqnloss method)": [[166, "torchrl.objectives.DQNLoss.make_value_estimator"]], "discretesacloss (class in torchrl.objectives)": [[167, "torchrl.objectives.DiscreteSACLoss"]], "forward() (torchrl.objectives.discretesacloss method)": [[167, "torchrl.objectives.DiscreteSACLoss.forward"]], "make_value_estimator() (torchrl.objectives.discretesacloss method)": [[167, "torchrl.objectives.DiscreteSACLoss.make_value_estimator"]], "distributionaldqnloss (class in torchrl.objectives)": [[168, "torchrl.objectives.DistributionalDQNLoss"]], "forward() (torchrl.objectives.distributionaldqnloss method)": [[168, "torchrl.objectives.DistributionalDQNLoss.forward"]], "make_value_estimator() (torchrl.objectives.distributionaldqnloss method)": [[168, "torchrl.objectives.DistributionalDQNLoss.make_value_estimator"]], "dreameractorloss (class in torchrl.objectives)": [[169, "torchrl.objectives.DreamerActorLoss"]], "forward() (torchrl.objectives.dreameractorloss method)": [[169, "torchrl.objectives.DreamerActorLoss.forward"]], "make_value_estimator() (torchrl.objectives.dreameractorloss method)": [[169, "torchrl.objectives.DreamerActorLoss.make_value_estimator"]], "dreamermodelloss (class in torchrl.objectives)": [[170, "torchrl.objectives.DreamerModelLoss"]], "forward() (torchrl.objectives.dreamermodelloss method)": [[170, "torchrl.objectives.DreamerModelLoss.forward"]], "dreamervalueloss (class in torchrl.objectives)": [[171, "torchrl.objectives.DreamerValueLoss"]], "forward() (torchrl.objectives.dreamervalueloss method)": [[171, "torchrl.objectives.DreamerValueLoss.forward"]], "hardupdate (class in torchrl.objectives)": [[172, "torchrl.objectives.HardUpdate"]], "iqlloss (class in torchrl.objectives)": [[173, "torchrl.objectives.IQLLoss"]], "forward() (torchrl.objectives.iqlloss method)": [[173, "torchrl.objectives.IQLLoss.forward"]], "loss_value_diff() (torchrl.objectives.iqlloss static method)": [[173, "torchrl.objectives.IQLLoss.loss_value_diff"]], "make_value_estimator() (torchrl.objectives.iqlloss method)": [[173, "torchrl.objectives.IQLLoss.make_value_estimator"]], "klpenppoloss (class in torchrl.objectives)": [[174, "torchrl.objectives.KLPENPPOLoss"]], "forward() (torchrl.objectives.klpenppoloss method)": [[174, "torchrl.objectives.KLPENPPOLoss.forward"]], "lossmodule (class in torchrl.objectives)": [[175, "torchrl.objectives.LossModule"]], "convert_to_functional() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.convert_to_functional"]], "cpu() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.cpu"]], "cuda() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.cuda"]], "double() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.double"]], "float() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.float"]], "forward() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.forward"]], "half() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.half"]], "make_value_estimator() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.make_value_estimator"]], "named_parameters() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.named_parameters"]], "parameters() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.parameters"]], "register_buffer() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.register_buffer"]], "to() (torchrl.objectives.lossmodule method)": [[175, "torchrl.objectives.LossModule.to"]], "value_estimator (torchrl.objectives.lossmodule property)": [[175, "torchrl.objectives.LossModule.value_estimator"]], "ppoloss (class in torchrl.objectives)": [[176, "torchrl.objectives.PPOLoss"]], "forward() (torchrl.objectives.ppoloss method)": [[176, "torchrl.objectives.PPOLoss.forward"]], "make_value_estimator() (torchrl.objectives.ppoloss method)": [[176, "torchrl.objectives.PPOLoss.make_value_estimator"]], "redqloss (class in torchrl.objectives)": [[177, "torchrl.objectives.REDQLoss"]], "forward() (torchrl.objectives.redqloss method)": [[177, "torchrl.objectives.REDQLoss.forward"]], "make_value_estimator() (torchrl.objectives.redqloss method)": [[177, "torchrl.objectives.REDQLoss.make_value_estimator"]], "reinforceloss (class in torchrl.objectives)": [[178, "torchrl.objectives.ReinforceLoss"]], "forward() (torchrl.objectives.reinforceloss method)": [[178, "torchrl.objectives.ReinforceLoss.forward"]], "make_value_estimator() (torchrl.objectives.reinforceloss method)": [[178, "torchrl.objectives.ReinforceLoss.make_value_estimator"]], "sacloss (class in torchrl.objectives)": [[179, "torchrl.objectives.SACLoss"]], "forward() (torchrl.objectives.sacloss method)": [[179, "torchrl.objectives.SACLoss.forward"]], "make_value_estimator() (torchrl.objectives.sacloss method)": [[179, "torchrl.objectives.SACLoss.make_value_estimator"]], "softupdate (class in torchrl.objectives)": [[180, "torchrl.objectives.SoftUpdate"]], "td3loss (class in torchrl.objectives)": [[181, "torchrl.objectives.TD3Loss"]], "forward() (torchrl.objectives.td3loss method)": [[181, "torchrl.objectives.TD3Loss.forward"]], "make_value_estimator() (torchrl.objectives.td3loss method)": [[181, "torchrl.objectives.TD3Loss.make_value_estimator"]], "valueestimators (class in torchrl.objectives)": [[182, "torchrl.objectives.ValueEstimators"]], "default_value_kwargs (class in torchrl.objectives)": [[183, "torchrl.objectives.default_value_kwargs"]], "distance_loss (class in torchrl.objectives)": [[184, "torchrl.objectives.distance_loss"]], "hold_out_net (class in torchrl.objectives)": [[185, "torchrl.objectives.hold_out_net"]], "hold_out_params (class in torchrl.objectives)": [[186, "torchrl.objectives.hold_out_params"]], "next_state_value (class in torchrl.objectives)": [[187, "torchrl.objectives.next_state_value"]], "gae (class in torchrl.objectives.value)": [[188, "torchrl.objectives.value.GAE"]], "forward() (torchrl.objectives.value.gae method)": [[188, "torchrl.objectives.value.GAE.forward"]], "value_estimate() (torchrl.objectives.value.gae method)": [[188, "torchrl.objectives.value.GAE.value_estimate"]], "td0estimator (class in torchrl.objectives.value)": [[189, "torchrl.objectives.value.TD0Estimator"]], "forward() (torchrl.objectives.value.td0estimator method)": [[189, "torchrl.objectives.value.TD0Estimator.forward"]], "value_estimate() (torchrl.objectives.value.td0estimator method)": [[189, "torchrl.objectives.value.TD0Estimator.value_estimate"]], "td1estimator (class in torchrl.objectives.value)": [[190, "torchrl.objectives.value.TD1Estimator"]], "forward() (torchrl.objectives.value.td1estimator method)": [[190, "torchrl.objectives.value.TD1Estimator.forward"]], "value_estimate() (torchrl.objectives.value.td1estimator method)": [[190, "torchrl.objectives.value.TD1Estimator.value_estimate"]], "tdlambdaestimator (class in torchrl.objectives.value)": [[191, "torchrl.objectives.value.TDLambdaEstimator"]], "forward() (torchrl.objectives.value.tdlambdaestimator method)": [[191, "torchrl.objectives.value.TDLambdaEstimator.forward"]], "value_estimate() (torchrl.objectives.value.tdlambdaestimator method)": [[191, "torchrl.objectives.value.TDLambdaEstimator.value_estimate"]], "valueestimatorbase (class in torchrl.objectives.value)": [[192, "torchrl.objectives.value.ValueEstimatorBase"]], "forward() (torchrl.objectives.value.valueestimatorbase method)": [[192, "torchrl.objectives.value.ValueEstimatorBase.forward"]], "value_estimate() (torchrl.objectives.value.valueestimatorbase method)": [[192, "torchrl.objectives.value.ValueEstimatorBase.value_estimate"]], "generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[193, "torchrl.objectives.value.functional.generalized_advantage_estimate"]], "td0_advantage_estimate (class in torchrl.objectives.value.functional)": [[194, "torchrl.objectives.value.functional.td0_advantage_estimate"]], "td0_return_estimate (class in torchrl.objectives.value.functional)": [[195, "torchrl.objectives.value.functional.td0_return_estimate"]], "td1_advantage_estimate (class in torchrl.objectives.value.functional)": [[196, "torchrl.objectives.value.functional.td1_advantage_estimate"]], "td1_return_estimate (class in torchrl.objectives.value.functional)": [[197, "torchrl.objectives.value.functional.td1_return_estimate"]], "td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[198, "torchrl.objectives.value.functional.td_lambda_advantage_estimate"]], "td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[199, "torchrl.objectives.value.functional.td_lambda_return_estimate"]], "vec_generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[200, "torchrl.objectives.value.functional.vec_generalized_advantage_estimate"]], "vec_td1_advantage_estimate (class in torchrl.objectives.value.functional)": [[201, "torchrl.objectives.value.functional.vec_td1_advantage_estimate"]], "vec_td1_return_estimate (class in torchrl.objectives.value.functional)": [[202, "torchrl.objectives.value.functional.vec_td1_return_estimate"]], "vec_td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[203, "torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate"]], "vec_td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[204, "torchrl.objectives.value.functional.vec_td_lambda_return_estimate"]], "tensordictrecorder() (in module torchrl.record)": [[205, "torchrl.record.TensorDictRecorder"]], "videorecorder() (in module torchrl.record)": [[206, "torchrl.record.VideoRecorder"]], "logger() (in module torchrl.record.loggers)": [[207, "torchrl.record.loggers.Logger"]], "csvlogger() (in module torchrl.record.loggers.csv)": [[208, "torchrl.record.loggers.csv.CSVLogger"]], "generate_exp_name() (in module torchrl.record.loggers)": [[209, "torchrl.record.loggers.generate_exp_name"]], "get_logger() (in module torchrl.record.loggers)": [[210, "torchrl.record.loggers.get_logger"]], "mlflowlogger() (in module torchrl.record.loggers.mlflow)": [[211, "torchrl.record.loggers.mlflow.MLFlowLogger"]], "tensorboardlogger() (in module torchrl.record.loggers.tensorboard)": [[212, "torchrl.record.loggers.tensorboard.TensorboardLogger"]], "wandblogger() (in module torchrl.record.loggers.wandb)": [[213, "torchrl.record.loggers.wandb.WandbLogger"]], "batchsubsampler (class in torchrl.trainers)": [[214, "torchrl.trainers.BatchSubSampler"]], "register() (torchrl.trainers.batchsubsampler method)": [[214, "torchrl.trainers.BatchSubSampler.register"]], "clearcudacache (class in torchrl.trainers)": [[215, "torchrl.trainers.ClearCudaCache"]], "register() (torchrl.trainers.clearcudacache method)": [[215, "torchrl.trainers.ClearCudaCache.register"]], "countframeslog (class in torchrl.trainers)": [[216, "torchrl.trainers.CountFramesLog"]], "register() (torchrl.trainers.countframeslog method)": [[216, "torchrl.trainers.CountFramesLog.register"]], "logreward (class in torchrl.trainers)": [[217, "torchrl.trainers.LogReward"]], "register() (torchrl.trainers.logreward method)": [[217, "torchrl.trainers.LogReward.register"]], "optimizerhook (class in torchrl.trainers)": [[218, "torchrl.trainers.OptimizerHook"]], "register() (torchrl.trainers.optimizerhook method)": [[218, "torchrl.trainers.OptimizerHook.register"]], "recorder (class in torchrl.trainers)": [[219, "torchrl.trainers.Recorder"]], "register() (torchrl.trainers.recorder method)": [[219, "torchrl.trainers.Recorder.register"]], "replaybuffertrainer (class in torchrl.trainers)": [[220, "torchrl.trainers.ReplayBufferTrainer"]], "register() (torchrl.trainers.replaybuffertrainer method)": [[220, "torchrl.trainers.ReplayBufferTrainer.register"]], "rewardnormalizer (class in torchrl.trainers)": [[221, "torchrl.trainers.RewardNormalizer"]], "register() (torchrl.trainers.rewardnormalizer method)": [[221, "torchrl.trainers.RewardNormalizer.register"]], "selectkeys (class in torchrl.trainers)": [[222, "torchrl.trainers.SelectKeys"]], "register() (torchrl.trainers.selectkeys method)": [[222, "torchrl.trainers.SelectKeys.register"]], "trainer (class in torchrl.trainers)": [[223, "torchrl.trainers.Trainer"]], "trainerhookbase (class in torchrl.trainers)": [[224, "torchrl.trainers.TrainerHookBase"]], "register() (torchrl.trainers.trainerhookbase method)": [[224, "torchrl.trainers.TrainerHookBase.register"]], "updateweights (class in torchrl.trainers)": [[225, "torchrl.trainers.UpdateWeights"]], "register() (torchrl.trainers.updateweights method)": [[225, "torchrl.trainers.UpdateWeights.register"]], "correct_for_frame_skip() (in module torchrl.trainers.helpers)": [[226, "torchrl.trainers.helpers.correct_for_frame_skip"]], "get_stats_random_rollout() (in module torchrl.trainers.helpers)": [[227, "torchrl.trainers.helpers.get_stats_random_rollout"]], "make_a2c_loss() (in module torchrl.trainers.helpers)": [[228, "torchrl.trainers.helpers.make_a2c_loss"]], "make_a2c_model() (in module torchrl.trainers.helpers)": [[229, "torchrl.trainers.helpers.make_a2c_model"]], "make_collector_offpolicy() (in module torchrl.trainers.helpers)": [[230, "torchrl.trainers.helpers.make_collector_offpolicy"]], "make_collector_onpolicy() (in module torchrl.trainers.helpers)": [[231, "torchrl.trainers.helpers.make_collector_onpolicy"]], "make_ddpg_actor() (in module torchrl.trainers.helpers)": [[232, "torchrl.trainers.helpers.make_ddpg_actor"]], "make_ddpg_loss() (in module torchrl.trainers.helpers)": [[233, "torchrl.trainers.helpers.make_ddpg_loss"]], "make_dqn_actor() (in module torchrl.trainers.helpers)": [[234, "torchrl.trainers.helpers.make_dqn_actor"]], "make_dqn_loss() (in module torchrl.trainers.helpers)": [[235, "torchrl.trainers.helpers.make_dqn_loss"]], "make_ppo_loss() (in module torchrl.trainers.helpers)": [[236, "torchrl.trainers.helpers.make_ppo_loss"]], "make_ppo_model() (in module torchrl.trainers.helpers)": [[237, "torchrl.trainers.helpers.make_ppo_model"]], "make_redq_loss() (in module torchrl.trainers.helpers)": [[238, "torchrl.trainers.helpers.make_redq_loss"]], "make_redq_model() (in module torchrl.trainers.helpers)": [[239, "torchrl.trainers.helpers.make_redq_model"]], "make_replay_buffer() (in module torchrl.trainers.helpers)": [[240, "torchrl.trainers.helpers.make_replay_buffer"]], "make_sac_loss() (in module torchrl.trainers.helpers)": [[241, "torchrl.trainers.helpers.make_sac_loss"]], "make_sac_model() (in module torchrl.trainers.helpers)": [[242, "torchrl.trainers.helpers.make_sac_model"]], "make_target_updater() (in module torchrl.trainers.helpers)": [[243, "torchrl.trainers.helpers.make_target_updater"]], "make_trainer() (in module torchrl.trainers.helpers)": [[244, "torchrl.trainers.helpers.make_trainer"]], "parallel_env_constructor() (in module torchrl.trainers.helpers)": [[245, "torchrl.trainers.helpers.parallel_env_constructor"]], "sync_async_collector() (in module torchrl.trainers.helpers)": [[246, "torchrl.trainers.helpers.sync_async_collector"]], "sync_sync_collector() (in module torchrl.trainers.helpers)": [[247, "torchrl.trainers.helpers.sync_sync_collector"]], "transformed_env_constructor() (in module torchrl.trainers.helpers)": [[248, "torchrl.trainers.helpers.transformed_env_constructor"]]}})