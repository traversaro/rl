Search.setIndex({"docnames": ["index", "reference/collectors", "reference/data", "reference/envs", "reference/generated/knowledge_base/DEBUGGING_RL", "reference/generated/knowledge_base/GYM", "reference/generated/knowledge_base/HABITAT", "reference/generated/knowledge_base/MUJOCO_INSTALLATION", "reference/generated/knowledge_base/PRO-TIPS", "reference/generated/knowledge_base/RESOURCES", "reference/generated/knowledge_base/VERSIONING_ISSUES", "reference/generated/torchrl._utils.implement_for", "reference/generated/torchrl.collectors.collectors.DataCollectorBase", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector", "reference/generated/torchrl.collectors.collectors.RandomPolicy", "reference/generated/torchrl.collectors.collectors.SyncDataCollector", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector", "reference/generated/torchrl.collectors.distributed.DistributedDataCollector", "reference/generated/torchrl.collectors.distributed.DistributedSyncDataCollector", "reference/generated/torchrl.collectors.distributed.RPCDataCollector", "reference/generated/torchrl.collectors.distributed.RayCollector", "reference/generated/torchrl.collectors.distributed.submitit_delayed_launcher", "reference/generated/torchrl.collectors.utils.split_trajectories", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec", "reference/generated/torchrl.data.BoundedTensorSpec", "reference/generated/torchrl.data.CompositeSpec", "reference/generated/torchrl.data.DiscreteTensorSpec", "reference/generated/torchrl.data.MultiDiscreteTensorSpec", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec", "reference/generated/torchrl.data.MultiStep", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec", "reference/generated/torchrl.data.PrioritizedReplayBuffer", "reference/generated/torchrl.data.ReplayBuffer", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer", "reference/generated/torchrl.data.TensorDictReplayBuffer", "reference/generated/torchrl.data.TensorSpec", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec", "reference/generated/torchrl.data.datasets.D4RLExperienceReplay", "reference/generated/torchrl.data.datasets.OpenMLExperienceReplay", "reference/generated/torchrl.data.replay_buffers.LazyMemmapStorage", "reference/generated/torchrl.data.replay_buffers.LazyTensorStorage", "reference/generated/torchrl.data.replay_buffers.ListStorage", "reference/generated/torchrl.data.replay_buffers.PrioritizedSampler", "reference/generated/torchrl.data.replay_buffers.RandomSampler", "reference/generated/torchrl.data.replay_buffers.RoundRobinWriter", "reference/generated/torchrl.data.replay_buffers.Sampler", "reference/generated/torchrl.data.replay_buffers.SamplerWithoutReplacement", "reference/generated/torchrl.data.replay_buffers.Storage", "reference/generated/torchrl.data.replay_buffers.Writer", "reference/generated/torchrl.envs.EnvBase", "reference/generated/torchrl.envs.EnvCreator", "reference/generated/torchrl.envs.EnvMetaData", "reference/generated/torchrl.envs.GymLikeEnv", "reference/generated/torchrl.envs.ModelBasedEnvBase", "reference/generated/torchrl.envs.MultiThreadedEnv", "reference/generated/torchrl.envs.ParallelEnv", "reference/generated/torchrl.envs.SerialEnv", "reference/generated/torchrl.envs.libs.brax.BraxEnv", "reference/generated/torchrl.envs.libs.brax.BraxWrapper", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper", "reference/generated/torchrl.envs.libs.gym.GymEnv", "reference/generated/torchrl.envs.libs.gym.GymWrapper", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper", "reference/generated/torchrl.envs.libs.openml.OpenMLEnv", "reference/generated/torchrl.envs.libs.vmas.VmasEnv", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv", "reference/generated/torchrl.envs.transforms.BinarizeReward", "reference/generated/torchrl.envs.transforms.CatFrames", "reference/generated/torchrl.envs.transforms.CatTensors", "reference/generated/torchrl.envs.transforms.CenterCrop", "reference/generated/torchrl.envs.transforms.Compose", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection", "reference/generated/torchrl.envs.transforms.DoubleToFloat", "reference/generated/torchrl.envs.transforms.ExcludeTransform", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck", "reference/generated/torchrl.envs.transforms.FlattenObservation", "reference/generated/torchrl.envs.transforms.FrameSkipTransform", "reference/generated/torchrl.envs.transforms.GrayScale", "reference/generated/torchrl.envs.transforms.InitTracker", "reference/generated/torchrl.envs.transforms.NoopResetEnv", "reference/generated/torchrl.envs.transforms.ObservationNorm", "reference/generated/torchrl.envs.transforms.ObservationTransform", "reference/generated/torchrl.envs.transforms.PinMemoryTransform", "reference/generated/torchrl.envs.transforms.R3MTransform", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict", "reference/generated/torchrl.envs.transforms.RenameTransform", "reference/generated/torchrl.envs.transforms.Resize", "reference/generated/torchrl.envs.transforms.RewardClipping", "reference/generated/torchrl.envs.transforms.RewardScaling", "reference/generated/torchrl.envs.transforms.RewardSum", "reference/generated/torchrl.envs.transforms.SelectTransform", "reference/generated/torchrl.envs.transforms.SqueezeTransform", "reference/generated/torchrl.envs.transforms.StepCounter", "reference/generated/torchrl.envs.transforms.TensorDictPrimer", "reference/generated/torchrl.envs.transforms.TimeMaxPool", "reference/generated/torchrl.envs.transforms.ToTensorImage", "reference/generated/torchrl.envs.transforms.Transform", "reference/generated/torchrl.envs.transforms.TransformedEnv", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform", "reference/generated/torchrl.envs.transforms.VIPRewardTransform", "reference/generated/torchrl.envs.transforms.VIPTransform", "reference/generated/torchrl.envs.transforms.VecNorm", "reference/generated/torchrl.envs.transforms.gSDENoise", "reference/generated/torchrl.envs.utils.check_env_specs", "reference/generated/torchrl.envs.utils.exploration_mode", "reference/generated/torchrl.envs.utils.exploration_type", "reference/generated/torchrl.envs.utils.get_available_libraries", "reference/generated/torchrl.envs.utils.make_composite_from_td", "reference/generated/torchrl.envs.utils.set_exploration_mode", "reference/generated/torchrl.envs.utils.set_exploration_type", "reference/generated/torchrl.envs.utils.step_mdp", "reference/generated/torchrl.modules.CEMPlanner", "reference/generated/torchrl.modules.ConvNet", "reference/generated/torchrl.modules.DdpgCnnActor", "reference/generated/torchrl.modules.DdpgCnnQNet", "reference/generated/torchrl.modules.DdpgMlpActor", "reference/generated/torchrl.modules.DdpgMlpQNet", "reference/generated/torchrl.modules.Delta", "reference/generated/torchrl.modules.DistributionalDQNnet", "reference/generated/torchrl.modules.DistributionalQValueHook", "reference/generated/torchrl.modules.DreamerActor", "reference/generated/torchrl.modules.DuelingCnnDQNet", "reference/generated/torchrl.modules.IndependentNormal", "reference/generated/torchrl.modules.LSTMNet", "reference/generated/torchrl.modules.MLP", "reference/generated/torchrl.modules.MPCPlannerBase", "reference/generated/torchrl.modules.MPPIPlanner", "reference/generated/torchrl.modules.NoisyLazyLinear", "reference/generated/torchrl.modules.NoisyLinear", "reference/generated/torchrl.modules.NormalParamWrapper", "reference/generated/torchrl.modules.ObsDecoder", "reference/generated/torchrl.modules.ObsEncoder", "reference/generated/torchrl.modules.OneHotCategorical", "reference/generated/torchrl.modules.QValueHook", "reference/generated/torchrl.modules.RSSMPosterior", "reference/generated/torchrl.modules.RSSMPrior", "reference/generated/torchrl.modules.TanhDelta", "reference/generated/torchrl.modules.TanhNormal", "reference/generated/torchrl.modules.TruncatedNormal", "reference/generated/torchrl.modules.reset_noise", "reference/generated/torchrl.modules.tensordict_module.Actor", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueModule", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor", "reference/generated/torchrl.modules.tensordict_module.QValueActor", "reference/generated/torchrl.modules.tensordict_module.QValueModule", "reference/generated/torchrl.modules.tensordict_module.SafeModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticTensorDictSequential", "reference/generated/torchrl.modules.tensordict_module.SafeSequential", "reference/generated/torchrl.modules.tensordict_module.ValueOperator", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper", "reference/generated/torchrl.modules.utils.biased_softplus", "reference/generated/torchrl.modules.utils.inv_softplus", "reference/generated/torchrl.modules.utils.mappings", "reference/generated/torchrl.objectives.A2CLoss", "reference/generated/torchrl.objectives.ClipPPOLoss", "reference/generated/torchrl.objectives.DDPGLoss", "reference/generated/torchrl.objectives.DQNLoss", "reference/generated/torchrl.objectives.DiscreteSACLoss", "reference/generated/torchrl.objectives.DistributionalDQNLoss", "reference/generated/torchrl.objectives.DreamerActorLoss", "reference/generated/torchrl.objectives.DreamerModelLoss", "reference/generated/torchrl.objectives.DreamerValueLoss", "reference/generated/torchrl.objectives.HardUpdate", "reference/generated/torchrl.objectives.IQLLoss", "reference/generated/torchrl.objectives.KLPENPPOLoss", "reference/generated/torchrl.objectives.LossModule", "reference/generated/torchrl.objectives.PPOLoss", "reference/generated/torchrl.objectives.REDQLoss", "reference/generated/torchrl.objectives.ReinforceLoss", "reference/generated/torchrl.objectives.SACLoss", "reference/generated/torchrl.objectives.SoftUpdate", "reference/generated/torchrl.objectives.TD3Loss", "reference/generated/torchrl.objectives.ValueEstimators", "reference/generated/torchrl.objectives.default_value_kwargs", "reference/generated/torchrl.objectives.distance_loss", "reference/generated/torchrl.objectives.hold_out_net", "reference/generated/torchrl.objectives.hold_out_params", "reference/generated/torchrl.objectives.next_state_value", "reference/generated/torchrl.objectives.value.GAE", "reference/generated/torchrl.objectives.value.TD0Estimator", "reference/generated/torchrl.objectives.value.TD1Estimator", "reference/generated/torchrl.objectives.value.TDLambdaEstimator", "reference/generated/torchrl.objectives.value.ValueEstimatorBase", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td0_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td0_return_estimate", "reference/generated/torchrl.objectives.value.functional.td1_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td1_return_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td1_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td1_return_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate", "reference/generated/torchrl.record.TensorDictRecorder", "reference/generated/torchrl.record.VideoRecorder", "reference/generated/torchrl.record.loggers.Logger", "reference/generated/torchrl.record.loggers.csv.CSVLogger", "reference/generated/torchrl.record.loggers.generate_exp_name", "reference/generated/torchrl.record.loggers.get_logger", "reference/generated/torchrl.record.loggers.mlflow.MLFlowLogger", "reference/generated/torchrl.record.loggers.tensorboard.TensorboardLogger", "reference/generated/torchrl.record.loggers.wandb.WandbLogger", "reference/generated/torchrl.trainers.BatchSubSampler", "reference/generated/torchrl.trainers.ClearCudaCache", "reference/generated/torchrl.trainers.CountFramesLog", "reference/generated/torchrl.trainers.LogReward", "reference/generated/torchrl.trainers.OptimizerHook", "reference/generated/torchrl.trainers.Recorder", "reference/generated/torchrl.trainers.ReplayBufferTrainer", "reference/generated/torchrl.trainers.RewardNormalizer", "reference/generated/torchrl.trainers.SelectKeys", "reference/generated/torchrl.trainers.Trainer", "reference/generated/torchrl.trainers.TrainerHookBase", "reference/generated/torchrl.trainers.UpdateWeights", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout", "reference/generated/torchrl.trainers.helpers.make_a2c_loss", "reference/generated/torchrl.trainers.helpers.make_a2c_model", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss", "reference/generated/torchrl.trainers.helpers.make_dqn_actor", "reference/generated/torchrl.trainers.helpers.make_dqn_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_model", "reference/generated/torchrl.trainers.helpers.make_redq_loss", "reference/generated/torchrl.trainers.helpers.make_redq_model", "reference/generated/torchrl.trainers.helpers.make_replay_buffer", "reference/generated/torchrl.trainers.helpers.make_sac_loss", "reference/generated/torchrl.trainers.helpers.make_sac_model", "reference/generated/torchrl.trainers.helpers.make_target_updater", "reference/generated/torchrl.trainers.helpers.make_trainer", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor", "reference/generated/torchrl.trainers.helpers.sync_async_collector", "reference/generated/torchrl.trainers.helpers.sync_sync_collector", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor", "reference/generated/tutorials/README", "reference/index", "reference/knowledge_base", "reference/modules", "reference/objectives", "reference/trainers", "reference/utils", "tutorials/coding_ddpg", "tutorials/coding_dqn", "tutorials/coding_ppo", "tutorials/index", "tutorials/multi_task", "tutorials/pendulum", "tutorials/pretrained_models", "tutorials/sg_execution_times", "tutorials/torchrl_demo", "tutorials/torchrl_envs"], "filenames": ["index.rst", "reference/collectors.rst", "reference/data.rst", "reference/envs.rst", "reference/generated/knowledge_base/DEBUGGING_RL.rst", "reference/generated/knowledge_base/GYM.rst", "reference/generated/knowledge_base/HABITAT.rst", "reference/generated/knowledge_base/MUJOCO_INSTALLATION.rst", "reference/generated/knowledge_base/PRO-TIPS.rst", "reference/generated/knowledge_base/RESOURCES.rst", "reference/generated/knowledge_base/VERSIONING_ISSUES.rst", "reference/generated/torchrl._utils.implement_for.rst", "reference/generated/torchrl.collectors.collectors.DataCollectorBase.rst", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.RandomPolicy.rst", "reference/generated/torchrl.collectors.collectors.SyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector.rst", "reference/generated/torchrl.collectors.distributed.DistributedDataCollector.rst", "reference/generated/torchrl.collectors.distributed.DistributedSyncDataCollector.rst", "reference/generated/torchrl.collectors.distributed.RPCDataCollector.rst", "reference/generated/torchrl.collectors.distributed.RayCollector.rst", "reference/generated/torchrl.collectors.distributed.submitit_delayed_launcher.rst", "reference/generated/torchrl.collectors.utils.split_trajectories.rst", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec.rst", "reference/generated/torchrl.data.BoundedTensorSpec.rst", "reference/generated/torchrl.data.CompositeSpec.rst", "reference/generated/torchrl.data.DiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiDiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiStep.rst", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.PrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.ReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictReplayBuffer.rst", "reference/generated/torchrl.data.TensorSpec.rst", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec.rst", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec.rst", "reference/generated/torchrl.data.datasets.D4RLExperienceReplay.rst", "reference/generated/torchrl.data.datasets.OpenMLExperienceReplay.rst", "reference/generated/torchrl.data.replay_buffers.LazyMemmapStorage.rst", "reference/generated/torchrl.data.replay_buffers.LazyTensorStorage.rst", "reference/generated/torchrl.data.replay_buffers.ListStorage.rst", "reference/generated/torchrl.data.replay_buffers.PrioritizedSampler.rst", "reference/generated/torchrl.data.replay_buffers.RandomSampler.rst", "reference/generated/torchrl.data.replay_buffers.RoundRobinWriter.rst", "reference/generated/torchrl.data.replay_buffers.Sampler.rst", "reference/generated/torchrl.data.replay_buffers.SamplerWithoutReplacement.rst", "reference/generated/torchrl.data.replay_buffers.Storage.rst", "reference/generated/torchrl.data.replay_buffers.Writer.rst", "reference/generated/torchrl.envs.EnvBase.rst", "reference/generated/torchrl.envs.EnvCreator.rst", "reference/generated/torchrl.envs.EnvMetaData.rst", "reference/generated/torchrl.envs.GymLikeEnv.rst", "reference/generated/torchrl.envs.ModelBasedEnvBase.rst", "reference/generated/torchrl.envs.MultiThreadedEnv.rst", "reference/generated/torchrl.envs.ParallelEnv.rst", "reference/generated/torchrl.envs.SerialEnv.rst", "reference/generated/torchrl.envs.libs.brax.BraxEnv.rst", "reference/generated/torchrl.envs.libs.brax.BraxWrapper.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper.rst", "reference/generated/torchrl.envs.libs.gym.GymEnv.rst", "reference/generated/torchrl.envs.libs.gym.GymWrapper.rst", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper.rst", "reference/generated/torchrl.envs.libs.openml.OpenMLEnv.rst", "reference/generated/torchrl.envs.libs.vmas.VmasEnv.rst", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper.rst", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv.rst", "reference/generated/torchrl.envs.transforms.BinarizeReward.rst", "reference/generated/torchrl.envs.transforms.CatFrames.rst", "reference/generated/torchrl.envs.transforms.CatTensors.rst", "reference/generated/torchrl.envs.transforms.CenterCrop.rst", "reference/generated/torchrl.envs.transforms.Compose.rst", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection.rst", "reference/generated/torchrl.envs.transforms.DoubleToFloat.rst", "reference/generated/torchrl.envs.transforms.ExcludeTransform.rst", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck.rst", "reference/generated/torchrl.envs.transforms.FlattenObservation.rst", "reference/generated/torchrl.envs.transforms.FrameSkipTransform.rst", "reference/generated/torchrl.envs.transforms.GrayScale.rst", "reference/generated/torchrl.envs.transforms.InitTracker.rst", "reference/generated/torchrl.envs.transforms.NoopResetEnv.rst", "reference/generated/torchrl.envs.transforms.ObservationNorm.rst", "reference/generated/torchrl.envs.transforms.ObservationTransform.rst", "reference/generated/torchrl.envs.transforms.PinMemoryTransform.rst", "reference/generated/torchrl.envs.transforms.R3MTransform.rst", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict.rst", "reference/generated/torchrl.envs.transforms.RenameTransform.rst", "reference/generated/torchrl.envs.transforms.Resize.rst", "reference/generated/torchrl.envs.transforms.RewardClipping.rst", "reference/generated/torchrl.envs.transforms.RewardScaling.rst", "reference/generated/torchrl.envs.transforms.RewardSum.rst", "reference/generated/torchrl.envs.transforms.SelectTransform.rst", "reference/generated/torchrl.envs.transforms.SqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.StepCounter.rst", "reference/generated/torchrl.envs.transforms.TensorDictPrimer.rst", "reference/generated/torchrl.envs.transforms.TimeMaxPool.rst", "reference/generated/torchrl.envs.transforms.ToTensorImage.rst", "reference/generated/torchrl.envs.transforms.Transform.rst", "reference/generated/torchrl.envs.transforms.TransformedEnv.rst", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.VIPRewardTransform.rst", "reference/generated/torchrl.envs.transforms.VIPTransform.rst", "reference/generated/torchrl.envs.transforms.VecNorm.rst", "reference/generated/torchrl.envs.transforms.gSDENoise.rst", "reference/generated/torchrl.envs.utils.check_env_specs.rst", "reference/generated/torchrl.envs.utils.exploration_mode.rst", "reference/generated/torchrl.envs.utils.exploration_type.rst", "reference/generated/torchrl.envs.utils.get_available_libraries.rst", "reference/generated/torchrl.envs.utils.make_composite_from_td.rst", "reference/generated/torchrl.envs.utils.set_exploration_mode.rst", "reference/generated/torchrl.envs.utils.set_exploration_type.rst", "reference/generated/torchrl.envs.utils.step_mdp.rst", "reference/generated/torchrl.modules.CEMPlanner.rst", "reference/generated/torchrl.modules.ConvNet.rst", "reference/generated/torchrl.modules.DdpgCnnActor.rst", "reference/generated/torchrl.modules.DdpgCnnQNet.rst", "reference/generated/torchrl.modules.DdpgMlpActor.rst", "reference/generated/torchrl.modules.DdpgMlpQNet.rst", "reference/generated/torchrl.modules.Delta.rst", "reference/generated/torchrl.modules.DistributionalDQNnet.rst", "reference/generated/torchrl.modules.DistributionalQValueHook.rst", "reference/generated/torchrl.modules.DreamerActor.rst", "reference/generated/torchrl.modules.DuelingCnnDQNet.rst", "reference/generated/torchrl.modules.IndependentNormal.rst", "reference/generated/torchrl.modules.LSTMNet.rst", "reference/generated/torchrl.modules.MLP.rst", "reference/generated/torchrl.modules.MPCPlannerBase.rst", "reference/generated/torchrl.modules.MPPIPlanner.rst", "reference/generated/torchrl.modules.NoisyLazyLinear.rst", "reference/generated/torchrl.modules.NoisyLinear.rst", "reference/generated/torchrl.modules.NormalParamWrapper.rst", "reference/generated/torchrl.modules.ObsDecoder.rst", "reference/generated/torchrl.modules.ObsEncoder.rst", "reference/generated/torchrl.modules.OneHotCategorical.rst", "reference/generated/torchrl.modules.QValueHook.rst", "reference/generated/torchrl.modules.RSSMPosterior.rst", "reference/generated/torchrl.modules.RSSMPrior.rst", "reference/generated/torchrl.modules.TanhDelta.rst", "reference/generated/torchrl.modules.TanhNormal.rst", "reference/generated/torchrl.modules.TruncatedNormal.rst", "reference/generated/torchrl.modules.reset_noise.rst", "reference/generated/torchrl.modules.tensordict_module.Actor.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueModule.rst", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor.rst", "reference/generated/torchrl.modules.tensordict_module.QValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.QValueModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticTensorDictSequential.rst", "reference/generated/torchrl.modules.tensordict_module.SafeSequential.rst", "reference/generated/torchrl.modules.tensordict_module.ValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper.rst", "reference/generated/torchrl.modules.utils.biased_softplus.rst", "reference/generated/torchrl.modules.utils.inv_softplus.rst", "reference/generated/torchrl.modules.utils.mappings.rst", "reference/generated/torchrl.objectives.A2CLoss.rst", "reference/generated/torchrl.objectives.ClipPPOLoss.rst", "reference/generated/torchrl.objectives.DDPGLoss.rst", "reference/generated/torchrl.objectives.DQNLoss.rst", "reference/generated/torchrl.objectives.DiscreteSACLoss.rst", "reference/generated/torchrl.objectives.DistributionalDQNLoss.rst", "reference/generated/torchrl.objectives.DreamerActorLoss.rst", "reference/generated/torchrl.objectives.DreamerModelLoss.rst", "reference/generated/torchrl.objectives.DreamerValueLoss.rst", "reference/generated/torchrl.objectives.HardUpdate.rst", "reference/generated/torchrl.objectives.IQLLoss.rst", "reference/generated/torchrl.objectives.KLPENPPOLoss.rst", "reference/generated/torchrl.objectives.LossModule.rst", "reference/generated/torchrl.objectives.PPOLoss.rst", "reference/generated/torchrl.objectives.REDQLoss.rst", "reference/generated/torchrl.objectives.ReinforceLoss.rst", "reference/generated/torchrl.objectives.SACLoss.rst", "reference/generated/torchrl.objectives.SoftUpdate.rst", "reference/generated/torchrl.objectives.TD3Loss.rst", "reference/generated/torchrl.objectives.ValueEstimators.rst", "reference/generated/torchrl.objectives.default_value_kwargs.rst", "reference/generated/torchrl.objectives.distance_loss.rst", "reference/generated/torchrl.objectives.hold_out_net.rst", "reference/generated/torchrl.objectives.hold_out_params.rst", "reference/generated/torchrl.objectives.next_state_value.rst", "reference/generated/torchrl.objectives.value.GAE.rst", "reference/generated/torchrl.objectives.value.TD0Estimator.rst", "reference/generated/torchrl.objectives.value.TD1Estimator.rst", "reference/generated/torchrl.objectives.value.TDLambdaEstimator.rst", "reference/generated/torchrl.objectives.value.ValueEstimatorBase.rst", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td0_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td0_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td1_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td1_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td1_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td1_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate.rst", "reference/generated/torchrl.record.TensorDictRecorder.rst", "reference/generated/torchrl.record.VideoRecorder.rst", "reference/generated/torchrl.record.loggers.Logger.rst", "reference/generated/torchrl.record.loggers.csv.CSVLogger.rst", "reference/generated/torchrl.record.loggers.generate_exp_name.rst", "reference/generated/torchrl.record.loggers.get_logger.rst", "reference/generated/torchrl.record.loggers.mlflow.MLFlowLogger.rst", "reference/generated/torchrl.record.loggers.tensorboard.TensorboardLogger.rst", "reference/generated/torchrl.record.loggers.wandb.WandbLogger.rst", "reference/generated/torchrl.trainers.BatchSubSampler.rst", "reference/generated/torchrl.trainers.ClearCudaCache.rst", "reference/generated/torchrl.trainers.CountFramesLog.rst", "reference/generated/torchrl.trainers.LogReward.rst", "reference/generated/torchrl.trainers.OptimizerHook.rst", "reference/generated/torchrl.trainers.Recorder.rst", "reference/generated/torchrl.trainers.ReplayBufferTrainer.rst", "reference/generated/torchrl.trainers.RewardNormalizer.rst", "reference/generated/torchrl.trainers.SelectKeys.rst", "reference/generated/torchrl.trainers.Trainer.rst", "reference/generated/torchrl.trainers.TrainerHookBase.rst", "reference/generated/torchrl.trainers.UpdateWeights.rst", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip.rst", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_loss.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_model.rst", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_actor.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_model.rst", "reference/generated/torchrl.trainers.helpers.make_redq_loss.rst", "reference/generated/torchrl.trainers.helpers.make_redq_model.rst", "reference/generated/torchrl.trainers.helpers.make_replay_buffer.rst", "reference/generated/torchrl.trainers.helpers.make_sac_loss.rst", "reference/generated/torchrl.trainers.helpers.make_sac_model.rst", "reference/generated/torchrl.trainers.helpers.make_target_updater.rst", "reference/generated/torchrl.trainers.helpers.make_trainer.rst", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor.rst", "reference/generated/torchrl.trainers.helpers.sync_async_collector.rst", "reference/generated/torchrl.trainers.helpers.sync_sync_collector.rst", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor.rst", "reference/generated/tutorials/README.rst", "reference/index.rst", "reference/knowledge_base.rst", "reference/modules.rst", "reference/objectives.rst", "reference/trainers.rst", "reference/utils.rst", "tutorials/coding_ddpg.rst", "tutorials/coding_dqn.rst", "tutorials/coding_ppo.rst", "tutorials/index.rst", "tutorials/multi_task.rst", "tutorials/pendulum.rst", "tutorials/pretrained_models.rst", "tutorials/sg_execution_times.rst", "tutorials/torchrl_demo.rst", "tutorials/torchrl_envs.rst"], "titles": ["Welcome to the TorchRL Documentation!", "torchrl.collectors package", "torchrl.data package", "torchrl.envs package", "Things to consider when debugging RL", "Working with gym", "Working with <code class=\"docutils literal notranslate\"><span class=\"pre\">habitat-lab</span></code>", "Working with MuJoCo-based environments", "Common PyTorch errors and solutions", "Useful resources", "Versioning Issues", "implement_for", "DataCollectorBase", "MultiSyncDataCollector", "MultiaSyncDataCollector", "RandomPolicy", "SyncDataCollector", "aSyncDataCollector", "DistributedDataCollector", "DistributedSyncDataCollector", "RPCDataCollector", "RayCollector", "submitit_delayed_launcher", "split_trajectories", "BinaryDiscreteTensorSpec", "BoundedTensorSpec", "CompositeSpec", "DiscreteTensorSpec", "MultiDiscreteTensorSpec", "MultiOneHotDiscreteTensorSpec", "MultiStep", "OneHotDiscreteTensorSpec", "PrioritizedReplayBuffer", "ReplayBuffer", "TensorDictPrioritizedReplayBuffer", "TensorDictReplayBuffer", "TensorSpec", "UnboundedContinuousTensorSpec", "UnboundedDiscreteTensorSpec", "D4RLExperienceReplay", "OpenMLExperienceReplay", "LazyMemmapStorage", "LazyTensorStorage", "ListStorage", "PrioritizedSampler", "RandomSampler", "RoundRobinWriter", "Sampler", "SamplerWithoutReplacement", "Storage", "Writer", "EnvBase", "EnvCreator", "EnvMetaData", "GymLikeEnv", "ModelBasedEnvBase", "MultiThreadedEnv", "ParallelEnv", "SerialEnv", "BraxEnv", "BraxWrapper", "DMControlEnv", "DMControlWrapper", "GymEnv", "GymWrapper", "HabitatEnv", "JumanjiEnv", "JumanjiWrapper", "OpenMLEnv", "VmasEnv", "VmasWrapper", "DreamerEnv", "BinarizeReward", "CatFrames", "CatTensors", "CenterCrop", "Compose", "DiscreteActionProjection", "DoubleToFloat", "ExcludeTransform", "FiniteTensorDictCheck", "FlattenObservation", "FrameSkipTransform", "GrayScale", "InitTracker", "NoopResetEnv", "ObservationNorm", "ObservationTransform", "PinMemoryTransform", "R3MTransform", "RandomCropTensorDict", "RenameTransform", "Resize", "RewardClipping", "RewardScaling", "RewardSum", "SelectTransform", "SqueezeTransform", "StepCounter", "TensorDictPrimer", "TimeMaxPool", "ToTensorImage", "Transform", "TransformedEnv", "UnsqueezeTransform", "VIPRewardTransform", "VIPTransform", "VecNorm", "gSDENoise", "check_env_specs", "exploration_mode", "exploration_type", "get_available_libraries", "make_composite_from_td", "set_exploration_mode", "set_exploration_type", "step_mdp", "CEMPlanner", "ConvNet", "DdpgCnnActor", "DdpgCnnQNet", "DdpgMlpActor", "DdpgMlpQNet", "Delta", "DistributionalDQNnet", "DistributionalQValueHook", "DreamerActor", "DuelingCnnDQNet", "IndependentNormal", "LSTMNet", "MLP", "MPCPlannerBase", "MPPIPlanner", "NoisyLazyLinear", "NoisyLinear", "NormalParamWrapper", "ObsDecoder", "ObsEncoder", "OneHotCategorical", "QValueHook", "RSSMPosterior", "RSSMPrior", "TanhDelta", "TanhNormal", "TruncatedNormal", "reset_noise", "Actor", "ActorCriticOperator", "ActorCriticWrapper", "ActorValueOperator", "AdditiveGaussianWrapper", "DistributionalQValueActor", "DistributionalQValueModule", "EGreedyWrapper", "OrnsteinUhlenbeckProcessWrapper", "ProbabilisticActor", "QValueActor", "QValueModule", "SafeModule", "SafeProbabilisticModule", "SafeProbabilisticTensorDictSequential", "SafeSequential", "ValueOperator", "WorldModelWrapper", "biased_softplus", "inv_softplus", "mappings", "A2CLoss", "ClipPPOLoss", "DDPGLoss", "DQNLoss", "DiscreteSACLoss", "DistributionalDQNLoss", "DreamerActorLoss", "DreamerModelLoss", "DreamerValueLoss", "HardUpdate", "IQLLoss", "KLPENPPOLoss", "LossModule", "PPOLoss", "REDQLoss", "ReinforceLoss", "SACLoss", "SoftUpdate", "TD3Loss", "ValueEstimators", "default_value_kwargs", "distance_loss", "hold_out_net", "hold_out_params", "next_state_value", "GAE", "TD0Estimator", "TD1Estimator", "TDLambdaEstimator", "ValueEstimatorBase", "generalized_advantage_estimate", "td0_advantage_estimate", "td0_return_estimate", "td1_advantage_estimate", "td1_return_estimate", "td_lambda_advantage_estimate", "td_lambda_return_estimate", "vec_generalized_advantage_estimate", "vec_td1_advantage_estimate", "vec_td1_return_estimate", "vec_td_lambda_advantage_estimate", "vec_td_lambda_return_estimate", "TensorDictRecorder", "VideoRecorder", "Logger", "CSVLogger", "generate_exp_name", "get_logger", "MLFlowLogger", "TensorboardLogger", "WandbLogger", "BatchSubSampler", "ClearCudaCache", "CountFramesLog", "LogReward", "OptimizerHook", "Recorder", "ReplayBufferTrainer", "RewardNormalizer", "SelectKeys", "Trainer", "TrainerHookBase", "UpdateWeights", "correct_for_frame_skip", "get_stats_random_rollout", "make_a2c_loss", "make_a2c_model", "make_collector_offpolicy", "make_collector_onpolicy", "make_ddpg_actor", "make_ddpg_loss", "make_dqn_actor", "make_dqn_loss", "make_ppo_loss", "make_ppo_model", "make_redq_loss", "make_redq_model", "make_replay_buffer", "make_sac_loss", "make_sac_model", "make_target_updater", "make_trainer", "parallel_env_constructor", "sync_async_collector", "sync_sync_collector", "transformed_env_constructor", "README Tutos", "API Reference", "Knowledge Base", "torchrl.modules package", "torchrl.objectives package", "torchrl.trainers package", "torchrl._utils package", "TorchRL objectives: Coding a DDPG loss", "TorchRL trainer: A DQN example", "Reinforcement Learning (PPO) with TorchRL Tutorial", "README Tutos", "Task-specific policy in multi-task environments", "Pendulum: Writing your environment and transforms with TorchRL", "Using pretrained models", "Computation times", "Introduction to TorchRL", "TorchRL envs"], "terms": {"The": [0, 1, 2, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 51, 54, 56, 57, 58, 76, 79, 86, 89, 94, 96, 99, 103, 106, 116, 117, 119, 120, 121, 122, 129, 131, 132, 134, 135, 139, 140, 141, 146, 147, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 168, 169, 170, 172, 173, 174, 175, 178, 179, 180, 191, 192, 193, 194, 195, 196, 212, 215, 216, 217, 218, 222, 248, 250, 251, 256, 257, 258, 261, 262, 265, 266, 268, 269], "tensordict": [0, 1, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 32, 33, 34, 35, 39, 40, 41, 42, 44, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 116, 117, 124, 125, 129, 131, 132, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 209, 218, 222, 223, 224, 226, 227, 233, 236, 238, 241, 243, 246, 254, 257, 258, 260, 261, 262, 264, 265, 266, 269], "class": [0, 1, 2, 3, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 250, 251, 252, 256, 257, 258, 260, 261, 262, 269], "ha": [0, 3, 4, 5, 7, 8, 10, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 52, 54, 56, 57, 58, 73, 99, 103, 150, 152, 153, 159, 178, 260, 261, 262, 264, 265, 266, 268, 269], "been": [0, 5, 7, 8, 17, 18, 20, 21, 48, 51, 54, 56, 57, 58, 102, 260, 261, 262, 264, 265, 269], "move": [0, 4, 21, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 116, 130, 158, 179, 225, 260, 261, 268, 269], "out": [0, 3, 4, 5, 21, 30, 39, 51, 54, 56, 57, 58, 99, 109, 133, 134, 146, 151, 152, 154, 155, 156, 157, 158, 159, 189, 190, 258, 260, 261, 262, 265, 268, 269], "dedic": [0, 1, 18, 19, 20, 21, 147, 148, 149, 256, 260, 264], "librari": [0, 5, 6, 7, 8, 9, 10, 18, 19, 20, 39, 56, 112, 254, 255, 256, 259, 260, 261, 262, 265, 269], "take": [0, 1, 3, 8, 23, 51, 54, 56, 57, 58, 98, 100, 102, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 166, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 218, 229, 256, 258, 260, 261, 262, 265, 269], "look": [0, 3, 5, 7, 8, 30, 51, 54, 56, 57, 58, 89, 90, 155, 159, 160, 161, 257, 262, 265, 266, 268, 269], "find": [0, 1, 4, 6, 18, 19, 20, 32, 150, 153, 221, 225, 260, 261], "sourc": [0, 1, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 260, 261, 262, 263, 264, 265, 266, 268, 269], "code": [0, 3, 5, 7, 8, 89, 161, 261, 262, 263, 264, 266, 267, 268, 269], "github": [0, 2, 5, 6, 7, 10, 18, 19, 20, 266, 268], "i": [0, 1, 2, 3, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 68, 72, 73, 74, 75, 76, 77, 79, 81, 84, 85, 86, 89, 90, 91, 94, 95, 96, 98, 99, 101, 102, 103, 105, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120, 121, 123, 126, 127, 128, 129, 130, 131, 133, 134, 135, 139, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 188, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 218, 220, 221, 222, 223, 224, 225, 227, 230, 231, 233, 236, 241, 243, 246, 248, 252, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "an": [0, 1, 2, 3, 5, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 68, 75, 77, 80, 85, 86, 89, 90, 91, 92, 99, 101, 102, 103, 107, 109, 118, 119, 120, 121, 122, 129, 130, 131, 133, 137, 147, 148, 149, 151, 152, 154, 155, 156, 159, 160, 163, 166, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 192, 193, 194, 195, 196, 210, 213, 222, 223, 227, 228, 231, 236, 249, 250, 251, 252, 255, 256, 257, 260, 261, 264, 266, 268, 269], "open": [0, 5, 7, 11, 261, 268], "reinforc": [0, 2, 3, 9, 73, 119, 120, 121, 122, 125, 152, 154, 167, 172, 176, 177, 182, 183, 184, 236, 254, 261, 263, 265, 267, 268], "learn": [0, 2, 3, 7, 8, 9, 18, 30, 40, 73, 119, 120, 121, 122, 125, 132, 134, 152, 154, 167, 172, 176, 177, 181, 182, 183, 184, 236, 256, 257, 260, 261, 263, 264, 265, 267, 268, 269], "rl": [0, 1, 2, 3, 5, 8, 10, 13, 14, 16, 17, 55, 134, 146, 155, 162, 167, 179, 180, 218, 255, 256, 257, 258, 260, 261, 262, 266, 269], "pytorch": [0, 1, 2, 101, 227, 255, 258, 260, 262, 265, 266, 268, 269], "It": [0, 2, 3, 4, 7, 30, 34, 39, 51, 54, 55, 56, 57, 58, 65, 86, 90, 103, 109, 119, 121, 126, 140, 141, 152, 154, 157, 159, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 223, 243, 255, 256, 257, 260, 261, 265, 266, 268, 269], "provid": [0, 1, 2, 3, 5, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 45, 51, 54, 55, 56, 57, 58, 74, 75, 81, 85, 86, 89, 90, 95, 99, 103, 106, 107, 118, 125, 129, 130, 131, 146, 150, 152, 153, 154, 155, 156, 157, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 210, 214, 218, 224, 231, 233, 241, 243, 246, 248, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "python": [0, 3, 5, 6, 7, 10, 21, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269], "first": [0, 1, 3, 4, 5, 7, 8, 11, 18, 20, 21, 39, 54, 74, 81, 86, 89, 90, 101, 103, 130, 133, 137, 146, 151, 152, 155, 156, 158, 159, 168, 174, 178, 179, 180, 209, 226, 256, 260, 261, 262, 264, 265, 266, 268, 269], "low": [0, 77, 152, 260, 261, 265, 268], "high": [0, 9, 34, 77, 152, 192, 197, 204, 260, 261, 268], "level": [0, 4, 22, 26, 178, 260, 261, 268], "abstract": [0, 8, 24, 25, 26, 27, 28, 36, 37, 38, 50, 51, 87, 131, 196, 219, 228, 258, 262, 265, 268], "ar": [0, 1, 2, 3, 7, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 49, 51, 52, 54, 55, 56, 57, 58, 68, 76, 77, 78, 80, 81, 89, 95, 99, 102, 103, 104, 106, 107, 113, 117, 122, 123, 129, 131, 134, 138, 141, 151, 154, 155, 156, 158, 159, 160, 161, 166, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 188, 191, 192, 193, 194, 195, 196, 224, 248, 252, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269], "intend": [0, 7, 13, 14, 16, 17, 18, 19, 20, 21, 77, 256, 268], "effici": [0, 1, 2, 4, 8, 134, 256, 260, 261, 262, 264, 266, 268], "modular": [0, 161, 268], "properli": [0, 262, 265, 268], "test": [0, 3, 5, 109, 129, 223, 248, 262, 268], "aim": [0, 3, 7, 89, 106, 130, 230, 255, 256, 257, 260, 261, 268], "support": [0, 1, 3, 18, 20, 26, 39, 40, 49, 56, 68, 86, 102, 112, 125, 151, 152, 158, 161, 172, 192, 193, 194, 195, 215, 256, 258, 262, 265, 268], "research": [0, 7, 9, 268], "most": [0, 3, 7, 8, 30, 77, 260, 262, 265, 268], "written": [0, 3, 39, 41, 51, 54, 56, 57, 58, 73, 95, 98, 100, 146, 151, 154, 155, 158, 159, 162, 167, 168, 178, 180, 182, 191, 209, 210, 256, 257, 258, 260, 264, 265, 268], "highli": [0, 2, 268, 269], "wai": [0, 3, 4, 89, 91, 106, 180, 192, 193, 194, 195, 256, 260, 261, 262, 264, 266, 268, 269], "can": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 48, 51, 52, 54, 56, 57, 58, 73, 76, 77, 85, 86, 89, 90, 95, 99, 102, 103, 106, 107, 117, 128, 131, 132, 134, 135, 143, 144, 146, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 223, 233, 241, 243, 246, 250, 251, 252, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "easili": [0, 3, 7, 233, 241, 243, 246, 257, 260, 261, 262, 268, 269], "swap": [0, 3, 262, 266, 268], "compon": [0, 2, 3, 41, 42, 43, 49, 125, 139, 152, 157, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 222, 227, 260, 261, 262, 264, 265, 266, 268], "transform": [0, 1, 2, 4, 8, 13, 14, 16, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 52, 54, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 119, 125, 126, 139, 164, 166, 210, 224, 233, 236, 238, 241, 243, 246, 252, 254, 261, 263, 266, 267], "them": [0, 2, 7, 21, 32, 33, 34, 35, 39, 40, 51, 52, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 178, 210, 260, 261, 264, 265, 266, 268, 269], "write": [0, 3, 8, 23, 30, 54, 88, 146, 151, 158, 159, 161, 162, 169, 170, 171, 177, 181, 183, 185, 191, 196, 210, 256, 258, 260, 261, 262, 263, 264, 266, 267, 268], "new": [0, 3, 4, 8, 13, 14, 16, 17, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 44, 48, 51, 54, 56, 57, 58, 95, 102, 107, 116, 154, 158, 159, 163, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 260, 262, 265, 268, 269], "ones": [0, 15, 26, 30, 32, 34, 35, 51, 54, 56, 57, 58, 74, 76, 78, 86, 89, 99, 103, 106, 158, 179, 260, 262, 265, 268, 269], "littl": [0, 3, 262, 268, 269], "effort": [0, 3, 265, 268], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 48, 49, 51, 54, 55, 56, 57, 58, 65, 73, 74, 76, 77, 80, 82, 84, 86, 89, 90, 91, 95, 96, 99, 100, 102, 103, 105, 106, 107, 109, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 192, 193, 194, 195, 196, 209, 218, 220, 223, 224, 227, 229, 230, 231, 233, 241, 243, 246, 248, 252, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "repo": [0, 6, 39, 255, 268], "attempt": [0, 150, 153, 154, 177, 268], "align": [0, 268], "exist": [0, 4, 18, 21, 30, 51, 54, 56, 57, 58, 74, 103, 231, 252, 268, 269], "ecosystem": [0, 268], "dataset": [0, 32, 33, 34, 35, 39, 40, 68, 107, 254, 260, 261, 266, 268, 269], "pillar": [0, 268], "environ": [0, 1, 2, 3, 5, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 77, 78, 82, 85, 86, 89, 90, 102, 103, 107, 109, 117, 129, 131, 132, 173, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 218, 220, 223, 230, 231, 233, 234, 235, 236, 238, 241, 243, 246, 248, 249, 250, 251, 252, 255, 256, 263, 266, 267], "model": [0, 1, 3, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 55, 56, 57, 58, 89, 99, 106, 108, 118, 130, 131, 132, 147, 148, 149, 158, 163, 167, 168, 173, 174, 175, 177, 178, 179, 180, 181, 183, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 254, 255, 258, 262, 263, 265, 267, 269], "data": [0, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 68, 86, 98, 109, 113, 117, 125, 129, 132, 139, 146, 151, 153, 154, 155, 156, 158, 159, 161, 162, 169, 171, 180, 181, 183, 185, 192, 193, 194, 195, 196, 218, 224, 227, 229, 234, 248, 250, 251, 252, 254, 256, 257, 258, 265, 266, 269], "util": [0, 3, 17, 23, 30, 51, 54, 56, 57, 58, 89, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 164, 165, 166, 248, 254, 259, 260, 262, 265, 268, 269], "e": [0, 1, 3, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 26, 30, 31, 41, 42, 51, 52, 54, 56, 57, 58, 74, 76, 81, 86, 89, 95, 99, 102, 103, 106, 109, 128, 132, 135, 139, 143, 144, 152, 155, 157, 158, 159, 179, 191, 192, 193, 194, 195, 218, 230, 251, 256, 260, 261, 262, 265, 266, 268, 269], "g": [0, 1, 3, 7, 8, 10, 11, 30, 31, 51, 52, 54, 56, 57, 58, 74, 76, 81, 86, 89, 95, 99, 102, 103, 106, 109, 128, 132, 143, 144, 155, 158, 159, 179, 191, 200, 201, 202, 203, 205, 206, 207, 208, 251, 256, 260, 261, 262, 265, 266, 268, 269], "collector": [0, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 98, 154, 224, 227, 229, 234, 235, 248, 250, 251, 254, 258, 269], "contain": [0, 3, 7, 12, 13, 14, 16, 17, 19, 20, 26, 30, 32, 33, 34, 35, 36, 39, 40, 44, 46, 49, 50, 51, 54, 55, 56, 57, 58, 76, 78, 89, 99, 103, 106, 107, 116, 117, 118, 130, 132, 146, 151, 152, 155, 157, 158, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 214, 218, 230, 233, 236, 238, 241, 243, 246, 248, 249, 250, 251, 252, 256, 257, 258, 260, 261, 262, 265, 266, 268, 269], "etc": [0, 3, 7, 8, 11, 30, 37, 38, 51, 54, 56, 57, 58, 103, 130, 260, 261, 262, 268, 269], "have": [0, 1, 3, 5, 6, 7, 8, 13, 14, 17, 18, 20, 21, 26, 28, 30, 32, 33, 34, 35, 39, 48, 49, 51, 54, 56, 57, 58, 73, 85, 86, 99, 102, 103, 107, 109, 118, 129, 130, 160, 161, 167, 168, 178, 180, 188, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 218, 227, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "few": [0, 2, 8, 218, 262, 268, 269], "depend": [0, 1, 2, 3, 4, 7, 8, 162, 180, 256, 260, 262, 265, 268, 269], "possibl": [0, 3, 4, 27, 30, 31, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179, 223, 227, 260, 262, 265, 268, 269], "standard": [0, 86, 94, 107, 117, 126, 132, 133, 134, 150, 185, 192, 193, 194, 195, 260, 261, 268], "numpi": [0, 11, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 101, 227, 265, 268, 269], "common": [0, 3, 4, 21, 54, 57, 58, 147, 148, 149, 168, 178, 180, 248, 255, 256, 258, 260, 262, 264, 266, 268, 269], "openai": [0, 7, 63, 64, 262, 265, 268, 269], "gym": [0, 3, 4, 8, 11, 13, 14, 16, 21, 22, 52, 54, 63, 64, 84, 86, 91, 99, 107, 233, 236, 238, 241, 243, 246, 248, 255, 260, 261, 262, 265, 266, 268], "onli": [0, 1, 3, 4, 7, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 74, 76, 77, 81, 86, 89, 90, 99, 103, 106, 107, 129, 146, 151, 155, 156, 158, 159, 160, 161, 167, 168, 178, 179, 180, 183, 196, 231, 258, 260, 261, 262, 264, 265, 268, 269], "option": [0, 4, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 51, 52, 54, 55, 56, 57, 58, 61, 68, 73, 74, 75, 77, 78, 81, 82, 84, 85, 86, 89, 90, 91, 94, 98, 99, 100, 101, 103, 104, 106, 107, 109, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 210, 218, 220, 221, 222, 223, 224, 225, 227, 231, 233, 236, 241, 243, 246, 248, 250, 251, 252, 256, 265, 268], "On": [0, 3, 7, 18, 19, 20, 21, 256, 261], "end": [0, 13, 14, 30, 32, 33, 34, 35, 39, 40, 48, 51, 54, 56, 57, 58, 103, 118, 131, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 260, 261, 262, 264, 265, 266, 268, 269], "come": [0, 1, 3, 8, 57, 58, 146, 147, 148, 149, 155, 162, 260, 261, 262, 268, 269], "set": [0, 1, 2, 3, 7, 9, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 32, 33, 34, 35, 39, 40, 48, 49, 51, 53, 54, 55, 56, 57, 58, 74, 76, 84, 89, 98, 99, 103, 106, 109, 114, 115, 131, 150, 158, 179, 218, 223, 224, 235, 252, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 269], "re": [0, 3, 8, 30, 48, 51, 54, 56, 57, 58, 155, 159, 258, 260, 262, 264, 265, 268, 269], "usabl": [0, 258, 268], "function": [0, 3, 8, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 41, 42, 43, 49, 51, 52, 54, 56, 57, 58, 78, 103, 107, 109, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 135, 136, 137, 138, 140, 141, 144, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 233, 236, 238, 241, 243, 246, 248, 254, 256, 260, 264, 265, 269], "cost": [0, 2, 27, 260, 261, 265], "return": [0, 3, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 50, 51, 52, 54, 55, 56, 57, 58, 61, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 116, 117, 119, 120, 121, 122, 123, 125, 128, 129, 130, 131, 132, 135, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 155, 157, 158, 159, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 188, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 227, 230, 233, 234, 236, 238, 241, 243, 246, 248, 249, 250, 251, 252, 254, 256, 258, 260, 261, 262, 264, 265, 266, 268, 269], "process": [0, 1, 2, 3, 4, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 51, 52, 54, 56, 57, 58, 107, 152, 154, 157, 258, 260, 261, 265, 266, 268, 269], "good": [0, 1, 4, 9, 260, 262, 268, 269], "runtim": [0, 3, 30, 51, 54, 56, 57, 58, 265], "perform": [0, 3, 4, 8, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 85, 103, 117, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 131, 132, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 174, 180, 223, 227, 257, 260, 261, 262, 264, 265, 269], "ppo": [0, 4, 8, 155, 159, 168, 178, 180, 233, 240, 241, 254, 256, 260, 261, 263, 267], "pendulum": [0, 3, 13, 14, 16, 17, 21, 22, 52, 56, 63, 64, 76, 84, 86, 91, 99, 103, 107, 248, 256, 261, 262, 263, 267, 268, 269], "your": [0, 2, 3, 7, 8, 10, 18, 30, 51, 54, 56, 57, 58, 107, 252, 255, 256, 257, 261, 262, 263, 267, 268], "introduct": [0, 257, 263, 267, 269], "us": [0, 1, 2, 3, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 30, 32, 33, 34, 35, 39, 40, 44, 45, 51, 52, 54, 55, 56, 57, 58, 61, 68, 74, 75, 77, 84, 86, 89, 90, 91, 99, 101, 102, 103, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120, 125, 126, 128, 130, 131, 132, 134, 135, 139, 143, 144, 146, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 188, 191, 192, 193, 194, 195, 196, 197, 204, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 234, 235, 236, 244, 248, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269], "pretrain": [0, 263, 267], "task": [0, 9, 57, 58, 61, 89, 106, 177, 260, 261, 262, 263, 265, 267, 268, 269], "specif": [0, 5, 8, 34, 35, 54, 227, 254, 258, 262, 263, 267], "polici": [0, 1, 2, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 51, 54, 55, 56, 57, 58, 77, 114, 115, 125, 134, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 168, 169, 171, 178, 180, 181, 182, 183, 185, 223, 229, 233, 234, 235, 236, 238, 241, 248, 250, 251, 256, 257, 258, 261, 263, 266, 267, 268, 269], "multi": [0, 3, 7, 9, 30, 51, 54, 56, 57, 58, 129, 130, 260, 261, 263, 265, 267, 268], "object": [0, 3, 4, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 30, 41, 42, 43, 49, 51, 54, 56, 57, 58, 78, 86, 89, 102, 103, 107, 132, 146, 147, 155, 158, 159, 160, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 231, 234, 235, 247, 248, 252, 254, 256, 258, 261, 262, 263, 265, 267, 269], "ddpg": [0, 119, 120, 121, 122, 169, 176, 184, 236, 237, 254, 256, 261, 263, 267, 268], "loss": [0, 3, 8, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 191, 192, 222, 227, 232, 237, 239, 240, 242, 243, 245, 248, 257, 258, 263, 265, 267, 268], "trainer": [0, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 260, 263, 267], "A": [0, 1, 3, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 65, 77, 82, 89, 90, 91, 99, 102, 103, 105, 107, 108, 109, 116, 117, 118, 125, 130, 132, 134, 135, 150, 151, 152, 153, 155, 156, 159, 161, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 192, 193, 194, 195, 196, 211, 212, 215, 220, 227, 229, 233, 238, 241, 243, 246, 248, 257, 260, 262, 263, 265, 267, 269], "dqn": [0, 125, 151, 152, 167, 169, 170, 171, 172, 173, 176, 177, 179, 180, 181, 182, 183, 184, 185, 238, 239, 254, 256, 263, 267], "exampl": [0, 1, 2, 3, 4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 21, 22, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 39, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 74, 76, 77, 78, 84, 86, 89, 91, 99, 101, 103, 106, 107, 113, 116, 117, 118, 125, 129, 130, 132, 135, 138, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 186, 187, 192, 193, 194, 195, 218, 219, 220, 221, 222, 224, 225, 226, 229, 233, 236, 238, 241, 243, 246, 248, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269], "api": [0, 3, 5, 89, 106, 257, 258, 265, 268, 269], "packag": [0, 6, 7, 10, 254, 255, 260, 268, 269], "singl": [0, 3, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 73, 74, 89, 101, 106, 118, 129, 130, 157, 161, 168, 171, 172, 178, 180, 181, 185, 200, 201, 202, 203, 205, 206, 207, 208, 243, 252, 254, 260, 261, 262, 264, 265, 266], "node": [0, 2, 18, 19, 20, 21, 22, 233, 236, 238, 241, 243, 246, 254], "distribut": [0, 2, 3, 4, 9, 10, 18, 19, 20, 21, 22, 86, 117, 123, 124, 125, 126, 128, 132, 135, 138, 140, 141, 142, 143, 144, 150, 151, 152, 155, 159, 160, 167, 168, 172, 178, 180, 254, 258, 261, 262, 265, 268, 269], "helper": [0, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 260, 261, 265], "replai": [0, 8, 13, 14, 16, 32, 33, 34, 35, 39, 40, 44, 45, 46, 47, 49, 77, 90, 99, 169, 170, 171, 177, 181, 183, 185, 224, 227, 244, 248, 254, 258, 265, 266], "buffer": [0, 1, 3, 4, 8, 13, 14, 16, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 54, 55, 56, 57, 58, 76, 77, 89, 90, 99, 103, 106, 158, 161, 169, 170, 171, 177, 179, 181, 183, 185, 224, 227, 244, 248, 254, 258, 265, 266, 269], "compos": [0, 3, 30, 32, 33, 34, 35, 39, 40, 45, 46, 47, 51, 54, 56, 57, 58, 102, 103, 107, 174, 233, 236, 238, 241, 243, 246, 254, 260, 261, 262, 264, 268, 269], "tensorspec": [0, 3, 15, 24, 25, 26, 27, 28, 29, 31, 37, 38, 51, 55, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 254, 265], "env": [0, 1, 2, 5, 6, 7, 8, 13, 14, 16, 18, 19, 20, 21, 22, 30, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 131, 132, 158, 179, 209, 231, 233, 234, 235, 236, 238, 241, 243, 246, 248, 250, 251, 252, 254, 256, 260, 261, 262, 263, 264, 266, 267], "envbas": [0, 3, 13, 14, 16, 17, 18, 19, 20, 21, 52, 54, 56, 57, 58, 85, 91, 102, 103, 107, 109, 117, 131, 132, 223, 231, 233, 234, 235, 236, 238, 241, 243, 246, 248, 250, 251, 252, 254], "gymlikeenv": [0, 254], "envmetadata": [0, 254], "vector": [0, 1, 8, 24, 31, 77, 119, 121, 130, 195, 204, 205, 206, 207, 208, 254, 260, 261, 264, 265, 266, 269], "record": [0, 30, 51, 54, 56, 57, 58, 180, 209, 210, 211, 212, 213, 214, 215, 216, 217, 248, 254, 261, 262], "domain": [0, 2, 8, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 77, 99, 113, 146, 151, 152, 155, 156, 157, 158, 159, 160, 161, 254, 256, 262, 265, 268, 269], "modul": [0, 3, 4, 8, 11, 30, 51, 54, 55, 56, 57, 58, 76, 77, 89, 90, 99, 103, 106, 107, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 192, 193, 194, 195, 196, 227, 232, 237, 239, 240, 242, 245, 248, 254, 257, 258, 261, 262, 264, 265, 266], "actor": [0, 4, 15, 21, 117, 119, 121, 125, 126, 132, 139, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 185, 186, 233, 236, 238, 241, 243, 246, 254, 257, 261, 262, 266, 268], "explor": [0, 1, 108, 134, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 223, 234, 235, 248, 254, 262, 265], "valu": [0, 1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 72, 73, 74, 77, 85, 86, 89, 90, 93, 95, 99, 100, 101, 102, 103, 106, 107, 113, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 132, 133, 134, 135, 138, 139, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 218, 220, 221, 222, 223, 224, 227, 233, 236, 241, 243, 246, 248, 254, 258, 261, 264, 265, 268, 269], "gener": [0, 1, 3, 7, 8, 16, 32, 33, 47, 48, 52, 55, 86, 91, 95, 96, 102, 123, 138, 146, 155, 159, 162, 163, 181, 187, 192, 197, 204, 213, 227, 254, 260, 261, 262, 263, 264, 265, 266, 268, 269], "hook": [0, 30, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 135, 136, 137, 139, 140, 141, 150, 152, 153, 154, 157, 164, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 254], "planner": [0, 117, 132, 254], "train": [0, 1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 30, 51, 54, 56, 57, 58, 82, 89, 103, 106, 109, 119, 121, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 192, 227, 229, 248, 254, 258, 261, 266, 269], "sac": [0, 171, 181, 183, 245, 246, 254], "redq": [0, 181, 242, 243, 254], "iql": [0, 177, 254], "td3": [0, 185, 254], "a2c": [0, 167, 232, 254], "dreamer": [0, 71, 126, 173, 174, 175, 254, 256], "checkpoint": [0, 254, 266], "builder": [0, 254, 261, 269], "logger": [0, 210, 212, 213, 214, 215, 216, 217, 221, 227, 248, 252, 254, 261], "_util": [0, 11, 254], "implement_for": [0, 254], "contribut": 0, "thing": [0, 3, 7, 8, 255, 262, 269], "consid": [0, 1, 8, 20, 30, 51, 54, 56, 57, 58, 77, 107, 123, 142, 151, 156, 179, 255, 260, 265], "when": [0, 1, 2, 3, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 51, 52, 54, 56, 57, 58, 68, 76, 77, 85, 86, 89, 90, 95, 99, 102, 103, 106, 107, 114, 115, 117, 130, 131, 132, 133, 139, 143, 155, 158, 159, 161, 164, 168, 178, 179, 180, 186, 191, 209, 210, 224, 252, 255, 256, 258, 260, 261, 262, 265, 266, 269], "debug": [0, 6, 8, 255, 269], "work": [0, 3, 4, 8, 11, 30, 51, 54, 56, 57, 58, 74, 89, 107, 118, 130, 152, 157, 168, 178, 180, 227, 255, 256, 260, 261, 262, 264, 265, 266, 268, 269], "habitat": [0, 65, 255, 266], "lab": [0, 3, 61, 62, 255], "mujoco": [0, 6, 8, 255, 262], "error": [0, 1, 3, 7, 10, 11, 30, 51, 54, 56, 57, 58, 90, 109, 255, 260, 262, 269], "solut": [0, 6, 7, 9, 21, 255, 258, 268], "resourc": [0, 1, 21, 255, 260, 262], "version": [0, 1, 6, 11, 30, 51, 54, 56, 57, 58, 149, 179, 183, 195, 255, 256, 260, 262, 265, 266, 269], "issu": [0, 4, 5, 8, 90, 146, 151, 152, 155, 156, 157, 158, 159, 255, 268], "index": [0, 3, 7, 8, 10, 16, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 50, 77, 116, 264, 268], "search": [0, 261], "page": [0, 7], "somewhat": [1, 257, 269], "equival": [1, 17, 24, 27, 28, 29, 30, 31, 39, 51, 54, 56, 57, 58, 103, 180, 224, 268, 269], "dataload": [1, 48, 261, 262], "except": [1, 3, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 51, 80, 138, 256, 261, 268, 269], "1": [1, 2, 3, 4, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 72, 74, 76, 77, 78, 82, 85, 86, 89, 90, 91, 99, 100, 101, 103, 106, 107, 113, 116, 117, 118, 119, 120, 122, 125, 127, 128, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 171, 174, 177, 178, 179, 180, 181, 183, 184, 191, 192, 193, 194, 195, 199, 200, 201, 205, 206, 208, 218, 223, 224, 225, 233, 236, 238, 241, 243, 246, 248, 252, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "thei": [1, 2, 3, 4, 8, 9, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 78, 80, 89, 102, 103, 106, 129, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 224, 227, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "collect": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 30, 32, 33, 34, 35, 39, 40, 86, 89, 106, 109, 154, 169, 171, 181, 183, 185, 218, 224, 227, 229, 230, 231, 248, 258, 260, 265, 266, 268, 269], "over": [1, 2, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 33, 35, 51, 54, 56, 57, 58, 77, 86, 100, 116, 161, 172, 174, 179, 230, 258, 260, 261, 262, 265, 269], "non": [1, 8, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 72, 76, 81, 89, 99, 103, 104, 106, 116, 158, 159, 167, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 185, 192, 193, 194, 195, 256, 260, 265, 269], "static": [1, 107, 177, 265], "2": [1, 3, 8, 10, 11, 13, 14, 16, 21, 22, 28, 29, 30, 32, 33, 34, 35, 51, 52, 54, 56, 57, 58, 68, 69, 70, 74, 76, 77, 86, 89, 99, 103, 106, 107, 113, 118, 119, 120, 121, 125, 127, 129, 130, 135, 151, 152, 153, 154, 158, 162, 168, 169, 171, 177, 178, 179, 180, 181, 183, 185, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 218, 256, 257, 260, 261, 262, 264, 265, 266, 267, 268, 269], "like": [1, 4, 7, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 65, 101, 109, 181, 257, 260, 262, 265, 266, 269], "being": [1, 3, 7, 8, 17, 18, 20, 21, 30, 51, 54, 56, 57, 58, 77, 78, 91, 103, 114, 115, 154, 168, 178, 179, 180, 210, 224, 229, 250, 251, 252, 256, 260, 261, 262, 265], "": [1, 2, 3, 6, 7, 8, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 109, 118, 134, 147, 149, 150, 152, 155, 158, 159, 177, 179, 183, 192, 193, 194, 195, 196, 243, 246, 256, 260, 261, 262, 264, 265, 266, 268, 269], "accept": [1, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 55, 56, 57, 58, 76, 81, 89, 95, 99, 103, 104, 106, 158, 159, 160, 179, 258, 262, 269], "two": [1, 4, 8, 10, 30, 48, 51, 54, 56, 57, 58, 86, 89, 106, 122, 159, 178, 188, 223, 227, 233, 241, 243, 246, 257, 260, 261, 262, 264, 265, 268, 269], "main": [1, 2, 5, 20, 22, 52, 159, 227, 256, 257, 260, 261, 264, 269], "argument": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 26, 30, 32, 33, 34, 35, 48, 51, 54, 56, 57, 58, 76, 89, 99, 102, 103, 106, 116, 118, 130, 133, 146, 151, 155, 156, 158, 159, 160, 162, 179, 187, 192, 193, 194, 195, 196, 209, 220, 230, 233, 236, 238, 241, 243, 246, 248, 249, 252, 260, 261, 262, 265, 269], "list": [1, 6, 7, 8, 9, 13, 14, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 48, 49, 51, 54, 55, 56, 57, 58, 73, 78, 86, 89, 91, 95, 103, 106, 107, 124, 125, 130, 139, 152, 156, 157, 161, 162, 179, 190, 192, 195, 209, 223, 224, 250, 251, 256, 260, 262, 264, 265, 266, 268, 269], "constructor": [1, 16, 18, 19, 20, 21, 33, 102, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 192, 193, 194, 195, 196, 233, 236, 238, 241, 243, 246, 249, 252, 256, 260, 261, 262], "iter": [1, 13, 14, 16, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 56, 57, 58, 79, 86, 96, 107, 118, 130, 146, 151, 155, 156, 158, 159, 160, 161, 162, 179, 190, 223, 226, 227, 233, 241, 243, 246, 257, 258, 260, 262, 265], "execut": [1, 3, 6, 7, 8, 13, 14, 16, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 51, 52, 54, 55, 56, 57, 58, 99, 160, 161, 231, 252, 256, 258, 261, 262, 267, 269], "step": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 52, 54, 55, 56, 57, 58, 60, 67, 81, 84, 85, 86, 98, 100, 103, 116, 117, 126, 129, 131, 132, 150, 153, 154, 155, 159, 167, 173, 180, 191, 193, 198, 199, 209, 218, 223, 227, 258, 260, 261, 264, 265, 266, 268], "queri": [1, 13, 14, 16, 17, 30, 51, 54, 56, 57, 58, 89, 102, 107, 161, 260, 265, 268], "defin": [1, 2, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 90, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 192, 193, 194, 195, 196, 209, 249, 260, 261, 265, 269], "number": [1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 27, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 51, 54, 55, 56, 57, 58, 68, 73, 77, 82, 85, 86, 94, 98, 100, 107, 117, 118, 123, 124, 126, 127, 128, 130, 132, 135, 136, 137, 140, 141, 142, 143, 144, 146, 150, 151, 153, 154, 155, 158, 159, 162, 166, 171, 173, 177, 178, 181, 183, 185, 218, 220, 223, 227, 229, 230, 231, 250, 251, 252, 256, 260, 261, 262, 265, 266, 269], "befor": [1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 21, 30, 40, 48, 51, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 104, 130, 133, 134, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 193, 194, 195, 224, 260, 262, 265, 269], "deliv": [1, 18, 19, 20, 260, 261, 268], "stack": [1, 7, 8, 18, 20, 21, 57, 58, 107, 160, 161, 209, 218, 256, 261, 264, 265, 268], "user": [1, 2, 5, 8, 21, 30, 39, 51, 54, 56, 57, 58, 103, 129, 180, 249, 257, 258, 260, 261, 265, 268, 269], "reset": [1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 73, 76, 79, 81, 84, 85, 89, 95, 96, 98, 99, 100, 102, 105, 107, 109, 145, 154, 209, 233, 236, 238, 241, 243, 246, 260, 261, 262, 264, 268], "whenev": [1, 3, 30, 32, 33, 34, 35, 84, 179, 229, 256], "reach": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 22, 48, 51, 54, 56, 57, 58, 150, 153, 154, 260, 262, 268, 269], "done": [1, 3, 4, 7, 8, 13, 14, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 86, 91, 94, 96, 98, 99, 102, 103, 107, 116, 117, 132, 169, 170, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 233, 236, 238, 241, 243, 246, 257, 260, 262, 264, 265, 266, 268, 269], "state": [1, 3, 4, 13, 14, 16, 17, 30, 39, 51, 54, 55, 56, 57, 58, 60, 67, 73, 74, 76, 79, 84, 86, 91, 96, 98, 102, 103, 105, 107, 116, 117, 126, 129, 130, 132, 136, 140, 141, 147, 158, 163, 167, 168, 178, 179, 180, 181, 182, 191, 192, 193, 194, 195, 196, 252, 256, 257, 260, 261, 262, 265, 269], "after": [1, 8, 13, 14, 18, 20, 21, 26, 30, 51, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 116, 133, 150, 151, 153, 156, 174, 261, 262, 265, 266, 269], "predefin": [1, 261, 262], "becaus": [1, 3, 4, 7, 102, 122, 129, 146, 151, 152, 155, 156, 157, 158, 159, 260, 261, 264, 265, 269], "potenti": [1, 265], "comput": [1, 3, 4, 8, 13, 16, 21, 27, 30, 51, 54, 56, 57, 58, 86, 103, 105, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 135, 136, 137, 140, 141, 143, 144, 147, 150, 152, 153, 154, 155, 157, 159, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 231, 257, 260, 262, 264, 266], "heavi": [1, 8], "crucial": [1, 177, 260, 261, 262, 265, 269], "configur": [1, 8, 13, 14, 16, 17, 21, 22, 179, 180, 233, 241, 243, 246, 256, 260, 261, 262, 265], "hyperparamet": [1, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 260, 265], "appropri": [1, 3, 4, 7, 13, 14, 16, 17, 46, 50, 99, 249, 252, 260], "paramet": [1, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 241, 243, 246, 248, 249, 250, 251, 252, 256, 257, 260, 265, 266, 268], "consider": [1, 3, 8, 261], "whether": [1, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 55, 56, 57, 58, 103, 118, 130, 162, 168, 169, 170, 171, 172, 178, 179, 180, 181, 183, 185, 195, 260, 261, 262, 265, 269], "should": [1, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 51, 54, 55, 56, 57, 58, 73, 81, 86, 90, 91, 95, 96, 98, 102, 103, 107, 109, 116, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 155, 157, 158, 159, 164, 171, 176, 178, 179, 180, 181, 184, 191, 192, 193, 194, 195, 196, 210, 222, 223, 224, 227, 248, 250, 251, 252, 256, 258, 260, 261, 262, 264, 265, 266, 268, 269], "occur": [1, 8, 14, 74, 86, 90, 146, 151, 152, 155, 156, 157, 158, 159, 174, 269], "serial": [1, 3, 30, 51, 54, 56, 57, 58, 107], "optim": [1, 8, 30, 51, 54, 56, 57, 58, 117, 132, 133, 134, 179, 180, 183, 222, 227, 233, 241, 248, 257, 258, 262, 265], "parallel": [1, 3, 8, 17, 109, 167, 249, 250, 251, 252, 261, 262], "syncdatacollector": [1, 13, 14, 17, 18, 19, 20, 21, 248, 251, 254, 262], "worker": [1, 13, 14, 16, 17, 18, 19, 20, 21, 22, 52, 56, 57, 58, 107, 250, 251, 252, 260, 262, 268, 269], "multisyncdatacollector": [1, 18, 19, 20, 21, 251, 254, 262, 268], "split": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 39, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 256, 258, 262, 268], "workload": 1, "across": [1, 8, 18, 19, 20, 21, 32, 33, 34, 35, 107, 154, 229, 256, 260, 265], "aggreg": [1, 118, 119, 120, 161], "result": [1, 3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 48, 51, 52, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 107, 109, 116, 130, 139, 152, 157, 179, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 229, 256, 261, 265, 266, 268, 269], "final": [1, 3, 4, 21, 150, 153, 154, 160, 192, 223, 256, 260, 261, 262, 265, 269], "multiasyncdatacollector": [1, 17, 18, 19, 20, 21, 250, 254, 260, 261, 262, 268], "sever": [1, 8, 28, 30, 51, 54, 56, 57, 58, 74, 103, 180, 260, 262, 269], "batch": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 23, 27, 30, 31, 32, 33, 34, 35, 39, 40, 45, 48, 51, 54, 55, 56, 57, 58, 68, 81, 86, 90, 99, 103, 104, 107, 123, 124, 129, 133, 138, 142, 154, 158, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 218, 221, 224, 225, 226, 227, 229, 250, 251, 252, 258, 260, 261, 262, 264, 266, 268, 269], "gather": [1, 3, 18, 20, 21, 90, 191, 231, 255, 260, 261, 262, 265, 269], "continu": [1, 9, 25, 37, 113, 119, 120, 121, 122, 154, 159, 161, 184, 192, 197, 204, 236, 256, 260, 262, 265, 268, 269], "concomitantli": 1, "network": [1, 4, 8, 30, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 130, 134, 136, 137, 140, 141, 147, 148, 149, 158, 168, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 192, 193, 194, 195, 196, 233, 236, 241, 247, 248, 256, 257, 258, 260, 264, 265, 269], "impli": [1, 269], "weight": [1, 4, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 134, 158, 167, 168, 171, 174, 179, 229, 247, 256, 258, 260, 261, 262, 264, 265, 268], "mai": [1, 2, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 20, 21, 30, 39, 51, 54, 56, 57, 58, 86, 96, 103, 104, 107, 109, 130, 257, 258, 260, 261, 262, 265, 266, 268, 269], "slightli": [1, 256, 257, 265, 266, 269], "lag": [1, 13, 14, 16, 17, 260, 261, 262], "therefor": [1, 3, 7, 180, 269], "although": [1, 8, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 258, 260, 261], "fastest": 1, "price": 1, "suitabl": 1, "where": [1, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 39, 40, 41, 42, 51, 54, 55, 56, 57, 58, 68, 73, 89, 95, 98, 100, 102, 104, 106, 150, 153, 155, 158, 159, 166, 167, 168, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 257, 258, 260, 261, 262, 264, 265, 269], "asynchron": [1, 9, 14, 21, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 167, 179, 250, 261, 262], "off": [1, 2, 4, 128, 143, 144, 151, 183, 223, 234, 256, 258, 260, 261, 262, 266, 269], "curriculum": [1, 4], "For": [1, 2, 3, 4, 7, 8, 9, 10, 13, 14, 16, 17, 18, 20, 21, 30, 39, 51, 54, 56, 57, 58, 81, 86, 125, 133, 147, 149, 152, 156, 167, 172, 177, 179, 180, 223, 236, 256, 258, 260, 261, 262, 265, 266, 269], "remot": [1, 18, 19, 20, 21, 57, 58, 269], "rollout": [1, 3, 13, 14, 16, 21, 23, 51, 54, 55, 56, 57, 58, 69, 70, 91, 109, 117, 132, 154, 167, 231, 256, 260, 262, 266, 268], "necessari": [1, 4, 6, 8, 13, 14, 16, 17, 96, 181, 192, 193, 194, 195, 196, 257, 260, 262], "synchronis": [1, 52], "from": [1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 51, 52, 54, 55, 56, 57, 58, 74, 77, 79, 84, 86, 89, 90, 91, 96, 98, 99, 101, 102, 103, 104, 106, 107, 113, 116, 117, 119, 120, 121, 122, 125, 128, 130, 131, 132, 133, 135, 139, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 178, 179, 180, 181, 183, 185, 187, 191, 192, 193, 194, 195, 209, 210, 218, 224, 227, 230, 231, 233, 236, 238, 241, 243, 244, 246, 248, 249, 252, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "either": [1, 5, 22, 30, 51, 54, 56, 57, 58, 163, 214, 236, 258, 260, 261, 266, 268, 269], "update_policy_weights_": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 260, 268], "update_at_each_batch": [1, 13, 14, 17, 260], "true": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 69, 70, 74, 76, 77, 81, 84, 85, 86, 89, 90, 91, 94, 98, 99, 101, 103, 104, 106, 107, 109, 113, 116, 117, 118, 119, 120, 121, 122, 127, 128, 130, 132, 133, 134, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 167, 168, 171, 173, 174, 175, 178, 179, 180, 181, 182, 183, 188, 192, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 220, 221, 223, 224, 227, 238, 252, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "second": [1, 8, 152, 168, 178, 180, 183, 226, 260, 261, 262, 264, 265, 266, 268, 269], "devic": [1, 2, 3, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 41, 42, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 76, 88, 89, 91, 99, 101, 103, 106, 113, 116, 117, 118, 119, 120, 121, 122, 125, 127, 129, 130, 132, 133, 134, 139, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 161, 162, 179, 224, 229, 233, 236, 238, 241, 243, 244, 246, 256, 260, 261, 262, 264, 265, 266, 268], "oper": [1, 3, 4, 7, 8, 13, 14, 17, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 81, 102, 124, 125, 135, 147, 148, 149, 151, 152, 158, 163, 167, 168, 169, 170, 172, 178, 179, 180, 182, 191, 192, 193, 194, 195, 227, 236, 238, 243, 246, 254, 258, 260, 261, 262, 264, 265, 269], "instanc": [1, 2, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 36, 39, 51, 52, 54, 55, 56, 57, 58, 62, 73, 86, 99, 102, 107, 113, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 131, 135, 136, 137, 140, 141, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 164, 179, 210, 214, 223, 231, 233, 234, 235, 236, 238, 241, 243, 246, 248, 250, 251, 256, 257, 258, 260, 262, 265, 269], "cpu": [1, 3, 8, 10, 13, 14, 16, 18, 19, 20, 21, 24, 30, 34, 35, 36, 41, 42, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 76, 89, 91, 99, 103, 106, 113, 116, 117, 132, 134, 139, 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 161, 162, 179, 224, 233, 236, 238, 241, 243, 246, 256, 260, 261, 262, 264, 265, 266, 268, 269], "slower": 1, "than": [1, 4, 8, 13, 14, 16, 17, 39, 91, 122, 130, 135, 146, 150, 151, 153, 158, 162, 179, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 255, 257, 260, 261, 262, 265, 268, 269], "one": [1, 3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 44, 46, 49, 50, 51, 52, 54, 56, 57, 58, 68, 77, 85, 86, 89, 97, 103, 104, 106, 107, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 135, 136, 137, 138, 139, 140, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 166, 167, 168, 169, 170, 171, 178, 179, 180, 181, 182, 185, 198, 199, 220, 222, 223, 227, 231, 233, 241, 243, 246, 252, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 269], "cuda": [1, 3, 7, 30, 51, 54, 56, 57, 58, 76, 88, 89, 99, 103, 106, 158, 179, 219, 260, 261, 262, 266, 269], "multipl": [1, 3, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 27, 57, 58, 74, 77, 95, 102, 107, 129, 133, 134, 146, 151, 155, 156, 158, 159, 168, 171, 178, 180, 181, 185, 243, 252, 256, 258, 260, 261, 262, 265, 268], "infer": [1, 57, 58, 107, 133, 260, 262], "run": [1, 3, 4, 5, 6, 7, 8, 10, 13, 14, 17, 21, 30, 51, 54, 55, 56, 57, 58, 61, 62, 85, 86, 103, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 160, 161, 164, 179, 223, 250, 251, 252, 255, 258, 260, 261, 262, 264, 265, 266, 268], "dispatch": [1, 18, 19, 20, 21], "avail": [1, 4, 6, 21, 48, 125, 139, 155, 159, 179, 250, 251, 256, 260, 261, 262, 269], "speed": [1, 2, 4, 8, 27, 257, 260, 261, 262, 265], "up": [1, 2, 3, 8, 9, 27, 39, 180, 255, 256, 257, 260, 261, 262, 265, 269], "avoid": [1, 30, 51, 54, 56, 57, 58, 103, 107, 146, 151, 158, 162, 168, 178, 180, 230, 262], "oom": 1, "choic": [1, 2, 39, 135, 256, 257, 260, 261], "size": [1, 2, 3, 13, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 74, 81, 89, 91, 97, 99, 101, 103, 104, 106, 107, 113, 116, 117, 118, 123, 125, 129, 130, 132, 135, 138, 139, 140, 141, 142, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 179, 191, 192, 193, 194, 195, 196, 210, 218, 224, 233, 236, 238, 241, 243, 246, 256, 260, 261, 262, 264, 265, 266, 268, 269], "pass": [1, 3, 4, 13, 14, 16, 18, 19, 20, 21, 22, 26, 30, 32, 33, 34, 35, 51, 52, 53, 54, 56, 57, 58, 78, 91, 102, 104, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 133, 135, 136, 137, 140, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 168, 178, 179, 180, 192, 193, 194, 195, 196, 224, 250, 251, 252, 256, 260, 261, 262, 264, 265, 269], "ie": [1, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 44, 68, 81, 104, 107, 167, 168, 178, 179, 180, 256, 257, 261, 262], "store": [1, 3, 8, 13, 14, 16, 17, 20, 26, 30, 34, 35, 41, 42, 43, 44, 51, 54, 56, 57, 58, 107, 117, 129, 132, 233, 236, 238, 241, 243, 246, 254, 258, 260, 262, 266, 269], "while": [1, 3, 7, 8, 30, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 177, 178, 179, 180, 256, 260, 262, 265, 266, 268], "wait": [1, 20, 21, 22, 265], "also": [1, 2, 3, 8, 11, 30, 34, 51, 54, 56, 57, 58, 77, 86, 91, 95, 96, 99, 103, 141, 160, 161, 167, 169, 170, 179, 192, 198, 199, 256, 258, 260, 261, 262, 264, 265, 269], "impact": [1, 261], "memori": [1, 2, 3, 8, 21, 27, 30, 41, 51, 52, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 158, 179, 252, 258, 260, 261, 262, 264, 265, 266, 268, 269], "manag": [1, 8, 189, 190, 192, 193, 194, 195, 223], "kei": [1, 3, 7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 103, 105, 106, 107, 116, 117, 124, 131, 132, 139, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 210, 221, 222, 223, 225, 226, 227, 231, 233, 241, 243, 246, 257, 258, 260, 262, 264, 265, 268, 269], "control": [1, 3, 5, 8, 16, 61, 62, 77, 116, 119, 120, 121, 122, 131, 132, 141, 154, 158, 159, 160, 167, 168, 178, 180, 184, 192, 197, 204, 236, 256, 258, 260, 261, 262, 265], "which": [1, 2, 3, 4, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 26, 27, 30, 31, 34, 35, 39, 48, 51, 54, 56, 57, 58, 73, 74, 82, 85, 86, 89, 90, 98, 99, 100, 102, 103, 109, 128, 143, 144, 147, 148, 149, 155, 158, 159, 161, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 188, 192, 218, 222, 233, 236, 238, 241, 243, 246, 256, 257, 258, 260, 261, 262, 264, 265, 266, 269], "storing_devic": [1, 13, 14, 16, 17, 18, 19, 20, 21, 260, 261, 268], "dure": [1, 7, 13, 14, 16, 17, 18, 19, 20, 39, 40, 51, 54, 56, 57, 58, 82, 103, 223, 227, 257, 260, 261, 262, 265, 269], "heurist": [1, 4, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 154, 260, 269], "usual": [1, 3, 4, 6, 7, 8, 39, 51, 54, 56, 57, 58, 134, 180, 192, 193, 194, 195, 196, 209, 233, 241, 243, 246, 255, 256, 258, 260, 261, 262, 269], "same": [1, 3, 4, 11, 13, 14, 16, 18, 19, 20, 21, 30, 39, 48, 51, 52, 54, 56, 57, 58, 77, 82, 85, 86, 102, 103, 107, 118, 130, 154, 260, 261, 262, 264, 265, 266, 269], "storag": [1, 2, 8, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 48, 51, 53, 54, 56, 57, 58, 78, 254, 258, 260, 261, 262, 266], "default": [1, 2, 3, 10, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 44, 51, 54, 56, 57, 58, 61, 68, 73, 74, 77, 81, 85, 86, 89, 90, 94, 98, 99, 100, 101, 103, 104, 106, 107, 109, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 233, 236, 241, 243, 246, 248, 252, 258, 260, 261, 262, 266, 268, 269], "behaviour": [1, 3, 21, 54, 74, 86, 90, 116, 128, 143, 144, 223, 256, 261, 265], "besid": 1, "those": [1, 5, 7, 26, 57, 58, 86, 99, 155, 159, 160, 161, 229, 250, 251, 256, 260, 261, 265, 269], "choos": [1, 180, 256, 257, 260, 261, 262], "follow": [1, 2, 3, 6, 7, 8, 30, 39, 40, 51, 54, 55, 56, 57, 58, 68, 89, 118, 130, 152, 156, 157, 166, 168, 178, 179, 182, 227, 243, 246, 256, 257, 258, 260, 261, 262, 264, 265, 268, 269], "max_frames_per_traj": [1, 13, 14, 16, 17, 18, 19, 20, 21, 230, 260, 262, 268], "frame": [1, 2, 13, 14, 16, 17, 18, 19, 20, 21, 30, 54, 73, 82, 150, 153, 154, 209, 210, 220, 223, 227, 230, 231, 260, 261, 262, 268, 269], "call": [1, 3, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 45, 48, 49, 51, 54, 56, 57, 58, 68, 73, 76, 77, 78, 81, 84, 86, 88, 89, 95, 98, 99, 103, 106, 107, 109, 114, 115, 117, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 132, 133, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 158, 159, 161, 164, 168, 178, 179, 180, 191, 192, 193, 194, 195, 209, 223, 258, 261, 262, 265, 268, 269], "frames_per_batch": [1, 13, 14, 16, 17, 18, 19, 20, 21, 230, 260, 261, 262, 268], "each": [1, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28, 29, 30, 34, 51, 52, 54, 56, 57, 58, 89, 95, 98, 99, 100, 106, 107, 125, 139, 150, 152, 157, 161, 200, 201, 202, 203, 205, 206, 207, 208, 223, 224, 250, 251, 256, 260, 261, 262, 265, 266, 268, 269], "init_random_fram": [1, 13, 14, 16, 17, 18, 19, 20, 21, 230, 260, 261], "random": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 45, 51, 54, 55, 56, 57, 58, 77, 85, 86, 99, 109, 155, 158, 159, 181, 223, 231, 256, 260, 261, 262, 265, 266, 268, 269], "rand_step": [1, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 84, 107, 265, 268, 269], "reset_at_each_it": [1, 13, 14, 16, 17, 18, 19, 20, 21, 260], "split_traj": [1, 13, 14, 16, 17, 18, 19, 20, 21, 39, 260, 261, 262], "trajectori": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 23, 30, 34, 39, 44, 51, 54, 56, 57, 58, 90, 102, 117, 132, 154, 180, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 218, 254, 257, 260, 261, 262, 265, 268, 269], "pad": [1, 23, 39, 118, 119, 120, 129, 224], "along": [1, 23, 39, 73, 74, 86, 90, 95, 101, 130, 134, 151, 155, 158, 159, 179, 256, 260, 261, 265], "mask": [1, 4, 13, 14, 16, 23, 90, 224, 261, 269], "point": [1, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 40, 44, 46, 50, 51, 54, 56, 57, 58, 73, 76, 89, 99, 101, 103, 106, 131, 158, 166, 172, 179, 227, 255, 261, 262, 264, 265, 269], "boolean": [1, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 54, 90, 150, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 258], "repres": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 26, 34, 51, 54, 56, 57, 58, 82, 90, 107, 125, 139, 152, 156, 157, 159, 188, 192, 224, 260, 262], "valid": [1, 23, 90, 103, 118, 130, 150, 153, 154, 178, 224, 258, 269], "exploration_mod": [1, 13, 14, 16, 18, 19, 20, 21, 223, 254, 256, 260, 261], "strategi": [1, 16, 256, 258, 260, 261], "reset_when_don": [1, 13, 14, 16, 18, 19, 20, 21], "These": [1, 2, 7, 30, 51, 54, 56, 57, 58, 89, 106, 256, 257, 260, 262, 265, 269], "tool": [1, 5, 265, 269], "backend": [1, 3, 7, 11, 18, 19, 21, 22, 258, 260, 262, 265], "gloo": [1, 18, 19, 22], "nccl": [1, 18, 19], "mpi": [1, 18, 19], "distributeddatacollector": [1, 22, 254], "rpc": [1, 20, 22], "rpcdatacollector": [1, 22, 254], "launcher": [1, 18, 19, 20, 22], "rai": [1, 21], "submitit": [1, 18, 19, 20, 22], "torch": [1, 3, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 44, 48, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 74, 76, 77, 78, 86, 89, 91, 94, 99, 101, 103, 106, 107, 113, 116, 117, 118, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 138, 139, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 165, 179, 192, 193, 194, 195, 218, 225, 226, 233, 236, 238, 241, 243, 246, 248, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "multiprocess": [1, 18, 19, 20, 52, 53, 107, 261, 262, 265, 269], "synchron": [1, 13, 19, 21, 56, 250, 251, 261, 262], "mode": [1, 6, 13, 14, 16, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 103, 107, 110, 114, 115, 123, 128, 138, 142, 143, 144, 155, 159, 223, 260, 261, 268, 269], "folder": [1, 261], "sub": [1, 2, 3, 13, 14, 18, 19, 20, 21, 51, 54, 56, 57, 58, 90, 160, 161, 218, 227, 256, 260, 261, 262, 264, 268, 269], "all": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 52, 54, 55, 56, 57, 58, 76, 80, 86, 89, 95, 99, 100, 103, 106, 107, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 158, 159, 161, 164, 174, 179, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 222, 227, 230, 250, 251, 252, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 268, 269], "variou": [1, 3, 13, 14, 16, 17, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 250, 251, 260, 261, 262, 269], "machin": [1, 7, 18, 19, 20, 30, 40], "One": [1, 2, 4, 8, 29, 31, 138, 150, 153, 158, 188, 214, 260, 261, 269], "wonder": 1, "why": [1, 3, 265, 269], "parallelenv": [1, 2, 3, 13, 14, 16, 17, 20, 56, 58, 249, 254, 260, 261, 262, 264, 268, 269], "instead": [1, 4, 7, 8, 11, 27, 30, 51, 54, 56, 57, 58, 81, 99, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 196, 252, 256, 265, 269], "In": [1, 3, 4, 5, 7, 8, 10, 11, 17, 21, 22, 30, 39, 51, 54, 56, 57, 58, 76, 89, 96, 99, 102, 103, 106, 128, 130, 141, 143, 144, 158, 161, 166, 179, 229, 250, 251, 252, 256, 257, 260, 261, 262, 264, 265, 266, 269], "lower": [1, 2, 17, 21, 25, 107, 140, 141, 262, 265], "io": [1, 56], "footprint": [1, 2], "need": [1, 2, 4, 7, 8, 10, 18, 19, 20, 21, 30, 49, 51, 54, 56, 57, 58, 81, 89, 91, 103, 106, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 133, 135, 136, 137, 140, 141, 150, 152, 153, 154, 156, 157, 158, 164, 166, 171, 181, 182, 183, 185, 191, 196, 210, 227, 252, 256, 257, 260, 261, 262, 265, 268, 269], "commun": [1, 2, 3, 255, 262, 269], "yet": [1, 179, 266], "spec": [1, 2, 3, 15, 21, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 39, 51, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 109, 113, 125, 139, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 233, 236, 238, 241, 243, 246, 256, 260, 261, 262, 264, 268], "plai": [1, 73, 261, 262, 269], "role": [1, 261, 269], "opposit": 1, "direct": [1, 30, 51, 54, 56, 57, 58, 179, 261], "sinc": [1, 3, 4, 5, 7, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 116, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 260, 261, 262, 265, 266, 268, 269], "faster": [1, 4, 56], "share": [1, 2, 3, 6, 8, 41, 42, 43, 49, 52, 57, 58, 107, 147, 148, 149, 167, 168, 178, 180, 252, 256, 262, 264, 268, 269], "among": 1, "achiev": [1, 3, 4, 30, 51, 54, 56, 57, 58, 224, 258, 260, 261, 262, 265, 269], "via": [1, 3, 4, 7, 8, 32, 33, 34, 35, 39, 40, 57, 89, 102, 106, 257, 258, 260, 261, 262, 269], "capabl": [1, 7, 258, 260, 264, 266, 269], "prohibit": [1, 3], "slow": [1, 3, 4], "compar": [1, 3, 51, 223, 257, 260, 262, 269], "gpu": [1, 7, 8, 30, 51, 54, 56, 57, 58, 179, 260, 262, 269], "nativ": [1, 7, 9, 51, 54, 56, 57, 58, 73], "driver": [1, 7], "practic": [1, 4, 5, 8, 128, 143, 144, 166, 255, 260, 261, 262, 266, 269], "mean": [1, 2, 3, 4, 7, 13, 14, 16, 18, 19, 20, 21, 34, 44, 86, 107, 117, 123, 126, 129, 132, 142, 150, 155, 159, 179, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 256, 257, 260, 261, 262, 265, 268, 269], "keyword": [1, 3, 13, 14, 16, 18, 19, 20, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 146, 151, 155, 156, 158, 159, 179, 187, 192, 193, 194, 195, 196, 249, 260, 261, 262, 269], "build": [1, 3, 7, 23, 26, 30, 51, 54, 56, 57, 58, 107, 117, 132, 155, 159, 227, 232, 237, 239, 240, 242, 244, 245, 247, 256, 258, 262, 265, 266, 268, 269], "central": [2, 260, 261], "part": [2, 4, 8, 30, 51, 54, 56, 57, 58, 86, 95, 162, 179, 218, 252, 260, 262, 265, 269], "algorithm": [2, 8, 9, 13, 14, 55, 82, 167, 180, 181, 182, 183, 218, 233, 234, 241, 254, 257, 258, 260, 261, 262, 266, 268], "implement": [2, 3, 9, 11, 16, 30, 49, 51, 54, 56, 57, 58, 91, 102, 107, 128, 142, 143, 144, 167, 177, 180, 183, 233, 241, 243, 246, 256, 258, 260, 261, 262, 265, 268], "wide": [2, 3, 5], "we": [2, 3, 5, 7, 9, 26, 30, 35, 39, 48, 51, 52, 54, 56, 57, 58, 89, 91, 99, 107, 117, 129, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "give": [2, 7, 34, 55, 255, 257, 260, 261, 265, 266, 268], "abil": [2, 265], "veri": [2, 3, 261, 265, 268, 269], "influenti": 2, "sampl": [2, 4, 8, 9, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 51, 54, 55, 56, 57, 58, 68, 90, 110, 111, 114, 115, 117, 123, 128, 132, 138, 140, 143, 144, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 168, 169, 170, 178, 180, 185, 218, 224, 227, 230, 256, 260, 261, 262, 266, 268, 269], "latenc": 2, "especi": [2, 3, 7, 8, 74], "larger": [2, 4, 177], "volum": 2, "lazymemmapstorag": [2, 254, 260, 261, 266], "advis": [2, 269], "due": [2, 3, 5, 266, 269], "serialis": 2, "memmaptensor": [2, 266], "well": [2, 3, 8, 17, 21, 30, 32, 33, 34, 35, 49, 51, 54, 56, 57, 58, 140, 141, 179, 196, 260, 261, 266, 268, 269], "specifi": [2, 11, 13, 14, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 54, 56, 57, 58, 95, 97, 104, 117, 158, 159, 179, 256, 260, 262], "file": [2, 6, 7, 8, 209, 258, 260, 261, 267, 268], "locat": [2, 7, 54, 86, 94, 128, 135, 143, 144, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 260, 261, 262], "improv": [2, 4, 82, 167, 257], "failur": [2, 4], "recoveri": 2, "liststorag": [2, 32, 33, 34, 35, 254], "were": [2, 7, 57, 58, 262], "found": [2, 6, 7, 10, 21, 26, 30, 51, 54, 56, 57, 58, 107, 155, 159, 178, 179, 180, 260, 261, 268], "rough": 2, "benchmark": [2, 3, 9], "http": [2, 5, 6, 7, 10, 18, 19, 20, 32, 40, 44, 56, 73, 89, 119, 120, 121, 122, 125, 126, 127, 132, 134, 136, 137, 140, 141, 152, 154, 167, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 192, 197, 204, 233, 236, 241, 243, 246, 260, 266, 268], "com": [2, 5, 6, 7, 10, 18, 19, 20, 266, 268], "tree": 2, "type": [2, 3, 14, 18, 19, 20, 21, 30, 32, 33, 34, 35, 36, 51, 54, 55, 56, 57, 58, 76, 89, 91, 99, 102, 103, 106, 107, 111, 115, 118, 130, 134, 150, 151, 153, 155, 158, 159, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 187, 233, 236, 238, 241, 243, 246, 250, 256, 260, 261, 262, 265, 269], "1x": 2, "lazytensorstorag": [2, 34, 35, 254, 262], "83x": 2, "3": [2, 3, 6, 7, 10, 11, 13, 14, 15, 16, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 51, 54, 56, 57, 58, 68, 76, 77, 86, 89, 91, 99, 101, 103, 106, 113, 117, 118, 119, 120, 125, 127, 129, 130, 132, 135, 138, 146, 147, 148, 149, 151, 152, 155, 157, 158, 161, 162, 174, 179, 192, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208, 210, 226, 238, 256, 258, 260, 261, 262, 265, 266, 267, 268, 269], "44x": 2, "too": [2, 7, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 128, 143, 144, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 192, 193, 194, 195, 261, 262, 265, 269], "difficult": [2, 4], "element": [2, 13, 14, 16, 18, 19, 20, 21, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 68, 90, 118, 146, 150, 151, 158, 159, 162, 218, 260, 262, 269], "pai": [2, 8, 260], "attent": [2, 8, 260], "alwai": [2, 20, 30, 51, 54, 56, 57, 58, 85, 172, 256, 257, 261, 262, 265], "lead": [2, 3, 4, 8, 10, 11, 26, 30, 32, 33, 34, 35, 39, 48, 99, 128, 143, 144, 260, 265, 268], "dimens": [2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 73, 74, 81, 86, 90, 97, 101, 104, 107, 118, 130, 133, 134, 142, 143, 151, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 252, 256, 260, 261, 262, 265], "other": [2, 3, 4, 7, 8, 21, 22, 30, 32, 33, 34, 35, 39, 41, 42, 43, 48, 49, 51, 54, 55, 56, 57, 58, 77, 96, 107, 134, 135, 152, 157, 159, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 224, 233, 241, 243, 246, 250, 251, 254, 258, 260, 261, 262, 265, 266, 268, 269], "word": [2, 39, 179, 260, 265, 269], "creat": [2, 3, 4, 5, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 51, 52, 54, 56, 57, 58, 89, 95, 102, 103, 107, 113, 116, 118, 119, 120, 121, 122, 127, 130, 131, 159, 170, 172, 181, 210, 224, 231, 234, 235, 248, 250, 251, 256, 260, 261, 262, 265, 266, 268, 269], "1m": [2, 230, 260, 262], "multidimension": [2, 34, 44], "doe": [2, 3, 18, 32, 34, 39, 44, 49, 133, 160, 161, 167, 168, 172, 178, 180, 191, 227, 256, 258, 260, 261, 262, 265, 269], "desir": [2, 3, 30, 51, 54, 56, 57, 58, 76, 86, 89, 90, 99, 103, 106, 114, 115, 118, 130, 146, 151, 152, 155, 156, 157, 158, 159, 179, 256, 260, 265], "diversifi": 2, "make": [2, 4, 7, 30, 39, 40, 49, 51, 54, 56, 57, 58, 64, 67, 86, 89, 90, 109, 133, 151, 159, 179, 180, 192, 193, 194, 195, 224, 235, 252, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269], "more": [2, 3, 4, 6, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 108, 125, 130, 133, 135, 146, 150, 151, 152, 153, 158, 162, 167, 172, 179, 180, 192, 197, 204, 222, 236, 255, 257, 258, 260, 261, 262, 264, 265, 266, 269], "To": [2, 3, 4, 6, 7, 8, 18, 19, 20, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 107, 147, 148, 149, 154, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 256, 257, 260, 261, 262, 265, 266, 268, 269], "do": [2, 3, 4, 7, 54, 85, 90, 107, 116, 133, 148, 258, 260, 261, 262, 264, 265, 268, 269], "custom": [2, 3, 5, 30, 51, 54, 56, 57, 58, 172, 180, 186, 252, 256, 260, 261, 262], "name": [2, 6, 7, 11, 30, 39, 40, 51, 54, 56, 57, 58, 61, 77, 79, 91, 95, 96, 103, 156, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 233, 236, 238, 241, 243, 246, 258, 260, 261, 262, 265, 269], "randomcroptensordict": [2, 260], "here": [2, 3, 4, 7, 8, 9, 10, 256, 257, 260, 261, 262, 265, 268, 269], "how": [2, 3, 18, 19, 20, 30, 32, 34, 44, 51, 54, 56, 57, 58, 167, 168, 176, 178, 180, 227, 255, 256, 260, 261, 262, 264, 265, 266, 268, 269], "wrapper": [2, 3, 11, 15, 17, 34, 35, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 135, 150, 153, 154, 159, 163, 192, 215, 216, 217, 252, 254, 262, 266, 269], "around": [2, 5, 7, 15, 17, 34, 35, 55, 159, 192, 260, 261, 269], "offlin": [2, 8, 13, 14, 16, 17, 18, 19, 20, 21, 109, 177, 258, 266, 268], "present": [2, 3, 30, 32, 39, 44, 48, 51, 54, 56, 57, 58, 79, 95, 96, 116, 119, 120, 121, 122, 127, 134, 154, 158, 159, 160, 161, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 192, 193, 194, 195, 196, 252, 258, 260, 264, 268], "replaybuff": [2, 34, 35, 50, 90, 244, 248, 254, 262, 266, 268], "sampler": [2, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 48, 49, 90, 254, 260, 262], "By": [2, 3, 31, 54, 159, 223, 252, 260, 266, 269], "map": [2, 3, 8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 51, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 104, 107, 113, 125, 135, 146, 147, 148, 149, 151, 155, 156, 158, 159, 161, 162, 163, 223, 254, 256, 257, 260, 261, 262, 266], "tensor": [2, 3, 8, 13, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 50, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 73, 74, 76, 77, 81, 84, 86, 89, 90, 91, 94, 99, 100, 101, 102, 103, 104, 106, 107, 113, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 135, 138, 139, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 169, 170, 174, 175, 179, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 233, 236, 238, 241, 243, 246, 256, 258, 260, 261, 262, 264, 265, 266, 268, 269], "allow": [2, 3, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 51, 54, 56, 57, 58, 91, 99, 116, 130, 186, 188, 256, 258, 260, 262, 265, 269], "promptli": 2, "virtual": 2, "instal": [2, 5, 10, 18, 19, 20, 39, 40, 227, 255, 262, 269], "respons": [2, 3, 8, 227, 269], "d4rl": [2, 39], "clone": [2, 4, 8, 147, 148, 149, 158, 177, 233, 241, 243, 246, 254, 260, 265, 268], "repositori": [2, 7, 40], "latest": [2, 10, 56, 224, 262, 265, 268], "wheel": [2, 262], "publish": 2, "pypi": [2, 268], "openml": [2, 40, 68], "scikit": [2, 40], "panda": [2, 40], "requir": [2, 3, 4, 7, 8, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 130, 158, 160, 161, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 256, 258, 260, 261, 262, 265, 269], "parent": [2, 3, 21, 36, 51, 74, 81, 82, 86, 89, 99, 102, 104, 147, 179, 180, 196, 260, 265, 268, 269], "subclass": [2, 3, 51, 54, 56, 57, 58, 102, 109, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 158, 159, 160, 164, 180, 261, 265], "basic": [2, 55, 256, 262, 269], "properti": [2, 3, 51, 54, 55, 56, 57, 58, 103, 123, 128, 133, 138, 142, 143, 144, 179, 265], "observ": [2, 3, 8, 13, 14, 16, 21, 30, 36, 39, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 87, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 104, 107, 116, 119, 120, 121, 122, 125, 129, 136, 137, 139, 140, 146, 147, 148, 149, 151, 153, 154, 155, 156, 162, 163, 168, 170, 174, 178, 180, 192, 193, 194, 195, 196, 210, 233, 236, 238, 241, 243, 246, 248, 256, 258, 261, 262, 264, 265, 268, 269], "action": [2, 3, 8, 9, 13, 14, 15, 16, 21, 27, 31, 36, 51, 54, 55, 56, 57, 58, 60, 67, 69, 70, 77, 78, 82, 85, 91, 96, 103, 113, 116, 117, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 139, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 170, 171, 179, 185, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 233, 236, 238, 241, 243, 246, 248, 252, 256, 257, 258, 260, 261, 262, 264, 266, 268, 269], "shape": [2, 3, 13, 14, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 68, 70, 74, 86, 91, 99, 101, 107, 108, 109, 113, 116, 123, 124, 130, 133, 135, 138, 139, 142, 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 161, 162, 188, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 218, 224, 227, 248, 256, 260, 261, 262, 264, 266, 268, 269], "dtype": [2, 3, 13, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 44, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 76, 77, 78, 86, 89, 91, 99, 101, 103, 106, 109, 113, 116, 117, 125, 132, 133, 134, 139, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 161, 162, 179, 192, 193, 194, 195, 233, 236, 238, 241, 243, 246, 256, 262, 264, 265, 266, 268, 269], "import": [2, 3, 4, 6, 7, 10, 13, 14, 15, 16, 21, 22, 32, 33, 34, 35, 39, 44, 52, 54, 55, 84, 86, 89, 91, 99, 106, 107, 113, 116, 117, 125, 130, 132, 135, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 168, 192, 193, 194, 195, 220, 223, 233, 236, 238, 241, 243, 246, 248, 256, 257, 261, 262, 264, 265, 266, 268, 269], "match": [2, 3, 6, 8, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 52, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 107, 118, 123, 130, 142, 146, 151, 155, 156, 158, 159, 162, 171, 178, 181, 183, 224, 229, 256, 260, 262, 264, 265, 268, 269], "input": [2, 3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 55, 56, 57, 58, 68, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 104, 105, 106, 107, 109, 116, 118, 119, 120, 121, 122, 124, 129, 130, 133, 134, 139, 140, 141, 146, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 221, 225, 230, 248, 256, 257, 258, 260, 261, 262, 265, 268, 269], "output": [2, 3, 4, 13, 14, 16, 17, 30, 32, 33, 34, 35, 39, 40, 51, 54, 55, 56, 57, 58, 68, 73, 86, 89, 91, 100, 102, 106, 109, 118, 119, 120, 124, 125, 126, 129, 130, 135, 139, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 192, 196, 210, 218, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269], "send": [2, 3, 8, 268], "receiv": [2, 3, 30, 51, 54, 56, 57, 58, 102, 130, 257, 260, 262, 264, 265], "spawn": [2, 3, 4, 18, 22, 56], "check": [2, 3, 4, 5, 6, 7, 11, 18, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 52, 54, 55, 56, 57, 58, 74, 80, 90, 109, 146, 151, 152, 155, 156, 157, 158, 159, 256, 257, 261, 262, 264, 265, 266, 269], "check_env_spec": [2, 3, 254, 262, 265], "method": [2, 3, 4, 13, 14, 15, 16, 17, 21, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 49, 51, 54, 56, 57, 58, 73, 76, 81, 86, 89, 91, 92, 99, 102, 103, 106, 117, 129, 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 160, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 196, 209, 249, 257, 258, 259, 261, 262, 265, 269], "saniti": [2, 3, 7, 109, 262], "offer": [3, 7, 256, 261, 265, 269], "handl": [3, 21, 30, 51, 54, 56, 57, 58, 107, 130, 227, 250, 251, 260, 261, 262], "differ": [3, 4, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 73, 77, 86, 91, 103, 104, 125, 130, 132, 139, 177, 179, 180, 188, 192, 193, 194, 198, 199, 223, 227, 229, 250, 251, 256, 257, 258, 260, 261, 262, 264, 265, 266, 269], "dm": [3, 260, 269], "base": [3, 4, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 47, 50, 55, 56, 99, 105, 147, 173, 227, 233, 241, 243, 246, 256, 257, 258, 260, 261, 265, 269], "goal": [3, 4, 260, 261, 262, 265], "abl": [3, 260, 262, 264, 265, 268], "experi": [3, 32, 33, 34, 35, 39, 40, 44, 109, 212, 213, 214, 215, 216, 217, 255, 261, 262], "even": [3, 4, 8, 14, 18, 20, 21, 41, 42, 43, 49, 52, 260, 262, 265, 269], "simul": [3, 5, 7, 8, 71, 117, 132, 256, 260, 262], "some": [3, 4, 7, 8, 9, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 89, 109, 119, 159, 160, 161, 218, 230, 256, 258, 260, 261, 262, 265, 268, 269], "box": [3, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "under": [3, 4, 21, 30, 39, 51, 54, 56, 57, 58, 146, 151, 152, 155, 156, 157, 158, 159, 179, 192, 193, 194, 195, 196, 257, 260, 261, 265, 269], "lib": [3, 5, 6, 7, 9, 10, 13, 14, 16, 21, 22, 52, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 84, 86, 91, 99, 107, 233, 236, 238, 241, 243, 246, 248, 260, 261, 262, 264, 266, 268, 269], "hope": 3, "imit": 3, "nn": [3, 13, 14, 16, 21, 30, 51, 54, 55, 56, 57, 58, 76, 77, 89, 99, 103, 106, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 132, 135, 139, 146, 147, 148, 149, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 170, 172, 179, 192, 193, 194, 195, 243, 246, 248, 256, 257, 260, 261, 262, 264, 265, 266, 268], "typic": [3, 4, 8, 30, 51, 54, 56, 57, 58, 179, 180, 183, 256, 257, 258, 262, 265], "organis": [3, 261, 265], "arbitrari": [3, 31, 57, 58, 256, 260, 261, 265], "nest": [3, 26, 30, 51, 54, 56, 57, 58, 192, 193, 194, 195, 196, 258, 261, 262, 265, 268], "structur": [3, 7, 32, 33, 34, 35, 154, 192, 193, 194, 195, 196, 257, 260, 262, 265, 266], "attribut": [3, 4, 30, 51, 54, 56, 57, 58, 89, 98, 159, 179, 260, 265], "batch_siz": [3, 8, 13, 14, 15, 16, 26, 32, 33, 34, 35, 39, 40, 45, 51, 53, 55, 60, 67, 68, 69, 70, 73, 91, 99, 116, 117, 125, 132, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 218, 224, 233, 236, 238, 241, 243, 246, 256, 260, 261, 262, 264, 265, 266, 268, 269], "togeth": [3, 13, 14, 16, 17, 18, 19, 20, 21, 90, 147, 148, 149, 163, 256, 261, 262], "expect": [3, 4, 7, 26, 30, 36, 48, 51, 54, 55, 56, 57, 58, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 104, 109, 152, 154, 158, 161, 167, 168, 178, 179, 180, 182, 231, 255, 256, 257, 258, 260, 262, 265, 269], "live": [3, 12, 13, 14, 16, 17, 19, 20, 30, 32, 33, 34, 35, 39, 40, 51, 54, 55, 56, 57, 58, 179], "actual": [3, 4, 7, 17, 51, 54, 56, 57, 58, 230, 257, 260, 262, 265], "just": [3, 4, 218, 256, 258, 260, 261, 262, 265, 268, 269], "retriev": [3, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 74, 86, 116, 117, 132, 155, 159, 167, 168, 178, 180, 192, 193, 194, 195, 233, 236, 238, 241, 243, 246, 252, 258, 261, 262, 265, 269], "care": [3, 8, 51, 54, 56, 57, 58, 102, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 260, 262, 265], "see": [3, 6, 7, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 30, 40, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 108, 118, 128, 130, 133, 143, 144, 147, 149, 158, 159, 179, 224, 260, 261, 262, 265, 269], "below": [3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 118, 128, 130, 143, 144, 158, 179, 224, 260, 261, 262, 265], "parametr": [3, 134, 159, 177, 183, 260, 262], "hardwar": 3, "input_spec": [3, 51, 55, 76, 77, 78, 86, 91, 96, 98, 102, 103, 104, 117, 132, 260, 262, 265, 269], "compositespec": [3, 51, 53, 54, 55, 56, 57, 58, 77, 91, 98, 99, 102, 113, 117, 132, 146, 150, 153, 155, 161, 254, 260, 262, 265, 269], "output_spec": [3, 91, 102, 103, 265], "reward": [3, 13, 14, 16, 30, 36, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 72, 76, 78, 91, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 113, 116, 117, 132, 163, 169, 170, 174, 179, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 220, 221, 223, 225, 252, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "observation_spec": [3, 51, 55, 73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 89, 92, 95, 96, 98, 99, 100, 101, 102, 103, 104, 117, 132, 231, 248, 260, 262, 264, 265, 269], "pair": [3, 30, 39, 51, 54, 56, 57, 58, 99, 147, 155, 159, 179, 256, 257, 260, 261, 262, 264, 265, 269], "pointer": [3, 6, 52, 179, 260], "action_spec": [3, 13, 14, 15, 16, 18, 19, 20, 51, 54, 55, 56, 57, 58, 60, 67, 103, 125, 139, 141, 146, 151, 155, 156, 248, 256, 261, 262, 264, 265, 266, 268, 269], "reward_spec": [3, 51, 55, 72, 76, 78, 93, 94, 95, 102, 103, 104, 117, 132, 262, 265, 269], "done_spec": [3, 102, 103, 265, 269], "flag": [3, 8, 32, 33, 34, 35, 39, 40, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 256, 265, 266], "importantli": [3, 155, 159], "4": [3, 7, 13, 14, 16, 24, 27, 31, 32, 33, 55, 61, 62, 63, 66, 107, 117, 118, 119, 120, 125, 126, 127, 129, 130, 132, 135, 138, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 209, 256, 260, 261, 262, 265, 266, 267, 268, 269], "action_s": 3, "help": [3, 4, 30, 51, 54, 56, 57, 58, 255, 257, 260, 261, 262], "prealloc": [3, 265], "consist": [3, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 118, 130, 260, 261, 262, 265, 266, 269], "With": [3, 258, 260, 261, 269], "necessarili": 3, "If": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 54, 55, 56, 57, 58, 74, 75, 77, 79, 81, 85, 86, 89, 90, 95, 96, 99, 102, 103, 106, 107, 116, 118, 129, 130, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 205, 206, 207, 208, 222, 224, 227, 229, 231, 233, 241, 243, 246, 248, 252, 255, 260, 261, 262, 264, 265, 268, 269], "instanti": [3, 21, 57, 58, 102, 260, 261, 265, 269], "0": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 39, 44, 51, 54, 55, 56, 57, 58, 60, 67, 72, 74, 76, 77, 85, 86, 89, 99, 101, 103, 106, 107, 109, 117, 118, 119, 120, 122, 126, 128, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 146, 150, 152, 153, 154, 157, 158, 161, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 198, 199, 218, 225, 248, 252, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "stateless": [3, 102, 260, 265, 269], "set_se": [3, 13, 14, 16, 17, 21, 51, 54, 55, 56, 57, 58, 60, 67, 86, 91, 103, 265, 268, 269], "seed": [3, 13, 14, 16, 17, 21, 51, 54, 55, 56, 57, 58, 61, 69, 70, 103, 109, 227], "next": [3, 4, 8, 13, 14, 16, 26, 30, 32, 33, 34, 35, 39, 40, 51, 52, 54, 55, 56, 57, 58, 60, 67, 69, 70, 84, 91, 107, 113, 116, 117, 132, 141, 163, 170, 172, 180, 181, 191, 192, 193, 194, 195, 196, 221, 223, 225, 260, 261, 264, 265, 266, 268, 269], "determinist": [3, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 126, 136, 141, 146, 153, 158, 159, 179, 256, 260, 261, 265, 269], "preced": [3, 129], "without": [3, 7, 9, 30, 51, 54, 56, 57, 58, 148, 149, 181, 191, 192, 193, 194, 195, 196, 248, 255, 256, 260, 261, 262, 265, 269], "risk": [3, 90], "overlap": [3, 34], "consecut": [3, 48, 154, 269], "still": [3, 9, 98, 150, 178, 179, 260, 261, 264, 265, 269], "reproduc": [3, 109, 260, 262], "maximum": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 25, 30, 41, 42, 43, 51, 54, 56, 57, 58, 77, 93, 98, 100, 113, 142, 143, 144, 155, 177, 179, 183, 224, 260, 261, 262, 265, 268, 269], "max_step": [3, 13, 51, 54, 55, 56, 57, 58, 69, 70, 98, 268, 269], "n": [3, 6, 7, 24, 27, 30, 31, 51, 54, 56, 57, 58, 73, 77, 81, 104, 132, 159, 167, 179, 191, 224, 256, 258, 261, 269], "tensordictmodul": [3, 13, 14, 16, 17, 20, 21, 55, 132, 139, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 167, 168, 169, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 223, 248, 256, 260, 262, 264, 265, 266], "ani": [3, 5, 8, 26, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 81, 89, 90, 103, 107, 109, 118, 130, 134, 158, 159, 160, 161, 179, 180, 215, 227, 255, 260, 261, 262, 265, 268, 269], "compat": [3, 7, 11, 18, 19, 30, 49, 51, 54, 56, 57, 58, 65, 68, 73, 107, 156, 179, 188, 260, 268], "figur": [3, 260, 262, 265, 269], "summar": [3, 265], "brief": [3, 262, 269], "popul": [3, 33, 84, 99, 260, 262, 265], "entri": [3, 13, 14, 16, 18, 19, 20, 21, 23, 30, 39, 40, 51, 54, 56, 57, 58, 75, 81, 84, 86, 89, 91, 98, 106, 107, 116, 156, 157, 183, 192, 193, 194, 195, 256, 260, 262, 265, 266], "deliveri": 3, "step_mdp": [3, 254, 265, 268, 269], "nasium": 3, "recent": [3, 7, 11, 260, 268, 269], "shift": [3, 30, 164, 262], "termin": [3, 30, 39, 160, 260, 261, 262, 265, 268], "trust": 3, "truncat": [3, 13, 14, 16, 18, 19, 20, 21, 98, 144, 260, 262, 269], "refer": [3, 7, 8, 21, 30, 51, 54, 56, 57, 58, 103, 107, 117, 125, 126, 132, 136, 137, 140, 141, 152, 167, 172, 173, 174, 175, 180, 192, 197, 204, 236, 260, 262, 268], "stepcount": [3, 13, 260, 261, 262, 268], "chosen": [3, 99, 139, 157, 233, 241, 243, 246, 256], "someth": [3, 30, 51, 54, 56, 57, 58, 255, 261, 262, 265, 269], "els": [3, 256, 258, 260, 261, 262, 265, 266], "100": [3, 30, 34, 51, 54, 56, 57, 58, 86, 152, 219, 248, 261, 262, 264, 265, 266, 268, 269], "truncated_kei": [3, 98], "assess": [3, 260], "split_trajectori": [3, 13, 14, 16, 17, 18, 19, 20, 21, 254], "slice": [3, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 39], "adjac": [3, 23, 81], "reli": [3, 167, 257, 260, 262, 265, 269], "traj_id": [3, 13, 14, 16, 23, 268], "junction": 3, "miss": [3, 4, 6, 7, 11, 26, 30, 51, 54, 56, 57, 58, 99, 103, 116, 160, 161, 255, 260], "context": [3, 5, 8, 30, 51, 52, 54, 56, 57, 58, 68, 99, 104, 133, 189, 190, 192, 193, 194, 195, 197, 204, 223, 256, 257, 260, 261, 262, 265, 266], "mark": 3, "through": [3, 4, 5, 8, 16, 18, 20, 21, 57, 58, 90, 130, 159, 160, 161, 164, 192, 193, 194, 195, 256, 260, 261, 262, 264, 265, 266, 269], "inittrack": 3, "our": [3, 7, 8, 18, 256, 260, 261, 262, 264, 266, 268], "tutori": [3, 260, 261, 263, 264, 265, 266, 267, 268, 269], "inform": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 52, 54, 56, 57, 58, 118, 130, 257, 258, 260, 261, 262, 265], "design": [3, 13, 14, 30, 31, 51, 54, 56, 57, 58, 90, 103, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 260, 261, 262, 264, 265, 269], "scratch": [3, 8, 261, 265], "better": [3, 8, 257, 262, 265], "featur": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 31, 51, 54, 56, 57, 58, 73, 81, 99, 104, 107, 118, 126, 127, 130, 133, 134, 159, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 252, 256, 260, 261, 262, 265, 269], "intens": [3, 8], "gym3": 3, "envpool": [3, 56], "interfac": [3, 68, 130, 133, 256, 260, 262, 265], "simultan": [3, 20, 57, 58, 265], "often": [3, 8, 176, 227, 260, 261, 265, 269], "competit": 3, "advantag": [3, 8, 127, 167, 168, 178, 180, 182, 192, 193, 194, 195, 196, 197, 198, 200, 202, 204, 205, 207, 257, 258, 260, 261, 262, 265, 268, 269], "scale": [3, 4, 39, 86, 94, 126, 128, 135, 140, 141, 143, 144, 147, 148, 149, 155, 159, 161, 225, 231, 233, 241, 243, 246, 252, 256, 260, 261, 262, 268], "varieti": 3, "its": [3, 4, 5, 7, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 51, 54, 55, 56, 57, 58, 73, 102, 103, 107, 118, 150, 153, 155, 156, 159, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 227, 248, 258, 260, 261, 262, 265, 266, 269], "own": [3, 13, 14, 17, 22, 30, 51, 54, 56, 57, 58, 261, 262, 265], "As": [3, 4, 51, 54, 56, 57, 58, 159, 256, 260, 261, 262, 265, 266, 268, 269], "inherit": [3, 131, 179, 258, 262], "serialenv": [3, 99, 254, 269], "enjoi": 3, "exact": 3, "Of": [3, 7, 255, 265, 269], "cours": [3, 4, 255, 262, 265, 269], "correspond": [3, 4, 13, 14, 16, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 44, 51, 54, 55, 56, 57, 58, 89, 99, 103, 106, 107, 154, 155, 159, 192, 193, 194, 195, 196, 260, 261, 262, 265, 266], "count": [3, 52, 98, 154, 223, 227, 230, 260, 261, 262, 269], "def": [3, 11, 22, 30, 51, 52, 54, 55, 56, 57, 58, 117, 125, 132, 162, 258, 260, 261, 264, 265, 268, 269], "make_env": [3, 70, 107, 234, 235, 260, 261, 269], "gymenv": [3, 5, 13, 14, 16, 17, 21, 22, 52, 65, 76, 84, 86, 91, 99, 103, 107, 233, 236, 238, 241, 243, 246, 248, 254, 256, 260, 261, 262, 266, 268, 269], "v1": [3, 13, 14, 16, 21, 22, 39, 52, 56, 84, 86, 91, 99, 188, 200, 201, 202, 203, 205, 206, 207, 208, 256, 261, 265, 268, 269], "from_pixel": [3, 61, 62, 233, 241, 243, 246, 260, 261, 266, 268, 269], "9": [3, 7, 30, 32, 33, 34, 107, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 186, 257, 260, 261, 262, 265, 266], "81": [3, 261, 262, 265, 266], "must": [3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 41, 42, 43, 49, 51, 52, 54, 56, 57, 58, 82, 86, 99, 103, 104, 107, 118, 125, 130, 139, 146, 151, 152, 155, 156, 157, 158, 159, 162, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 233, 236, 238, 241, 243, 246, 260, 261, 262, 264, 265, 268], "print": [3, 6, 7, 13, 14, 16, 21, 22, 24, 26, 27, 30, 31, 32, 33, 34, 35, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 74, 77, 78, 84, 86, 91, 99, 101, 107, 113, 116, 118, 125, 130, 135, 138, 139, 146, 147, 148, 149, 151, 153, 154, 156, 158, 161, 162, 179, 233, 236, 238, 241, 243, 246, 248, 256, 258, 261, 262, 264, 265, 266, 268, 269], "simpli": [3, 6, 79, 96, 179, 256, 257, 260, 262, 269], "b": [3, 7, 8, 23, 26, 34, 35, 133, 134, 192, 193, 194, 195, 196, 210, 256, 261, 266], "c": [3, 6, 7, 26, 34, 35, 40, 86, 233, 236, 238, 241, 243, 246, 261], "d": [3, 32, 40, 44, 159, 268], "get": [3, 4, 6, 7, 8, 32, 39, 49, 52, 57, 58, 74, 77, 78, 86, 90, 101, 107, 146, 153, 155, 156, 159, 192, 193, 194, 195, 196, 214, 256, 260, 261, 262, 265, 268, 269], "forc": [3, 6, 7, 13, 14, 18, 20, 21, 261, 265], "reset_work": 3, "fals": [3, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 67, 68, 69, 70, 74, 76, 81, 84, 85, 86, 89, 90, 91, 94, 99, 101, 103, 104, 106, 107, 109, 116, 117, 118, 119, 125, 130, 132, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 185, 188, 192, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208, 220, 221, 223, 224, 225, 227, 233, 236, 238, 241, 243, 246, 252, 256, 258, 260, 261, 262, 264, 265, 266, 268, 269], "field": [3, 13, 14, 16, 17, 26, 30, 34, 35, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 91, 99, 103, 116, 117, 125, 132, 139, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 161, 162, 231, 233, 236, 238, 241, 243, 246, 255, 256, 261, 262, 264, 265, 266, 268, 269], "bool": [3, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 69, 70, 74, 77, 81, 84, 85, 86, 89, 91, 94, 99, 101, 103, 104, 106, 107, 109, 116, 117, 118, 119, 120, 128, 130, 132, 133, 134, 143, 144, 146, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 185, 188, 192, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 220, 221, 223, 224, 225, 227, 233, 236, 238, 241, 243, 246, 252, 261, 262, 264, 265, 266, 268, 269], "pixel": [3, 7, 26, 73, 75, 81, 83, 86, 89, 92, 101, 106, 119, 136, 137, 210, 233, 238, 241, 243, 246, 256, 260, 261, 266, 268, 269], "500": [3, 260, 261, 265, 268, 269], "uint8": [3, 38, 101, 261, 266, 268, 269], "none": [3, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 52, 54, 55, 56, 57, 58, 69, 70, 72, 73, 74, 75, 76, 78, 81, 83, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 138, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 167, 168, 169, 170, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 221, 222, 223, 224, 225, 226, 227, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 256, 258, 260, 261, 262, 265, 268, 269], "is_shar": [3, 13, 14, 16, 26, 34, 35, 55, 60, 67, 68, 69, 70, 91, 99, 107, 116, 117, 125, 132, 139, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 161, 162, 233, 236, 238, 241, 243, 246, 256, 262, 264, 265, 266, 268, 269], "note": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 107, 154, 155, 159, 257, 260, 261, 264, 269], "launch": [3, 18, 19, 20, 22], "quit": [3, 256, 260, 261, 262, 269], "time": [3, 4, 7, 8, 13, 14, 16, 17, 18, 20, 21, 30, 32, 33, 34, 35, 51, 52, 54, 56, 57, 58, 68, 74, 90, 99, 100, 107, 116, 126, 129, 154, 168, 171, 174, 178, 179, 180, 181, 185, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 227, 256, 257, 261, 262, 264, 265, 266, 268, 269], "mani": [3, 4, 33, 167, 168, 171, 178, 180, 181, 185, 256, 260, 261, 262, 265, 269], "start": [3, 4, 5, 13, 21, 52, 116, 222, 260, 261, 265, 269], "bottleneck": [3, 8], "so": [3, 4, 6, 7, 10, 30, 51, 54, 56, 57, 58, 99, 107, 160, 161, 179, 262, 265, 269], "onc": [3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 103, 150, 153, 154, 225, 258, 261, 262, 265, 269], "great": [3, 7, 8, 268], "speedup": [3, 8, 269], "precis": [3, 101, 116, 260, 262], "anoth": [3, 8, 51, 54, 56, 57, 58, 102, 130, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 256, 257, 260, 262, 264, 265, 269], "misspecifi": 3, "caus": [3, 7, 8, 90], "breakag": 3, "t": [3, 4, 6, 7, 8, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 44, 48, 51, 52, 54, 56, 57, 58, 89, 100, 106, 107, 116, 151, 158, 184, 192, 193, 194, 195, 196, 227, 229, 252, 255, 260, 261, 262, 264, 265, 266, 268, 269], "rais": [3, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 80, 103, 109, 260, 262, 268], "assert": [3, 6, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 54, 91, 107, 109, 113, 135, 192, 193, 194, 195, 218, 226, 264, 269], "mismatch": [3, 261], "mostli": [3, 17, 257, 269], "purpos": [3, 7, 248, 260, 262, 266, 269], "want": [3, 6, 7, 8, 86, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 256, 260, 261, 262, 265, 266, 268, 269], "subprocess": [3, 52], "addit": [3, 4, 30, 39, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 150, 158, 166, 179, 192, 257, 260, 261], "multithread": [3, 32, 33, 34, 35, 39, 40, 56], "multithreadedenv": [3, 254], "underneath": 3, "higher": [3, 4, 260, 261, 262, 269], "restrict": [3, 261, 266, 269], "flexibl": [3, 9, 56, 186, 258, 269], "cover": [3, 255, 262, 265, 268], "popular": [3, 256], "atari": [3, 4, 73, 269], "classic": [3, 55, 261], "benchmark_batched_env": 3, "py": [3, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269], "case": [3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 30, 32, 34, 44, 51, 54, 56, 57, 58, 99, 103, 109, 130, 155, 158, 159, 161, 166, 218, 229, 250, 251, 252, 256, 258, 260, 261, 262, 265, 269], "raw": [3, 4, 128, 143, 144, 261, 265], "treat": 3, "logic": 3, "torchvis": [3, 89, 106, 268, 269], "transformedenv": [3, 13, 52, 76, 81, 84, 85, 86, 91, 99, 102, 107, 233, 236, 238, 241, 243, 246, 260, 261, 262, 264, 265, 266, 268, 269], "primit": [3, 4], "built": [3, 5, 7, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 186, 244, 248, 249, 252, 260, 261, 262, 269], "base_env": [3, 77, 78, 99, 260, 261, 262, 266, 268, 269], "totensorimag": [3, 238, 261, 268, 269], "in_kei": [3, 13, 14, 16, 21, 55, 72, 73, 74, 75, 77, 78, 81, 83, 86, 87, 89, 91, 92, 93, 94, 95, 100, 101, 102, 106, 107, 117, 124, 132, 146, 147, 148, 149, 151, 155, 156, 158, 159, 161, 162, 168, 169, 170, 178, 180, 192, 193, 194, 195, 209, 210, 243, 246, 248, 256, 260, 261, 262, 264, 265, 266, 268, 269], "resiz": [3, 261, 269], "64": [3, 119, 120, 127, 260, 261, 262, 264, 265, 266, 268, 269], "now": [3, 7, 32, 260, 261, 262, 264, 266, 269], "appar": [3, 220], "bring": [3, 262, 269], "signific": [3, 5, 8, 262, 269], "kind": [3, 36, 116], "consult": 3, "interest": [3, 155, 159, 256, 261, 262, 265, 269], "abov": [3, 7, 30, 51, 54, 56, 57, 58, 128, 143, 144, 166, 257, 258, 260, 262, 265, 269], "resize_par": 3, "out_kei": [3, 13, 14, 16, 21, 55, 72, 73, 74, 75, 81, 83, 86, 87, 89, 91, 92, 93, 95, 100, 101, 102, 106, 117, 124, 125, 132, 139, 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 161, 162, 168, 178, 180, 192, 193, 194, 195, 223, 248, 256, 260, 261, 262, 264, 265, 266, 268, 269], "easi": [3, 5, 40, 256, 257, 260, 261, 262, 266, 269], "root": [3, 26, 116, 128, 143, 144, 265, 269], "graph": [3, 4, 8, 189, 190, 260, 265], "inv": [3, 77, 265], "appli": [3, 4, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 56, 57, 58, 73, 74, 76, 77, 79, 80, 81, 82, 84, 88, 90, 91, 95, 96, 98, 99, 100, 102, 103, 105, 107, 143, 151, 192, 222, 258, 260, 261, 262, 265, 268, 269], "revers": 3, "order": [3, 16, 30, 31, 32, 33, 34, 35, 39, 40, 48, 51, 54, 56, 57, 58, 103, 146, 151, 158, 160, 161, 162, 261], "chain": [3, 32, 33, 34, 35, 39, 40, 76, 77, 118, 161, 269], "taken": [3, 51, 54, 56, 57, 58, 257, 260, 262, 265], "includ": [3, 4, 7, 9, 21, 30, 41, 42, 43, 49, 51, 54, 55, 56, 57, 58, 103, 107, 179, 230, 256, 258, 260, 261, 262, 265, 269], "invers": [3, 4, 86, 165, 177, 265], "in_keys_inv": [3, 78, 86, 87, 91, 102, 260, 264, 265, 269], "append_transform": [3, 32, 33, 34, 35, 39, 40, 89, 99, 260, 265, 268, 269], "doubletofloat": [3, 233, 236, 241, 243, 246, 260, 262, 264], "float32": [3, 13, 14, 16, 26, 32, 34, 35, 36, 44, 55, 60, 67, 68, 69, 70, 78, 86, 91, 99, 101, 113, 116, 117, 125, 132, 139, 146, 147, 148, 149, 151, 154, 155, 156, 157, 158, 161, 162, 233, 236, 238, 241, 243, 246, 256, 262, 264, 265, 266, 268, 269], "float64": [3, 30, 51, 54, 56, 57, 58, 69, 76, 89, 99, 103, 106, 158, 179, 264, 269], "append": [3, 8, 32, 33, 34, 35, 39, 40, 52, 99, 151, 156, 260, 261, 262, 265, 266, 268], "regist": [3, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 103, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 179, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 258, 260, 262], "manipul": [3, 4, 8, 89, 269], "keep": [3, 4, 7, 8, 14, 35, 48, 86, 89, 106, 107, 116, 154, 220, 227, 260, 261, 262, 265, 268, 269], "mind": 3, "go": [3, 7, 90, 260, 261, 262, 264, 265, 266, 268, 269], "what": [3, 8, 32, 36, 51, 54, 56, 57, 58, 99, 116, 156, 255, 256, 257, 261, 262, 265, 266, 268, 269], "third_transform": 3, "would": [3, 30, 51, 54, 56, 57, 58, 130, 258, 261, 262, 265, 269], "replac": [3, 6, 7, 30, 77, 116, 256], "unexpect": [3, 30, 51, 54, 56, 57, 58, 103, 269], "behviour": 3, "fortun": 3, "eras": [3, 51, 54, 56, 57, 58], "ident": [3, 13, 14, 16, 30, 57, 58, 250, 251, 261], "alreadi": [3, 8, 30, 51, 54, 56, 57, 58, 159, 260, 262], "place": [3, 13, 14, 16, 17, 26, 30, 51, 52, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 158, 179, 224, 229, 230, 261, 262, 265], "chang": [3, 5, 7, 30, 32, 33, 34, 35, 41, 42, 43, 48, 49, 51, 54, 56, 57, 58, 91, 102, 103, 107, 179, 257, 260, 262, 265, 266, 269], "happen": [3, 150, 261, 266, 269], "catfram": [3, 261], "hold": [3, 189, 190, 265], "about": [3, 5, 7, 18, 19, 20, 257, 260, 261, 262, 265, 268, 269], "notic": [3, 262, 265], "parenthood": 3, "reason": [3, 4, 8, 30, 51, 54, 56, 57, 58, 89, 257, 260, 261, 262], "henc": [3, 32, 90, 256, 260, 262, 265], "composit": [3, 26, 51, 54, 56, 57, 58, 262, 265], "transform1": 3, "transform2": 3, "transform3": 3, "last_two": 3, "isinst": [3, 265], "log": [3, 4, 8, 123, 124, 125, 138, 144, 151, 152, 155, 159, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 220, 221, 223, 227, 248, 256, 257, 258, 260, 261, 262, 265, 268], "reveal": 4, "bug": [4, 268], "curv": 4, "won": [4, 30, 51, 52, 54, 56, 57, 58, 89, 106, 227, 252, 261, 262], "tell": [4, 7, 260], "exploit": 4, "video": [4, 210, 223, 252], "game": [4, 5], "cannot": [4, 7, 22, 26, 90, 156, 261, 262, 265], "cv": 4, "act": 4, "flip": 4, "imag": [4, 7, 61, 75, 89, 101, 106, 130, 260, 261, 266, 269], "correspondingli": 4, "relat": [4, 10, 32, 81, 261, 265], "prescript": 4, "tune": [4, 266], "coeffici": 4, "bonu": [4, 167, 168, 178, 180], "beta": [4, 32, 34, 44, 177, 178, 260, 261, 268], "altern": [4, 27, 56, 166, 179, 260, 262], "reduc": [4, 6, 27, 261, 262], "downstream": [4, 260], "formul": 4, "ob": [4, 8, 26, 78, 86, 101, 113, 116, 156, 162, 192, 193, 194, 195, 261, 264, 265, 268, 269], "rate": [4, 107, 191, 261, 262], "gradient": [4, 30, 51, 54, 56, 57, 58, 103, 128, 134, 143, 144, 167, 168, 178, 179, 180, 182, 191, 192, 193, 194, 195, 227, 260, 262, 265], "norm": [4, 8, 227, 260, 261, 262, 265], "easier": [4, 256, 260], "behavior": [4, 30, 51, 54, 56, 57, 58, 103, 177, 179, 262], "local": [4, 7, 10, 16, 21, 30, 51, 54, 56, 57, 58, 103, 215, 260, 268], "optima": 4, "sens": [4, 265], "product": [4, 9, 250, 251], "sum": [4, 21, 29, 31, 54, 174, 191, 257, 260, 261, 262, 265, 269], "track": [4, 13, 14, 16, 17, 18, 19, 20, 21, 35, 48, 95, 107, 154, 215, 220, 261, 265], "stat": [4, 86, 231, 252, 261, 262], "w": [4, 75, 92, 101, 154, 210, 261], "r": [4, 30, 86, 159, 166, 191, 256, 260, 261, 265, 269], "yield": [4, 16, 21, 30, 51, 54, 56, 57, 58, 179, 260], "insight": 4, "auxiliari": 4, "credit": 4, "assign": [4, 13, 14, 169, 170, 262], "futur": [4, 30, 51, 54, 56, 57, 58, 89, 103, 106, 130, 255, 268], "past": [4, 261], "becom": [4, 21, 269], "between": [4, 5, 13, 14, 16, 17, 21, 30, 48, 51, 54, 56, 57, 58, 77, 85, 93, 101, 103, 109, 118, 130, 152, 155, 159, 167, 168, 174, 175, 178, 179, 180, 188, 192, 223, 227, 257, 260, 261, 269], "spars": 4, "ineffici": 4, "interact": [4, 5, 7, 8, 13, 14, 16, 18, 19, 20, 21, 155, 159, 260, 262, 265, 269], "ad": [4, 13, 14, 16, 30, 32, 33, 34, 35, 39, 40, 44, 51, 54, 56, 57, 58, 95, 103, 133, 134, 154, 167, 168, 178, 180, 261, 269], "intermedi": [4, 152, 260, 266], "instrument": 4, "greatli": 4, "soccer": 4, "kick": 4, "ball": 4, "likelihood": [4, 260], "discov": 4, "score": 4, "undesir": 4, "though": [4, 130, 262], "unintention": 4, "valuabl": 4, "idiosyncrat": 4, "zero": [4, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 74, 77, 86, 113, 116, 117, 129, 153, 154, 157, 164, 179, 192, 193, 194, 195, 268], "subtask": 4, "hierarch": [4, 268], "framework": [4, 9, 22, 55, 268, 269], "individu": [4, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 260], "select": [4, 15, 32, 33, 34, 35, 39, 40, 73, 74, 76, 79, 80, 81, 82, 84, 85, 88, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 117, 151, 156, 226, 260], "fall": 4, "section": [4, 261], "explicit": [4, 11, 129], "mechan": [4, 30, 51, 54, 56, 57, 58, 103, 261, 265], "curios": 4, "magnitudin": 4, "domin": 4, "smaller": [4, 51, 54, 56, 57, 58, 177, 262], "addition": 4, "per": [4, 13, 14, 16, 17, 18, 19, 20, 21, 57, 126, 227, 250, 251, 260, 261, 262, 268], "timestep": [4, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "realli": 4, "larg": [4, 27, 261, 262], "target": [4, 8, 21, 30, 51, 52, 54, 56, 57, 58, 102, 158, 159, 167, 168, 169, 170, 171, 172, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 195, 196, 230, 247, 248, 257, 258, 260, 265], "huge": 4, "std": [4, 86, 107, 135, 150, 260, 269], "torchrl": [4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 263, 264, 266, 267], "initi": [4, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 86, 89, 99, 102, 103, 108, 117, 132, 133, 134, 150, 153, 154, 167, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 185, 233, 236, 238, 241, 243, 246, 252, 261, 265, 269], "estim": [4, 147, 148, 149, 167, 168, 172, 178, 179, 180, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 257, 261, 262, 264, 265, 266, 268, 269], "encount": [4, 57, 58, 255, 261, 265], "unseen": 4, "extrins": 4, "wrong": 4, "goe": [4, 260, 262, 269], "bonus": 4, "denser": 4, "prior": [4, 141, 174], "freshli": 4, "proper": [4, 6, 7, 192, 193, 194, 195, 261, 262], "doesn": [4, 11, 56], "drop": [4, 48, 116], "meant": [4, 55], "encourag": [4, 260, 261], "measur": [4, 262], "novelti": 4, "revisit": 4, "previous": [4, 262, 269], "diminish": 4, "decreas": 4, "ideal": [4, 86, 265], "down": [4, 13, 14, 16, 17], "gone": [4, 5], "anyth": 4, "try": [4, 7, 8, 261, 262, 265, 268, 269], "distil": 4, "add": [4, 6, 21, 30, 32, 33, 34, 35, 39, 40, 46, 50, 51, 54, 56, 57, 58, 133, 167, 179, 222, 262, 265, 268], "nois": [4, 108, 134, 145, 154, 181, 185, 223, 252, 260], "exploratori": [4, 167, 168, 178, 180], "could": [4, 6, 261, 262, 266, 269], "misalign": 4, "trade": 4, "unavoid": 4, "prioriti": [4, 32, 34, 35, 41, 42, 43, 44, 49, 169, 170, 171, 177, 181, 183, 185, 258, 260, 261], "schedul": [4, 7, 223, 262, 265], "separ": [4, 8, 13, 14, 17, 18, 20, 21, 23, 89, 106, 169, 171, 181, 183, 185, 260, 261, 269], "divers": [4, 57, 58], "bootstrap": [4, 172, 193, 198, 199, 260], "noisi": [4, 133, 134, 145, 256], "unstabl": [4, 128, 143, 144], "inher": 4, "stochast": [4, 126, 134, 136, 141, 171, 177, 181, 183, 256, 262], "enemi": 4, "variabl": [4, 7, 8, 27, 31, 132, 147, 148, 149, 179, 181, 258, 261], "pomdp": 4, "previou": [4, 10, 30, 34, 141, 262, 265, 269], "loos": [4, 256, 261, 262], "nonexist": 4, "sure": [4, 7, 40, 49, 151, 252, 256, 260, 262, 265, 268, 269], "architectur": 4, "sequenc": [4, 13, 14, 16, 17, 26, 28, 29, 32, 33, 46, 50, 72, 73, 74, 75, 77, 78, 81, 83, 86, 87, 90, 92, 93, 94, 95, 100, 101, 102, 107, 118, 123, 130, 138, 146, 155, 159, 160, 161, 162, 209, 210, 222, 223, 224, 226, 227, 233, 241, 243, 246, 256, 260, 262, 264, 269], "rather": [4, 91, 260, 261, 262], "last": [4, 13, 14, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 48, 81, 86, 90, 100, 118, 129, 130, 136, 150, 153, 260, 261, 262, 265, 266, 268, 269], "lstm": [4, 129, 135], "explicitli": [4, 261], "rel": [4, 99, 123, 142, 260, 261], "tend": 4, "stabl": [4, 9, 10], "don": [4, 6, 7, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 51, 261, 262, 268, 269], "compens": 4, "descent": [4, 134], "1000": [4, 33, 107, 150, 153, 154, 155, 159, 176, 260, 261, 262, 266], "know": [4, 32, 33, 34, 35, 150, 153, 181, 223, 260, 261, 262], "minimum": [4, 25, 93, 113, 126, 135, 142, 143, 144, 155, 164, 166, 179, 218, 260, 262, 265, 268, 269], "rang": [4, 8, 11, 27, 32, 33, 52, 107, 178, 185, 257, 258, 260, 262, 265, 268], "manual": [4, 18, 20, 21, 260], "deviat": [4, 86, 107, 117, 126, 132, 133, 134, 150, 180, 185, 260], "radic": 4, "begin": [4, 13, 14, 16, 18, 19, 20, 21], "updat": [4, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 34, 44, 51, 54, 55, 56, 57, 58, 77, 103, 105, 107, 117, 132, 154, 155, 156, 157, 158, 159, 167, 176, 180, 184, 192, 193, 194, 195, 196, 223, 227, 229, 234, 235, 247, 248, 258, 260, 261, 262, 265, 268, 269], "stabil": [4, 82], "stage": [4, 260, 265], "never": 4, "prevent": [4, 128, 143, 144, 178, 180, 225], "solv": [4, 10, 255, 260, 261, 262, 265], "entir": [4, 262, 265], "submit": [4, 255, 268], "suffici": [4, 260], "recommend": [4, 7], "system": [4, 5, 262, 265], "adequ": [4, 109, 262], "infeas": 4, "allevi": [4, 256], "prune": 4, "develop": [4, 7, 260, 268], "filter": 4, "fire": [4, 30, 51, 54, 56, 57, 58], "certain": [4, 18, 20, 21, 30, 51, 54, 56, 57, 58, 82, 98, 103, 178, 256, 260, 261, 262, 269], "illeg": 4, "chess": 4, "combin": [4, 102, 261], "grasp": 4, "releas": [4, 7, 10, 30, 51, 54, 56, 57, 58, 103, 268], "top": [4, 117, 132], "p": [4, 52], "wherein": 4, "cumul": [4, 95, 117, 262], "probabl": [4, 8, 123, 125, 130, 138, 144, 155, 159, 256, 261, 268], "q": [4, 119, 120, 121, 122, 124, 125, 127, 139, 149, 152, 156, 157, 169, 170, 171, 172, 176, 177, 181, 183, 185, 243, 246, 254, 260], "flow": [4, 260, 262, 265], "directli": [4, 8, 55, 179, 252, 256, 262, 265], "reparameter": [4, 123, 138], "soft": [4, 176, 183, 184], "critic": [4, 8, 147, 167, 168, 178, 180, 182, 183, 260, 262], "clip": [4, 93, 168, 185, 227, 262, 265], "oppos": 4, "incorrect": 4, "thought": 4, "bound": [4, 17, 21, 25, 26, 30, 51, 54, 56, 57, 58, 107, 140, 141, 146, 151, 152, 154, 155, 156, 157, 158, 159, 256, 260, 261, 262, 269], "region": 4, "squash": [4, 268], "tanh": [4, 118, 128, 130, 142, 143, 144, 262, 265, 266, 268], "correct": [4, 230, 262], "prob": [4, 138, 262], "rememb": 4, "remap": 4, "origin": [4, 8, 13, 14, 16, 17, 77, 89, 103, 106, 155, 158, 159, 176, 179, 180, 243, 246, 260, 264, 265, 269], "side": [4, 269], "real": [5, 159, 257, 265], "world": [5, 55, 163, 174, 265, 269], "robot": [5, 7, 89, 106], "adopt": [5, 260, 269], "histor": 5, "wa": [5, 7, 51, 54, 56, 57, 58, 103, 176, 184, 257, 261, 262, 264, 268], "ceas": 5, "maintain": [5, 9, 265], "fork": 5, "gymnasium": [5, 11, 261, 262, 265, 268], "farama": [5, 262, 265], "foundat": [5, 262], "document": [5, 7, 18, 19, 21, 30, 51, 54, 56, 57, 58, 103, 261, 268], "further": [5, 262], "detail": [5, 6, 7, 30, 51, 54, 56, 57, 58, 103, 125, 152, 167, 172, 180, 236, 255, 261, 264], "usag": [5, 7, 39, 177, 183, 186, 256, 260, 261, 262, 264, 265, 266, 268, 269], "known": [5, 7, 8, 198, 199, 260, 261], "bc": [5, 268], "break": [5, 13, 14, 16, 21, 30, 33, 35, 51, 54, 56, 57, 58, 107, 261, 268], "face": [5, 8, 9, 269], "modif": [5, 26, 30, 51, 54, 56, 57, 58, 81, 179, 262, 265], "against": [5, 7, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 109, 146, 151, 152, 155, 156, 157, 158, 159, 262], "13": [5, 10, 11, 261, 262, 265, 267], "howev": [5, 7, 30, 51, 54, 56, 57, 58, 95, 98, 103, 256, 260, 261, 262, 269], "construct": [5, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 109, 141, 159, 179, 227, 233, 241, 256, 261, 262, 265, 269], "automat": [5, 51, 54, 56, 57, 58, 86, 146, 155, 256, 260, 262, 265, 268], "wrap": [5, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 109, 147, 148, 149, 156, 163, 256, 260, 261, 262, 269], "best": [5, 9, 268], "gymwrapp": [5, 54, 254, 262, 268], "you": [5, 6, 7, 8, 10, 30, 51, 54, 56, 57, 58, 107, 255, 256, 260, 261, 262, 264, 266, 268, 269], "feel": [5, 255, 268], "free": [5, 7, 167, 174, 180, 258, 262, 268], "gladli": 5, "instruct": [6, 7, 10, 22, 39, 77, 260, 261, 262], "prepar": [6, 262], "conda": [6, 7, 255], "assum": [6, 26, 31, 34, 35, 39, 54, 57, 58, 75, 81, 89, 90, 95, 99, 106, 113, 129, 183, 200, 201, 202, 203, 205, 206, 207, 208, 210, 260, 262, 264, 265], "let": [6, 7, 30, 51, 54, 56, 57, 58, 151, 223, 257, 260, 261, 262, 264, 265, 266, 268, 269], "7": [6, 10, 27, 31, 32, 33, 34, 117, 118, 129, 130, 132, 260, 261, 265, 266, 267, 268], "cmake": 6, "14": [6, 11, 86, 261, 262, 265, 267, 268], "activ": [6, 7, 9, 118, 126, 130, 168, 178, 180, 256, 268], "sim": 6, "bullet": 6, "physic": [6, 7, 258, 260, 265], "headless": [6, 7], "cluster": [6, 7, 8, 18, 21, 255], "withbullet": 6, "forg": [6, 7], "aihabitat": 6, "nightli": 6, "y": [6, 7, 68, 129, 260, 262], "git": [6, 7, 10], "facebookresearch": 6, "subdirectori": 6, "verbos": 6, "export": [6, 7], "magnum_log": 6, "quiet": 6, "habitat_sim_log": 6, "remov": [6, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 97, 179, 269], "command": [6, 7, 10, 262, 265, 269], "readm": [6, 7], "md": [6, 7], "habitatenv": [6, 254], "_has_habitat": 6, "_env": [6, 269], "available_env": [6, 59, 60, 61, 62, 63, 64, 66, 67, 269], "startswith": [6, 257, 260], "oserror": 6, "load": [6, 7, 13, 14, 16, 17, 32, 33, 34, 35, 39, 40, 62, 252, 258, 260], "libllvmlit": 6, "ionstal": 6, "path": [6, 7, 30, 41, 51, 54, 56, 57, 58, 89, 106, 132, 227, 258, 261], "env_nam": [6, 56, 59, 61, 63, 66, 260, 262, 269], "llvmlite": 6, "config": [6, 7, 89, 106, 231, 233, 234, 235, 236, 238, 241, 243, 244, 246, 249], "var": [6, 7, 30, 51, 54, 56, 57, 58, 103, 179], "ld_preload": [6, 7], "python3": [6, 7, 10, 260, 268], "8": [6, 7, 33, 44, 60, 118, 119, 120, 127, 130, 147, 148, 149, 155, 158, 161, 177, 260, 261, 262, 265, 266, 267, 268], "site": [6, 7], "bind": 6, "deactiv": [6, 7, 151], "importerror": [6, 7, 10], "usr": [6, 7, 10, 260, 268], "x86_64": [6, 7], "linux": [6, 7], "gnu": [6, 7], "libopengl": [6, 7], "undefin": [6, 7, 10, 30, 51, 54, 56, 57, 58, 103, 179], "symbol": [6, 7, 10], "_glapi_tls_curr": [6, 7], "link": [6, 7, 261], "right": [6, 7, 129, 261, 262, 265, 269], "mujoco_env": [6, 7], "libglvnd": [6, 7], "glx": [6, 7], "cos7": [6, 7], "reinstal": [6, 7], "xvfbwrapper": [6, 7], "sysroot": [6, 7], "lib64": [6, 7], "libgldispatch": [6, 7], "offici": [7, 39], "stand": [7, 147, 148, 149, 264, 265, 269], "joint": [7, 261], "dynam": [7, 177, 262, 265], "contact": 7, "engin": [7, 265], "facilit": [7, 88, 89, 106, 147, 148, 149, 256, 260, 265], "biomechan": 7, "graphic": 7, "anim": 7, "area": 7, "demand": [7, 269], "fast": [7, 9, 60, 91, 181, 260, 261, 262], "accur": [7, 39, 261, 265], "articul": 7, "acquir": [7, 262], "deepmind": [7, 8, 9, 61, 62, 262], "access": [7, 8, 30, 32, 40, 51, 54, 56, 57, 58, 89, 179, 252, 255, 260, 265], "whomev": 7, "licenc": 7, "incorpor": [7, 265], "relianc": 7, "obsolet": 7, "seri": [7, 8, 31, 46, 50, 58, 85, 102, 210, 256, 257, 260, 261, 262, 269], "legaci": 7, "pro": [7, 255], "tip": [7, 255], "glfw": 7, "osmesa": 7, "egl": 7, "hand": [7, 21, 265], "advic": [7, 269], "sudo": [7, 255], "enabl": [7, 8, 39, 154, 223, 262, 265], "apt": 7, "libglfw3": 7, "libglew2": 7, "libgl1": 7, "mesa": 7, "libosmesa6": 7, "awar": [7, 41, 42, 43, 49, 261], "fact": [7, 8, 260, 262, 265, 266, 269], "indent": 7, "workflow": [7, 147, 148, 149], "glew": 7, "mesalib": 7, "anaconda": 7, "libgl": 7, "cos6": 7, "menpo": 7, "glfw3": 7, "both": [7, 30, 51, 52, 54, 56, 57, 58, 91, 103, 118, 130, 147, 148, 149, 152, 157, 167, 168, 178, 179, 180, 223, 256, 260, 262, 265, 266, 269], "mujoco_gl": 7, "pyopengl_platform": 7, "pre": [7, 22, 30, 42, 51, 54, 56, 57, 58, 89, 106, 269], "binari": [7, 24, 31, 72, 125, 139, 151, 152, 156, 157], "setup": 7, "mkdir": 7, "cd": 7, "tag": [7, 210, 215, 252], "earlier": [7, 260, 262], "roboti": 7, "u": [7, 10, 40, 151, 260, 262, 265, 266, 268, 269], "download": [7, 10, 89, 106, 260, 261, 262, 263, 264, 265, 266, 268, 269], "html": [7, 56], "wget": 7, "mujoco210": 7, "tar": 7, "gz": 7, "xf": 7, "charg": 7, "obtain": [7, 54, 89, 106, 117, 224, 260, 262], "mjkei": 7, "txt": 7, "mjlib_path": 7, "home": [7, 266], "bin": [7, 125, 152, 256], "libmujoco210": 7, "ld_library_path": 7, "mujoco_py_mujoco_path": 7, "mujoco_py_mjkey_path": 7, "reload": 7, "hard": [7, 176, 261, 269], "later": [7, 122, 155, 159, 260, 262], "modifi": [7, 8, 30, 51, 54, 56, 57, 58, 76, 81, 89, 99, 102, 103, 106, 154, 158, 179, 230, 233, 241, 243, 246, 260, 261, 262], "nvidia": 7, "older": [7, 11], "hack": [7, 260], "line": [7, 30, 51, 54, 56, 57, 58, 260, 261, 268], "adatp": 7, "script": [7, 109, 233, 236, 238, 241, 243, 246, 248, 252, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269], "unnot": [7, 90], "until": [7, 21, 262], "complet": [7, 9, 48, 54, 255, 257, 260, 262, 264], "mujoco_pi": 7, "trigger": 7, "pipelin": [7, 262], "problem": [7, 8, 16, 261, 262, 265, 269], "troubleshoot": 7, "gl": 7, "h": [7, 75, 92, 101, 132, 210, 261], "eglshim": 7, "10": [7, 22, 26, 32, 33, 34, 35, 52, 55, 69, 70, 101, 117, 129, 132, 153, 154, 171, 181, 182, 183, 185, 192, 193, 194, 195, 218, 258, 260, 261, 262, 265, 267, 268, 269], "fatal": 7, "No": 7, "directori": [7, 41, 215, 258], "glu": 7, "38": [7, 261, 262, 265, 267], "disappear": [7, 261, 264], "libstdc": 7, "6": [7, 13, 14, 16, 17, 33, 67, 86, 118, 123, 129, 130, 142, 162, 233, 236, 238, 241, 243, 246, 261, 262, 265, 266, 267, 268, 269], "glibcxx_3": 7, "29": [7, 261, 262, 265], "compil": 7, "libosmesa": 7, "libgcc": 7, "Then": [7, 262, 264], "filenotfounderror": 7, "errno": 7, "patchelf": 7, "fatalerror": 7, "gladloadgl": 7, "mj_env": 7, "__init__": [7, 55, 117, 125, 132, 162, 258, 265, 269], "912": 7, "glfwerror": 7, "65537": 7, "sovl": 7, "myscript": 7, "cymj": 7, "linuxgpuextensionbuild": 7, "filenam": [7, 261], "runtimeerror": [7, 8, 30, 51, 54, 56, 57, 58, 103, 269], "job": [7, 18, 19, 20, 22], "slurm": 7, "mjrendercontext": 7, "pyx": 7, "46": [7, 261, 262, 265], "114": [7, 265], "_setup_opengl_context": 7, "opengl_context": 7, "130": [7, 265], "offscreenopenglcontext": 7, "fail": [7, 22, 109], "opengl": 7, "global": [7, 30, 51, 54, 56, 57, 58, 155, 159, 258, 260], "cuda_visible_devic": 7, "id": [7, 23, 154, 181, 213, 243], "slurm_step_gpu": 7, "enviro": [7, 10], "black": 7, "read": [7, 17, 23, 41, 42, 43, 49, 54, 73, 74, 76, 77, 79, 80, 81, 82, 84, 88, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 138, 146, 147, 148, 149, 151, 155, 158, 159, 161, 162, 163, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 192, 193, 194, 195, 196, 210, 223, 227, 233, 241, 243, 246, 256, 260, 261, 262, 264, 265, 266, 269], "onscreen": 7, "101": [7, 265], "displai": [7, 227, 258, 260, 261, 265], "correctli": [7, 30, 51, 54, 56, 57, 58], "loop": [8, 13, 14, 16, 17, 54, 116, 180, 227, 258, 260, 261, 264], "sketch": [8, 258], "_": [8, 52, 74, 77, 78, 86, 91, 101, 107, 146, 151, 158, 162, 166, 192, 193, 194, 195, 260, 261, 262, 265, 268], "n_training_step": 8, "datapoint": 8, "onlin": [8, 13, 17, 167, 180, 218, 252, 262], "n_data_per_train": 8, "no_grad": [8, 30, 51, 54, 56, 57, 58, 192, 193, 194, 195, 262], "replay_buff": [8, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 224, 248, 260, 261, 262], "extend": [8, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 50, 224, 258, 260, 261, 262, 266, 268], "loss_fn": [8, 268], "backward": [8, 30, 51, 54, 56, 57, 58, 107, 260, 262, 265], "zero_grad": [8, 30, 51, 54, 56, 57, 58, 258, 260, 262, 265], "backpropag": [8, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 265], "decor": [8, 11, 192, 193, 194, 195], "differenti": [8, 192, 193, 194, 195, 265], "understand": [8, 260, 261], "denomin": 8, "artifact": 8, "numer": [8, 107, 128, 143, 144, 146, 151, 152, 155, 156, 157, 158, 159, 225, 262, 269], "misconcept": 8, "save": [8, 30, 51, 54, 56, 57, 58, 179, 209, 227, 258], "freed": 8, "appear": [8, 31, 265], "compuat": 8, "twice": 8, "fix": [8, 99, 183, 261, 265, 269], "retain_graph": 8, "discuss": [8, 9], "inplac": [8, 30, 51, 54, 56, 57, 58, 260], "accumul": 8, "onto": [8, 31, 113, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 265], "exclud": [8, 39, 79, 116], "forward": [8, 30, 51, 54, 56, 57, 58, 73, 74, 76, 77, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 158, 159, 162, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 192, 193, 194, 195, 196, 257, 265, 268], "submodul": [8, 30, 51, 54, 56, 57, 58, 179], "param": [8, 30, 51, 54, 55, 56, 57, 58, 91, 102, 123, 125, 142, 155, 158, 161, 162, 179, 187, 190, 192, 193, 194, 195, 196, 236, 260, 265, 266, 268], "grad": [8, 30, 51, 54, 56, 57, 58, 260, 262], "whose": [8, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 135, 158, 179], "strictli": [8, 30, 51, 54, 56, 57, 58, 103, 260, 262], "neg": [8, 13, 14, 16, 17, 18, 19, 20, 21, 32, 34, 44, 73, 81, 90, 104, 173, 257, 262, 265], "ask": [8, 260, 262, 266, 269], "core": [8, 233, 236, 238, 241, 243, 246, 258, 268], "much": [8, 32, 34, 44, 178, 180, 262, 265, 269], "render": [8, 223, 260, 261, 262], "upon": [8, 265], "factor": [8, 30, 128, 134, 143, 144, 154, 172, 173, 175, 260, 261, 269], "fit": [8, 11, 86, 257, 258, 260], "everi": [8, 17, 26, 30, 31, 49, 51, 54, 56, 57, 58, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 227, 258, 260, 261, 262, 265], "bottlneck": 8, "affect": [8, 30, 51, 54, 56, 57, 58, 102, 103, 109], "brax": [8, 59, 60, 91, 269], "jax": [8, 11], "improperli": 8, "item": [8, 13, 26, 80, 169, 170, 218, 257, 258, 260, 262, 265], "underli": [8, 265], "tedeiou": 8, "priorit": [8, 32, 34, 44, 169, 170, 171, 177, 181, 183, 185, 260, 261], "amount": [8, 154, 261], "isn": [8, 151, 158], "contigu": [8, 113, 262, 265, 268, 269], "costli": [8, 265], "concaten": [8, 21, 28, 29, 73, 74, 86, 102, 130, 161, 260, 261, 265, 269], "constitut": [8, 261, 265], "plain": 8, "profil": 8, "indic": [8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 48, 50, 51, 54, 56, 57, 58, 74, 98, 99, 118, 130, 154, 156, 157, 164, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 231, 252, 255, 258, 262, 265, 269], "fulli": [8, 30, 51, 54, 56, 57, 58, 261, 265], "frequent": 8, "techniqu": [8, 261], "program": [8, 177, 269], "functorch": [8, 10, 158, 161, 268], "incl": 8, "suit": [8, 62, 262, 269], "mujoco_instal": 8, "valueerror": 8, "bad": 8, "fds_to_keep": 8, "view": [8, 27, 30, 31, 51, 54, 56, 57, 58, 125, 130, 265, 268, 269], "expand": [8, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 158, 161, 179, 265, 268], "new_shap": 8, "content": [8, 13, 14, 16, 32, 33, 34, 35, 48, 56, 118, 130, 179, 262, 265, 268], "lost": 8, "permut": [8, 48, 268, 269], "spin": [9, 269], "deep": [9, 73, 119, 120, 121, 122, 124, 154, 167, 176, 183, 184, 236, 260], "hug": 9, "syllabu": 9, "lectur": 9, "awesom": 9, "curat": 9, "succinct": 9, "summari": [9, 86, 107, 260, 261, 262], "reddit": 9, "reagent": 9, "orient": [9, 269], "baselines3": 9, "tf": 9, "agent": [9, 134, 256, 265], "bandit": [9, 68], "tensorflow": 9, "kera": 9, "acm": 9, "dopamin": 9, "prototyp": 9, "salina": 9, "simpl": [9, 30, 31, 51, 54, 56, 57, 58, 119, 159, 179, 182, 192, 256, 257, 260, 261, 262, 269], "sequenti": [9, 30, 51, 54, 56, 57, 58, 160, 161, 256, 262, 265, 266, 269], "tianshou": 9, "eleg": 9, "rlpyt": 9, "rllib": 9, "industri": [9, 268], "grade": 9, "factori": 9, "throughput": [9, 260], "cherri": 9, "jaxrl": 9, "space": [9, 31, 36, 77, 113, 125, 137, 139, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 171, 256, 261, 262, 265, 268, 269], "mbrl": [9, 55], "rlmeta": 9, "light": 9, "elegantrl": 9, "cloud": 9, "mtrl": 9, "baselin": 9, "689": 10, "dist": [10, 138, 260, 268], "_torchrl": 10, "_zn8pybind116detail11type_casterin2at6tensoreve4loadens_6handleeb": 10, "colab": [10, 262], "notebook": [10, 260, 261, 262, 263, 264, 265, 266, 268, 269], "24": [10, 261, 262, 265], "11": [10, 27, 31, 52, 101, 117, 132, 261, 262, 264, 265, 267], "2022": [10, 268], "12": [10, 261, 262, 265, 266], "pip": [10, 40, 268, 269], "pip3": [10, 262], "extra": [10, 30, 51, 54, 56, 57, 58, 107, 116, 256, 262], "url": 10, "org": [10, 32, 44, 73, 89, 119, 120, 121, 122, 125, 126, 127, 132, 134, 136, 137, 140, 141, 152, 154, 167, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 192, 197, 204, 233, 236, 241, 246, 260, 266], "whl": 10, "There": [10, 256, 258, 262, 265, 269], "upgrad": 10, "relas": 10, "lib_version_her": 10, "module_nam": [11, 179], "str": [11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 44, 51, 53, 54, 56, 57, 58, 61, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 106, 107, 110, 114, 117, 118, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 139, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 188, 191, 192, 193, 194, 195, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 231, 233, 236, 241, 243, 244, 246, 252, 261, 262], "from_vers": 11, "to_vers": 11, "intersect": 11, "eg": [11, 41, 42, 43, 49, 77], "v": [11, 107, 129, 147, 177, 183, 256, 260, 261, 268], "longer": [11, 261], "fun": [11, 262], "self": [11, 30, 51, 54, 55, 56, 57, 58, 76, 89, 99, 103, 106, 117, 125, 132, 150, 153, 158, 162, 179, 192, 193, 194, 195, 196, 258, 260, 261, 265, 268], "x": [11, 23, 26, 30, 101, 118, 125, 127, 129, 130, 132, 151, 156, 164, 166, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 227, 260, 262, 265, 268], "27": [11, 261, 262, 265], "arg": [12, 14, 26, 30, 41, 42, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 97, 103, 104, 105, 106, 118, 130, 179, 196, 217, 220, 224, 227, 252, 260, 261, 268], "kwd": 12, "policy_weight": [12, 13, 14, 16, 17, 19, 20], "tensordictbas": [12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 26, 30, 34, 35, 39, 40, 51, 53, 54, 56, 57, 58, 73, 74, 76, 79, 80, 81, 84, 85, 88, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 116, 117, 131, 132, 150, 152, 153, 154, 157, 158, 159, 167, 168, 169, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 227, 260, 265], "udpdat": [12, 13, 14, 16, 17, 19, 20], "create_env_fn": [13, 14, 16, 17, 18, 19, 20, 21, 52, 57, 58, 260, 268], "callabl": [13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 52, 54, 55, 56, 57, 58, 166, 179, 234, 235, 250, 251, 252, 261], "int": [13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 54, 55, 56, 57, 58, 61, 73, 74, 75, 76, 77, 81, 82, 85, 86, 89, 90, 92, 97, 98, 100, 103, 104, 106, 109, 113, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 150, 152, 153, 154, 155, 157, 158, 159, 167, 168, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 185, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 218, 219, 220, 223, 224, 227, 229, 233, 236, 241, 243, 244, 246, 250, 251, 252, 265], "200": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 69, 70, 119, 120, 126, 140, 141, 260, 265], "total_fram": [13, 14, 16, 17, 18, 19, 20, 21, 227, 230, 248, 258, 260, 261, 262, 268], "create_env_kwarg": [13, 14, 16, 17, 52, 56, 57, 58, 260], "dict": [13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 30, 51, 52, 54, 56, 57, 58, 99, 103, 107, 118, 119, 120, 121, 122, 127, 129, 130, 155, 159, 214, 215, 223, 234, 235, 236, 243, 246, 250, 251, 252, 260, 261, 262, 269], "postproc": [13, 14, 16, 17, 18, 19, 20, 21, 261], "preemptive_threshold": [13, 14], "float": [13, 14, 25, 27, 30, 31, 32, 34, 37, 44, 51, 54, 56, 57, 58, 76, 78, 86, 89, 93, 94, 99, 101, 103, 106, 107, 123, 126, 128, 130, 132, 133, 134, 140, 141, 142, 144, 150, 153, 154, 158, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 225, 260, 261, 269], "given": [13, 14, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 55, 56, 57, 58, 76, 77, 86, 89, 99, 103, 106, 116, 117, 125, 126, 132, 139, 146, 151, 152, 154, 157, 158, 159, 160, 161, 162, 166, 169, 170, 179, 191, 192, 193, 194, 195, 196, 219, 223, 248, 256, 258, 260, 261, 262, 265, 269], "datacollector": [13, 14, 16, 17, 155, 159, 180, 262], "recept": 13, "safe": [13, 14, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 146, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 256, 268], "env_mak": [13, 14, 16, 21, 248, 269], "lambda": [13, 14, 16, 17, 21, 22, 52, 151, 156, 173, 175, 195, 202, 203, 207, 208, 248, 257, 260, 261, 268, 269], "50": [13, 14, 16, 21, 261, 262, 265], "linear": [13, 14, 16, 21, 30, 51, 54, 55, 56, 57, 58, 76, 89, 99, 103, 106, 117, 118, 125, 130, 132, 133, 134, 135, 139, 140, 141, 146, 147, 148, 149, 153, 154, 155, 156, 158, 161, 162, 179, 192, 193, 194, 195, 248, 256, 261, 264, 266, 268], "2000": [13, 14, 16, 262], "enumer": [13, 14, 16, 21, 30, 33, 35, 51, 54, 56, 57, 58, 186, 257, 260, 261, 262, 268], "step_count": [13, 14, 16, 98, 262, 268], "int64": [13, 14, 16, 24, 27, 28, 29, 31, 34, 68, 125, 139, 151, 152, 154, 156, 157, 238, 256, 262, 265, 268, 269], "shutdown": [13, 14, 16, 17, 21, 260, 268], "del": [13, 14, 16, 260, 262, 264, 268, 269], "randompolici": [13, 14, 16, 18, 19, 20, 22, 254], "total": [13, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 31, 54, 168, 178, 180, 218, 220, 223, 227, 230, 231, 260, 261, 262, 264, 265, 266, 267, 268, 269], "lifespan": [13, 14, 16, 18, 19, 20, 261], "divis": [13, 14, 16, 18, 19, 20], "endless": [13, 14, 16, 18, 19, 20], "accommod": [13, 14, 16, 17], "kept": [13, 14, 16, 17, 48, 57, 58, 77, 102, 109, 116, 128, 143, 144], "long": [13, 14, 16, 17, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 77], "dictionari": [13, 14, 16, 17, 18, 19, 20, 21, 26, 30, 51, 54, 56, 57, 58, 99, 103, 155, 159, 223, 250, 251, 252, 258, 261, 262, 265, 269], "span": [13, 14, 16, 17, 18, 19, 20, 21], "unless": [13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 48, 51, 54, 56, 57, 58, 262], "n_step": [13, 14, 16, 17, 18, 19, 20, 21, 30, 154, 261, 262], "independ": [13, 14, 16, 17, 18, 19, 20, 21, 102, 104, 257, 258, 260, 261, 268], "ignor": [13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 77, 79, 96, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 179, 269], "mainli": [13, 14, 16, 17, 18, 19, 20, 21, 256, 265], "post": [13, 14, 16, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58], "multistep": [13, 14, 16, 18, 19, 20, 21, 254, 261], "accord": [13, 14, 16, 17, 18, 19, 20, 21, 86, 94, 128, 133, 140, 143, 144, 256, 265], "return_same_td": [13, 14, 16], "cautious": [13, 14, 16, 180], "whole": [13, 14, 16, 26, 30, 51, 54, 56, 57, 58, 103, 218, 260, 262], "boolm": [13, 14], "update_policy_weight_": [13, 14], "sync": [13, 14, 18, 19, 20, 21, 229, 248, 258, 260, 268], "async": [13, 14, 18, 19, 20, 21, 260, 268], "ratio": [13, 14, 260, 262], "finish": [13, 14, 21], "rest": [13, 14, 256, 262, 268], "earli": [13, 14, 268], "load_state_dict": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 103, 107, 258, 260], "state_dict": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 103, 107, 179, 252, 258, 260, 261, 269], "ordereddict": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 103, 107, 261], "form": [13, 14, 17, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 107, 166, 167, 168, 178, 180, 227, 256], "worker0": [13, 14, 17], "state_dict0": [13, 14, 17], "worker1": [13, 14, 17], "state_dict1": [13, 14, 17], "reset_idx": [13, 14, 17], "static_se": [13, 14, 16, 17, 21, 51, 54, 56, 57, 58, 103], "integ": [13, 14, 16, 17, 23, 28, 29, 30, 31, 38, 49, 51, 54, 56, 57, 58, 82, 86, 98, 118, 130, 177, 183], "increment": [13, 14, 16, 17, 51, 54, 56, 57, 58, 98, 178], "env_fn": [13, 14, 16, 17, 52, 250, 251], "v0": [13, 14, 17, 54, 63, 64, 66, 67, 76, 103, 107, 248], "env_fn_parallel": [13, 14, 16, 17], "out_se": [13, 14, 16, 17, 269], "shut": [13, 14, 16, 17], "irrevers": [13, 14, 17], "kwarg": [14, 16, 17, 21, 26, 30, 39, 41, 42, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 97, 99, 103, 104, 105, 106, 118, 119, 120, 121, 122, 127, 128, 130, 131, 138, 142, 144, 146, 155, 159, 168, 178, 179, 187, 191, 192, 193, 194, 195, 196, 210, 214, 215, 217, 220, 227, 233, 234, 235, 236, 241, 243, 246, 249, 250, 251, 257, 260, 262, 268], "rand": [15, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 55, 60, 67, 117, 132, 265, 268, 269], "describ": [15, 36, 74, 102, 142, 143, 213, 233, 241, 257, 260, 262, 265, 269], "tensor_spec": [15, 159], "boundedtensorspec": [15, 22, 26, 153, 154, 155, 254, 262, 265, 268, 269], "td": [15, 26, 59, 60, 61, 62, 63, 64, 66, 67, 74, 77, 78, 84, 86, 101, 103, 107, 116, 117, 125, 131, 132, 139, 146, 147, 148, 149, 151, 153, 154, 155, 156, 158, 161, 162, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 218, 226, 233, 236, 238, 241, 243, 246, 256, 257, 260, 265, 268, 269], "cube": 15, "envcreat": [16, 22, 248, 249, 252, 254, 260, 261, 268, 269], "interruptor": 16, "_interruptor": 16, "outsid": 16, "start_collect": 16, "stop_collect": 16, "preeptiv": 16, "stop": [16, 21, 51, 54, 56, 57, 58, 262, 268, 269], "chunk": 16, "policy_state_dict": 16, "env_state_dict": 16, "close": [16, 17, 54, 56, 167, 168, 178, 180, 260, 264, 265, 268], "pin_memori": [17, 32, 33, 34, 35, 39, 40, 57, 58, 88, 260, 268], "paradigm": 17, "regular": [17, 139, 152, 156, 157, 158, 159, 172, 229, 254, 258, 260, 261, 269], "prefer": [17, 20, 32, 33, 34, 35, 90, 96, 180, 224, 256, 262], "mere": 17, "greater": [17, 260, 261, 268], "signal": [17, 39, 98, 257, 260, 262], "sent": [17, 41, 42, 107], "server": 17, "length": [17, 20, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 57, 58, 90, 107, 117, 118, 119, 121, 124, 130, 132, 146, 151, 158, 162, 218, 224, 260, 262, 265, 269], "postprocessor": 17, "format": [17, 29, 30, 31, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179, 260, 261, 269], "collector_class": [18, 19, 20, 21], "collector_kwarg": [18, 19, 20, 21], "num_workers_per_collector": [18, 19, 20, 21], "slurm_kwarg": [18, 19, 20], "update_after_each_batch": [18, 20, 21], "max_weight_update_interv": [18, 19, 20, 21], "tcp_port": [18, 19, 20, 22], "deriv": [18, 19, 20, 21, 227], "string": [18, 19, 20, 30, 51, 54, 56, 57, 58, 89, 106, 155, 156, 159, 166, 209, 226, 233, 241, 243, 246, 257, 260, 262], "respect": [18, 19, 20, 30, 51, 54, 56, 57, 58, 72, 76, 89, 90, 99, 103, 106, 141, 158, 162, 179, 222, 262], "copi": [18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 91, 103, 116, 179, 257, 260, 261], "subnod": [18, 19, 20, 21], "readi": [18, 20, 21, 255, 261, 262, 264], "serv": [18, 20, 21, 65, 269], "fashion": [18, 20, 21], "executor": [18, 19, 20], "distributed_back": [18, 19], "ucc": [18, 19], "overwritten": [18, 20, 21, 51, 54, 56, 57, 58, 81], "seen": [18, 20, 21, 257, 260, 261], "turn": [18, 20, 21, 83, 104, 151, 223, 257, 260, 261, 265, 266], "mp": [18, 19, 20, 52, 107], "submitit_delai": [18, 22], "former": [18, 19, 20, 32, 33, 34, 35, 39, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 260], "whilst": [18, 19, 20], "latter": [18, 19, 20, 30, 39, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 179, 180, 250, 251], "homonym": [18, 19, 20, 265], "visit": [18, 19, 20], "facebookincub": [18, 19, 20], "tcp": [18, 19, 20, 22], "port": [18, 19, 20, 22], "10003": [18, 19, 20, 22], "worker_rank": [18, 19, 21], "update_interv": 19, "frequenc": [19, 260], "visible_devic": 20, "tensorpipe_opt": 20, "experiment": [20, 31, 155, 159], "union": [20, 54, 118, 171, 181], "tensorpiperpcbackendopt": 20, "ray_init_config": 21, "remote_config": 21, "num_collector": [21, 250, 251, 260, 261], "coordin": 21, "hood": [21, 265], "init": [21, 30, 51, 54, 56, 57, 58, 260, 261, 262], "autodetect": 21, "advanc": [21, 32, 33, 34, 35], "similarli": [21, 30, 48, 51, 54, 56, 57, 58, 160, 161, 177, 269], "num_cpu": 21, "num_gpu": 21, "1024": [21, 261], "carri": [21, 51, 54, 56, 57, 58, 179, 261, 265], "equat": [21, 154, 166, 168, 184, 262, 265], "exce": [21, 262], "indefinit": 21, "raydistributedcollector": 21, "distributed_collector": 21, "10000": [21, 227, 262], "add_collector": 21, "num_env": [21, 69, 70], "local_polici": 21, "remote_collector": 21, "stop_remote_collector": 21, "num_job": 22, "tcpport": 22, "submitit_main_conf": 22, "slurm_cpus_per_task": 22, "32": [22, 26, 69, 70, 118, 119, 120, 127, 130, 136, 137, 261, 262, 265, 266, 268, 269], "slurm_gpus_per_nod": 22, "slurm_partit": 22, "timeout_min": 22, "submitit_collection_conf": 22, "delai": 22, "jump": 22, "host": [22, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "wherea": [22, 77, 179, 258], "otherwis": [22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 77, 86, 99, 103, 107, 128, 143, 144, 156, 174, 179, 183, 223, 224, 258, 260, 261, 262, 265, 269], "satellit": 22, "rendezv": 22, "hang": 22, "forev": 22, "default_config": 22, "default_slurm_conf_main": 22, "default_slurm_conf": 22, "__name__": [22, 52, 261], "__main__": [22, 52], "rollout_tensordict": 23, "prefix": [23, 30, 51, 54, 56, 57, 58, 103, 179, 209, 269], "max": [23, 31, 34, 44, 77, 100, 142, 143, 144, 168, 171, 181, 183, 260, 262], "durat": 23, "tupl": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 56, 57, 58, 86, 91, 119, 124, 125, 129, 130, 135, 139, 152, 156, 157, 169, 173, 179, 192, 193, 194, 195, 221, 223, 225, 237, 239, 242, 245, 260], "meta": [23, 36, 39, 53, 258, 262], "aren": 23, "discret": [24, 27, 28, 29, 31, 38, 77, 138, 139, 171, 172, 256, 261, 269], "5": [24, 32, 33, 34, 35, 52, 56, 67, 69, 70, 117, 118, 125, 126, 128, 129, 130, 132, 139, 143, 144, 151, 156, 177, 178, 185, 256, 260, 261, 265, 266, 267, 268, 269], "assert_is_in": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "belong": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 107, 256, 260], "encod": [24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 77, 137, 138, 140, 166, 256, 261, 262, 265], "val": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 268], "ndarrai": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 54, 154], "np": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 54, 265], "compli": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "current": [24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 65, 90, 103, 110, 111, 116, 126, 129, 141, 154, 172, 213, 233, 241, 258, 260, 261, 262, 265, 268, 269], "least": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "complient": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "singleton": [24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 118, 130], "classmethod": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "implements_for_spec": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "torch_funct": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "overrid": [24, 25, 26, 27, 28, 29, 31, 33, 36, 37, 38, 252, 256], "tensor_to_index": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "is_in": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 269], "project": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 77, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 256, 268, 269], "back": [24, 25, 26, 27, 28, 29, 31, 32, 36, 37, 38, 146, 151, 152, 155, 156, 157, 158, 159, 262, 265], "uniform": [24, 25, 26, 27, 28, 29, 31, 32, 34, 36, 37, 38, 44], "unbound": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 99, 113, 265], "squeez": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 97, 118, 260, 265], "dim": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 73, 74, 99, 104, 107, 129, 252, 261, 265], "to_numpi": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "transformed_in": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 102, 103, 135, 142, 252], "to_one_hot": [24, 27, 28], "hot": [24, 27, 28, 29, 31, 77, 125, 138, 139, 151, 152, 156, 157], "to_one_hot_spec": [24, 27, 28], "onehotdiscretetensorspec": [24, 27, 125, 139, 151, 156, 254, 256], "convert": [24, 27, 28, 29, 30, 31, 51, 54, 56, 57, 58, 76, 78, 89, 99, 103, 106, 107, 158, 166, 179, 260, 261, 262, 265], "type_check": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "fill": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 99, 265, 266], "upper": 25, "unnam": 26, "effect": [26, 30, 51, 54, 56, 57, 58, 95, 103, 227, 260, 269], "pixels_spec": 26, "observation_vector_spec": 26, "33": [26, 30, 51, 54, 56, 57, 58, 118, 130, 261, 262, 265], "composite_spec": 26, "observation_vector": [26, 74, 233, 236, 241, 243, 246, 260], "within": [26, 30, 34, 35, 51, 54, 56, 57, 58, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 256, 265, 268], "randn": [26, 86, 113, 125, 129, 135, 138, 139, 146, 147, 148, 149, 151, 155, 156, 158, 161, 162, 192, 193, 194, 195, 226, 256, 268, 269], "td_project": 26, "include_nest": 26, "leaves_onli": 26, "itemsview": 26, "immedi": [26, 30, 51, 54, 56, 57, 58, 191], "children": [26, 30, 51, 54, 56, 57, 58], "keysview": 26, "reflect": [26, 116, 179, 230, 261, 262], "selected_kei": [26, 96, 260], "valuesview": 26, "onehottensorspec": 27, "categor": [27, 29, 31, 125, 138, 139, 151, 152, 156, 157], "action_valu": [27, 31, 124, 125, 139, 151, 152, 156, 157, 238, 256], "arang": [27, 31, 125, 151, 218, 256], "argmax": [27, 125, 139, 152, 157], "chosen_action_valu": [27, 31, 139, 156, 157, 238, 256], "outcom": [27, 31, 123, 142], "nvec": [28, 29], "cardin": [28, 29, 125, 139, 152, 157, 262], "ax": [28, 133, 134], "multionehotdiscretetensorspec": [28, 254], "use_regist": [29, 31], "to_categor": [29, 31], "to_categorical_spec": [29, 31], "multidiscretetensorspec": [29, 254], "gamma": [30, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 248, 257, 260, 261, 262, 268], "sutton": [30, 257], "1988": 30, "predict": [30, 126, 131, 132, 163, 172, 174, 175, 191, 256, 260, 261], "tempor": [30, 132, 193, 194, 198, 199], "44": [30, 261, 262, 265, 266], "discount": [30, 52, 172, 173, 175, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 257, 261, 262], "ahead": [30, 269], "add_modul": [30, 51, 54, 56, 57, 58], "child": [30, 51, 54, 56, 57, 58], "fn": [30, 51, 54, 56, 57, 58, 135, 250, 251], "recurs": [30, 51, 54, 56, 57, 58, 179], "init_weight": [30, 51, 54, 56, 57, 58], "m": [30, 51, 54, 56, 57, 58, 77, 159, 256, 261, 265], "fill_": [30, 51, 54, 56, 57, 58, 261, 269], "net": [30, 51, 54, 56, 57, 58, 129, 181, 243, 248, 261, 265, 266, 268], "in_featur": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 118, 119, 120, 121, 122, 129, 130, 133, 134, 147, 158, 179, 268], "out_featur": [30, 51, 54, 55, 56, 57, 58, 76, 89, 99, 103, 106, 117, 118, 119, 120, 121, 122, 126, 127, 129, 130, 132, 133, 134, 147, 151, 158, 179, 256, 260, 268], "bia": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 118, 126, 130, 133, 134, 135, 153, 154, 158, 164, 165, 166, 179, 257, 260, 261, 262, 268], "requires_grad": [30, 51, 54, 56, 57, 58], "bfloat16": [30, 51, 54, 56, 57, 58], "cast": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 158, 179, 233, 236, 238, 241, 243, 246, 269], "datatyp": [30, 51, 54, 56, 57, 58, 179], "member": [30, 51, 54, 56, 57, 58, 179], "xdoctest": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "skip": [30, 51, 54, 56, 57, 58, 82, 103, 109, 155, 159, 179, 209, 210, 220, 223, 260, 261, 262, 265], "buf": [30, 51, 54, 56, 57, 58], "20l": [30, 51, 54, 56, 57, 58, 179], "1l": [30, 51, 54, 56, 57, 58, 179], "5l": [30, 51, 54, 56, 57, 58, 179], "associ": [30, 51, 54, 56, 57, 58, 140, 179, 252, 260], "doubl": [30, 37, 51, 54, 56, 57, 58, 76, 78, 89, 99, 101, 103, 106, 158, 170, 172, 176, 179, 181, 184, 260, 261, 262, 269], "eval": [30, 51, 54, 56, 57, 58, 103, 107, 260, 261, 262], "evalu": [30, 51, 54, 56, 57, 58, 103, 123, 138, 144, 181, 234, 235, 261, 262], "particular": [30, 39, 51, 54, 56, 57, 58, 103, 257, 258, 261, 264], "dropout": [30, 51, 54, 56, 57, 58, 103, 130], "batchnorm": [30, 51, 54, 56, 57, 58, 103, 179], "disabl": [30, 51, 54, 56, 57, 58, 103, 128, 143, 144, 260], "comparison": [30, 51, 54, 56, 57, 58, 103, 179, 260, 261], "similar": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 105, 106, 107, 147, 149, 155, 158, 159, 179, 257, 260, 261, 262, 265, 269], "confus": [30, 51, 54, 56, 57, 58, 103], "extra_repr": [30, 51, 54, 56, 57, 58], "represent": [30, 51, 54, 56, 57, 58, 89, 106, 260, 265, 266, 269], "nontermin": 30, "original_reward": 30, "newli": 30, "OR": 30, "reshap": [30, 130, 262], "get_buff": [30, 51, 54, 56, 57, 58], "throw": [30, 51, 54, 56, 57, 58, 269], "docstr": [30, 51, 54, 56, 57, 58], "get_submodul": [30, 51, 54, 56, 57, 58], "explan": [30, 51, 54, 56, 57, 58], "qualifi": [30, 51, 54, 56, 57, 58], "referenc": [30, 51, 54, 56, 57, 58], "attributeerror": [30, 51, 54, 56, 57, 58, 260], "invalid": [30, 51, 54, 56, 57, 58], "resolv": [30, 51, 54, 56, 57, 58], "get_extra_st": [30, 51, 54, 56, 57, 58, 107], "set_extra_st": [30, 51, 54, 56, 57, 58, 107], "picklabl": [30, 51, 54, 56, 57, 58, 107], "ensur": [30, 32, 34, 44, 48, 51, 54, 56, 57, 58, 73, 89, 107, 151, 256, 261, 262, 265], "guarante": [30, 41, 42, 43, 49, 51, 54, 56, 57, 58, 107, 268], "pickl": [30, 51, 54, 56, 57, 58, 107], "get_paramet": [30, 51, 54, 56, 57, 58], "sai": [30, 51, 54, 56, 57, 58, 266, 269], "net_b": [30, 51, 54, 56, 57, 58], "net_c": [30, 51, 54, 56, 57, 58], "conv": [30, 51, 54, 56, 57, 58, 118, 261], "conv2d": [30, 51, 54, 56, 57, 58, 118, 268], "16": [30, 51, 54, 56, 57, 58, 261, 262, 265, 266], "kernel_s": [30, 51, 54, 56, 57, 58, 118, 119, 120, 261, 268], "stride": [30, 51, 54, 56, 57, 58, 118, 119, 120, 127, 261, 268], "diagram": [30, 51, 54, 56, 57, 58], "show": [30, 51, 54, 56, 57, 58, 256, 260, 262, 265, 268], "itself": [30, 51, 54, 56, 57, 58, 179, 262], "degre": [30, 51, 54, 56, 57, 58], "named_modul": [30, 51, 54, 56, 57, 58], "o": [30, 51, 54, 56, 57, 58, 261], "transit": [30, 39, 51, 54, 56, 57, 58, 163, 260, 265], "half": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179, 260], "ipu": [30, 51, 54, 56, 57, 58], "strict": [30, 51, 54, 56, 57, 58, 103], "descend": [30, 51, 54, 56, 57, 58, 103], "exactli": [30, 51, 54, 56, 57, 58, 65, 103, 260], "persist": [30, 51, 54, 56, 57, 58, 103, 116, 179], "enforc": [30, 48, 51, 54, 56, 57, 58, 103, 160, 265], "missing_kei": [30, 51, 54, 56, 57, 58, 103], "unexpected_kei": [30, 51, 54, 56, 57, 58, 103], "namedtupl": [30, 51, 54, 56, 57, 58, 103], "duplic": [30, 48, 51, 54, 56, 57, 58, 170, 172, 179], "l": [30, 51, 54, 56, 57, 58, 191, 262, 265], "idx": [30, 51, 54, 56, 57, 58], "named_buff": [30, 51, 54, 56, 57, 58], "remove_dupl": [30, 51, 54, 56, 57, 58, 179], "prepend": [30, 51, 54, 56, 57, 58, 179], "running_var": [30, 51, 54, 56, 57, 58], "named_children": [30, 51, 54, 56, 57, 58], "conv4": [30, 51, 54, 56, 57, 58], "conv5": [30, 51, 54, 56, 57, 58], "memo": [30, 51, 54, 56, 57, 58], "named_paramet": [30, 51, 54, 56, 57, 58, 179], "register_backward_hook": [30, 51, 54, 56, 57, 58], "removablehandl": [30, 51, 54, 56, 57, 58], "deprec": [30, 51, 54, 56, 57, 58, 103, 110, 114, 124, 269], "favor": [30, 51, 54, 56, 57, 58, 262], "register_full_backward_hook": [30, 51, 54, 56, 57, 58], "register_buff": [30, 51, 54, 56, 57, 58, 179], "running_mean": [30, 51, 54, 56, 57, 58, 179], "alongsid": [30, 51, 54, 56, 57, 58, 179], "num_featur": [30, 51, 54, 56, 57, 58, 179], "register_forward_hook": [30, 51, 54, 56, 57, 58, 125, 139], "with_kwarg": [30, 51, 54, 56, 57, 58], "posit": [30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 81, 82, 97, 98, 100, 103, 104, 135, 257, 262, 265], "signatur": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179, 257, 260, 265], "possibli": [30, 51, 54, 56, 57, 58, 118, 158, 227, 256, 262, 265, 269], "register_module_forward_hook": [30, 51, 54, 56, 57, 58], "register_forward_pre_hook": [30, 51, 54, 56, 57, 58], "invok": [30, 51, 54, 56, 57, 58], "And": [30, 51, 54, 56, 57, 58], "forward_pr": [30, 51, 54, 56, 57, 58], "register_module_forward_pre_hook": [30, 51, 54, 56, 57, 58], "grad_input": [30, 51, 54, 56, 57, 58], "grad_output": [30, 51, 54, 56, 57, 58], "subsequ": [30, 51, 54, 56, 57, 58], "technic": [30, 51, 54, 56, 57, 58, 261], "caller": [30, 51, 54, 56, 57, 58], "register_module_full_backward_hook": [30, 51, 54, 56, 57, 58], "register_full_backward_pre_hook": [30, 51, 54, 56, 57, 58], "backward_pr": [30, 51, 54, 56, 57, 58], "register_module_full_backward_pre_hook": [30, 51, 54, 56, 57, 58], "register_load_state_dict_post_hook": [30, 51, 54, 56, 57, 58], "incompatible_kei": [30, 51, 54, 56, 57, 58], "thrown": [30, 51, 54, 56, 57, 58], "clear": [30, 51, 54, 56, 57, 58, 219], "register_modul": [30, 51, 54, 56, 57, 58, 258], "alia": [30, 51, 54, 56, 57, 58], "register_paramet": [30, 51, 54, 56, 57, 58], "register_state_dict_pre_hook": [30, 51, 54, 56, 57, 58], "keep_var": [30, 51, 54, 56, 57, 58, 103], "made": [30, 41, 42, 43, 49, 51, 54, 56, 57, 58, 154, 179, 260, 261, 266], "requires_grad_": [30, 51, 54, 56, 57, 58], "autograd": [30, 51, 54, 56, 57, 58, 103], "freez": [30, 51, 54, 56, 57, 58], "finetun": [30, 51, 54, 56, 57, 58], "gan": [30, 51, 54, 56, 57, 58], "share_memori": [30, 51, 52, 54, 56, 57, 58, 260], "share_memory_": [30, 51, 54, 56, 57, 58, 268], "destin": [30, 51, 54, 56, 57, 58, 103, 116], "averag": [30, 51, 54, 56, 57, 58, 103, 107, 154, 173, 174, 225, 260, 262], "shallow": [30, 51, 54, 56, 57, 58, 103], "pleas": [30, 51, 54, 56, 57, 58, 103, 255], "detach": [30, 51, 54, 56, 57, 58, 103, 179, 192, 193, 194, 195, 260], "non_block": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "memory_format": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "channels_last": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "Its": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 158, 179, 196], "complex": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179, 260, 261], "integr": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 122, 132, 158, 179, 256, 265, 266], "unchang": [30, 51, 54, 56, 57, 58, 76, 77, 89, 99, 103, 106, 158, 179, 224, 260], "tri": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "pin": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "4d": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "ignore_w": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "1913": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "3420": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "5113": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "2325": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "torch_doctest_cuda1": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "gpu1": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "1914": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "5112": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "2324": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "float16": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "cdoubl": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "3741": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179, 261], "j": [30, 32, 44, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179, 258], "2382": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "5593": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "4443": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "complex128": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "6122": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "1150": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 158, 179], "to_empti": [30, 51, 54, 56, 57, 58], "dst_type": [30, 51, 54, 56, 57, 58], "xpu": [30, 51, 54, 56, 57, 58], "set_to_non": [30, 51, 54, 56, 57, 58], "unidimension": 31, "keepdim": 31, "user_regist": 31, "priori": 31, "definit": [31, 49], "uniqu": 31, "discretebox": [31, 269], "discretetensorspec": [31, 254, 269], "alpha": [32, 34, 44, 118, 171, 181, 183, 260, 268], "ep": [32, 34, 44, 107, 154, 168, 184, 225, 260], "1e": [32, 34, 44, 107, 123, 126, 135, 142, 260, 261, 262], "08": [32, 34, 44, 261, 262, 265], "collate_fn": [32, 33, 34, 35, 39, 40, 268], "prefetch": [32, 33, 34, 35, 39, 40, 260, 261], "schaul": [32, 44], "quan": [32, 44], "antonogl": [32, 44], "silver": [32, 44], "2015": [32, 44], "arxiv": [32, 44, 73, 89, 119, 120, 121, 122, 125, 126, 127, 132, 134, 136, 137, 140, 141, 152, 154, 167, 172, 173, 174, 175, 176, 177, 180, 183, 184, 192, 197, 204, 233, 236, 241, 246, 260, 266], "ab": [32, 44, 89, 107, 126, 127, 132, 134, 136, 137, 140, 141, 167, 173, 174, 175, 176, 177, 180, 183, 233, 241, 260, 266], "1511": [32, 44, 127], "05952": [32, 44], "expon": [32, 34, 44], "\u03b1": [32, 34, 44], "determin": [32, 34, 39, 44, 89, 106, 154, 261], "delta": [32, 34, 44, 142, 155, 159, 254, 257], "null": [32, 34, 44, 72], "max_siz": [32, 33, 34, 35, 41, 43, 49], "1_000": [32, 33, 34, 35], "merg": [32, 33, 34, 35, 39, 40, 265], "mini": [32, 33, 34, 35, 39, 40], "style": [32, 33, 34, 35, 39, 40], "decid": [32, 33, 34, 35, 268], "rb": [32, 33, 34, 35, 39, 40, 261, 266, 268], "meth": [32, 33, 34, 35], "incompat": [32, 33, 34, 35], "drop_last": [32, 33, 34, 35, 48], "return_info": [32, 33, 34, 35, 39, 40], "tensordictprioritizedreplaybuff": [32, 254, 268], "simplifi": [32, 265], "manual_se": [32, 33, 34, 35, 77, 86, 138, 146, 152, 153, 154, 265, 268, 269], "info": [32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 69, 70, 108], "_weight": [32, 34, 268], "arrai": [32, 260], "update_prior": [32, 44, 224, 258, 261, 268], "36278465": 32, "insert_transform": [32, 33, 34, 35, 39, 40], "insert": [32, 33, 34, 35, 39, 40, 46, 50, 104], "writer": [33, 35, 39, 40, 46, 254, 262], "randomsampl": [33, 35, 39, 40, 254, 260], "roundrobinwrit": [33, 35, 39, 40, 254], "priority_kei": [34, 35, 170, 171, 172, 177, 181, 183, 185, 268], "td_error": [34, 35, 169, 170, 171, 172, 177, 181, 183, 185, 260, 268], "reduct": [34, 44], "prioritizedreplaybuff": [34, 254, 268], "update_tensordict_prior": [34, 260, 268], "prioritizedsampl": [34, 35, 254, 260], "min": [34, 44, 142, 143, 144, 168, 171, 181, 183, 261, 262], "median": [34, 44, 155, 159], "len": [34, 118, 130, 260, 265, 266, 268], "include_info": [34, 35, 39, 40], "kw": [35, 46], "int32": [35, 67, 113], "from_env": 39, "use_timeout_as_don": 39, "env_kwarg": [39, 250, 251, 260], "metadata": [39, 262, 269], "reconstruct": [39, 174, 260, 269], "timeout": 39, "recov": [39, 150, 153, 154, 160, 177, 264], "regard": [39, 125, 152, 167, 172, 180, 260, 262, 265], "get_dataset": 39, "qlearning_dataset": 39, "less": [39, 56, 250, 251, 257, 262, 268], "left": [39, 89, 91, 100, 102, 106, 261, 262], "terminate_on_end": 39, "possess": 39, "unexpectedli": 39, "episod": [39, 95, 117, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 261], "absent": 39, "traj_split": 39, "observationnorm": [39, 107, 252, 260, 261, 262, 268], "maze2d": 39, "umaz": 39, "loc": [39, 86, 94, 128, 135, 143, 144, 147, 148, 149, 155, 159, 161, 231, 233, 241, 243, 246, 252, 256, 260, 261, 262, 268], "128": [39, 120, 261, 265, 266], "public": [40, 89, 106], "dua": 40, "graff": 40, "2017": 40, "uci": 40, "archiv": 40, "ic": 40, "edu": 40, "ml": 40, "sklearn": 40, "adult_num": [40, 68], "adult_onehot": [40, 68], "mushroom_num": [40, 68], "mushroom_onehot": [40, 68], "covertyp": [40, 68], "shuttl": [40, 68], "magic": [40, 68], "scratch_dir": [41, 260], "memmap": [41, 57, 58, 107, 224], "attach": [41, 42, 43, 49, 261], "entiti": [41, 42, 43, 49], "alloc": [42, 260], "max_capac": [44, 260], "uniformli": [45, 179, 269], "roundrobin": 46, "piec": [46, 50, 260, 261, 262, 265], "consum": [48, 261, 262], "incomplet": 48, "unlik": [48, 172, 180, 261, 268], "fresh": 48, "caution": [48, 109, 269], "shuffl": 48, "haven": [48, 266], "remain": [48, 77, 134], "draw": 48, "__len__": 49, "_inplace_upd": [51, 56, 57, 58, 59, 60, 68, 69, 70, 103], "_batch_lock": [51, 56, 57, 58, 59, 60, 68, 69, 70, 103], "run_type_check": [51, 55], "batch_lock": [51, 53, 54, 56, 57, 58, 99, 103, 265], "environn": [51, 54, 55, 56, 57, 58, 103], "immut": [51, 54, 56, 57, 58, 91, 103, 233, 241], "fake_tensordict": [51, 54, 56, 57, 58, 261], "fake": [51, 54, 56, 57, 58, 260, 261], "overridden": [51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164], "recip": [51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164], "afterward": [51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164, 269], "silent": [51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 164], "rand_act": [51, 54, 56, 57, 58], "_step": [51, 54, 56, 57, 58, 81, 91], "privat": [51, 54, 56, 57, 58, 265, 269], "_reset": [51, 54, 55, 56, 57, 58, 117, 132], "callback": [51, 54, 56, 57, 58], "auto_reset": [51, 54, 56, 57, 58, 265], "auto_cast_to_devic": [51, 54, 56, 57, 58], "break_when_any_don": [51, 54, 56, 57, 58], "return_contigu": [51, 54, 56, 57, 58, 109, 264], "soon": [51, 54, 56, 57, 58], "lazystackedtensordict": [51, 54, 55, 56, 57, 58, 117, 132, 264, 268, 269], "concomitt": [51, 54, 56, 57, 58], "workspac": [51, 54, 56, 57, 58], "creator": [52, 234, 235, 250, 251, 252], "substitut": [52, 107], "vecnorm": [52, 252], "env_creat": [52, 260], "test_env1": 52, "_td": 52, "observation_count": [52, 269], "test_env2": 52, "sleep": [52, 269], "p1": 52, "p2": 52, "join": [52, 233, 241, 254, 261, 262], "9934": 52, "env_str": 53, "discard": [54, 116, 209, 269], "info_dict_read": 54, "set_info_dict_read": 54, "put": [54, 107, 252, 256, 261, 262, 265], "f": [54, 166, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 260, 261, 262, 265, 269], "read_act": 54, "read_don": 54, "reader": [54, 261], "frame_skip": [54, 61, 62, 63, 66, 82, 220, 223, 230, 258, 260, 261, 262, 268], "broken": [54, 109], "read_ob": 54, "dictat": [54, 155, 159, 180, 260, 265], "inner": [54, 77, 258, 261, 262, 269], "read_reward": 54, "total_reward": [54, 261], "step_reward": 54, "far": [54, 128, 143, 144, 265, 269], "baseinfodictread": 54, "info_dict": 54, "hoc": 54, "manner": [54, 89, 256, 260, 261, 262, 264, 265], "dict_read": 54, "default_info_dict_read": 54, "my_info_kei": 54, "some_env": 54, "limit": [55, 260, 261, 265], "safeti": 55, "constraint": [55, 262], "behav": [55, 65, 138, 177, 266], "unboundedcontinuoustensorspec": [55, 99, 113, 117, 146, 158, 161, 162, 254, 262, 265, 269], "mymbenv": [55, 117, 132], "world_model": [55, 117, 132, 174], "super": [55, 117, 125, 132, 162, 260, 265, 268], "hidden_observ": [55, 117, 132], "mlp": [55, 117, 118, 119, 120, 121, 122, 129, 132, 147, 151, 233, 241, 243, 246, 256, 261, 264, 266, 268], "worldmodelwrapp": [55, 117, 132], "activation_class": [55, 117, 118, 119, 120, 121, 122, 126, 127, 130, 132, 261, 268], "relu": [55, 117, 132, 135, 166], "activate_last_lay": [55, 117, 122, 130, 132], "depth": [55, 117, 118, 119, 120, 121, 122, 126, 127, 130, 132, 136, 137, 151, 256, 261, 264], "equal": [56, 57, 58, 85, 86, 118, 124, 130, 188, 218, 250, 251, 260, 262, 266], "readthedoc": 56, "en": 56, "python_interfac": 56, "num_work": [56, 57, 58, 260, 261], "thread": 56, "task_id": 56, "my_env_fun": [57, 58], "custom_attribute_list": [57, 58], "custom_attribut": [57, 58], "custom_method_list": [57, 58], "custom_method": [57, 58], "deploi": [57, 58], "creation": [57, 58, 260, 269], "slight": [57, 58, 261], "overhead": [57, 58], "share_individual_td": [57, 58], "lazi": [57, 58, 89, 133, 160, 161, 260, 261, 264, 269], "shared_memori": [57, 58], "policy_proof": [57, 58], "ll": [57, 58, 260, 261, 262, 269], "hidden": [57, 58, 126, 129, 136, 137, 140, 141, 147, 148, 149, 158, 161, 168, 178, 180, 233, 241, 256, 264, 268], "allow_step_when_don": [57, 58], "update_kwarg": [57, 58], "googl": [59, 60, 262], "ant": [59, 60, 266], "get_environ": 60, "87": [60, 261, 265], "acrobot": [60, 269], "fetch": [60, 266, 269], "dm_control": [61, 62, 260, 264, 269], "task_nam": 61, "cheetah": [61, 62, 260, 269], "placehold": [65, 103], "secur": 65, "jumanji": [66, 67], "snake": [66, 67], "6x6": [66, 67], "td1": [67, 167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 260], "12x12": 67, "tsp50": 67, "tsp100": 67, "dataset_nam": 68, "empti": [68, 89, 100, 103, 106, 260, 265], "106": [68, 265], "vma": [69, 70], "scenario": [69, 70, 260, 265], "flock": [69, 70], "continuous_act": [69, 70], "n_agent": [69, 70], "cohesion_rew": 69, "collision_rew": 69, "separation_rew": 69, "velocity_rew": 69, "18": [69, 70, 261, 262, 265, 266, 269], "agent_collision_rew": 70, "agent_distance_rew": 70, "model_bas": [71, 117, 132], "transform_reward_spec": [72, 76, 78, 91, 93, 94, 102, 104], "success": [73, 102, 261, 265, 268], "account": [73, 256, 261], "movement": 73, "veloc": [73, 265, 269], "propos": [73, 131, 176, 184, 243, 246, 256], "pdf": [73, 119, 120, 121, 122, 125, 152, 154, 172, 181, 184, 192, 197, 204, 236, 243, 246], "1312": [73, 261], "5602": 73, "_buffer": [73, 100], "transform_observation_spec": [73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 91, 92, 95, 96, 98, 99, 100, 101, 102, 104, 265], "del_kei": [74, 264, 265], "unsqueeze_if_oor": 74, "observation_posit": 74, "observation_veloc": 74, "delet": 74, "unsqueez": [74, 101, 104, 129, 260, 265], "key1": [74, 218, 226], "key2": [74, 218, 226], "crop": [75, 90, 210], "center": [75, 210], "width": [75, 92], "height": [75, 92], "squar": [75, 128, 143, 144, 210], "rewardsc": [76, 103, 260, 261], "rewardclip": 76, "transformed_env": [76, 102, 103], "tranform": [76, 79, 84, 96, 98, 102, 105], "dest": [76, 89, 106, 158], "transform_input_spec": [76, 77, 78, 86, 91, 98, 102, 104], "num_actions_effect": 77, "max_act": 77, "action_kei": [77, 117, 131, 132, 150, 153, 154], "include_forward": 77, "dimension": [77, 192, 197, 204], "num_act": [77, 171], "action_out": 77, "_call": [77, 81, 265], "inde": [77, 262, 265], "expos": [78, 160, 261], "extern": [78, 269], "excluded_kei": 79, "finit": 80, "first_dim": 81, "last_dim": 81, "allow_positive_dim": [81, 104], "flatten": [81, 224], "th": [81, 104, 265], "permit": [81, 104], "exclus": [81, 252, 256], "frameskip": 81, "repeatedli": [82, 262], "init_kei": 84, "is_init": 84, "tracker": 84, "noop": [85, 268], "30": [85, 140, 141, 261, 262, 265], "op": [85, 150, 153, 229], "randomli": [85, 86, 99, 155, 159, 265], "noop_max": 85, "out_keys_inv": [86, 87, 91, 102, 265], "standard_norm": [86, 94, 260, 261], "affin": [86, 94], "layer": [86, 107, 118, 119, 120, 126, 130, 133, 134, 136, 137, 145, 256, 261, 262, 266], "normal": [86, 107, 118, 128, 130, 135, 143, 144, 150, 155, 159, 168, 178, 180, 223, 225, 252, 256, 258, 269], "set_default_tensor_typ": 86, "doubletensor": 86, "isclos": 86, "next_ob": [86, 192, 193, 194, 195, 268], "rubric": [86, 161], "init_stat": [86, 260, 261, 262], "3752e": 86, "01": [86, 154, 164, 167, 168, 178, 180, 261, 262, 265, 266, 267], "5087e": 86, "03": [86, 261, 262, 265, 266, 267], "9294e": 86, "9636": 86, "5608": [86, 265], "6408": 86, "num_it": [86, 261, 262], "reduce_dim": [86, 260, 261, 262], "cat_dim": [86, 260, 261, 262], "keep_dim": [86, 261], "constant": [86, 258, 260, 262, 269], "statist": [86, 107, 182, 252, 260, 261, 262, 269], "approach": [86, 260, 262, 269], "gaussian": [86, 99, 117, 132, 133, 134, 150, 262], "empir": [86, 117, 132, 155, 159, 260, 262], "3d": 86, "third": [86, 152], "r3m": [89, 266], "resnet": [89, 106], "visual": [89, 106, 262, 265], "embed": [89, 105, 106, 146, 147, 148, 149, 151, 158, 162, 266], "ego4d": [89, 106], "paper": [89, 106, 176, 243, 246, 260, 262], "univers": [89, 106], "suraj": 89, "nair": 89, "aravind": 89, "rajeswaran": 89, "vikash": [89, 106], "kumar": [89, 106], "chelsea": 89, "finn": 89, "abhinav": 89, "gupta": 89, "2203": [89, 132, 266], "12601": [89, 266], "_init": [89, 260], "snippet": [89, 260], "resnet50": [89, 106, 266], "model_nam": [89, 106, 213], "resnet34": 89, "resnet18": 89, "r3m_vec": [89, 266], "feed": [89, 106, 179, 256, 260], "244": [89, 106, 265], "stack_imag": [89, 106], "tread": [89, 106], "separet": [89, 106], "hub": [89, 106, 266], "cach": [89, 103, 106, 219, 266], "resnet50_weight": [89, 106], "imagenet1k_v1": [89, 106], "download_path": [89, 106], "tensor_pixels_kei": [89, 106], "sub_seq_len": 90, "sample_dim": [90, 260], "mask_kei": 90, "primarili": 90, "hesit": 90, "request": 90, "robust": 90, "vari": 90, "mix": [90, 260], "NOT": 90, "improp": 90, "create_copi": 91, "renam": [91, 116, 260], "stuff": 91, "braxenv": [91, 254], "newnam": 91, "transform_output_spec": [91, 102], "untouch": [91, 102], "transform_done_spec": [91, 102], "interpol": [92, 261], "bilinear": 92, "clamp_min": [93, 154], "clamp_max": 93, "clip_min": 93, "scalar": [93, 120, 122, 133, 134, 150, 153, 154, 164, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 256, 261, 265], "clip_max": 93, "episode_": 95, "reward1": 95, "reward2": 95, "ho": 95, "excludetransform": 96, "squeeze_dim": 97, "recognis": 98, "primer": 99, "default_valu": 99, "drawn": [99, 155, 159, 262], "unit": [99, 117, 126, 136, 137, 140, 141, 262], "transfomedenv": 99, "lock": [99, 107, 265], "mykei": 99, "dtype_or_devic": 99, "pool": 100, "255": [101, 265], "ri": 101, "randint": 101, "principl": 102, "cattransform": 102, "notabl": 102, "cache_spec": 103, "anymor": [103, 158], "unsqueeze_dim": [104, 265], "danger": 104, "vip": [105, 106, 266], "toward": 106, "implicit": [106, 177], "jason": 106, "ma": 106, "shagun": 106, "sodhani": 106, "dinesh": 106, "jayaraman": 106, "osbert": 106, "bastani": 106, "ami": 106, "zhang": 106, "vip_vec": 106, "shared_td": 107, "decai": [107, 150, 153, 225, 260, 261, 269], "9999": [107, 265], "0001": [107, 126, 135, 262, 265], "fly": [107, 178, 257, 262, 265, 269], "to_observation_norm": 107, "99": [107, 132, 175, 187, 191, 248, 260, 261, 262, 265, 266, 268], "underflow": [107, 225], "trail": 107, "build_td_for_shared_vecnorm": 107, "memmori": 107, "memmap_": 107, "queue": 107, "td_share": 107, "state_dim": [108, 140, 141], "action_dim": [108, 119, 121, 260, 264], "gsde": [108, 181, 252], "func": 108, "gsdemodul": 108, "check_dtyp": 109, "short": [109, 261, 262], "discrep": [109, 167, 168, 169, 170, 178, 180, 182], "imposs": 109, "heterogen": [109, 260, 261], "interactiontyp": [111, 115], "continuousbox": [113, 262, 265, 268, 269], "zero_": 113, "probabilistictdmodul": [114, 115, 130, 155, 159, 191, 223], "next_tensordict": 116, "keep_oth": [116, 265], "exclude_reward": 116, "exclude_don": 116, "exclude_act": 116, "THe": 116, "next_": 116, "funtion": [116, 265], "planning_horizon": [117, 132], "optim_step": [117, 132, 261], "num_candid": [117, 132], "top_k": [117, 132], "reward_kei": [117, 132, 221, 225], "cross": 117, "entropi": [117, 167, 168, 171, 178, 180, 181, 183], "botev": 117, "et": 117, "al": [117, 238, 269], "2013": 117, "cem": 117, "plan": [117, 131, 132], "varianc": [117, 128, 135, 143, 144, 257, 260, 262], "rank": 117, "k": 117, "repeat": [117, 262, 265], "maximis": [117, 119, 121, 132, 256, 260, 261, 262, 265], "horizon": [117, 132, 262], "modelbasedenv": [117, 132], "mpc": [117, 131, 132], "candid": [117, 132], "modelbasedenvbas": [117, 131, 132, 254], "safemodul": [117, 131, 147, 149, 159, 234, 235, 248, 254, 268], "next_hidden_observ": 117, "num_cel": [118, 119, 120, 121, 122, 126, 127, 130, 147, 261, 262, 268], "elu": [118, 119, 120, 121, 122, 126, 127, 261, 268], "activation_kwarg": [118, 130], "norm_class": [118, 119, 120, 130], "norm_kwarg": [118, 130], "bias_last_lay": [118, 119, 120, 121, 122, 127, 130], "aggregator_class": [118, 119, 120, 261, 268], "squashdim": [118, 119, 268], "aggregator_kwarg": [118, 119, 120, 261], "squeeze_output": [118, 119, 120, 261], "convolut": [118, 119, 120], "neural": [118, 158, 256, 261, 262, 265, 269], "produc": [118, 130, 138, 147, 149, 210, 262, 269], "cell": [118, 130, 262], "kernel": [118, 127, 129], "device_typ": [118, 119, 120, 121, 122, 127, 130, 133, 134], "cnet": 118, "34": [118, 130, 261, 262, 265, 267, 269], "35": [118, 130, 261, 262, 265, 266], "rectangular": 118, "conv_net_kwarg": [119, 120], "mlp_net_kwarg": [119, 120, 121], "use_avg_pool": [119, 120], "WITH": [119, 120, 121, 122, 154, 184, 236], "1509": [119, 120, 121, 122, 132, 154, 176, 184, 236, 260], "02971": [119, 120, 121, 122, 154, 184, 236, 260], "convnet": [119, 268], "ndims_in": 119, "avgpool": [119, 120], "adaptiveavgpool2d": [120, 261], "400": [121, 122, 265], "300": [121, 122, 233, 241, 265], "mlp_net_kwargs_net1": 122, "mlp_net_kwargs_net2": 122, "atol": [123, 142], "06": [123, 142, 261, 262, 265], "rtol": [123, 142], "batch_shap": [123, 142], "event_shap": [123, 142], "absolut": [123, 142, 260], "toler": [123, 142], "log_prob": [123, 138, 144], "densiti": [123, 138, 144], "mass": [123, 138, 144, 265], "rsampl": [123, 138, 159], "sample_shap": [123, 138], "dqnet": 124, "atom": 124, "softmax": [124, 151, 152], "action_spac": [125, 139, 151, 152, 156, 157], "var_num": [125, 139, 152, 157], "action_value_kei": [125, 139, 151, 152, 156, 157], "perspect": [125, 152, 172, 262], "1707": [125, 152, 172, 180, 233, 241], "06887": [125, 152, 172], "mult_one_hot": [125, 139, 151, 152, 156, 157], "functional_modul": [125, 139, 156, 158, 161, 256, 260], "make_funct": [125, 139, 155, 156, 158, 161, 162, 179, 256, 268], "tensordict_modul": [125, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 256], "nbin": [125, 151, 256], "customdistributionalqv": 125, "log_softmax": [125, 151], "one_hot": [125, 139, 151, 156], "qvalue_actor": [125, 139, 151, 156, 256], "std_bia": 126, "std_min_val": 126, "belief": [126, 136, 140, 141], "1912": [126, 173, 174, 175], "01603": [126, 173, 174, 175], "softplu": [126, 135, 164, 165, 166], "out_features_valu": 127, "cnn_kwarg": [127, 261], "mlp_kwarg": [127, 129, 261], "duel": 127, "cnn": [127, 261, 268], "06581": 127, "512": [127, 261, 262, 265], "upscal": [128, 143, 144], "tanh_loc": [128, 143, 144], "event_dim": [128, 142, 143], "ultim": [128, 143, 144], "poor": [128, 143, 144], "explos": [128, 143, 144], "switch": [128, 143, 144], "sigma": [128, 143, 144, 150, 154, 262], "formula": [128, 143, 144, 167, 168, 178, 180, 257, 262], "lstm_kwarg": 129, "embedd": 129, "next_observ": [129, 264], "time_step": 129, "2d": 129, "hidden_s": 129, "input_s": 129, "hidden0_in": 129, "hidden1_in": 129, "hidden0_out": 129, "hidden1_out": 129, "single_bias_last_lay": 130, "layer_class": 130, "layer_kwarg": 130, "perceptron": 130, "seamless": 130, "lazylinear": [130, 256, 262, 265, 266, 268], "42": [130, 261, 262, 265], "noisylinear": [130, 133, 254, 261], "noisylazylinear": [130, 254], "At": [131, 261, 262, 264, 265, 266], "mpcplanner": 131, "tensordict_out": [131, 269], "advantage_modul": [132, 262], "temperatur": [132, 177], "mppi": 132, "covari": 132, "william": [132, 182], "aldrich": 132, "theodor": 132, "01149": 132, "hansen": 132, "wang": 132, "su": 132, "04955": 132, "ndunboundedcontinuoustensorspec": [132, 161], "valueoper": [132, 147, 148, 149, 167, 168, 178, 180, 182, 248, 256, 260, 262], "tdlambdaestim": [132, 254, 260], "value_net": [132, 192, 193, 194, 195, 262], "adv": 132, "95": [132, 187, 261, 262, 265], "std_init": [133, 134], "term": [133, 134, 166, 167, 171, 229, 261, 262], "matrix": [133, 134], "initialize_paramet": 133, "isol": 133, "1706": 134, "10295v3": 134, "induc": 134, "aid": 134, "emploi": 134, "scale_map": 135, "biased_softplus_1": 135, "scale_lb": [135, 140, 141], "exp": [135, 166], "module_norm": 135, "decod": 136, "1803": [136, 137], "10122": [136, 137], "rnn_hidden": 136, "latent": 137, "logit": [138, 152, 256], "excacli": 138, "event": [138, 200, 201, 202, 203, 205, 206, 207, 208], "unnorm": 138, "greedi": [139, 152, 153, 157, 261], "hidden_dim": [140, 141], "posterior": [140, 174], "rssm": [140, 141, 174], "1811": [140, 141, 265], "04551": [140, 141], "obs_embed": 140, "rnn_hidden_dim": 141, "dream": 141, "recurr": [141, 261], "tanhtransform": 143, "translat": [146, 155], "character": [146, 151, 155, 156, 158], "overflow": [146, 151, 152, 155, 156, 157, 158, 159], "td_modul": [146, 147, 148, 149, 155, 158, 159, 161, 162, 268], "3635": 146, "0340": 146, "1476": 146, "3911": 146, "1664": [146, 261], "5455": [146, 265], "2247": 146, "4583": 146, "2916": 146, "2160": 146, "5337": 146, "5193": 146, "grad_fn": [146, 153, 268], "addmmbackward0": 146, "common_oper": [147, 149], "policy_oper": [147, 148, 149], "value_oper": [147, 148, 149], "actorvalueoper": [147, 233, 241, 256], "get_policy_oper": [147, 148, 149, 168, 178, 180, 233, 241, 256], "alon": [147, 148, 149], "tdmodul": [147, 148, 149, 248], "get_critic_oper": 147, "probabilisticactor": [147, 148, 149, 171, 177, 183, 256, 260, 262], "tanhnorm": [147, 148, 149, 155, 161, 254, 262, 268], "normalparamwrapp": [147, 148, 149, 155, 161, 254, 268], "module_hidden": [147, 149], "td_module_hidden": [147, 149], "module_act": [147, 149], "td_module_act": [147, 148, 149], "distribution_class": [147, 148, 149, 155, 159, 161, 256, 260, 262, 268], "return_log_prob": [147, 148, 149, 155, 159, 161, 256, 262, 268], "module_valu": [147, 148, 149], "td_module_valu": [147, 148, 149], "state_action_valu": [147, 162, 183, 191, 236, 243, 246, 248, 256, 260, 268], "td_clone": [147, 148, 149], "sample_log_prob": [147, 148, 149, 155, 159, 161, 233, 241, 243, 262, 268], "tensordictmodulewrapp": [147, 234, 235, 248], "get_value_oper": [147, 148, 149, 168, 178, 180, 233, 241], "action_modul": 148, "state_valu": [148, 149, 162, 183, 192, 193, 194, 195, 197, 198, 200, 202, 204, 205, 207, 233, 241, 246, 256, 260, 262], "safesequenti": [148, 149], "qualiti": [149, 256], "actorcriticoper": [149, 168, 178, 180, 233, 241, 256], "embeddig": 149, "refet": 149, "actorcriticwrapp": [149, 256, 260], "sigma_init": 150, "sigma_end": 150, "annealing_num_step": [150, 153, 154, 260, 261], "po": [150, 153], "epsilon": [150, 153, 154, 184, 225, 261, 262], "make_log_softmax": 151, "qvaluemodul": [151, 156], "distributionaldqnnet": 151, "tensordictsequenti": [151, 160, 256, 260, 264, 266, 268], "my_action_valu": [152, 157], "full": [152, 218, 260, 261, 262, 264, 265, 266, 268, 269], "chanc": 152, "thid": 152, "eps_init": [153, 154, 261], "eps_end": [153, 154, 261], "explorative_polici": [153, 154], "0000": [153, 262, 265, 268], "9055": 153, "9277": [153, 265], "6295": 153, "2532": 153, "addbackward0": [153, 268], "theta": [154, 262, 265], "15": [154, 173, 261, 262, 265], "mu": [154, 262], "dt": [154, 265], "x0": 154, "sigma_min": 154, "n_steps_ann": 154, "ornstein": 154, "uhlenbeck": 154, "ou": [154, 260], "introduc": [154, 260], "auto": [154, 171, 181, 183, 257], "correl": 154, "sort": 154, "prev_nois": 154, "current_sigma": 154, "sqrt": 154, "ou_prev_nois": 154, "ou_step": 154, "increas": 154, "anneal": 154, "_ou_prev_nois": 154, "_ou_step": 154, "probabilist": [155, 254, 262, 268], "default_interaction_mod": [155, 159], "interaction_mod": [155, 159], "set_interaction_mod": [155, 159], "distribution_kwarg": [155, 159, 262], "cache_dist": [155, 159], "diverg": [155, 159, 174, 178], "n_empirical_estim": [155, 159], "tensordictmodulebas": 156, "accordingli": 156, "triplet": [156, 157], "chose": 157, "functionalmodul": 158, "functionalmodulewithbuff": 158, "grucel": 158, "td_fmodul": 158, "td_function": 158, "td_state": 158, "vmap": [158, 161, 268], "ensembl": [158, 181], "params_repeat": 158, "td_vmap": [158, 161], "irrespect": [158, 159], "random_sampl": [158, 159], "probabilistictensordictmodul": [159, 160, 268], "rule": [159, 256, 262], "get_dist": [159, 160], "__call__": [159, 258], "suppli": 159, "fist": 159, "partial_toler": [160, 161, 264], "probabilistictensordictsequenti": [160, 167, 168, 178, 180, 182, 234, 235, 268], "who": [160, 161], "AND": [160, 161], "scan": [160, 161], "tensordictsequenci": 161, "tensordictsequ": 161, "safeprobabilisticmodul": [161, 256], "spec1": 161, "net1": 161, "module1": 161, "td_module1": 161, "spec2": 161, "module2": 161, "td_module2": 161, "custommodul": 162, "cat": [162, 268], "transition_model": 163, "reward_model": 163, "imaginari": 163, "imagin": 163, "get_reward_oper": 163, "get_transition_model_oper": 163, "min_val": [164, 166], "bias": [164, 257, 260], "_bia": 164, "invert": [165, 262], "surject": 166, "expln": 166, "biased_softplu": [166, 254], "beggin": 166, "biased_softplus_": 166, "syntax": [166, 260], "condit": [166, 260, 265], "met": [166, 265], "advantage_kei": [167, 168, 178, 180, 182, 192, 193, 194, 195, 262], "value_target_kei": [167, 168, 178, 180, 182, 192, 193, 194, 195, 262], "value_target": [167, 168, 178, 180, 182, 192, 193, 194, 195, 262], "entropy_bonu": [167, 168, 178, 180, 262], "samples_mc_entropi": [167, 168, 178, 180], "entropy_coef": [167, 168, 178, 180, 262], "critic_coef": [167, 168, 178, 180, 262], "loss_critic_typ": [167, 168, 178, 180, 182, 262], "smooth_l1": [167, 168, 169, 170, 171, 177, 178, 180, 181, 182, 183, 185, 188, 262], "separate_loss": [167, 168, 178, 180], "1602": 167, "01783v2": 167, "favour": [167, 168, 178, 180], "mont": [167, 168, 178, 180, 260], "carlo": [167, 168, 178, 180, 260], "l1": [167, 168, 169, 170, 171, 178, 180, 181, 182, 185, 188, 256, 260], "l2": [167, 168, 169, 170, 171, 174, 175, 178, 180, 181, 182, 185, 188, 260], "propag": [167, 168, 178, 180, 192, 193, 194, 195, 262], "throughout": [167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 262, 269], "essenti": [167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 261, 265], "make_value_estim": [167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 186, 257, 260], "value_typ": [167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 187, 260], "valueestim": [167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 187, 254, 257, 260], "hyperparam": [167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 260, 265], "enum": [167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 187, 260], "default_value_kwarg": [167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 254, 260], "dqn_loss": [167, 169, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 186], "dqnloss": [167, 169, 171, 172, 173, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 239, 254, 257, 261], "clip_epsilon": [168, 262], "normalize_advantag": [168, 178, 180], "threshold": [168, 262], "multipli": [168, 171, 178, 180, 181, 183, 225, 260], "head": [168, 178, 180], "somemodul": [168, 178, 180], "actor_head": [168, 178, 180], "someactor": [168, 178, 180], "value_head": [168, 178, 180], "somevalu": [168, 178, 180], "loss_modul": [168, 176, 178, 179, 180, 184, 227, 247, 248, 257, 258, 260, 261, 262], "ppoloss": [168, 178, 240, 254], "regardless": [168, 178, 180], "actor_network": [169, 171, 177, 181, 183, 185, 260], "value_network": [169, 170, 172, 177, 183, 192, 193, 194, 195, 257, 260, 262], "loss_funct": [169, 170, 171, 177, 181, 183, 185, 188, 260], "delay_actor": [169, 183, 185], "delay_valu": [169, 170, 172, 182, 183, 261], "input_tensordict": [169, 170, 172, 260], "qvalueactor": [170, 256, 261], "qvalue_network": [171, 177, 181, 183, 185], "num_qvalue_net": [171, 177, 181, 183, 185], "alpha_init": [171, 181, 183], "min_alpha": [171, 181, 183], "max_alpha": [171, 181, 183], "fixed_alpha": [171, 181, 183], "target_entropy_weight": 171, "98": [171, 192, 193, 194, 195, 261, 262, 265, 266], "target_entropi": [171, 181, 183], "delay_qvalu": [171, 181, 183, 185], "distributionalqvalueactor": [172, 256], "disctount": 172, "actor_model": 173, "value_model": [173, 175], "model_based_env": 173, "dreamerenv": [173, 254], "imagination_horizon": 173, "discount_loss": [173, 175], "lmbda": [173, 187, 192, 195, 197, 202, 203, 204, 207, 208, 257, 260, 262], "unrol": [173, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208], "lambda_kl": 174, "lambda_reco": 174, "lambda_reward": 174, "reco_loss": 174, "reward_loss": 174, "free_nat": 174, "delayed_clamp": 174, "global_averag": 174, "kl": [174, 178], "nat": 174, "clamp": [174, 227, 265], "value_loss": 175, "fake_data": 175, "ddpgloss": [176, 184, 237, 248, 254, 260, 268], "sacloss": [176, 184, 245, 254], "td3loss": [176, 184, 254], "value_network_update_interv": 176, "contrast": 176, "06461": 176, "expectil": 177, "2110": 177, "06169": 177, "tau": [177, 260, 261], "antmaz": 177, "sticht": 177, "loss_value_diff": 177, "diff": 177, "dtarg": 178, "decrement": 178, "samples_mc_kl": 178, "penalti": 178, "old_polici": 178, "new_polici": 178, "adapt": [178, 260, 265], "old": [178, 269], "thu": 178, "distanc": [178, 188, 191, 192], "apart": 178, "analyt": 178, "loss_": [179, 222, 257, 260], "defaylt_value_typ": 179, "equip": 179, "convert_to_funct": [179, 260], "expand_dim": 179, "create_target_param": [179, 260], "compare_against": [179, 260], "funs_to_decor": 179, "stuctur": 179, "_param": 179, "expans": 179, "resampl": 179, "_target_param": 179, "value_estim": [179, 192, 193, 194, 195, 196, 257, 260, 268], "valueestimatorbas": [179, 254], "blend": 179, "upcom": [179, 200, 201, 202, 203, 205, 206, 207, 208, 260], "proxim": [180, 233, 241, 262], "optimis": [180, 223, 262], "flavour": [180, 268], "constrain": 180, "clipppoloss": [180, 254, 262], "klpenppoloss": [180, 254], "regularis": 180, "06347": [180, 233, 241], "gae": [180, 254, 257, 260, 262], "ppo_loss": 180, "tdlambda": [180, 187, 257, 260], "sub_sample_len": 181, "openreview": [181, 243], "ay8zfzm0tdd": [181, 243], "idea": [181, 258], "subsampl": [181, 218, 258], "connectionist": 182, "1992": 182, "doi": 182, "1007": 182, "bf00992696": 182, "1801": [183, 246], "01290": [183, 246], "applic": [183, 265], "1812": 183, "05905": 183, "prod": 183, "n_action": 183, "redqloss": [184, 254], "999": [184, 225, 261], "math": 184, "theta_t": [184, 265], "theta_": [184, 265], "policy_nois": 185, "noise_clip": 185, "td0": [186, 260], "v2": [188, 200, 201, 202, 203, 205, 206, 207, 208, 233, 236, 241, 243, 246], "strict_shap": 188, "view_a": 188, "next_val_kei": 191, "pred_next_v": 191, "usus": 191, "mse": 191, "q_valu": 191, "target_valu": [191, 257, 260, 268], "n_steps_to_next": 191, "value_next_st": 191, "average_ga": [192, 262], "value_kei": [192, 193, 194, 195, 196, 260], "1506": [192, 197, 204], "02438": [192, 197, 204], "exponenti": [192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 225], "advang": 192, "gradient_mod": 192, "value_error": [192, 193, 194, 195, 196], "sign": 192, "unused_arg": 192, "target_param": [192, 193, 194, 195, 196, 260], "relev": [192, 193, 194, 195, 196, 265], "94": [192, 195, 261, 262, 265], "unpack": [192, 193, 194, 195], "recur": [192, 193, 194, 195, 196], "average_reward": [193, 194, 195], "aka": [193, 261], "tdestim": [193, 194, 196], "infti": 194, "valuefunctionbas": 196, "next_state_valu": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 254], "time_dim": [197, 200, 201, 202, 203, 204, 205, 206, 207, 208], "old_stat": [197, 198, 200, 202, 204, 205, 207], "new_stat": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "rolling_gamma": [200, 201, 202, 203, 205, 206, 207, 208], "ti": [200, 201, 202, 203, 205, 206, 207, 208, 261], "g1": [200, 201, 202, 203, 205, 206, 207, 208], "g2": [200, 201, 202, 203, 205, 206, 207, 208], "g3": [200, 201, 202, 203, 205, 206, 207, 208], "g4": [200, 201, 202, 203, 205, 206, 207, 208], "v3": [200, 201, 202, 203, 205, 206, 207, 208], "v4": [200, 201, 202, 203, 205, 206, 207, 208, 260, 262, 266], "out_file_bas": 209, "skip_reset": 209, "dump": 209, "interv": [209, 210, 219, 229, 261, 265], "center_crop": 210, "make_grid": 210, "Will": 210, "grid": 210, "exp_nam": [211, 212, 215, 216, 217, 248, 261], "log_dir": [211, 212, 214, 216, 261], "templat": 211, "csv": [212, 214, 261], "minim": 212, "dependeci": 212, "experiment_nam": [213, 214], "uuid": [213, 261, 269], "date": 213, "logger_typ": 214, "logger_nam": 214, "tensorboard": [214, 216, 268], "wandb": [214, 217, 268], "mlflow": [214, 215], "might": [214, 255, 260, 269], "wandb_kwarg": 214, "mlflow_kwarg": 214, "tracking_uri": 215, "uri": 215, "datastor": 215, "tb_log": 216, "tensoarboard": 216, "sub_traj_len": 218, "min_sub_traj_len": 218, "20": [218, 261, 262, 265, 268, 269], "register_op": [218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 258, 261], "process_optim_batch": [218, 224, 225, 258], "td_out": [218, 226], "_process_optim_batch_hook": [218, 258], "batch_subsampl": 218, "clear_cuda": 219, "pre_optim_step": [219, 258], "counter": [220, 258], "log_pbar": [220, 221, 223, 225, 258, 261], "progress": [220, 221, 223, 227, 258, 261, 269], "bar": [220, 221, 223, 227, 258, 261], "count_fram": 220, "pre_steps_log": [220, 221, 258], "count_frames_log": 220, "lognam": 221, "r_train": [221, 261], "log_reward": [221, 261], "loss_compon": 222, "appl": 222, "omit": [222, 262, 265], "optimizer_hook": 222, "loss_actor": [222, 260], "record_interv": [223, 260, 261], "record_fram": [223, 230, 260, 261], "policy_explor": [223, 248, 260, 261], "log_kei": [223, 261], "suffix": 223, "underestim": 223, "suppos": [223, 258, 269], "set_exploration_mod": [223, 254, 262, 268], "r_evalu": [223, 260], "tensordictreplaybuff": [224, 248, 254, 260, 261], "flatten_tensordict": [224, 261], "max_dim": 224, "rb_trainer": 224, "batch_process": [224, 225, 226, 258], "post_loss": [224, 258], "jitter": 225, "finfo": 225, "default_dtyp": 225, "get_default_dtyp": 225, "reward_norm": 225, "update_reward_stat": 225, "normalize_reward": 225, "make_train": [226, 254], "_process_batch_hook": [226, 258], "select_kei": [226, 258], "versatil": 227, "lossmodul": [227, 247, 248, 254], "optim_steps_per_batch": [227, 258, 261], "epoch": [227, 262], "clip_grad_norm": 227, "partial": 227, "clip_norm": 227, "progress_bar": 227, "tqdm": [227, 260, 262, 265], "save_trainer_interv": 227, "disk": [227, 258, 260, 261], "log_interv": [227, 261], "save_trainer_fil": [227, 258], "datacollectorbas": [229, 234, 235, 248, 254], "update_weights_interv": [229, 261], "sit": [229, 261], "update_weight": 229, "post_step": [229, 258], "cfg": [230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252], "dictconfig": [230, 231, 233, 234, 235, 236, 238, 241, 243, 244, 246, 247, 248, 249, 252], "divid": [230, 256, 260], "unknowingli": 230, "annealing_fram": [230, 260], "init_env_step": [230, 231, 260], "proof_environ": [231, 233, 236, 238, 241, 243, 246, 260], "sta": 231, "ot": 231, "a2closs": [232, 254], "in_keys_actor": [233, 241], "observation_kei": [233, 241, 243, 246], "dummi": [233, 236, 238, 241, 243, 246, 260, 269], "parser_env_arg": [233, 241, 243], "make_ppo_model": [233, 254], "parser_model_args_continu": [233, 241, 243, 246], "cattensor": [233, 236, 241, 243, 246, 260, 264, 265, 269], "hydra": [233, 236, 238, 241, 243, 246], "config_stor": [233, 236, 238, 241, 243, 246], "configstor": [233, 236, 238, 241, 243, 246], "dataclass": [233, 236, 238, 241, 243, 246], "halfcheetah": [233, 236, 241, 243, 246, 260], "config_field": [233, 236, 238, 241, 243, 246], "config_cl": [233, 236, 238, 241, 243, 246], "ppomodelconfig": [233, 241], "envconfig": [233, 236, 238, 241, 243, 246], "make_dataclass": [233, 236, 238, 241, 243, 246], "cls_name": [233, 236, 238, 241, 243, 246], "config_path": [233, 236, 238, 241, 243, 246], "config_nam": [233, 236, 238, 241, 243, 246], "actor_valu": [233, 241], "17": [233, 236, 241, 243, 246, 261, 262, 265], "actor_model_explor": [234, 235, 260], "make_env_kwarg": [234, 235], "actor_net_kwarg": [236, 243, 246], "value_net_kwarg": [236, 246], "modulelist": [236, 243, 246, 260, 268], "ddpgcnnactor": 236, "ddpgmlpactor": [236, 260], "ddpgcnnqnet": 236, "ddpgmlpqnet": [236, 260], "ddpgmodelconfig": 236, "targetnetupdat": [237, 239, 242, 245, 247, 248], "discretemodelconfig": 238, "pong": [238, 269], "v5": [238, 269], "pixels_onli": [238, 260, 261, 268, 269], "210": [238, 265, 269], "160": [238, 261, 265, 269], "redqloss_deprec": 242, "qvalue_net_kwarg": [243, 246], "qvalu": [243, 246], "redqmodelconfig": 243, "replayargsconfig": 244, "sacmodelconfig": 246, "target_net_updat": [248, 260, 261], "constitu": 248, "learnt": [248, 260, 262], "tempfil": [248, 260, 261], "tensorboardlogg": [248, 254], "egreedywrapp": [248, 261], "env_proof": 248, "obs_spec": [248, 265], "net_valu": 248, "dir": [248, 258, 261], "gettempdir": 248, "argpars": [249, 252], "namespac": [249, 252], "parser": [249, 252], "transformed_env_constructor": [249, 254], "num_env_per_collector": [250, 251], "video_tag": 252, "norm_obs_onli": 252, "use_env_cr": 252, "custom_env_mak": 252, "custom_env": 252, "return_transformed_env": 252, "action_dim_gsd": 252, "state_dim_gsd": 252, "batch_dim": 252, "obs_norm_state_dict": 252, "wheter": 252, "maker": 252, "asyncdatacollector": 254, "distributedsyncdatacollector": 254, "submitit_delayed_launch": 254, "raycollector": 254, "samplerwithoutreplac": [254, 262], "d4rlexperiencereplai": 254, "openmlexperiencereplai": 254, "binarydiscretetensorspec": 254, "unboundeddiscretetensorspec": [254, 262, 269], "tensordictrecord": 254, "videorecord": [254, 262], "get_available_librari": 254, "set_exploration_typ": 254, "exploration_typ": 254, "make_composite_from_td": [254, 265], "braxwrapp": 254, "dmcontrolenv": [254, 260, 264, 269], "dmcontrolwrapp": 254, "jumanjienv": 254, "jumanjiwrapp": 254, "openmlenv": 254, "vmasenv": 254, "vmaswrapp": 254, "qvaluehook": 254, "distributionalqvaluehook": 254, "reset_nois": 254, "cemplann": 254, "mpcplannerbas": 254, "mppiplann": 254, "independentnorm": 254, "truncatednorm": 254, "tanhdelta": [254, 260], "onehotcategor": 254, "inv_softplu": 254, "distributionaldqnloss": [254, 261], "discretesacloss": 254, "iqlloss": 254, "reinforceloss": 254, "dreameractorloss": 254, "dreamermodelloss": 254, "dreamervalueloss": 254, "td0estim": [254, 260], "td1estim": [254, 260], "td0_return_estim": 254, "td0_advantage_estim": 254, "td1_return_estim": 254, "vec_td1_return_estim": 254, "td1_advantage_estim": 254, "vec_td1_advantage_estim": 254, "td_lambda_return_estim": 254, "vec_td_lambda_return_estim": 254, "td_lambda_advantage_estim": 254, "vec_td_lambda_advantage_estim": 254, "generalized_advantage_estim": 254, "vec_generalized_advantage_estim": 254, "distance_loss": [254, 260], "hold_out_net": 254, "hold_out_param": [254, 260], "softupd": [254, 260, 261], "hardupd": [254, 260], "batchsubsampl": [254, 258], "clearcudacach": 254, "countframeslog": 254, "logreward": [254, 258, 261], "optimizerhook": [254, 261], "replaybuffertrain": [254, 258, 261], "rewardnorm": 254, "selectkei": [254, 258], "trainerhookbas": [254, 258, 261], "updateweight": [254, 258, 261], "make_a2c_loss": 254, "make_a2c_model": 254, "make_collector_offpolici": 254, "make_collector_onpolici": 254, "make_ddpg_actor": [254, 260], "make_ddpg_loss": 254, "make_dqn_actor": 254, "make_dqn_loss": 254, "make_ppo_loss": 254, "make_redq_loss": 254, "make_redq_model": 254, "make_replay_buff": [254, 260], "make_sac_loss": 254, "make_sac_model": 254, "make_target_updat": 254, "parallel_env_constructor": [254, 260], "sync_async_collector": 254, "sync_sync_collector": 254, "correct_for_frame_skip": 254, "get_stats_random_rollout": 254, "csvlogger": [254, 261], "mlflowlogg": 254, "wandblogg": 254, "get_logg": 254, "generate_exp_nam": 254, "journei": 255, "guid": [255, 260], "textbook": 255, "highlight": 255, "ever": 255, "bump": 255, "think": [255, 262, 269], "benefit": 255, "pr": 255, "ground": [256, 260, 265], "three": [256, 258, 262, 265], "categori": [256, 258], "recycl": 256, "satisfi": 256, "impos": 256, "violat": 256, "noisier": 256, "Their": 256, "normalparamextractor": [256, 262], "sd": 256, "prob_modul": 256, "special": [256, 260, 269], "pick": [256, 260, 261], "tabl": [256, 261], "customari": 256, "semant": 256, "hopefulli": [256, 261], "mathbb": [256, 261], "rightarrow": [256, 261], "soften": 256, "block": 256, "group": [256, 261, 262], "backbon": [256, 264, 268], "make_actor": 256, "make_valu": 256, "shared_param": 256, "make_common": 256, "shown": [256, 264], "alter": 256, "reusabl": [257, 260], "swappabl": [257, 260], "characterist": [257, 260, 265], "trainabl": [257, 260, 266], "whatev": [257, 260], "convent": [257, 260, 265], "smth": [257, 260], "metric": [257, 260], "loss_val": [257, 260, 262], "nutshel": [257, 260], "barto": 257, "chapter": 257, "proxi": 257, "significantli": [257, 260, 261], "next_stat": 257, "value_net_loss": 257, "pow": [257, 260], "therebi": 257, "room": 257, "convers": 257, "signifi": 257, "underperform": 257, "thin": 257, "intric": 257, "flexibli": 257, "outer": [258, 260, 261, 269], "believ": 258, "scheme": [258, 269], "substenti": 258, "_pre_steps_log_hook": 258, "_pre_optim_hook": 258, "sub_batch": 258, "_post_loss_hook": 258, "_post_optim_hook": 258, "post_optim": [258, 261], "_post_optim_log": 258, "post_optim_log": 258, "_post_steps_hook": 258, "_post_steps_log_hook": 258, "post_steps_log": 258, "comment": [258, 261, 268], "extens": 258, "reserv": 258, "logginghook": 258, "logging_hook": 258, "save_dict": 258, "some_valu": 258, "torchsnapshot": 258, "ckpt_backend": 258, "pt": [258, 266], "filepath": 258, "save_train": 258, "load_from_fil": 258, "perfectli": [258, 260, 265], "intern": 259, "author": [260, 261, 262, 265], "vincent": [260, 261, 262, 265], "moen": [260, 261, 262, 265], "assembl": 260, "focus": 260, "straightforward": [260, 261], "overview": [260, 262, 268], "transpar": 260, "understood": 260, "sota": [260, 261, 268], "illustr": [260, 261], "device_count": [260, 261, 266, 269], "loss_dict": 260, "modal": 260, "oblivi": [260, 262], "elementari": 260, "didact": 260, "extract": [260, 262], "speak": 260, "dilut": 260, "pessimist": [260, 261, 262], "target_actor_network_param": 260, "actor_in_kei": 260, "actor_crit": 260, "loss_funt": 260, "noth": [260, 262], "compromis": 260, "simplest": [260, 262, 269], "default_value_estim": 260, "hp": 260, "hasattr": 260, "_value_estim": 260, "elif": [260, 261], "notimplementederror": 260, "unknown": 260, "_loss_actor": 260, "td_copi": 260, "value_network_param": 260, "_loss_valu": [260, 268], "pred_val": [260, 268], "target_value_network_param": 260, "smooth": [260, 261], "loss_valu": [260, 262, 268], "glue": 260, "_forward": 260, "ndimens": 260, "pred_valu": 260, "pred_value_max": 260, "target_value_max": 260, "remaind": 260, "focu": [260, 261, 262], "env_librari": 260, "env_task": 260, "env_arg": 260, "friendli": 260, "torchr": 260, "rescal": 260, "presum": 260, "leav": 260, "make_transformed_env": 260, "reward_sc": 260, "double_to_float_list": 260, "double_to_float_inv_list": 260, "dmcontrol": 260, "leverag": [260, 269], "env_per_collector": 260, "transform_state_dict": 260, "make_t_env": 260, "copy_": 260, "parallel_env": [260, 268, 269], "adjust": [260, 265], "seem": 260, "cheat": 260, "10m": 260, "cautiou": 260, "deal": [260, 262], "magnitud": 260, "thousand": 260, "get_env_stat": 260, "proof_env": 260, "5000": [260, 261, 262], "maxim": [260, 265], "recal": [260, 262], "materi": 260, "small": [260, 262, 269], "ornsteinuhlenbeckprocesswrapp": 260, "env_spec": 260, "actor_net": [260, 262], "q_net": 260, "qnet": 260, "moduless": 260, "sugges": 260, "1_000_000": 260, "tight": 260, "natur": 260, "10_000": 260, "traj_len": 260, "make_record": 260, "recorder_obj": 260, "flavor": 260, "circular": 260, "buffer_s": [260, 261], "random_crop_len": 260, "prb": 260, "buffer_scratch_dir": 260, "temporari": 260, "dirrectori": 260, "tmpdir": [260, 261], "temporarydirectori": [260, 261], "trajecotri": 260, "25": [260, 261, 262, 265], "balanc": [260, 261, 269], "sampel": 260, "dataflow": 260, "ceil_div": 260, "utd": 260, "update_to_data": 260, "realiz": 260, "ve": 260, "_must_": 260, "001": [260, 265], "outdat": 260, "trick": [260, 261], "despit": 260, "thank": 260, "init_": [260, 261], "adam": [260, 261, 262, 265], "optimizer_actor": 260, "actor_network_param": 260, "lr": [260, 261, 262, 265], "weight_decai": [260, 261], "optimizer_valu": 260, "total_collection_step": 260, "pretti": 260, "rewards_ev": 260, "collected_fram": 260, "pbar": [260, 262, 265], "r0": 260, "numel": [260, 262, 266], "current_fram": 260, "sampled_tensordict": 260, "gn1": 260, "clip_grad_norm_": [260, 262, 265], "gn2": 260, "gn": [260, 265], "td_record": 260, "rn": 260, "set_descript": [260, 262, 265], "2f": 260, "traceback": [260, 268], "__w": [260, 268], "doc": [260, 261, 268], "coding_ddpg": [260, 267], "1119": 260, "1501": [260, 268], "_call_impl": [260, 268], "forward_cal": [260, 268], "351": [260, 265], "272": [260, 265], "391": [260, 265, 267], "new_fun": 260, "old_param": 260, "_assign_param": 260, "468": [260, 265], "_swap_stat": 260, "make_stateless": 260, "return_old_tensordict": 260, "307": [260, 265], "old_attr": 260, "getattr": 260, "560": [260, 265], "__getattr__": 260, "err2": 260, "err1": 260, "558": [260, 265], "1614": 260, "plot": [260, 262, 265], "mention": [260, 269], "matplotlib": [260, 262, 265, 269], "pyplot": [260, 262, 265, 269], "plt": [260, 262, 265, 269], "zip": [260, 263], "label": 260, "legend": 260, "xlabel": [260, 265], "ylabel": 260, "tight_layout": 260, "concret": [260, 262], "takeawai": [260, 261], "minut": [260, 261, 262, 264, 265, 266, 268, 269], "55": [260, 261, 262, 265, 267], "4262": 260, "mb": [260, 261, 262, 264, 265, 266, 267, 268, 269], "jupyt": [260, 261, 262, 263, 264, 265, 266, 268, 269], "ipynb": [260, 261, 262, 264, 265, 266, 268, 269], "galleri": [260, 261, 262, 263, 264, 265, 266, 268, 269], "sphinx": [260, 261, 262, 263, 264, 265, 266, 268, 269], "cartpol": [261, 269], "customis": 261, "road": 261, "aspect": 261, "grayscal": [261, 269], "did": [261, 262, 269], "highest": 261, "preprocess": 261, "prerequisit": 261, "familiar": [261, 269], "lookup": 261, "amort": [261, 262], "conjunct": 261, "cart": 261, "pole": 261, "un": 261, "actuat": 261, "frictionless": 261, "upright": [261, 269], "duelingcnndqnet": 261, "is_notebook": 261, "shell": 261, "get_ipython": 261, "__class__": 261, "zmqinteractiveshel": 261, "qtconsol": 261, "terminalinteractiveshel": 261, "ipython": [261, 265], "nameerror": 261, "interpret": 261, "umbrella": 261, "misplac": 261, "misus": 261, "orchestr": 261, "everyth": [261, 262], "five": 261, "64x64": 261, "channel": 261, "motion": [261, 265], "obs_norm_sd": 261, "simpler": 261, "get_norm_stat": 261, "test_env": 261, "make_model": 261, "dummy_env": 261, "output_s": 261, "init_bia": 261, "actor_explor": 261, "eps_greedy_v": 261, "eps_greedy_val_env": 261, "get_replay_buff": 261, "n_optim": 261, "themselv": 261, "simplic": [261, 262, 266], "get_collector": 261, "data_collector": 261, "bunch": 261, "concept": 261, "power": 261, "ubiquit": 261, "get_loss_modul": 261, "target_updat": 261, "sensit": 261, "variat": 261, "2e": [261, 265], "wd": 261, "upd": 261, "02": [261, 262, 265, 266], "harder": [261, 268], "5_000": 261, "500000": 261, "256": [261, 262, 265], "100000": 261, "005": 261, "mandatori": [261, 262, 265], "fairer": 261, "budget": [261, 262], "dqn_exp_": 261, "uuid1": [261, 269], "warn": [261, 269], "9921": 261, "0788": 261, "0787": 261, "tmp": 261, "tmpl3kwpcla": 261, "dqn_exp_44623fdc": 261, "dc3a": 261, "11ed": [261, 269], "98b7": [261, 269], "0242ac120002": [261, 269], "registr": 261, "cumbersom": 261, "buffer_hook": 261, "weight_updat": 261, "descript": [261, 262], "aliv": 261, "00": [261, 262, 265, 266, 267], "09": [261, 262, 265], "58it": [261, 265], "4045": 261, "9259": 261, "23": [261, 262, 265], "71it": 261, "4134": 261, "96": [261, 262, 265, 266], "47": [261, 262, 265], "29it": [261, 265], "3682": 261, "05": [261, 262, 265], "54": [261, 262, 265], "74it": [261, 262], "4074": [261, 265], "04": [261, 262, 265, 266, 267], "19": [261, 262, 265], "68it": [261, 262, 265], "4345": [261, 265], "192": [261, 265], "22": [261, 262, 265, 266, 267], "70it": [261, 262], "4073": 261, "224": [261, 265], "28": [261, 262, 265], "96it": [261, 262, 265], "4224": 261, "21": [261, 262, 264, 265, 266, 267], "51it": [261, 262, 265], "3802": 261, "288": [261, 265], "37": [261, 262, 265, 267], "37it": [261, 262, 265], "320": [261, 265, 269], "40": [261, 262, 265], "88it": 261, "352": [261, 265], "43": [261, 262, 265, 267], "08it": [261, 262], "3499": 261, "384": [261, 265], "41": [261, 262, 265], "45": [261, 262, 265, 266], "56it": [261, 262, 265], "4254": 261, "416": [261, 265], "47it": [261, 265], "3893": 261, "448": [261, 265], "48": [261, 262, 265, 266], "24it": [261, 262], "480": [261, 265, 266], "65it": [261, 262, 265], "67it": [261, 265], "4948": [261, 265], "544": [261, 265], "42it": [261, 265], "576": [261, 265], "31": [261, 262, 265, 266], "40it": [261, 265], "608": [261, 265], "73it": [261, 262], "4524": 261, "640": 261, "49": [261, 265], "13it": [261, 265], "672": 261, "00it": [261, 262], "704": 261, "26": [261, 262, 265, 266], "3650": [261, 265], "736": [261, 265], "36it": [261, 265], "3621": [261, 265], "768": 261, "800": 261, "92it": 261, "4526": 261, "832": 261, "51": [261, 264, 265, 266, 267], "32it": 261, "3590": 261, "864": 261, "79it": 261, "4497": 261, "896": 261, "52": [261, 262, 265], "928": 261, "12it": [261, 265], "3920": 261, "960": 261, "60it": [261, 265], "992": 261, "52it": [261, 262, 265], "34it": [261, 265], "1056": 261, "53it": [261, 262, 265], "1088": 261, "1120": 261, "35it": 261, "4314": 261, "1152": 261, "10it": [261, 262, 265], "4586": 261, "1184": 261, "3772": 261, "1216": 261, "36": [261, 262, 265], "1248": 261, "80it": 261, "3923": 261, "1280": 261, "1344": 261, "39": [261, 262, 265, 266], "18it": [261, 262], "3440": 261, "1376": 261, "97it": [261, 265], "1408": 261, "1440": 261, "1472": 261, "3861": 261, "1504": 261, "1536": 261, "21it": 261, "1568": 261, "1600": 261, "20it": 261, "4404": 261, "1632": [261, 265], "4164": 261, "05it": 261, "1696": [261, 269], "38it": [261, 265], "1728": 261, "1760": 261, "19it": 261, "3983": 261, "1792": 261, "07it": 261, "1824": 261, "46it": [261, 265], "4676": 261, "1856": 261, "99it": 261, "1888": 261, "91it": [261, 265], "1920": [261, 265], "76it": 261, "1952": 261, "57it": [261, 265], "3832": 261, "1984": 261, "2016": 261, "59": [261, 262, 265, 266], "4375": 261, "2048": [261, 266], "53": [261, 262, 265, 266], "2080": [261, 265], "58": [261, 262, 265, 266], "2112": [261, 265], "57": [261, 262, 265, 266], "2144": 261, "56": [261, 262, 265], "2176": 261, "2208": [261, 265], "2240": 261, "2272": 261, "2304": 261, "2336": 261, "14it": [261, 265], "3952": 261, "2368": 261, "2400": [261, 262, 265], "2432": [261, 265], "83it": 261, "2464": 261, "4434": 261, "2496": 261, "11it": [261, 265], "2528": [261, 262], "94it": [261, 262, 265], "2560": 261, "2592": [261, 265], "28it": [261, 265], "2624": 261, "2656": 261, "2688": 261, "2720": 261, "43it": [261, 265], "2752": 261, "07": [261, 262, 265], "82it": 261, "2784": 261, "2816": 261, "2848": [261, 265], "2880": 261, "48it": [261, 262, 265], "2912": [261, 265], "63it": [261, 262, 265], "2944": [261, 262], "61it": [261, 265], "60": [261, 262, 265, 268], "2976": 261, "3862": 261, "3008": 261, "22it": 261, "3529": 261, "61": [261, 262, 265, 266], "3040": 261, "3072": 261, "03it": 261, "62": [261, 262, 265], "3104": 261, "23it": [261, 262], "63": [261, 262, 265], "3136": 261, "09it": 261, "3168": [261, 262], "3200": 261, "65": [261, 262, 265, 266], "3232": 261, "3264": [261, 265], "66": [261, 262, 265, 266], "3296": 261, "93it": [261, 265], "67": [261, 262, 264, 265, 266], "3328": 261, "3360": 261, "33it": 261, "68": [261, 262, 265, 266], "3392": 261, "89it": 261, "3424": [261, 265], "69": [261, 265, 266], "3456": 261, "06it": 261, "70": [261, 262, 265, 266], "3488": 261, "62it": [261, 265], "3520": 261, "87it": 261, "71": [261, 262, 265], "3552": 261, "4012": 261, "72": [261, 262, 265, 266], "3584": 261, "3616": 261, "4797": 261, "73": [261, 262, 265], "3648": 261, "74": [261, 262, 265, 266], "3680": 261, "3712": 261, "75": [261, 265], "3744": 261, "3679": 261, "76": [261, 262, 265, 266], "3776": 261, "49it": [261, 262, 265], "3892": [261, 265], "3808": 261, "44it": [261, 262, 265], "77": [261, 262, 265], "3840": [261, 265], "78it": [261, 262], "3872": 261, "85it": 261, "78": [261, 262, 265, 266], "3904": 261, "39it": [261, 265], "79": [261, 265, 266], "3936": 261, "66it": [261, 265], "3968": 261, "80": [261, 262, 265, 266], "4000": [261, 262], "3652": 261, "4032": 261, "4064": 261, "82": [261, 262, 265, 266], "4096": 261, "84it": 261, "83": [261, 265, 266], "4128": 261, "4160": 261, "84": [261, 262, 265], "4192": 261, "3380": 261, "86it": [261, 262], "85": [261, 265, 266], "4256": 261, "86": [261, 262, 265], "4288": 261, "4320": 261, "4352": 261, "88": [261, 262, 265, 266], "4384": 261, "4416": 261, "89": [261, 265], "4448": 261, "90": [261, 262, 265, 266], "4480": 261, "72it": [261, 262], "4512": 261, "91": [261, 262, 265], "4544": 261, "64it": [261, 265], "92": [261, 262, 265, 266, 267], "4576": 261, "59it": [261, 262, 265], "4608": 261, "93": [261, 265, 269], "4640": 261, "4672": 261, "90it": [261, 265], "4704": 261, "4736": 261, "4768": 261, "4800": 261, "97": [261, 265, 266], "4832": [261, 265], "4864": 261, "4896": 261, "4928": 261, "81it": 261, "4960": 261, "02it": [261, 262], "4992": 261, "5024it": 261, "quickli": [261, 269], "print_csv_files_in_fold": 261, "folder_path": 261, "csv_file": 261, "output_str": 261, "dirpath": 261, "walk": [261, 264, 269], "endswith": 261, "strip": 261, "4948333501815796": 261, "38930565118789673": 261, "43136513233184814": 261, "43746012449264526": 261, "4676021933555603": 261, "4044681489467621": 261, "34994545578956604": 261, "4074399769306183": 261, "362770080566406": 261, "151092052459717": 261, "007941722869873": 261, "494401216506958": 261, "9688875675201416": 261, "870188236236572": 261, "657075881958008": 261, "4181573390960693": 261, "893820285797119": 261, "grad_norm_0": 261, "457256317138672": 261, "708115577697754": 261, "901756286621094": 261, "269564628601074": 261, "98818588256836": 261, "64008712768555": 261, "188080787658691": 261, "630883693695068": 261, "15980339050293": 261, "10000000894069672": 261, "9259260892868042": 261, "qvaluenetwork": 261, "worst": 261, "accuraci": 261, "fanci": 261, "012": [261, 267], "2548": 261, "coding_dqn": [261, 267], "demonstr": [262, 265, 269], "talk": 262, "repetit": 262, "six": 262, "sophist": 262, "invent": 262, "theta_k": 262, "frac": 262, "pi_": 262, "exceed": 262, "discourag": [262, 265], "indispens": 262, "loader": 262, "analyz": 262, "lingua": 262, "franca": 262, "defaultdict": [262, 265], "has_cuda": [262, 269], "3e": 262, "max_grad_norm": 262, "big": [262, 269], "ourselv": [262, 269], "benefici": 262, "errat": 262, "hamper": 262, "reactiv": 262, "xy": 262, "50_000": 262, "sub_batch_s": 262, "num_epoch": 262, "intro": 262, "entropy_ep": 262, "generalist": 262, "interchang": [262, 266], "panel": 262, "charact": 262, "inverteddoublependulum": 262, "transmit": 262, "stai": 262, "thumb": 262, "supplementari": [262, 269], "told": 262, "stringent": 262, "nevertheless": 262, "environemnt": 262, "confid": 262, "succeed": [262, 265], "pack": [262, 269], "ran": 262, "mutli": 262, "boundari": 262, "f_": 262, "text": 262, "mu_": 262, "difficulti": [262, 269], "brought": 262, "scrictli": 262, "d_ob": 262, "d_action": 262, "carrier": 262, "policy_modul": 262, "That": 262, "said": 262, "value_modul": [262, 268], "briefli": 262, "refil": 262, "capac": 262, "conveni": [262, 265], "easiest": 262, "hide": 262, "awai": 262, "mathemat": 262, "tradeoff": 262, "lr_schedul": [262, 265], "cosineannealinglr": [262, 265], "eval_str": 262, "tensordict_data": 262, "data_view": 262, "subdata": 262, "loss_object": 262, "loss_crit": 262, "loss_entropi": 262, "cum_reward_str": 262, "4f": [262, 265], "stepcount_str": 262, "param_group": 262, "lr_str": 262, "eval_rollout": 262, "nice": 262, "50000": 262, "321": [262, 265], "8735": 262, "0989": 262, "0003": [262, 265], "315": [262, 265], "1322": 262, "3000": 262, "322": [262, 265], "1658": 262, "326": [262, 265], "1956": 262, "327": [262, 265], "01it": 262, "2098": 262, "6000": 262, "328": [262, 265], "2297": 262, "7000": 262, "331": [262, 265], "77it": 262, "2236": 262, "8000": 262, "334": [262, 265], "26it": [262, 265], "2283": 262, "9000": 262, "335": [262, 265], "336": [262, 265], "11000": 262, "338": [262, 265], "372": [262, 265], "7214": [262, 265], "2534": 262, "12000": 262, "333": [262, 265], "98it": 262, "2676": 262, "13000": 262, "15it": [262, 265], "2658": 262, "14000": 262, "337": [262, 265], "2616": 262, "15000": 262, "2710": 262, "0002": [262, 265], "16000": 262, "45it": [262, 265], "2715": 262, "17000": 262, "2756": 262, "18000": 262, "339": [262, 265], "2795": 262, "19000": 262, "2777": 262, "20000": 262, "3064": 262, "21000": 262, "531": [262, 265], "2711": 262, "2945": 262, "22000": 262, "332": [262, 265], "2969": 262, "23000": 262, "3015": 262, "24000": 262, "2992": [262, 265], "25000": 262, "2950": 262, "26000": 262, "3049": 262, "27000": 262, "3079": 262, "28000": 262, "340": [262, 265], "2972": 262, "29000": 262, "2952": 262, "30000": 262, "341": [262, 265], "2921": 262, "31000": 262, "6169": 262, "2948": [262, 265], "32000": 262, "2949": 262, "33000": 262, "25it": [262, 265], "2957": 262, "34000": 262, "2926": 262, "35000": 262, "2979": [262, 265], "36000": 262, "37000": 262, "3010": 262, "38000": 262, "3081": [262, 265], "39000": 262, "40000": 262, "3050": 262, "41000": 262, "16it": [262, 265], "587": [262, 265], "7036": 262, "3026": 262, "42000": 262, "3035": 262, "43000": 262, "41it": [262, 265], "3107": 262, "141": [262, 265], "44000": 262, "3098": 262, "153": [262, 265], "45000": 262, "117": [262, 265], "46000": 262, "3093": 262, "140": [262, 265], "47000": 262, "3193": 262, "116": [262, 265], "48000": 262, "342": [262, 265], "3163": 262, "152": [262, 265], "49000": 262, "3182": 262, "144": [262, 265], "3208": 262, "163": [262, 265, 266], "cap": 262, "figsiz": [262, 265], "subplot": [262, 265, 269], "titl": [262, 265], "bit": 262, "968": [262, 267], "coding_ppo": [262, 267], "tutorials_python": 263, "tutorials_jupyt": 263, "distinct": 264, "humanoid": [264, 269], "env1": 264, "env1_obs_kei": 264, "observation_stand": 264, "env2": 264, "env2_obs_kei": 264, "observation_walk": 264, "tdreset1": 264, "tdreset2": 264, "tdreset": 264, "policy_common": 264, "policy_stand": 264, "policy_walk": 264, "seq": 264, "But": 264, "env1_mak": 264, "env2_mak": 264, "_single_task": 264, "td_rollout": 264, "355": [264, 265, 267], "multi_task": [264, 267], "freeli": 265, "inspir": 265, "sep": 265, "touch": 265, "undertaken": 265, "broader": 265, "challeng": [265, 266], "wider": 265, "algebra": 265, "seamlessli": 265, "acquaint": 265, "avenu": 265, "unsqueezetransform": 265, "_apply_to_composit": 265, "default_x": 265, "pi": 265, "default_i": 265, "four": 265, "_set_se": 265, "torqu": 265, "upward": 265, "angular": 265, "dot": 265, "_t": 265, "sin": 265, "rad": 265, "sec": 265, "gravit": 265, "angl": 265, "deleg": 265, "new_th": 265, "plu": 265, "new_thdot": 265, "thdot": 265, "g_forc": 265, "max_torqu": 265, "angle_norm": 265, "max_spe": 265, "zeros_lik": 265, "albeit": 265, "is_empti": 265, "gen_param": 265, "high_th": 265, "high_thdot": 265, "low_th": 265, "low_thdot": 265, "rng": 265, "lazili": 265, "shortcut": [265, 269], "irrelev": 265, "_make_spec": 265, "td_param": 265, "commong": 265, "pseudo": 265, "pendulumenv": 265, "render_mod": 265, "human": 265, "rgb_arrai": 265, "render_fp": 265, "random_": 265, "_make_step": 265, "staticmethod": 265, "coupl": 265, "complic": [265, 269], "showcas": 265, "skeleton": 265, "_apply_transform": [265, 269], "_inv_apply_transform": [265, 269], "eventu": 265, "subset": [265, 266], "unitari": 265, "sine": 265, "cosin": 265, "sintransform": 265, "costransform": 265, "co": 265, "t_sin": 265, "t_co": 265, "cat_transform": 265, "mdp": 265, "convin": 265, "simple_rollout": 265, "_data": 265, "unexplor": 265, "assumpt": 265, "recreat": 265, "20_000": 265, "init_td": 265, "traj_return": 265, "last_reward": 265, "is_ipython": 265, "inlin": 265, "get_backend": 265, "ion": 265, "gcf": 265, "clear_output": 265, "625": 265, "9981": 265, "3292": 265, "8997": 265, "7032": 265, "696": 265, "8466": 265, "0202": 265, "807": 265, "2897": 265, "6322": 265, "0338": 265, "4880": 265, "504": 265, "1698": 265, "9674": 265, "188": 265, "0643": 265, "9703": 265, "127": 265, "3363": 265, "0207": 265, "048": 265, "3501": 265, "5927": 265, "5956": 265, "7665": 265, "732": 265, "3527": 265, "0354": 265, "2219": 265, "2999": 265, "8446": 265, "7448": 265, "961": 265, "7403": 265, "5034": 265, "411": 265, "9381": 265, "7937": 265, "619": 265, "8760": 265, "1022": 265, "6977": 265, "0331": 265, "987": 265, "8657": 265, "4508": 265, "919": 265, "9990": 265, "8757": 265, "921": 265, "9021": 265, "9585": 265, "518": 265, "6612": 265, "6255": 265, "648": 265, "7181": 265, "7913": 265, "089": 265, "0750": 265, "5913": 265, "596": 265, "8299": 265, "4152": 265, "9993": 265, "55it": 265, "4527": 265, "2555": 265, "551": 265, "3655": 265, "3651": 265, "6557": 265, "3352": 265, "9137": 265, "7104": 265, "8728": [265, 268], "8547": 265, "6320": 265, "871": 265, "7414": 265, "4717": 265, "211": 265, "7268": 265, "1833": 265, "6634": 265, "3899": 265, "6083": 265, "3508": 265, "5830": 265, "6835": 265, "8209": 265, "3483": 265, "7688": 265, "599": 265, "8693": 265, "3066": 265, "008": 265, "5190": 265, "2003": 265, "5916": 265, "0074": 265, "053": 265, "3596": 265, "3337": 265, "3250": 265, "4695": 265, "556": 265, "4941": 265, "0976": 265, "436": 265, "5073": 265, "6267": 265, "7900": 265, "7116": 265, "0649": 265, "206": 265, "9751": 265, "0522": 265, "0844": 265, "7387": 265, "845": 265, "2246": 265, "5251": 265, "3373": 265, "9479": 265, "2709": 265, "3046": 265, "3977": 265, "3212": 265, "642": 265, "3854": 265, "9375": 265, "837": 265, "6287": 265, "6260": 265, "7219": 265, "8860": 265, "6979": 265, "2648": 265, "4459": 265, "3500": 265, "3812": 265, "3433": 265, "222": 265, "4411": 265, "6690": 265, "3777": 265, "1538": 265, "8743": 265, "4807": 265, "22e": 265, "3545": 265, "0107": 265, "2255": 265, "3131": 265, "1588": 265, "4491": 265, "076": 265, "2076": 265, "831": 265, "7440": 265, "6878": 265, "102": [265, 268], "2344": 265, "1025": 265, "902": 265, "9207": 265, "3350": 265, "2087": 265, "2254": 265, "9928": 265, "3105": 265, "6532": 265, "8399": 265, "5124": 265, "8030": 265, "6501": 265, "4525": 265, "8541": 265, "8998": 265, "796e": 265, "2027": 265, "1556": 265, "3472": 265, "396": 265, "3959": 265, "7512": 265, "3240": 265, "8101": 265, "2314": 265, "4188": 265, "295": 265, "9779": 265, "5535": 265, "5627": 265, "6739": 265, "8125": 265, "6816": 265, "755": 265, "6262": 265, "0773": 265, "8989": 265, "1044": 265, "50it": 265, "4514": 265, "0407": 265, "54it": 265, "0062": 265, "4916": 265, "0404": 265, "3795": 265, "3577": 265, "122": [265, 269], "4141": 265, "134": 265, "9704": 265, "9697": 265, "1513": 265, "4501": 265, "285": 265, "2994": 265, "4022": 265, "579": 265, "2008": 265, "9061": 265, "0307": 265, "9752": 265, "5623": 265, "5012": 265, "2079": 265, "5742": 265, "125": 265, "2724": 265, "3876": 265, "2708": 265, "7700": 265, "058": 265, "1960": 265, "1463": 265, "3716": 265, "0288": 265, "2872": 265, "0933": 265, "9320": 265, "1261": 265, "1747": 265, "4484": 265, "0453": 265, "3530": 265, "209": 265, "103": 265, "3564": 265, "3918": 265, "104": 265, "4985": 265, "105": 265, "5372": 265, "6419": 265, "238": 265, "4172": 265, "1033": 265, "107": 265, "5129": 265, "1738": 265, "982": 265, "108": [265, 267], "2507": 265, "6379": 265, "109": 265, "2202": 265, "9865": 265, "110": 265, "6413": 265, "0470": 265, "111": 265, "7870": 265, "4711": 265, "386": 265, "112": 265, "8113": 265, "5438": 265, "113": 265, "7211": 265, "2379": 265, "054": 265, "4828": 265, "5023": 265, "115": 265, "9169": 265, "8205": 265, "171": 265, "0791": 265, "4240": 265, "0138": 265, "3126": 265, "651": 265, "118": 265, "6676": 265, "3220": 265, "119": 265, "0057": 265, "120": 265, "4148": 265, "9243": 265, "121": [265, 269], "2873": 265, "2469": 265, "1979": 265, "1586": 265, "123": 265, "6911": 265, "8230": 265, "124": 265, "7729": 265, "9686": 265, "126": 265, "2032": 265, "0313": 265, "656": 265, "9053": 265, "4081": 265, "9441": 265, "3413": 265, "5864": 265, "006": 265, "129": 265, "0038": 265, "5304": 265, "7869": 265, "2975": 265, "131": 265, "7712": 265, "1618": 265, "132": 265, "7366": 265, "133": 265, "4165": 265, "0684": 265, "188e": 265, "8963": 265, "1896": 265, "135": 265, "7390": 265, "136": 265, "9629": 265, "9319": 265, "169": 265, "137": 265, "138": 265, "7266": 265, "1210": 265, "139": 265, "8384": 265, "5619": 265, "0575": 265, "5144": 265, "8710": 265, "7681": 265, "142": 265, "8321": 265, "8516": 265, "945": 265, "143": 265, "0932": 265, "2351": 265, "773": 265, "0999": 265, "1744": 265, "145": 265, "2118": 265, "8154": 265, "146": 265, "7484": 265, "4035": 265, "147": 265, "5152": 265, "0088": 265, "148": 265, "5423": 265, "7286": 265, "149": 265, "7692": 265, "1465": 265, "150": 265, "0797": 265, "1392": 265, "151": 265, "9611": 265, "9006": 265, "7773": 265, "6767": 265, "4340": 265, "2778": 265, "154": 265, "5407": 265, "8302": 265, "595": 265, "155": 265, "4597": 265, "1627": 265, "156": 265, "7073": 265, "3922": 265, "157": 265, "7815": 265, "9858": 265, "158": 265, "6953": 265, "7051": 265, "159": 265, "6165": 265, "0605": 265, "3321": 265, "9367": 265, "161": 265, "3238": 265, "1825": 265, "162": 265, "6537": 265, "6867": 265, "8555": 265, "0956": 265, "164": 265, "3248": 265, "0159": 265, "165": 265, "2370": 265, "7480": 265, "166": [265, 268], "8993": 265, "8285": 265, "167": 265, "5465": 265, "3198": 265, "168": 265, "9088": 265, "3417": 265, "2199": 265, "2993": 265, "170": 265, "7042": 265, "1570": 265, "6141": 265, "284": 265, "172": 265, "9925": 265, "2946": 265, "173": 265, "5968": 265, "174": 265, "1712": 265, "175": 265, "6813": 265, "9453": 265, "176": 265, "5664": 265, "177": 265, "3610": 265, "9569": 265, "178": 265, "0602": 265, "9931": 265, "179": 265, "7767": 265, "8155": 265, "180": 265, "0498": 265, "7331": 265, "568": 265, "181": 265, "0781": 265, "1768": 265, "182": 265, "9178": 265, "6354": 265, "183": 265, "1244": 265, "8991": 265, "184": 265, "8262": 265, "2116": 265, "185": 265, "2508": 265, "7676": 265, "186": 265, "0428": [265, 269], "2621": 265, "187": 265, "0812": 265, "9802": 265, "199": 265, "9924": 265, "0870": 265, "189": 265, "3196": 265, "2363": 265, "190": 265, "9864": 265, "0182": 265, "191": 265, "0345": 265, "9245": 265, "9191": 265, "1752": 265, "491": 265, "193": 265, "1470": 265, "8907": 265, "257": 265, "194": 265, "1925": 265, "676": 265, "195": 265, "1042": 265, "5107": 265, "842": 265, "196": 265, "0179": 265, "2845": 265, "197": 265, "9784": 265, "0536": 265, "198": 265, "8914": 265, "3151": 265, "2599": 265, "7948": 265, "4072": 265, "201": 265, "5997": 265, "8325": 265, "202": 265, "8960": 265, "4193": 265, "203": 265, "0600": 265, "8070": 265, "204": 265, "0523": 265, "0025": 265, "205": 265, "5027": 265, "0148": 265, "0363": 265, "3280": 265, "207": 265, "1871": 265, "1571": 265, "208": 265, "8204": 265, "6373": 265, "9863": 265, "2612": 265, "0748": 265, "9467": 265, "8050": 265, "6954": 265, "291": 265, "212": 265, "4752": 265, "1008": 265, "016": 265, "213": 265, "8463": 265, "1723": 265, "214": 265, "6868": 265, "215": 265, "5380": 265, "1126": 265, "891": 265, "216": 265, "2657": 265, "2562": 265, "217": 265, "5513": 265, "0549": 265, "566": 265, "218": 265, "0561": 265, "1288": 265, "607": 265, "219": 265, "3470": 265, "0052": 265, "220": 265, "4686": 265, "0242": 265, "941": 265, "221": 265, "8202": 265, "9284": 265, "1519": 265, "799": 265, "223": 265, "9705": 265, "0056": 265, "027": 265, "9204": 265, "2680": 265, "991": 265, "225": 265, "0383": 265, "226": 265, "1037": 265, "7906": 265, "227": 265, "3671": 265, "5151": 265, "228": 265, "9767": 265, "9817": 265, "229": 265, "6483": 265, "0955": 265, "230": 265, "6856": 265, "5156": 265, "231": 265, "7647": 265, "4922": 265, "232": 265, "3724": 265, "4932": 265, "233": 265, "3750": 265, "873": 265, "234": 265, "7854": 265, "2685": 265, "839": 265, "235": 265, "2902": 265, "1122": 265, "618": 265, "236": 265, "0771": 265, "428": 265, "237": 265, "0086": 265, "324": 265, "3233": 265, "239": 265, "4450": 265, "1583": 265, "240": [265, 268, 269], "3740": 265, "241": 265, "2403": 265, "0024": 265, "569": 265, "242": 265, "1011": 265, "0112": 265, "251": 265, "243": 265, "6538": 265, "0162": 265, "9349": 265, "7379": 265, "245": 265, "8236": 265, "0259": 265, "8227": 265, "246": 265, "4424": 265, "6078": 265, "247": 265, "1075": 265, "2630": 265, "248": 265, "0820": 265, "684": 265, "249": 265, "2719": 265, "7146": 265, "364": 265, "250": 265, "4423": 265, "9679": 265, "4463": 265, "5761": 265, "252": 265, "0347": 265, "0947": 265, "253": 265, "4200": 265, "0638": 265, "254": 265, "4313": 265, "0403": 265, "074": 265, "6630": 265, "0239": 265, "1293": 265, "0677": 265, "638": 265, "8976": 265, "0517": 265, "092": 265, "258": 265, "1411": 265, "259": 265, "0897": 265, "0417": 265, "013": 265, "260": 265, "9226": 265, "0016": 265, "4881": 265, "261": 265, "1743": 265, "0167": 265, "262": 265, "1668": 265, "0481": 265, "263": 265, "1277": 265, "0092": 265, "8715": 265, "264": 265, "0661": 265, "0067": 265, "7747": 265, "265": 265, "2779": 265, "0430": 265, "9998": 265, "266": 265, "9067": 265, "0251": 265, "015": 265, "267": 265, "4558": 265, "0186": 265, "268": 265, "1901": 265, "1413": 265, "269": 265, "1785": 265, "0324": 265, "562": 265, "270": 265, "2759": 265, "826": 265, "271": 265, "1844": 265, "0168": 265, "3009": 265, "0362": 265, "273": 265, "7069": 265, "274": 265, "0793": 265, "5345": 265, "275": 265, "0513": 265, "0211": 265, "088": [265, 267, 268], "276": 265, "4400": 265, "0433": 265, "866": 265, "277": 265, "2846": 265, "0157": 265, "427": 265, "278": 265, "2392": 265, "1046": 265, "408": 265, "279": 265, "1373": 265, "5125": 265, "280": 265, "1448": 265, "0560": 265, "678": 265, "281": 265, "5425": 265, "0506": 265, "282": 265, "5210": 265, "0940": 265, "283": 265, "0558": 265, "876": 265, "2645": 265, "0130": 265, "5357": 265, "7399": 265, "8931": 265, "286": [265, 268], "2394": 265, "9803": 265, "287": 265, "6626": 265, "8780": 265, "2521": 265, "0027": 265, "289": 265, "1452": 265, "0534": 265, "877": 265, "290": 265, "2637": 265, "0477": 265, "519": 265, "2021": 265, "0382": 265, "742": 265, "292": 265, "1473": 265, "0208": 265, "293": 265, "3379": 265, "0450": 265, "294": 265, "2145": 265, "0270": 265, "3688": 265, "7527": 265, "296": 265, "8627": 265, "297": 265, "2180": 265, "0066": 265, "298": 265, "0373": 265, "0055": 265, "299": 265, "5879": 265, "9401": 265, "6223": 265, "8889": 265, "301": 265, "2797": 265, "1580": 265, "302": 265, "9936": 265, "4949": 265, "303": 265, "4579": 265, "9796": 265, "304": 265, "0070": 265, "9057": 265, "305": 265, "2540": 265, "746": 265, "306": 265, "5077": 265, "1406": 265, "7956": 265, "7657": 265, "308": 265, "9119": 265, "1691": 265, "309": 265, "2513": 265, "3036": 265, "310": 265, "0779": 265, "0079": 265, "8692": 265, "311": 265, "9439": 265, "0460": 265, "592": 265, "312": 265, "8099": 265, "0491": 265, "313": 265, "516": 265, "314": 265, "8046": 265, "0147": 265, "404": 265, "0122": 265, "0017": 265, "6365": 265, "316": 265, "1499": 265, "0109": 265, "717": 265, "317": 265, "0034": 265, "4328": 265, "318": 265, "1559": [265, 269], "0010": 265, "3445": 265, "319": 265, "9434": 265, "2862": 265, "9168": 265, "0020": 265, "7494": 265, "7114": 265, "004": 265, "2146": 265, "323": 265, "8207": 265, "0008": 265, "093": 265, "0291": 265, "0036": 265, "733": 265, "325": 265, "0031": 265, "0059": 265, "9693": 265, "4539": 265, "4015": 265, "2260": 265, "0032": 265, "8712": 265, "2449": 265, "0100": 265, "7291": 265, "329": 265, "0009": 265, "5744": 265, "330": 265, "9889": 265, "0205": 265, "563": 265, "9478": 265, "0578": 265, "3117": 265, "3474": 265, "3562": 265, "2034": 265, "0292": 265, "6824": 265, "2522": 265, "565": 265, "9085": 265, "0041": 265, "798": 265, "0409": 265, "0278": 265, "0081": 265, "077": 265, "1038": 265, "0184": 265, "5232": 265, "2485": 265, "948": 265, "3397": 265, "343": 265, "1390": 265, "1946": 265, "344": 265, "3108": 265, "9773": 265, "345": 265, "9628": 265, "8776": 265, "346": 265, "593": 265, "347": 265, "4281": 265, "3059": 265, "348": 265, "9241": 265, "0303": 265, "349": 265, "4747": 265, "3566": 265, "350": 265, "5687": 265, "1356": 265, "9195": 265, "2604": 265, "5555": 265, "353": 265, "4093": 265, "354": 265, "3465": 265, "0412": 265, "498": 265, "4612": 265, "0659": 265, "888": 265, "356": 265, "0915": 265, "6161": 265, "357": 265, "4199": 265, "6984": 265, "358": 265, "1434": 265, "5982": 265, "359": 265, "6443": 265, "8121": 265, "360": 265, "9721": 265, "559": 265, "361": 265, "5386": 265, "0893": 265, "362": 265, "1242": [265, 268], "0828": 265, "507": 265, "363": 265, "8708": 265, "548": 265, "9075": 265, "4399": 265, "365": 265, "6237": 265, "0761": 265, "929": 265, "366": 265, "1787": [265, 269], "1726": 265, "367": 265, "4725": 265, "368": 265, "0309": 265, "502": 265, "369": 265, "6823": 265, "0098": 265, "370": 265, "2397": 265, "371": 265, "4634": 265, "0099": 265, "699": 265, "9857": 265, "9962": 265, "373": 265, "9991": 265, "2484": 265, "374": 265, "8959": 265, "737": 265, "375": 265, "1581": 265, "376": 265, "8401": 265, "377": 265, "95it": 265, "9562": 265, "0272": 265, "378": 265, "9824": 265, "4239": 265, "379": 265, "2841": 265, "380": 265, "9922": 265, "4334": 265, "381": 265, "9613": 265, "6321": 265, "382": 265, "0516": 265, "8370": 265, "383": 265, "9549": 265, "7350": 265, "1794": 265, "4433": 265, "385": 265, "5432": 265, "738": 265, "9084": 265, "387": 265, "8010": 265, "388": 265, "9532": 265, "6513": 265, "389": 265, "8265": 265, "0729": 265, "390": 265, "8901": 265, "3721": 265, "8347": 265, "7444": 265, "392": 265, "6952": 265, "7052": 265, "393": 265, "4568": 265, "1346": 265, "394": 265, "2150": 265, "0438": 265, "943": 265, "395": 265, "2904": 265, "9225": 265, "3052": 265, "0075": 265, "8393": 265, "397": 265, "1268": 265, "398": 265, "4296": 265, "1481": 265, "399": 265, "5538": 265, "3458": 265, "2728": 265, "1060": 265, "401": 265, "7887": 265, "2564": 265, "402": 265, "9080": 265, "5411": 265, "403": 265, "1620": 265, "7441": 265, "7703": 265, "405": 265, "6127": 265, "3102": 265, "406": 265, "4175": 265, "5960": 265, "407": 265, "0043": 265, "8779": 265, "409": 265, "6928": 265, "410": 265, "2700": 265, "022": 265, "0357": 265, "0019": 265, "028": 265, "412": 265, "0935": 265, "0060": 265, "7993": 265, "413": 265, "9033": 265, "0065": 265, "6378": 265, "414": 265, "9597": 265, "415": 265, "0110": 265, "0005": 265, "4133": 265, "8585": 265, "0042": 265, "6746": 265, "417": 265, "7328": 265, "1174": 265, "4613": 265, "418": 265, "2442": 265, "0233": 265, "419": 265, "3477": 265, "018": 265, "420": 265, "6869": 265, "0289": 265, "4806": 265, "421": 265, "1528": 265, "0134": 265, "422": 265, "1684": 265, "2155": 265, "423": 265, "0116": 265, "5719": 265, "424": 265, "0214": 265, "2801": 265, "425": 265, "4760": 265, "0224": 265, "6168": 265, "426": 265, "2511": 265, "0045": 265, "1865": 265, "8317": 265, "1415": 265, "2207": 265, "0841": 265, "429": 265, "0849": 265, "985": 265, "430": 265, "27it": 265, "9495": 265, "0372": 265, "9485": 265, "431": 265, "9242": 265, "0039": 265, "4826": 265, "432": 265, "1635": 265, "433": 265, "9218": 265, "1003": 265, "434": 265, "7468": 265, "1522": 265, "435": 265, "7471": 265, "5852": 265, "9354": 265, "0013": 265, "037": 265, "437": 265, "3633": 265, "0187": 265, "061": 265, "438": 265, "7091": 265, "0212": 265, "439": 265, "0950": 265, "6344": 265, "440": 265, "1945": 265, "5790": 265, "441": 265, "6370": 265, "7047": 265, "442": 265, "9447": 265, "0551": 265, "443": 265, "0674": 265, "0146": 265, "046": 265, "444": 265, "0087": 265, "0247": 265, "445": 265, "2640": 265, "0129": 265, "8987": 265, "446": 265, "1670": 265, "5398": 265, "447": 265, "9180": 265, "7940": 265, "0588": 265, "449": 265, "0486": 265, "0029": 265, "1134": 265, "450": 265, "3267": 265, "5681": 265, "451": 265, "0151": 265, "452": 265, "6647": 265, "0316": 265, "453": 265, "5449": 265, "0209": 265, "097": 265, "454": 265, "9321": 265, "3687": 265, "953": 265, "455": 265, "9511": 265, "2701": 265, "456": 265, "0406": 265, "8281": 265, "457": 265, "0379": 265, "458": 265, "2470": 265, "0437": 265, "459": 265, "5843": 265, "0072": 265, "460": 265, "6838": 265, "3447": 265, "461": 265, "7313": 265, "0355": 265, "462": 265, "9268": 265, "0265": 265, "9834": 265, "463": 265, "8536": 265, "9786": 265, "464": 265, "0696": 265, "7232": 265, "465": 265, "9096": 265, "4422": 265, "466": 265, "3227": 265, "0026": 265, "467": 265, "9565": 265, "9563": 265, "9941": 265, "1284": 265, "469": 265, "1401": 265, "2850": 265, "470": 265, "1807": 265, "8859": 265, "471": 265, "0268": 265, "472": 265, "7436": 265, "0048": 265, "034": 265, "473": 265, "30it": 265, "7046": 265, "0352": 265, "474": 265, "2023": 265, "3258": 265, "515": 265, "475": 265, "0141": 265, "9798": 265, "476": 265, "4474": 265, "0912": 265, "477": 265, "9181": 265, "5476": 265, "478": 265, "1264": 265, "3269": 265, "479": 265, "0714": 265, "0030": 265, "5317": 265, "5477": 265, "0255": 265, "8628": 265, "481": 265, "1258": 265, "0015": 265, "482": 265, "9650": 265, "4266": 265, "483": 265, "8081": 265, "0004": 265, "4455": 265, "484": 265, "5812": 265, "1719": 265, "485": 265, "1741": 265, "486": 265, "1595": 265, "0089": 265, "936": 265, "487": 265, "1667": 265, "488": 265, "3824": 265, "0093": 265, "6528": 265, "489": 265, "1727": 265, "1435": 265, "059": 265, "490": 265, "0916": 265, "0018": 265, "4518": 265, "9310": 265, "0006": 265, "3553": 265, "492": 265, "9972": 265, "4515": 265, "493": 265, "9493": 265, "8759": 265, "494": 265, "3700": 265, "495": 265, "0269": 265, "4107": 265, "496": 265, "6094": 265, "497": 265, "9116": 265, "1518": 265, "6022": 265, "0047": 265, "2026": 265, "499": 265, "8009": 265, "0007": 265, "1845": 265, "6948": 265, "501": 265, "0971": 265, "0387": 265, "951": 265, "2885": 265, "503": 265, "0894": 265, "2552": 265, "0191": 265, "505": 265, "8276": 265, "506": 265, "9520": 265, "0037": 265, "5835": 265, "0374": 265, "7556": 265, "508": 265, "0579": 265, "0399": 265, "509": 265, "0094": 265, "7127": 265, "510": 265, "0119": 265, "0121": 265, "511": 265, "6013": 265, "0220": 265, "8064": 265, "2684": 265, "8179": 265, "513": 265, "4730": 265, "0046": 265, "5481": 265, "514": 265, "0234": 265, "4331": 265, "8143": 265, "2915": [265, 268], "9051": 265, "0353": 265, "9127": 265, "517": 265, "0527": 265, "6465": 265, "7579": 265, "2010": 265, "3927": 265, "5383": 265, "862": 265, "520": 265, "7386": 265, "1014": 265, "521": 265, "9163": 265, "4487": 265, "522": 265, "5626": 265, "523": 265, "2899": 265, "0113": 265, "524": 265, "6441": 265, "0044": 265, "3965": 265, "525": 265, "5001": 265, "2060": 265, "526": 265, "8905": 265, "4168": 265, "527": 265, "4458": 265, "0012": 265, "051": 265, "528": 265, "9446": 265, "3096": 265, "529": 265, "2399": 265, "1971": 265, "530": 265, "4471": 265, "1270": 265, "0023": 265, "532": 265, "533": 265, "6550": 265, "583": 265, "534": 265, "1092": 265, "0049": 265, "787": 265, "535": 265, "7641": 265, "6674": 265, "536": 265, "0083": 265, "6375": 265, "537": 265, "1713": 265, "4933": 265, "538": 265, "3557": 265, "3964": 265, "539": 265, "0040": 265, "4129": 265, "540": 265, "7999": 265, "3176": 265, "541": 265, "2613": 265, "4742": 265, "542": 265, "1826": 265, "934": 265, "543": 265, "3158": 265, "3686": 265, "4047": 265, "545": 265, "7943": 265, "0902": 265, "546": 265, "3889": 265, "547": 265, "4309": 265, "4762": 265, "1662": 265, "9526": 265, "549": 265, "2170": 265, "0520": 265, "4367": 265, "550": 265, "4584": 265, "6931": 265, "0306": 265, "752": 265, "552": 265, "9054": 265, "2062": 265, "553": 265, "9523": 265, "4382": 265, "554": 265, "3534": 265, "0136": 265, "663": 265, "555": 265, "0279": 265, "0171": 265, "5679": 265, "0145": 265, "4652": 265, "557": 265, "1205": 265, "0091": 265, "4838": 265, "0630": 265, "1721": 265, "3604": 265, "1695": 265, "561": 265, "6994": 265, "3646": 265, "0192": 265, "4547": 265, "564": 265, "2580": 265, "2356": 265, "1397": 265, "8400": 265, "7309": 265, "567": 265, "0101": 265, "8539": 265, "1256": 265, "4851": 265, "0284": 265, "570": 265, "2575": 265, "571": 265, "3996": 265, "572": 265, "2542": 265, "4089": 265, "573": 265, "5782": 265, "0071": 265, "7487": 265, "574": 265, "3665": 265, "0050": 265, "7797": 265, "575": 265, "5660": 265, "1355": 265, "932": 265, "8266": 265, "577": 265, "3782": 265, "743": [265, 268], "578": 265, "1228": 265, "2931": 265, "043": 265, "6242": 265, "580": 265, "7491": 265, "6910": 265, "581": 265, "2258": 265, "0262": 265, "582": 265, "2386": 265, "0249": 265, "816": 265, "2947": 265, "2122": 265, "584": 265, "0096": 265, "0124": 265, "585": 265, "0156": 265, "586": 265, "3268": 265, "0369": 265, "6409": 265, "4034": 265, "4395": 265, "588": 265, "8407": 265, "4432": 265, "589": 265, "0069": 265, "3628": 265, "590": 265, "3101": 265, "591": 265, "3404": 265, "2964": 265, "594": 265, "8374": 265, "4346": 265, "7782": 265, "3826": 265, "7098": 265, "597": 265, "8646": 265, "0526": 265, "598": 265, "7452": 265, "9579": 265, "0991": 265, "889": 265, "600": 265, "0332": 265, "0199": 265, "601": 265, "602": 265, "7237": 265, "3591": 265, "603": 265, "3797": 265, "0022": 265, "6776": 265, "604": 265, "9337": 265, "1918": 265, "605": 265, "6301": 265, "606": 265, "5972": 265, "5044": 265, "2131": 265, "664": 265, "609": 265, "1180": 265, "6142": 265, "610": 265, "5289": 265, "6693": 265, "611": 265, "4947": 265, "612": 265, "2196": 265, "4060": 265, "613": 265, "7377": 265, "3732": 265, "614": 265, "4574": 265, "0997": 265, "3581": 265, "615": 265, "9247": 265, "3012": 265, "616": 265, "3761": 265, "5136": 265, "617": 265, "4771": 265, "894": 265, "0177": [265, 269], "3644": 265, "620": 265, "5914": 265, "621": 265, "4353": 265, "7637": 265, "622": 265, "7577": 265, "1609": 265, "809": 265, "623": 265, "8873": 265, "624": 265, "6568": 265, "5234": 265, "subject": 265, "saw": 265, "explain": 266, "fine": 266, "semat": 266, "r3mtransform": 266, "sake": 266, "embodi": 266, "ai": 266, "env_transform": [266, 269], "s3": 266, "amazonaw": 266, "r3m_50": 266, "374m": 266, "4m": 266, "126mb": 266, "8m": 266, "144mb": 266, "9m": 266, "129mb": 266, "108mb": 266, "2m": 266, "2mb": 266, "1mb": 266, "3m": 266, "3mb": 266, "115m": 266, "131m": 266, "147m": 266, "102mb": 266, "164m": 266, "101mb": 266, "180m": 266, "0mb": 266, "190m": 266, "200m": 266, "212m": 266, "9mb": 266, "222m": 266, "4mb": 266, "230m": 266, "244m": 266, "253m": 266, "262m": 266, "277m": 266, "284m": 266, "295m": 266, "310m": 266, "318m": 266, "6mb": 266, "328m": 266, "5mb": 266, "344m": 266, "7mb": 266, "360m": 266, "100mb": 266, "371m": 266, "wiser": 266, "again": [266, 269], "conclud": 266, "_storag": 266, "045": [266, 267], "2043": [266, 267], "pretrained_model": [266, 267], "761": 267, "torchrl_demo": [267, 268], "4264": 267, "2547": 267, "torchrl_env": [267, 269], "793": [267, 269], "4261": 267, "demo": 268, "icml": 268, "dai": 268, "vmoen": 268, "fb": 268, "question": 268, "team": 268, "invest": 268, "platform": 268, "media": 268, "truli": 268, "predominantli": 268, "tensordict1": 268, "tensordict2": 268, "tensordict_sampl": 268, "_sampler": 268, "_sum_tre": 268, "modulenotfounderror": 268, "28791671991348267": 268, "06984968483448029": 268, "gym_env": 268, "noopresetenv": [268, 269], "lazyconv2d": 268, "6400": 268, "backbone_modul": 268, "actor_modul": 268, "params_expand": 268, "tensordict_exp": 268, "base_modul": 268, "0137": 268, "1524": 268, "0641": 268, "copybackward": 268, "1335": 268, "9833": 268, "3497": 268, "6889": 268, "6433": 268, "clampbackward1": 268, "1131": 268, "1761": 268, "3425": 268, "2665": 268, "6207": 268, "1441": 268, "2375": 268, "1372": 268, "3810": 268, "meanbackward1": 268, "roughli": 268, "tensordicts_prealloc": 268, "tensordicts_stack": 268, "tensordict_rollout": [268, 269], "disclaim": 268, "concatmodul": 268, "loss_td": 268, "3391": 268, "_default_get": 268, "1012": 268, "keyerror": 268, "year": 268, "roadmap": 268, "compris": 268, "contributor": 268, "curiou": 268, "feedback": 268, "nascent": 268, "4265": 268, "supervis": 269, "unsupervis": 269, "rom": 269, "licens": 269, "pygam": 269, "unifi": 269, "insid": 269, "_build_env": 269, "sphinx_gallery_start_ignor": 269, "filterwarn": 269, "sphinx_gallery_end_ignor": 269, "adventur": 269, "ram": 269, "airraid": 269, "alien": 269, "amidar": 269, "assault": 269, "8545": 269, "exectut": 269, "reproduct": 269, "tensordict_tprim": 269, "imshow": 269, "axesimag": 269, "0x7f704037a0a0": 269, "inconsist": 269, "swingup": 269, "swingup_spars": 269, "ball_in_cup": 269, "catch": 269, "balance_spars": 269, "three_pol": 269, "two_pol": 269, "finger": 269, "turn_easi": 269, "turn_hard": 269, "fish": 269, "swim": 269, "hopper": 269, "hop": 269, "run_pure_st": 269, "bring_bal": 269, "bring_peg": 269, "insert_bal": 269, "insert_peg": 269, "point_mass": 269, "reacher": 269, "swimmer": 269, "swimmer6": 269, "swimmer15": 269, "walker": 269, "dog": 269, "trot": 269, "humanoid_cmu": 269, "lqr": 269, "lqr_2_1": 269, "lqr_6_2": 269, "quadrup": 269, "escap": 269, "stacker": 269, "stack_2": 269, "stack_4": 269, "wrapper1": 269, "wrapper2": 269, "obviou": 269, "truth": 269, "env0": 269, "env_transformed_bi": 269, "stanc": 269, "transformeddistribut": 269, "base_dist": 269, "concat": 269, "mofidi": 269, "transformedenviron": 269, "moderet": 269, "computation": 269, "legitim": 269, "incom": 269, "amongst": 269, "wor": 269, "convention": 269, "scope": 269, "markovian": 269, "3288080526": 269, "sometim": 269, "constain": 269, "foo": 269, "bar_": 269, "get_someth": 269, "bar_7e9e86d": 269, "dc39": 269, "aargh": 269, "foo_list": 269, "vec_env": 269, "_dispatch_caller_parallel": 269, "0x7f7030f48580": 269, "bar_85d9385": 269, "a84f": 269, "bar_85d646bc": 269, "b34b": 269, "bar_85dd6e6a": 269, "8f58": 269, "parallen": 269, "carefulli": 269, "commonli": 269, "approxim": 269, "particularili": 269, "evolv": 269, "steadi": 269, "approx": 269, "0169": 269, "2906": 269, "1735": 269, "_extra_st": 269, "observation_ssq": 269, "observation_sum": 269, "0637": 269, "0545": 269, "0683": 269, "2574": 269, "dispach": 269, "absor": 269}, "objects": {"torchrl._utils": [[11, 0, 1, "", "implement_for"]], "torchrl.collectors.collectors": [[12, 0, 1, "", "DataCollectorBase"], [13, 0, 1, "", "MultiSyncDataCollector"], [14, 0, 1, "", "MultiaSyncDataCollector"], [15, 0, 1, "", "RandomPolicy"], [16, 0, 1, "", "SyncDataCollector"], [17, 0, 1, "", "aSyncDataCollector"]], "torchrl.collectors.collectors.DataCollectorBase": [[12, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.MultiSyncDataCollector": [[13, 1, 1, "", "load_state_dict"], [13, 1, 1, "", "reset"], [13, 1, 1, "", "set_seed"], [13, 1, 1, "", "shutdown"], [13, 1, 1, "", "state_dict"], [13, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.MultiaSyncDataCollector": [[14, 1, 1, "", "load_state_dict"], [14, 1, 1, "", "reset"], [14, 1, 1, "", "set_seed"], [14, 1, 1, "", "shutdown"], [14, 1, 1, "", "state_dict"], [14, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.SyncDataCollector": [[16, 1, 1, "", "iterator"], [16, 1, 1, "", "load_state_dict"], [16, 1, 1, "", "reset"], [16, 1, 1, "", "rollout"], [16, 1, 1, "", "set_seed"], [16, 1, 1, "", "shutdown"], [16, 1, 1, "", "state_dict"], [16, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.aSyncDataCollector": [[17, 1, 1, "", "load_state_dict"], [17, 1, 1, "", "reset"], [17, 1, 1, "", "set_seed"], [17, 1, 1, "", "shutdown"], [17, 1, 1, "", "state_dict"], [17, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed": [[18, 0, 1, "", "DistributedDataCollector"], [19, 0, 1, "", "DistributedSyncDataCollector"], [20, 0, 1, "", "RPCDataCollector"], [21, 0, 1, "", "RayCollector"], [22, 0, 1, "", "submitit_delayed_launcher"]], "torchrl.collectors.distributed.DistributedDataCollector": [[18, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.DistributedSyncDataCollector": [[19, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.RPCDataCollector": [[20, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.RayCollector": [[21, 1, 1, "", "add_collectors"], [21, 1, 1, "", "load_state_dict"], [21, 1, 1, "", "local_policy"], [21, 1, 1, "", "remote_collectors"], [21, 1, 1, "", "set_seed"], [21, 1, 1, "", "shutdown"], [21, 1, 1, "", "state_dict"], [21, 1, 1, "", "stop_remote_collectors"], [21, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.utils": [[23, 2, 1, "", "split_trajectories"]], "torchrl.data": [[24, 0, 1, "", "BinaryDiscreteTensorSpec"], [25, 0, 1, "", "BoundedTensorSpec"], [26, 0, 1, "", "CompositeSpec"], [27, 0, 1, "", "DiscreteTensorSpec"], [28, 0, 1, "", "MultiDiscreteTensorSpec"], [29, 0, 1, "", "MultiOneHotDiscreteTensorSpec"], [30, 0, 1, "", "MultiStep"], [31, 0, 1, "", "OneHotDiscreteTensorSpec"], [32, 0, 1, "", "PrioritizedReplayBuffer"], [33, 0, 1, "", "ReplayBuffer"], [34, 0, 1, "", "TensorDictPrioritizedReplayBuffer"], [35, 0, 1, "", "TensorDictReplayBuffer"], [36, 0, 1, "", "TensorSpec"], [37, 0, 1, "", "UnboundedContinuousTensorSpec"], [38, 0, 1, "", "UnboundedDiscreteTensorSpec"]], "torchrl.data.BinaryDiscreteTensorSpec": [[24, 1, 1, "", "assert_is_in"], [24, 1, 1, "", "encode"], [24, 1, 1, "", "expand"], [24, 1, 1, "", "implements_for_spec"], [24, 1, 1, "", "index"], [24, 1, 1, "", "is_in"], [24, 1, 1, "", "project"], [24, 1, 1, "", "rand"], [24, 1, 1, "", "squeeze"], [24, 1, 1, "", "to_numpy"], [24, 1, 1, "", "to_one_hot"], [24, 1, 1, "", "to_one_hot_spec"], [24, 1, 1, "", "type_check"], [24, 1, 1, "", "zero"]], "torchrl.data.BoundedTensorSpec": [[25, 1, 1, "", "assert_is_in"], [25, 1, 1, "", "encode"], [25, 1, 1, "", "expand"], [25, 1, 1, "", "implements_for_spec"], [25, 1, 1, "", "index"], [25, 1, 1, "", "is_in"], [25, 1, 1, "", "project"], [25, 1, 1, "", "rand"], [25, 1, 1, "", "squeeze"], [25, 1, 1, "", "to_numpy"], [25, 1, 1, "", "type_check"], [25, 1, 1, "", "zero"]], "torchrl.data.CompositeSpec": [[26, 1, 1, "", "assert_is_in"], [26, 1, 1, "", "encode"], [26, 1, 1, "", "expand"], [26, 1, 1, "", "implements_for_spec"], [26, 1, 1, "", "index"], [26, 1, 1, "", "is_in"], [26, 1, 1, "", "items"], [26, 1, 1, "", "keys"], [26, 1, 1, "", "project"], [26, 1, 1, "", "rand"], [26, 1, 1, "", "squeeze"], [26, 1, 1, "", "to_numpy"], [26, 1, 1, "", "type_check"], [26, 1, 1, "", "values"], [26, 1, 1, "", "zero"]], "torchrl.data.DiscreteTensorSpec": [[27, 1, 1, "", "assert_is_in"], [27, 1, 1, "", "encode"], [27, 1, 1, "", "expand"], [27, 1, 1, "", "implements_for_spec"], [27, 1, 1, "", "index"], [27, 1, 1, "", "is_in"], [27, 1, 1, "", "project"], [27, 1, 1, "", "rand"], [27, 1, 1, "", "squeeze"], [27, 1, 1, "", "to_numpy"], [27, 1, 1, "", "to_one_hot"], [27, 1, 1, "", "to_one_hot_spec"], [27, 1, 1, "", "type_check"], [27, 1, 1, "", "zero"]], "torchrl.data.MultiDiscreteTensorSpec": [[28, 1, 1, "", "assert_is_in"], [28, 1, 1, "", "encode"], [28, 1, 1, "", "expand"], [28, 1, 1, "", "implements_for_spec"], [28, 1, 1, "", "index"], [28, 1, 1, "", "is_in"], [28, 1, 1, "", "project"], [28, 1, 1, "", "rand"], [28, 1, 1, "", "squeeze"], [28, 1, 1, "", "to_numpy"], [28, 1, 1, "", "to_one_hot"], [28, 1, 1, "", "to_one_hot_spec"], [28, 1, 1, "", "type_check"], [28, 1, 1, "", "zero"]], "torchrl.data.MultiOneHotDiscreteTensorSpec": [[29, 1, 1, "", "assert_is_in"], [29, 1, 1, "", "encode"], [29, 1, 1, "", "expand"], [29, 1, 1, "", "implements_for_spec"], [29, 1, 1, "", "index"], [29, 1, 1, "", "is_in"], [29, 1, 1, "", "project"], [29, 1, 1, "", "rand"], [29, 1, 1, "", "squeeze"], [29, 1, 1, "", "to_categorical"], [29, 1, 1, "", "to_categorical_spec"], [29, 1, 1, "", "to_numpy"], [29, 1, 1, "", "type_check"], [29, 1, 1, "", "zero"]], "torchrl.data.MultiStep": [[30, 1, 1, "", "add_module"], [30, 1, 1, "", "apply"], [30, 1, 1, "", "bfloat16"], [30, 1, 1, "", "buffers"], [30, 1, 1, "", "children"], [30, 1, 1, "", "cpu"], [30, 1, 1, "", "cuda"], [30, 1, 1, "", "double"], [30, 1, 1, "", "eval"], [30, 1, 1, "", "extra_repr"], [30, 1, 1, "", "float"], [30, 1, 1, "", "forward"], [30, 1, 1, "", "get_buffer"], [30, 1, 1, "", "get_extra_state"], [30, 1, 1, "", "get_parameter"], [30, 1, 1, "", "get_submodule"], [30, 1, 1, "", "half"], [30, 1, 1, "", "ipu"], [30, 1, 1, "", "load_state_dict"], [30, 1, 1, "", "modules"], [30, 1, 1, "", "named_buffers"], [30, 1, 1, "", "named_children"], [30, 1, 1, "", "named_modules"], [30, 1, 1, "", "named_parameters"], [30, 1, 1, "", "parameters"], [30, 1, 1, "", "register_backward_hook"], [30, 1, 1, "", "register_buffer"], [30, 1, 1, "", "register_forward_hook"], [30, 1, 1, "", "register_forward_pre_hook"], [30, 1, 1, "", "register_full_backward_hook"], [30, 1, 1, "", "register_full_backward_pre_hook"], [30, 1, 1, "", "register_load_state_dict_post_hook"], [30, 1, 1, "", "register_module"], [30, 1, 1, "", "register_parameter"], [30, 1, 1, "", "register_state_dict_pre_hook"], [30, 1, 1, "", "requires_grad_"], [30, 1, 1, "", "set_extra_state"], [30, 1, 1, "", "share_memory"], [30, 1, 1, "", "state_dict"], [30, 1, 1, "", "to"], [30, 1, 1, "", "to_empty"], [30, 1, 1, "", "train"], [30, 1, 1, "", "type"], [30, 1, 1, "", "xpu"], [30, 1, 1, "", "zero_grad"]], "torchrl.data.OneHotDiscreteTensorSpec": [[31, 1, 1, "", "assert_is_in"], [31, 1, 1, "", "encode"], [31, 1, 1, "", "expand"], [31, 1, 1, "", "implements_for_spec"], [31, 1, 1, "", "index"], [31, 1, 1, "", "is_in"], [31, 1, 1, "", "project"], [31, 1, 1, "", "rand"], [31, 1, 1, "", "squeeze"], [31, 1, 1, "", "to_categorical"], [31, 1, 1, "", "to_categorical_spec"], [31, 1, 1, "", "to_numpy"], [31, 1, 1, "", "type_check"], [31, 1, 1, "", "zero"]], "torchrl.data.PrioritizedReplayBuffer": [[32, 1, 1, "", "add"], [32, 1, 1, "", "append_transform"], [32, 1, 1, "", "extend"], [32, 1, 1, "", "insert_transform"], [32, 1, 1, "", "sample"]], "torchrl.data.ReplayBuffer": [[33, 1, 1, "", "add"], [33, 1, 1, "", "append_transform"], [33, 1, 1, "", "extend"], [33, 1, 1, "", "insert_transform"], [33, 1, 1, "", "sample"]], "torchrl.data.TensorDictPrioritizedReplayBuffer": [[34, 1, 1, "", "add"], [34, 1, 1, "", "append_transform"], [34, 1, 1, "", "extend"], [34, 1, 1, "", "insert_transform"], [34, 1, 1, "", "sample"]], "torchrl.data.TensorDictReplayBuffer": [[35, 1, 1, "", "add"], [35, 1, 1, "", "append_transform"], [35, 1, 1, "", "extend"], [35, 1, 1, "", "insert_transform"], [35, 1, 1, "", "sample"]], "torchrl.data.TensorSpec": [[36, 1, 1, "", "assert_is_in"], [36, 1, 1, "", "encode"], [36, 1, 1, "", "expand"], [36, 1, 1, "", "implements_for_spec"], [36, 1, 1, "", "index"], [36, 1, 1, "", "is_in"], [36, 1, 1, "", "project"], [36, 1, 1, "", "rand"], [36, 1, 1, "", "squeeze"], [36, 1, 1, "", "to_numpy"], [36, 1, 1, "", "type_check"], [36, 1, 1, "", "zero"]], "torchrl.data.UnboundedContinuousTensorSpec": [[37, 1, 1, "", "assert_is_in"], [37, 1, 1, "", "encode"], [37, 1, 1, "", "expand"], [37, 1, 1, "", "implements_for_spec"], [37, 1, 1, "", "index"], [37, 1, 1, "", "is_in"], [37, 1, 1, "", "project"], [37, 1, 1, "", "rand"], [37, 1, 1, "", "squeeze"], [37, 1, 1, "", "to_numpy"], [37, 1, 1, "", "type_check"], [37, 1, 1, "", "zero"]], "torchrl.data.UnboundedDiscreteTensorSpec": [[38, 1, 1, "", "assert_is_in"], [38, 1, 1, "", "encode"], [38, 1, 1, "", "expand"], [38, 1, 1, "", "implements_for_spec"], [38, 1, 1, "", "index"], [38, 1, 1, "", "is_in"], [38, 1, 1, "", "project"], [38, 1, 1, "", "rand"], [38, 1, 1, "", "squeeze"], [38, 1, 1, "", "to_numpy"], [38, 1, 1, "", "type_check"], [38, 1, 1, "", "zero"]], "torchrl.data.datasets": [[39, 0, 1, "", "D4RLExperienceReplay"], [40, 0, 1, "", "OpenMLExperienceReplay"]], "torchrl.data.datasets.D4RLExperienceReplay": [[39, 1, 1, "", "add"], [39, 1, 1, "", "append_transform"], [39, 1, 1, "", "extend"], [39, 1, 1, "", "insert_transform"], [39, 1, 1, "", "sample"]], "torchrl.data.datasets.OpenMLExperienceReplay": [[40, 1, 1, "", "add"], [40, 1, 1, "", "append_transform"], [40, 1, 1, "", "extend"], [40, 1, 1, "", "insert_transform"], [40, 1, 1, "", "sample"]], "torchrl.data.replay_buffers": [[41, 0, 1, "", "LazyMemmapStorage"], [42, 0, 1, "", "LazyTensorStorage"], [43, 0, 1, "", "ListStorage"], [44, 0, 1, "", "PrioritizedSampler"], [45, 0, 1, "", "RandomSampler"], [46, 0, 1, "", "RoundRobinWriter"], [47, 0, 1, "", "Sampler"], [48, 0, 1, "", "SamplerWithoutReplacement"], [49, 0, 1, "", "Storage"], [50, 0, 1, "", "Writer"]], "torchrl.data.replay_buffers.LazyMemmapStorage": [[41, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.LazyTensorStorage": [[42, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.ListStorage": [[43, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.PrioritizedSampler": [[44, 1, 1, "", "update_priority"]], "torchrl.data.replay_buffers.RoundRobinWriter": [[46, 1, 1, "", "add"], [46, 1, 1, "", "extend"]], "torchrl.data.replay_buffers.Storage": [[49, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.Writer": [[50, 1, 1, "", "add"], [50, 1, 1, "", "extend"]], "torchrl.envs": [[51, 0, 1, "", "EnvBase"], [52, 0, 1, "", "EnvCreator"], [53, 0, 1, "", "EnvMetaData"], [54, 0, 1, "", "GymLikeEnv"], [55, 2, 1, "", "ModelBasedEnvBase"], [56, 0, 1, "", "MultiThreadedEnv"], [57, 0, 1, "", "ParallelEnv"], [58, 0, 1, "", "SerialEnv"], [55, 1, 1, "", "rand_step"], [55, 1, 1, "", "reset"], [55, 1, 1, "", "rollout"], [55, 1, 1, "", "set_seed"], [55, 1, 1, "", "step"]], "torchrl.envs.EnvBase": [[51, 1, 1, "", "add_module"], [51, 1, 1, "", "apply"], [51, 3, 1, "", "batch_locked"], [51, 1, 1, "", "bfloat16"], [51, 1, 1, "", "buffers"], [51, 1, 1, "", "children"], [51, 1, 1, "", "cpu"], [51, 1, 1, "", "cuda"], [51, 1, 1, "", "double"], [51, 1, 1, "", "eval"], [51, 1, 1, "", "extra_repr"], [51, 1, 1, "", "fake_tensordict"], [51, 1, 1, "", "float"], [51, 1, 1, "", "forward"], [51, 1, 1, "", "get_buffer"], [51, 1, 1, "", "get_extra_state"], [51, 1, 1, "", "get_parameter"], [51, 1, 1, "", "get_submodule"], [51, 1, 1, "", "half"], [51, 1, 1, "", "ipu"], [51, 1, 1, "", "load_state_dict"], [51, 1, 1, "", "modules"], [51, 1, 1, "", "named_buffers"], [51, 1, 1, "", "named_children"], [51, 1, 1, "", "named_modules"], [51, 1, 1, "", "named_parameters"], [51, 1, 1, "", "parameters"], [51, 1, 1, "", "rand_action"], [51, 1, 1, "id0", "rand_step"], [51, 1, 1, "", "register_backward_hook"], [51, 1, 1, "", "register_buffer"], [51, 1, 1, "", "register_forward_hook"], [51, 1, 1, "", "register_forward_pre_hook"], [51, 1, 1, "", "register_full_backward_hook"], [51, 1, 1, "", "register_full_backward_pre_hook"], [51, 1, 1, "", "register_load_state_dict_post_hook"], [51, 1, 1, "", "register_module"], [51, 1, 1, "", "register_parameter"], [51, 1, 1, "", "register_state_dict_pre_hook"], [51, 1, 1, "", "requires_grad_"], [51, 1, 1, "id1", "reset"], [51, 1, 1, "id2", "rollout"], [51, 1, 1, "", "set_extra_state"], [51, 1, 1, "id3", "set_seed"], [51, 1, 1, "", "share_memory"], [51, 3, 1, "", "specs"], [51, 1, 1, "", "state_dict"], [51, 1, 1, "id4", "step"], [51, 1, 1, "", "to"], [51, 1, 1, "", "to_empty"], [51, 1, 1, "", "train"], [51, 1, 1, "", "type"], [51, 1, 1, "", "xpu"], [51, 1, 1, "", "zero_grad"]], "torchrl.envs.GymLikeEnv": [[54, 1, 1, "", "add_module"], [54, 1, 1, "", "apply"], [54, 3, 1, "", "batch_locked"], [54, 1, 1, "", "bfloat16"], [54, 1, 1, "", "buffers"], [54, 1, 1, "", "children"], [54, 1, 1, "", "close"], [54, 1, 1, "", "cpu"], [54, 1, 1, "", "cuda"], [54, 1, 1, "", "double"], [54, 1, 1, "", "eval"], [54, 1, 1, "", "extra_repr"], [54, 1, 1, "", "fake_tensordict"], [54, 1, 1, "", "float"], [54, 1, 1, "", "forward"], [54, 1, 1, "", "get_buffer"], [54, 1, 1, "", "get_extra_state"], [54, 1, 1, "", "get_parameter"], [54, 1, 1, "", "get_submodule"], [54, 1, 1, "", "half"], [54, 1, 1, "", "ipu"], [54, 1, 1, "", "load_state_dict"], [54, 1, 1, "", "modules"], [54, 1, 1, "", "named_buffers"], [54, 1, 1, "", "named_children"], [54, 1, 1, "", "named_modules"], [54, 1, 1, "", "named_parameters"], [54, 1, 1, "", "parameters"], [54, 1, 1, "", "rand_action"], [54, 1, 1, "", "rand_step"], [54, 1, 1, "", "read_action"], [54, 1, 1, "", "read_done"], [54, 1, 1, "", "read_obs"], [54, 1, 1, "", "read_reward"], [54, 1, 1, "", "register_backward_hook"], [54, 1, 1, "", "register_buffer"], [54, 1, 1, "", "register_forward_hook"], [54, 1, 1, "", "register_forward_pre_hook"], [54, 1, 1, "", "register_full_backward_hook"], [54, 1, 1, "", "register_full_backward_pre_hook"], [54, 1, 1, "", "register_load_state_dict_post_hook"], [54, 1, 1, "", "register_module"], [54, 1, 1, "", "register_parameter"], [54, 1, 1, "", "register_state_dict_pre_hook"], [54, 1, 1, "", "requires_grad_"], [54, 1, 1, "", "reset"], [54, 1, 1, "", "rollout"], [54, 1, 1, "", "set_extra_state"], [54, 1, 1, "", "set_info_dict_reader"], [54, 1, 1, "", "set_seed"], [54, 1, 1, "", "share_memory"], [54, 3, 1, "", "specs"], [54, 1, 1, "", "state_dict"], [54, 1, 1, "", "step"], [54, 1, 1, "", "to"], [54, 1, 1, "", "to_empty"], [54, 1, 1, "", "train"], [54, 1, 1, "", "type"], [54, 1, 1, "", "xpu"], [54, 1, 1, "", "zero_grad"]], "torchrl.envs.MultiThreadedEnv": [[56, 1, 1, "", "add_module"], [56, 1, 1, "", "apply"], [56, 3, 1, "", "batch_locked"], [56, 1, 1, "", "bfloat16"], [56, 1, 1, "", "buffers"], [56, 1, 1, "", "children"], [56, 1, 1, "", "close"], [56, 1, 1, "", "cpu"], [56, 1, 1, "", "cuda"], [56, 1, 1, "", "double"], [56, 1, 1, "", "eval"], [56, 1, 1, "", "extra_repr"], [56, 1, 1, "", "fake_tensordict"], [56, 1, 1, "", "float"], [56, 1, 1, "", "forward"], [56, 1, 1, "", "get_buffer"], [56, 1, 1, "", "get_extra_state"], [56, 1, 1, "", "get_parameter"], [56, 1, 1, "", "get_submodule"], [56, 1, 1, "", "half"], [56, 1, 1, "", "ipu"], [56, 1, 1, "", "load_state_dict"], [56, 1, 1, "", "modules"], [56, 1, 1, "", "named_buffers"], [56, 1, 1, "", "named_children"], [56, 1, 1, "", "named_modules"], [56, 1, 1, "", "named_parameters"], [56, 1, 1, "", "parameters"], [56, 1, 1, "", "rand_action"], [56, 1, 1, "", "rand_step"], [56, 1, 1, "", "register_backward_hook"], [56, 1, 1, "", "register_buffer"], [56, 1, 1, "", "register_forward_hook"], [56, 1, 1, "", "register_forward_pre_hook"], [56, 1, 1, "", "register_full_backward_hook"], [56, 1, 1, "", "register_full_backward_pre_hook"], [56, 1, 1, "", "register_load_state_dict_post_hook"], [56, 1, 1, "", "register_module"], [56, 1, 1, "", "register_parameter"], [56, 1, 1, "", "register_state_dict_pre_hook"], [56, 1, 1, "", "requires_grad_"], [56, 1, 1, "", "reset"], [56, 1, 1, "", "rollout"], [56, 1, 1, "", "set_extra_state"], [56, 1, 1, "", "set_seed"], [56, 1, 1, "", "share_memory"], [56, 3, 1, "", "specs"], [56, 1, 1, "", "state_dict"], [56, 1, 1, "", "step"], [56, 1, 1, "", "to"], [56, 1, 1, "", "to_empty"], [56, 1, 1, "", "train"], [56, 1, 1, "", "type"], [56, 1, 1, "", "xpu"], [56, 1, 1, "", "zero_grad"]], "torchrl.envs.ParallelEnv": [[57, 1, 1, "", "add_module"], [57, 1, 1, "", "apply"], [57, 3, 1, "", "batch_locked"], [57, 1, 1, "", "bfloat16"], [57, 1, 1, "", "buffers"], [57, 1, 1, "", "children"], [57, 1, 1, "", "cpu"], [57, 1, 1, "", "cuda"], [57, 1, 1, "", "double"], [57, 1, 1, "", "eval"], [57, 1, 1, "", "extra_repr"], [57, 1, 1, "", "fake_tensordict"], [57, 1, 1, "", "float"], [57, 1, 1, "", "forward"], [57, 1, 1, "", "get_buffer"], [57, 1, 1, "", "get_extra_state"], [57, 1, 1, "", "get_parameter"], [57, 1, 1, "", "get_submodule"], [57, 1, 1, "", "half"], [57, 1, 1, "", "ipu"], [57, 1, 1, "", "load_state_dict"], [57, 1, 1, "", "modules"], [57, 1, 1, "", "named_buffers"], [57, 1, 1, "", "named_children"], [57, 1, 1, "", "named_modules"], [57, 1, 1, "", "named_parameters"], [57, 1, 1, "", "parameters"], [57, 1, 1, "", "rand_action"], [57, 1, 1, "", "rand_step"], [57, 1, 1, "", "register_backward_hook"], [57, 1, 1, "", "register_buffer"], [57, 1, 1, "", "register_forward_hook"], [57, 1, 1, "", "register_forward_pre_hook"], [57, 1, 1, "", "register_full_backward_hook"], [57, 1, 1, "", "register_full_backward_pre_hook"], [57, 1, 1, "", "register_load_state_dict_post_hook"], [57, 1, 1, "", "register_module"], [57, 1, 1, "", "register_parameter"], [57, 1, 1, "", "register_state_dict_pre_hook"], [57, 1, 1, "", "requires_grad_"], [57, 1, 1, "", "reset"], [57, 1, 1, "", "rollout"], [57, 1, 1, "", "set_extra_state"], [57, 1, 1, "", "set_seed"], [57, 1, 1, "", "share_memory"], [57, 3, 1, "", "specs"], [57, 1, 1, "", "state_dict"], [57, 1, 1, "", "step"], [57, 1, 1, "", "to"], [57, 1, 1, "", "to_empty"], [57, 1, 1, "", "train"], [57, 1, 1, "", "type"], [57, 1, 1, "", "update_kwargs"], [57, 1, 1, "", "xpu"], [57, 1, 1, "", "zero_grad"]], "torchrl.envs.SerialEnv": [[58, 1, 1, "", "add_module"], [58, 1, 1, "", "apply"], [58, 3, 1, "", "batch_locked"], [58, 1, 1, "", "bfloat16"], [58, 1, 1, "", "buffers"], [58, 1, 1, "", "children"], [58, 1, 1, "", "cpu"], [58, 1, 1, "", "cuda"], [58, 1, 1, "", "double"], [58, 1, 1, "", "eval"], [58, 1, 1, "", "extra_repr"], [58, 1, 1, "", "fake_tensordict"], [58, 1, 1, "", "float"], [58, 1, 1, "", "forward"], [58, 1, 1, "", "get_buffer"], [58, 1, 1, "", "get_extra_state"], [58, 1, 1, "", "get_parameter"], [58, 1, 1, "", "get_submodule"], [58, 1, 1, "", "half"], [58, 1, 1, "", "ipu"], [58, 1, 1, "", "load_state_dict"], [58, 1, 1, "", "modules"], [58, 1, 1, "", "named_buffers"], [58, 1, 1, "", "named_children"], [58, 1, 1, "", "named_modules"], [58, 1, 1, "", "named_parameters"], [58, 1, 1, "", "parameters"], [58, 1, 1, "", "rand_action"], [58, 1, 1, "", "rand_step"], [58, 1, 1, "", "register_backward_hook"], [58, 1, 1, "", "register_buffer"], [58, 1, 1, "", "register_forward_hook"], [58, 1, 1, "", "register_forward_pre_hook"], [58, 1, 1, "", "register_full_backward_hook"], [58, 1, 1, "", "register_full_backward_pre_hook"], [58, 1, 1, "", "register_load_state_dict_post_hook"], [58, 1, 1, "", "register_module"], [58, 1, 1, "", "register_parameter"], [58, 1, 1, "", "register_state_dict_pre_hook"], [58, 1, 1, "", "requires_grad_"], [58, 1, 1, "", "reset"], [58, 1, 1, "", "rollout"], [58, 1, 1, "", "set_extra_state"], [58, 1, 1, "", "set_seed"], [58, 1, 1, "", "share_memory"], [58, 3, 1, "", "specs"], [58, 1, 1, "", "state_dict"], [58, 1, 1, "", "step"], [58, 1, 1, "", "to"], [58, 1, 1, "", "to_empty"], [58, 1, 1, "", "train"], [58, 1, 1, "", "type"], [58, 1, 1, "", "update_kwargs"], [58, 1, 1, "", "xpu"], [58, 1, 1, "", "zero_grad"]], "torchrl.envs.libs.brax": [[59, 2, 1, "", "BraxEnv"], [60, 2, 1, "", "BraxWrapper"]], "torchrl.envs.libs.dm_control": [[61, 2, 1, "", "DMControlEnv"], [62, 2, 1, "", "DMControlWrapper"]], "torchrl.envs.libs.gym": [[63, 2, 1, "", "GymEnv"], [64, 2, 1, "", "GymWrapper"]], "torchrl.envs.libs.habitat": [[65, 2, 1, "", "HabitatEnv"]], "torchrl.envs.libs.jumanji": [[66, 2, 1, "", "JumanjiEnv"], [67, 2, 1, "", "JumanjiWrapper"]], "torchrl.envs.libs.openml": [[68, 2, 1, "", "OpenMLEnv"]], "torchrl.envs.libs.vmas": [[69, 2, 1, "", "VmasEnv"], [70, 2, 1, "", "VmasWrapper"]], "torchrl.envs.model_based.dreamer": [[71, 2, 1, "", "DreamerEnv"]], "torchrl.envs.transforms": [[72, 0, 1, "", "BinarizeReward"], [73, 0, 1, "", "CatFrames"], [74, 0, 1, "", "CatTensors"], [75, 0, 1, "", "CenterCrop"], [76, 0, 1, "", "Compose"], [77, 0, 1, "", "DiscreteActionProjection"], [78, 0, 1, "", "DoubleToFloat"], [79, 0, 1, "", "ExcludeTransform"], [80, 0, 1, "", "FiniteTensorDictCheck"], [81, 0, 1, "", "FlattenObservation"], [82, 0, 1, "", "FrameSkipTransform"], [83, 0, 1, "", "GrayScale"], [84, 0, 1, "", "InitTracker"], [85, 0, 1, "", "NoopResetEnv"], [86, 0, 1, "", "ObservationNorm"], [87, 0, 1, "", "ObservationTransform"], [88, 0, 1, "", "PinMemoryTransform"], [89, 0, 1, "", "R3MTransform"], [90, 0, 1, "", "RandomCropTensorDict"], [91, 0, 1, "", "RenameTransform"], [92, 0, 1, "", "Resize"], [93, 0, 1, "", "RewardClipping"], [94, 0, 1, "", "RewardScaling"], [95, 0, 1, "", "RewardSum"], [96, 0, 1, "", "SelectTransform"], [97, 0, 1, "", "SqueezeTransform"], [98, 0, 1, "", "StepCounter"], [99, 0, 1, "", "TensorDictPrimer"], [100, 0, 1, "", "TimeMaxPool"], [101, 0, 1, "", "ToTensorImage"], [102, 0, 1, "", "Transform"], [103, 0, 1, "", "TransformedEnv"], [104, 0, 1, "", "UnsqueezeTransform"], [105, 0, 1, "", "VIPRewardTransform"], [106, 0, 1, "", "VIPTransform"], [107, 0, 1, "", "VecNorm"], [108, 0, 1, "", "gSDENoise"]], "torchrl.envs.transforms.BinarizeReward": [[72, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.CatFrames": [[73, 1, 1, "", "forward"], [73, 1, 1, "", "reset"], [73, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CatTensors": [[74, 1, 1, "", "forward"], [74, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CenterCrop": [[75, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Compose": [[76, 1, 1, "", "forward"], [76, 1, 1, "", "reset"], [76, 1, 1, "", "to"], [76, 1, 1, "", "transform_input_spec"], [76, 1, 1, "", "transform_observation_spec"], [76, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.DiscreteActionProjection": [[77, 1, 1, "", "transform_input_spec"]], "torchrl.envs.transforms.DoubleToFloat": [[78, 1, 1, "", "transform_input_spec"], [78, 1, 1, "", "transform_observation_spec"], [78, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.ExcludeTransform": [[79, 1, 1, "", "forward"], [79, 1, 1, "", "reset"], [79, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FiniteTensorDictCheck": [[80, 1, 1, "", "forward"]], "torchrl.envs.transforms.FlattenObservation": [[81, 1, 1, "", "forward"], [81, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FrameSkipTransform": [[82, 1, 1, "", "forward"]], "torchrl.envs.transforms.GrayScale": [[83, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.InitTracker": [[84, 1, 1, "", "forward"], [84, 1, 1, "", "reset"], [84, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.NoopResetEnv": [[85, 1, 1, "", "reset"]], "torchrl.envs.transforms.ObservationNorm": [[86, 1, 1, "", "init_stats"], [86, 1, 1, "", "transform_input_spec"], [86, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.PinMemoryTransform": [[88, 1, 1, "", "forward"]], "torchrl.envs.transforms.R3MTransform": [[89, 1, 1, "", "to"]], "torchrl.envs.transforms.RandomCropTensorDict": [[90, 1, 1, "", "forward"]], "torchrl.envs.transforms.RenameTransform": [[91, 1, 1, "", "forward"], [91, 1, 1, "", "transform_input_spec"], [91, 1, 1, "", "transform_output_spec"]], "torchrl.envs.transforms.Resize": [[92, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.RewardClipping": [[93, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardScaling": [[94, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardSum": [[95, 1, 1, "", "forward"], [95, 1, 1, "", "reset"], [95, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.SelectTransform": [[96, 1, 1, "", "forward"], [96, 1, 1, "", "reset"], [96, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.StepCounter": [[98, 1, 1, "", "forward"], [98, 1, 1, "", "reset"], [98, 1, 1, "", "transform_input_spec"], [98, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TensorDictPrimer": [[99, 1, 1, "", "forward"], [99, 1, 1, "", "reset"], [99, 1, 1, "", "to"], [99, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TimeMaxPool": [[100, 1, 1, "", "forward"], [100, 1, 1, "", "reset"], [100, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.ToTensorImage": [[101, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Transform": [[102, 1, 1, "", "forward"], [102, 1, 1, "", "reset"], [102, 1, 1, "", "transform_done_spec"], [102, 1, 1, "", "transform_input_spec"], [102, 1, 1, "", "transform_observation_spec"], [102, 1, 1, "", "transform_output_spec"], [102, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.TransformedEnv": [[103, 3, 1, "", "action_spec"], [103, 3, 1, "", "batch_locked"], [103, 3, 1, "", "done_spec"], [103, 1, 1, "", "eval"], [103, 3, 1, "", "input_spec"], [103, 1, 1, "", "load_state_dict"], [103, 3, 1, "", "observation_spec"], [103, 3, 1, "", "output_spec"], [103, 3, 1, "", "reward_spec"], [103, 1, 1, "", "set_seed"], [103, 1, 1, "", "state_dict"], [103, 1, 1, "", "to"], [103, 1, 1, "", "train"]], "torchrl.envs.transforms.UnsqueezeTransform": [[104, 1, 1, "", "transform_input_spec"], [104, 1, 1, "", "transform_observation_spec"], [104, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.VIPRewardTransform": [[105, 1, 1, "", "forward"], [105, 1, 1, "", "reset"]], "torchrl.envs.transforms.VIPTransform": [[106, 1, 1, "", "to"]], "torchrl.envs.transforms.VecNorm": [[107, 1, 1, "", "build_td_for_shared_vecnorm"], [107, 1, 1, "", "forward"], [107, 1, 1, "", "get_extra_state"], [107, 1, 1, "", "set_extra_state"], [107, 1, 1, "", "to_observation_norm"]], "torchrl.envs.utils": [[109, 2, 1, "", "check_env_specs"], [110, 2, 1, "", "exploration_mode"], [111, 2, 1, "", "exploration_type"], [112, 2, 1, "", "get_available_libraries"], [113, 2, 1, "", "make_composite_from_td"], [114, 2, 1, "", "set_exploration_mode"], [115, 2, 1, "", "set_exploration_type"], [116, 2, 1, "", "step_mdp"]], "torchrl.modules": [[117, 0, 1, "", "CEMPlanner"], [118, 0, 1, "", "ConvNet"], [119, 0, 1, "", "DdpgCnnActor"], [120, 0, 1, "", "DdpgCnnQNet"], [121, 0, 1, "", "DdpgMlpActor"], [122, 0, 1, "", "DdpgMlpQNet"], [123, 0, 1, "", "Delta"], [124, 0, 1, "", "DistributionalDQNnet"], [125, 0, 1, "", "DistributionalQValueHook"], [126, 0, 1, "", "DreamerActor"], [127, 0, 1, "", "DuelingCnnDQNet"], [128, 0, 1, "", "IndependentNormal"], [129, 0, 1, "", "LSTMNet"], [130, 0, 1, "", "MLP"], [131, 0, 1, "", "MPCPlannerBase"], [132, 0, 1, "", "MPPIPlanner"], [133, 0, 1, "", "NoisyLazyLinear"], [134, 0, 1, "", "NoisyLinear"], [135, 0, 1, "", "NormalParamWrapper"], [136, 0, 1, "", "ObsDecoder"], [137, 0, 1, "", "ObsEncoder"], [138, 0, 1, "", "OneHotCategorical"], [139, 0, 1, "", "QValueHook"], [140, 0, 1, "", "RSSMPosterior"], [141, 0, 1, "", "RSSMPrior"], [142, 0, 1, "", "TanhDelta"], [143, 0, 1, "", "TanhNormal"], [144, 0, 1, "", "TruncatedNormal"], [145, 0, 1, "", "reset_noise"]], "torchrl.modules.CEMPlanner": [[117, 1, 1, "", "planning"]], "torchrl.modules.ConvNet": [[118, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnActor": [[119, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnQNet": [[120, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpActor": [[121, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpQNet": [[122, 1, 1, "", "forward"]], "torchrl.modules.Delta": [[123, 1, 1, "", "log_prob"], [123, 3, 1, "", "mean"], [123, 3, 1, "", "mode"], [123, 1, 1, "", "rsample"], [123, 1, 1, "", "sample"]], "torchrl.modules.DistributionalDQNnet": [[124, 1, 1, "", "forward"]], "torchrl.modules.DreamerActor": [[126, 1, 1, "", "forward"]], "torchrl.modules.DuelingCnnDQNet": [[127, 1, 1, "", "forward"]], "torchrl.modules.IndependentNormal": [[128, 3, 1, "", "mode"]], "torchrl.modules.LSTMNet": [[129, 1, 1, "", "forward"]], "torchrl.modules.MLP": [[130, 1, 1, "", "forward"]], "torchrl.modules.MPCPlannerBase": [[131, 1, 1, "", "forward"], [131, 1, 1, "", "planning"]], "torchrl.modules.MPPIPlanner": [[132, 1, 1, "", "planning"]], "torchrl.modules.NoisyLazyLinear": [[133, 1, 1, "", "initialize_parameters"]], "torchrl.modules.NormalParamWrapper": [[135, 1, 1, "", "forward"]], "torchrl.modules.ObsDecoder": [[136, 1, 1, "", "forward"]], "torchrl.modules.ObsEncoder": [[137, 1, 1, "", "forward"]], "torchrl.modules.OneHotCategorical": [[138, 1, 1, "", "log_prob"], [138, 3, 1, "", "mode"], [138, 1, 1, "", "rsample"], [138, 1, 1, "", "sample"]], "torchrl.modules.RSSMPosterior": [[140, 1, 1, "", "forward"]], "torchrl.modules.RSSMPrior": [[141, 1, 1, "", "forward"]], "torchrl.modules.TanhDelta": [[142, 3, 1, "", "mean"], [142, 3, 1, "", "mode"]], "torchrl.modules.TanhNormal": [[143, 3, 1, "", "mode"]], "torchrl.modules.TruncatedNormal": [[144, 1, 1, "", "log_prob"], [144, 3, 1, "", "mode"]], "torchrl.modules.tensordict_module": [[146, 0, 1, "", "Actor"], [147, 0, 1, "", "ActorCriticOperator"], [148, 0, 1, "", "ActorCriticWrapper"], [149, 0, 1, "", "ActorValueOperator"], [150, 0, 1, "", "AdditiveGaussianWrapper"], [151, 0, 1, "", "DistributionalQValueActor"], [152, 0, 1, "", "DistributionalQValueModule"], [153, 0, 1, "", "EGreedyWrapper"], [154, 0, 1, "", "OrnsteinUhlenbeckProcessWrapper"], [155, 0, 1, "", "ProbabilisticActor"], [156, 0, 1, "", "QValueActor"], [157, 0, 1, "", "QValueModule"], [158, 0, 1, "", "SafeModule"], [159, 0, 1, "", "SafeProbabilisticModule"], [160, 0, 1, "", "SafeProbabilisticTensorDictSequential"], [161, 0, 1, "", "SafeSequential"], [162, 0, 1, "", "ValueOperator"], [163, 0, 1, "", "WorldModelWrapper"]], "torchrl.modules.tensordict_module.ActorCriticOperator": [[147, 1, 1, "", "get_critic_operator"], [147, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorCriticWrapper": [[148, 1, 1, "", "get_policy_operator"], [148, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorValueOperator": [[149, 1, 1, "", "get_policy_operator"], [149, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.AdditiveGaussianWrapper": [[150, 1, 1, "", "forward"], [150, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.DistributionalQValueModule": [[152, 1, 1, "", "forward"]], "torchrl.modules.tensordict_module.EGreedyWrapper": [[153, 1, 1, "", "forward"], [153, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper": [[154, 1, 1, "", "forward"], [154, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.QValueModule": [[157, 1, 1, "", "forward"]], "torchrl.modules.tensordict_module.SafeModule": [[158, 1, 1, "", "random"], [158, 1, 1, "", "random_sample"], [158, 1, 1, "", "to"]], "torchrl.modules.tensordict_module.SafeProbabilisticModule": [[159, 1, 1, "", "random"], [159, 1, 1, "", "random_sample"]], "torchrl.modules.tensordict_module.WorldModelWrapper": [[163, 1, 1, "", "get_reward_operator"], [163, 1, 1, "", "get_transition_model_operator"]], "torchrl.modules.utils": [[164, 0, 1, "", "biased_softplus"], [165, 0, 1, "", "inv_softplus"], [166, 0, 1, "", "mappings"]], "torchrl.modules.utils.biased_softplus": [[164, 1, 1, "", "forward"]], "torchrl.objectives": [[167, 0, 1, "", "A2CLoss"], [168, 0, 1, "", "ClipPPOLoss"], [169, 0, 1, "", "DDPGLoss"], [170, 0, 1, "", "DQNLoss"], [171, 0, 1, "", "DiscreteSACLoss"], [172, 0, 1, "", "DistributionalDQNLoss"], [173, 0, 1, "", "DreamerActorLoss"], [174, 0, 1, "", "DreamerModelLoss"], [175, 0, 1, "", "DreamerValueLoss"], [176, 0, 1, "", "HardUpdate"], [177, 0, 1, "", "IQLLoss"], [178, 0, 1, "", "KLPENPPOLoss"], [179, 0, 1, "", "LossModule"], [180, 0, 1, "", "PPOLoss"], [181, 0, 1, "", "REDQLoss"], [182, 0, 1, "", "ReinforceLoss"], [183, 0, 1, "", "SACLoss"], [184, 0, 1, "", "SoftUpdate"], [185, 0, 1, "", "TD3Loss"], [186, 0, 1, "", "ValueEstimators"], [187, 0, 1, "", "default_value_kwargs"], [188, 0, 1, "", "distance_loss"], [189, 0, 1, "", "hold_out_net"], [190, 0, 1, "", "hold_out_params"], [191, 0, 1, "", "next_state_value"]], "torchrl.objectives.A2CLoss": [[167, 1, 1, "", "forward"], [167, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.ClipPPOLoss": [[168, 1, 1, "", "forward"]], "torchrl.objectives.DDPGLoss": [[169, 1, 1, "", "forward"], [169, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DQNLoss": [[170, 1, 1, "", "forward"], [170, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DiscreteSACLoss": [[171, 1, 1, "", "forward"], [171, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DistributionalDQNLoss": [[172, 1, 1, "", "forward"], [172, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DreamerActorLoss": [[173, 1, 1, "", "forward"], [173, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DreamerModelLoss": [[174, 1, 1, "", "forward"]], "torchrl.objectives.DreamerValueLoss": [[175, 1, 1, "", "forward"]], "torchrl.objectives.IQLLoss": [[177, 1, 1, "", "forward"], [177, 1, 1, "", "loss_value_diff"], [177, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.KLPENPPOLoss": [[178, 1, 1, "", "forward"]], "torchrl.objectives.LossModule": [[179, 1, 1, "", "convert_to_functional"], [179, 1, 1, "", "cpu"], [179, 1, 1, "", "cuda"], [179, 1, 1, "", "double"], [179, 1, 1, "", "float"], [179, 1, 1, "", "forward"], [179, 1, 1, "", "half"], [179, 1, 1, "", "make_value_estimator"], [179, 1, 1, "", "named_parameters"], [179, 1, 1, "", "parameters"], [179, 1, 1, "", "register_buffer"], [179, 1, 1, "", "to"], [179, 3, 1, "", "value_estimator"]], "torchrl.objectives.PPOLoss": [[180, 1, 1, "", "forward"], [180, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.REDQLoss": [[181, 1, 1, "", "forward"], [181, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.ReinforceLoss": [[182, 1, 1, "", "forward"], [182, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.SACLoss": [[183, 1, 1, "", "forward"], [183, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.TD3Loss": [[185, 1, 1, "", "forward"], [185, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.value": [[192, 0, 1, "", "GAE"], [193, 0, 1, "", "TD0Estimator"], [194, 0, 1, "", "TD1Estimator"], [195, 0, 1, "", "TDLambdaEstimator"], [196, 0, 1, "", "ValueEstimatorBase"]], "torchrl.objectives.value.GAE": [[192, 1, 1, "", "forward"], [192, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.TD0Estimator": [[193, 1, 1, "", "forward"], [193, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.TD1Estimator": [[194, 1, 1, "", "forward"], [194, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.TDLambdaEstimator": [[195, 1, 1, "", "forward"], [195, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.ValueEstimatorBase": [[196, 1, 1, "", "forward"], [196, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.functional": [[197, 0, 1, "", "generalized_advantage_estimate"], [198, 0, 1, "", "td0_advantage_estimate"], [199, 0, 1, "", "td0_return_estimate"], [200, 0, 1, "", "td1_advantage_estimate"], [201, 0, 1, "", "td1_return_estimate"], [202, 0, 1, "", "td_lambda_advantage_estimate"], [203, 0, 1, "", "td_lambda_return_estimate"], [204, 0, 1, "", "vec_generalized_advantage_estimate"], [205, 0, 1, "", "vec_td1_advantage_estimate"], [206, 0, 1, "", "vec_td1_return_estimate"], [207, 0, 1, "", "vec_td_lambda_advantage_estimate"], [208, 0, 1, "", "vec_td_lambda_return_estimate"]], "torchrl.record": [[209, 2, 1, "", "TensorDictRecorder"], [210, 2, 1, "", "VideoRecorder"]], "torchrl.record.loggers": [[211, 2, 1, "", "Logger"], [213, 2, 1, "", "generate_exp_name"], [214, 2, 1, "", "get_logger"]], "torchrl.record.loggers.csv": [[212, 2, 1, "", "CSVLogger"]], "torchrl.record.loggers.mlflow": [[215, 2, 1, "", "MLFlowLogger"]], "torchrl.record.loggers.tensorboard": [[216, 2, 1, "", "TensorboardLogger"]], "torchrl.record.loggers.wandb": [[217, 2, 1, "", "WandbLogger"]], "torchrl.trainers": [[218, 0, 1, "", "BatchSubSampler"], [219, 0, 1, "", "ClearCudaCache"], [220, 0, 1, "", "CountFramesLog"], [221, 0, 1, "", "LogReward"], [222, 0, 1, "", "OptimizerHook"], [223, 0, 1, "", "Recorder"], [224, 0, 1, "", "ReplayBufferTrainer"], [225, 0, 1, "", "RewardNormalizer"], [226, 0, 1, "", "SelectKeys"], [227, 0, 1, "", "Trainer"], [228, 0, 1, "", "TrainerHookBase"], [229, 0, 1, "", "UpdateWeights"]], "torchrl.trainers.BatchSubSampler": [[218, 1, 1, "", "register"]], "torchrl.trainers.ClearCudaCache": [[219, 1, 1, "", "register"]], "torchrl.trainers.CountFramesLog": [[220, 1, 1, "", "register"]], "torchrl.trainers.LogReward": [[221, 1, 1, "", "register"]], "torchrl.trainers.OptimizerHook": [[222, 1, 1, "", "register"]], "torchrl.trainers.Recorder": [[223, 1, 1, "", "register"]], "torchrl.trainers.ReplayBufferTrainer": [[224, 1, 1, "", "register"]], "torchrl.trainers.RewardNormalizer": [[225, 1, 1, "", "register"]], "torchrl.trainers.SelectKeys": [[226, 1, 1, "", "register"]], "torchrl.trainers.TrainerHookBase": [[228, 1, 1, "", "register"]], "torchrl.trainers.UpdateWeights": [[229, 1, 1, "", "register"]], "torchrl.trainers.helpers": [[230, 2, 1, "", "correct_for_frame_skip"], [231, 2, 1, "", "get_stats_random_rollout"], [232, 2, 1, "", "make_a2c_loss"], [233, 2, 1, "", "make_a2c_model"], [234, 2, 1, "", "make_collector_offpolicy"], [235, 2, 1, "", "make_collector_onpolicy"], [236, 2, 1, "", "make_ddpg_actor"], [237, 2, 1, "", "make_ddpg_loss"], [238, 2, 1, "", "make_dqn_actor"], [239, 2, 1, "", "make_dqn_loss"], [240, 2, 1, "", "make_ppo_loss"], [241, 2, 1, "", "make_ppo_model"], [242, 2, 1, "", "make_redq_loss"], [243, 2, 1, "", "make_redq_model"], [244, 2, 1, "", "make_replay_buffer"], [245, 2, 1, "", "make_sac_loss"], [246, 2, 1, "", "make_sac_model"], [247, 2, 1, "", "make_target_updater"], [248, 2, 1, "", "make_trainer"], [249, 2, 1, "", "parallel_env_constructor"], [250, 2, 1, "", "sync_async_collector"], [251, 2, 1, "", "sync_sync_collector"], [252, 2, 1, "", "transformed_env_constructor"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "property", "Python property"]}, "titleterms": {"welcom": 0, "torchrl": [0, 1, 2, 3, 6, 256, 257, 258, 259, 260, 261, 262, 265, 268, 269], "document": [0, 9], "tutori": [0, 262], "basic": 0, "intermedi": [0, 8], "advanc": 0, "refer": [0, 254], "knowledg": [0, 255], "base": [0, 7, 255], "indic": 0, "tabl": 0, "collector": [1, 260, 261, 262, 268], "packag": [1, 2, 3, 256, 257, 258, 259], "singl": [1, 4], "node": 1, "data": [1, 2, 4, 260, 261, 262, 268], "distribut": [1, 256], "helper": [1, 3], "function": [1, 4, 257, 261, 262, 268], "replai": [2, 260, 261, 262, 268], "buffer": [2, 260, 261, 262, 268], "compos": [2, 76], "store": [2, 261], "trajectori": 2, "dataset": 2, "tensorspec": [2, 36], "util": [2, 256, 257, 258], "env": [3, 265, 268, 269], "vector": [3, 268], "transform": [3, 102, 260, 262, 265, 268, 269], "clone": [3, 7], "record": [3, 223, 258, 260], "domain": 3, "specif": [3, 256, 264], "librari": [3, 268], "thing": [4, 260, 265], "consid": 4, "when": [4, 7], "debug": 4, "rl": [4, 9, 268], "gener": [4, 256], "have": 4, "you": 4, "valid": 4, "your": [4, 6, 260, 265], "algorithm": [4, 256], "implement": 4, "few": 4, "small": 4, "toi": 4, "problem": 4, "known": 4, "optim": [4, 260, 261], "return": [4, 257], "e": 4, "g": 4, "gridworld": 4, "mountaincar": 4, "visual": 4, "agent": 4, "Be": 4, "veri": 4, "care": 4, "ani": 4, "augment": 4, "polici": [4, 260, 262, 264, 265], "doe": 4, "entropi": 4, "converg": 4, "too": [4, 8], "quickli": 4, "slowli": 4, "chang": [4, 268], "drastic": 4, "reward": 4, "beyond": 4, "go": 4, "up": [4, 6], "i": [4, 5, 8], "favor": 4, "compon": 4, "veloc": 4, "v": 4, "l2": 4, "action": [4, 265], "magnitud": 4, "task": [4, 264], "horizon": 4, "extrem": 4, "long": 4, "ar": 4, "normal": [4, 260, 261, 262], "standard": 4, "explor": [4, 256, 260, 261], "valu": [4, 256, 257, 260, 262], "loss": [4, 260, 261, 262], "earli": 4, "train": [4, 8, 257, 260, 262, 265], "roughli": 4, "uniformli": 4, "random": 4, "intrins": 4, "decai": 4, "learn": [4, 262], "progress": 4, "singleton": 4, "episod": 4, "remain": 4, "constant": [4, 261], "increas": 4, "an": [4, 262, 265], "environ": [4, 6, 7, 260, 261, 262, 264, 265, 268, 269], "dynam": 4, "can": 4, "low": 4, "forward": [4, 260], "model": [4, 256, 260, 261, 266, 268], "also": 4, "us": [4, 6, 9, 266, 268], "offlin": 4, "observ": [4, 260], "space": 4, "effect": [4, 265], "dramat": 4, "dure": 4, "high": 4, "dimension": 4, "work": [5, 6, 7], "gym": [5, 269], "what": 5, "openai": 5, "version": [5, 7, 10], "habitat": 6, "lab": 6, "set": 6, "instal": [6, 7, 268], "from": [6, 7], "pip": [6, 7], "common": [6, 7, 8], "issu": [6, 7, 10], "mujoco": 7, "prerequisit": 7, "render": [7, 269], "all": 7, "new": 7, "bindindg": 7, "2": 7, "1": 7, "old": 7, "bind": 7, "py": 7, "option": 7, "repo": [7, 9], "pytorch": [8, 9, 10], "error": 8, "solut": 8, "gradient": 8, "relat": 8, "newcom": 8, "my": 8, "slow": 8, "bug": 8, "resourc": 9, "functorch": 9, "blog": 9, "websit": 9, "educ": 9, "forum": 9, "how": 10, "reproduc": [10, 265], "workaround": 10, "implement_for": 11, "datacollectorbas": 12, "multisyncdatacollector": 13, "multiasyncdatacollector": 14, "randompolici": 15, "syncdatacollector": 16, "asyncdatacollector": 17, "distributeddatacollector": 18, "distributedsyncdatacollector": 19, "rpcdatacollector": 20, "raycollector": 21, "submitit_delayed_launch": 22, "split_trajectori": 23, "binarydiscretetensorspec": 24, "boundedtensorspec": 25, "compositespec": 26, "discretetensorspec": 27, "multidiscretetensorspec": 28, "multionehotdiscretetensorspec": 29, "multistep": 30, "onehotdiscretetensorspec": 31, "prioritizedreplaybuff": 32, "replaybuff": 33, "tensordictprioritizedreplaybuff": 34, "tensordictreplaybuff": 35, "unboundedcontinuoustensorspec": 37, "unboundeddiscretetensorspec": 38, "d4rlexperiencereplai": 39, "openmlexperiencereplai": 40, "lazymemmapstorag": 41, "lazytensorstorag": 42, "liststorag": 43, "prioritizedsampl": 44, "randomsampl": 45, "roundrobinwrit": 46, "sampler": 47, "samplerwithoutreplac": 48, "storag": 49, "writer": 50, "envbas": [51, 265], "envcreat": 52, "envmetadata": 53, "gymlikeenv": 54, "modelbasedenvbas": 55, "multithreadedenv": 56, "parallelenv": 57, "serialenv": 58, "braxenv": 59, "braxwrapp": 60, "dmcontrolenv": 61, "dmcontrolwrapp": 62, "gymenv": 63, "gymwrapp": 64, "habitatenv": 65, "jumanjienv": 66, "jumanjiwrapp": 67, "openmlenv": 68, "vmasenv": 69, "vmaswrapp": 70, "dreamerenv": 71, "binarizereward": 72, "catfram": 73, "cattensor": 74, "centercrop": 75, "discreteactionproject": 77, "doubletofloat": 78, "excludetransform": 79, "finitetensordictcheck": 80, "flattenobserv": 81, "frameskiptransform": 82, "grayscal": 83, "inittrack": 84, "noopresetenv": 85, "observationnorm": 86, "observationtransform": 87, "pinmemorytransform": 88, "r3mtransform": 89, "randomcroptensordict": 90, "renametransform": 91, "resiz": 92, "rewardclip": 93, "rewardsc": 94, "rewardsum": 95, "selecttransform": 96, "squeezetransform": 97, "stepcount": 98, "tensordictprim": 99, "timemaxpool": 100, "totensorimag": 101, "transformedenv": 103, "unsqueezetransform": 104, "viprewardtransform": 105, "viptransform": 106, "vecnorm": [107, 269], "gsdenois": 108, "check_env_spec": 109, "exploration_mod": 110, "exploration_typ": 111, "get_available_librari": 112, "make_composite_from_td": 113, "set_exploration_mod": 114, "set_exploration_typ": 115, "step_mdp": 116, "cemplann": 117, "convnet": 118, "ddpgcnnactor": 119, "ddpgcnnqnet": 120, "ddpgmlpactor": 121, "ddpgmlpqnet": 122, "delta": 123, "distributionaldqnnet": 124, "distributionalqvaluehook": 125, "dreameractor": 126, "duelingcnndqnet": 127, "independentnorm": 128, "lstmnet": 129, "mlp": 130, "mpcplannerbas": 131, "mppiplann": 132, "noisylazylinear": 133, "noisylinear": 134, "normalparamwrapp": 135, "obsdecod": 136, "obsencod": 137, "onehotcategor": 138, "qvaluehook": 139, "rssmposterior": 140, "rssmprior": 141, "tanhdelta": 142, "tanhnorm": 143, "truncatednorm": 144, "reset_nois": 145, "actor": [146, 256, 260], "actorcriticoper": 147, "actorcriticwrapp": 148, "actorvalueoper": 149, "additivegaussianwrapp": 150, "distributionalqvalueactor": 151, "distributionalqvaluemodul": 152, "egreedywrapp": 153, "ornsteinuhlenbeckprocesswrapp": 154, "probabilisticactor": 155, "qvalueactor": 156, "qvaluemodul": 157, "safemodul": [158, 256], "safeprobabilisticmodul": 159, "safeprobabilistictensordictsequenti": 160, "safesequenti": 161, "valueoper": 162, "worldmodelwrapp": 163, "biased_softplu": 164, "inv_softplu": 165, "map": 166, "a2closs": 167, "clipppoloss": 168, "ddpgloss": 169, "dqnloss": 170, "discretesacloss": 171, "distributionaldqnloss": 172, "dreameractorloss": 173, "dreamermodelloss": 174, "dreamervalueloss": 175, "hardupd": 176, "iqlloss": 177, "klpenppoloss": 178, "lossmodul": [179, 260], "ppoloss": 180, "redqloss": 181, "reinforceloss": 182, "sacloss": 183, "softupd": 184, "td3loss": 185, "valueestim": 186, "default_value_kwarg": 187, "distance_loss": 188, "hold_out_net": 189, "hold_out_param": 190, "next_state_valu": 191, "gae": 192, "td0estim": 193, "td1estim": 194, "tdlambdaestim": 195, "valueestimatorbas": 196, "generalized_advantage_estim": 197, "td0_advantage_estim": 198, "td0_return_estim": 199, "td1_advantage_estim": 200, "td1_return_estim": 201, "td_lambda_advantage_estim": 202, "td_lambda_return_estim": 203, "vec_generalized_advantage_estim": 204, "vec_td1_advantage_estim": 205, "vec_td1_return_estim": 206, "vec_td_lambda_advantage_estim": 207, "vec_td_lambda_return_estim": 208, "tensordictrecord": 209, "videorecord": 210, "logger": [211, 258], "csvlogger": 212, "generate_exp_nam": 213, "get_logg": 214, "mlflowlogg": 215, "tensorboardlogg": 216, "wandblogg": 217, "batchsubsampl": 218, "clearcudacach": 219, "countframeslog": 220, "logreward": 221, "optimizerhook": 222, "replaybuffertrain": 224, "rewardnorm": 225, "selectkei": 226, "trainer": [227, 258, 261], "trainerhookbas": 228, "updateweight": 229, "correct_for_frame_skip": 230, "get_stats_random_rollout": 231, "make_a2c_loss": 232, "make_a2c_model": 233, "make_collector_offpolici": 234, "make_collector_onpolici": 235, "make_ddpg_actor": 236, "make_ddpg_loss": 237, "make_dqn_actor": 238, "make_dqn_loss": 239, "make_ppo_loss": 240, "make_ppo_model": 241, "make_redq_loss": 242, "make_redq_model": 243, "make_replay_buff": 244, "make_sac_loss": 245, "make_sac_model": 246, "make_target_updat": 247, "make_train": 248, "parallel_env_constructor": 249, "sync_async_collector": 250, "sync_sync_collector": 251, "transformed_env_constructor": 252, "readm": [253, 263], "tuto": [253, 263], "api": 254, "contribut": [255, 268], "content": 255, "modul": [256, 260, 268], "tensordict": [256, 268], "wrapper": 256, "probabilist": 256, "q": [256, 261], "oper": 256, "join": 256, "other": 256, "hook": [256, 258, 261], "regular": 256, "planner": 256, "object": [257, 260, 268], "dqn": [257, 261], "ddpg": [257, 260], "sac": 257, "redq": 257, "iql": 257, "td3": 257, "ppo": [257, 262], "a2c": 257, "reinforc": [257, 262], "dreamer": 257, "checkpoint": 258, "builder": 258, "_util": 259, "code": [260, 265], "import": 260, "setup": 260, "The": 260, "__init__": 260, "method": 260, "estim": 260, "put": 260, "togeth": [260, 265], "call": 260, "parallel": [260, 264, 269], "execut": [260, 264, 265], "stat": 260, "build": [260, 261], "evalu": 260, "construct": 260, "time": [260, 267], "experi": [260, 265], "result": [260, 262], "conclus": [260, 261, 262, 265], "A": 261, "exampl": 261, "comput": [261, 265, 267], "deep": 261, "network": [261, 262], "collect": [261, 262], "target": 261, "paramet": [261, 262], "hyperparamet": [261, 262], "regist": 261, "possibl": 261, "improv": 261, "defin": 262, "loop": [262, 265], "next": 262, "step": [262, 269], "multi": 264, "divers": 264, "rollout": [264, 265, 269], "pendulum": 265, "write": 265, "_step": 265, "reset": [265, 269], "simul": 265, "_reset": 265, "metadata": 265, "_spec": 265, "spec": [265, 269], "shape": 265, "seed": [265, 269], "wrap": 265, "class": [265, 268], "test": 265, "our": 265, "custom": 265, "batch": 265, "simpl": 265, "pretrain": 266, "introduct": 268, "config": 268, "tensordictmodul": 268, "sequenc": 268, "program": 268, "ensembl": 268, "meta": 268, "special": 268, "state": 268, "frame_skip": 269, "deepmind": 269, "control": 269, "devic": 269, "run": 269, "close": 269, "access": 269, "attribut": 269, "kwarg": 269}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Welcome to the TorchRL Documentation!": [[0, "welcome-to-the-torchrl-documentation"]], "Tutorials": [[0, "tutorials"]], "Basics": [[0, "basics"]], "Intermediate": [[0, "intermediate"]], "Advanced": [[0, "advanced"]], "References": [[0, "references"]], "Knowledge Base": [[0, "knowledge-base"], [255, "knowledge-base"]], "Indices and tables": [[0, "indices-and-tables"]], "torchrl.collectors package": [[1, "torchrl-collectors-package"]], "Single node data collectors": [[1, "single-node-data-collectors"]], "Distributed data collectors": [[1, "distributed-data-collectors"]], "Helper functions": [[1, "helper-functions"]], "torchrl.data package": [[2, "torchrl-data-package"]], "Replay Buffers": [[2, "replay-buffers"]], "Composable Replay Buffers": [[2, "composable-replay-buffers"]], "Storing trajectories": [[2, "storing-trajectories"]], "Datasets": [[2, "datasets"]], "TensorSpec": [[2, "tensorspec"], [36, "tensorspec"]], "Utils": [[2, "utils"], [256, "utils"], [257, "utils"], [258, "utils"]], "torchrl.envs package": [[3, "torchrl-envs-package"]], "Vectorized envs": [[3, "vectorized-envs"]], "Transforms": [[3, "transforms"], [260, "transforms"], [262, "transforms"], [268, "transforms"]], "Cloning transforms": [[3, "cloning-transforms"]], "Recorders": [[3, "recorders"]], "Helpers": [[3, "helpers"]], "Domain-specific": [[3, "domain-specific"]], "Libraries": [[3, "libraries"]], "Things to consider when debugging RL": [[4, "things-to-consider-when-debugging-rl"]], "General": [[4, "general"]], "Have you validated your algorithm implementation on a few small, toy problems with known optimal returns e.g. gridworlds, mountaincar?": [[4, "have-you-validated-your-algorithm-implementation-on-a-few-small-toy-problems-with-known-optimal-returns-e-g-gridworlds-mountaincar"]], "Have you visualized your agents?": [[4, "have-you-visualized-your-agents"]], "Be very careful with any data augmentation.": [[4, "be-very-careful-with-any-data-augmentation"]], "Policy": [[4, "policy"], [262, "policy"], [264, "policy"]], "Does the entropy of your policy converge too quickly, too slowly or change drastically?": [[4, "does-the-entropy-of-your-policy-converge-too-quickly-too-slowly-or-change-drastically"]], "Rewards (beyond \u201cgoing up\u201d)": [[4, "rewards-beyond-going-up"]], "Is the agent favoring a single component of the reward function (i.e. velocity vs L2 action magnitude)?": [[4, "is-the-agent-favoring-a-single-component-of-the-reward-function-i-e-velocity-vs-l2-action-magnitude"]], "Is the task horizon extremely long?": [[4, "is-the-task-horizon-extremely-long"]], "Are your rewards normalized/standardized?": [[4, "are-your-rewards-normalized-standardized"]], "Exploration": [[4, "exploration"], [256, "exploration"], [260, "exploration"]], "Is value loss going up early in training?": [[4, "is-value-loss-going-up-early-in-training"]], "Are actions (roughly) uniformly/normally random early in training?": [[4, "are-actions-roughly-uniformly-normally-random-early-in-training"]], "Are intrinsic rewards decaying as learning progresses in a singleton task?": [[4, "are-intrinsic-rewards-decaying-as-learning-progresses-in-a-singleton-task"]], "Are episodic intrinsic rewards remaining constant or increasing as learning progresses in an episodic task?": [[4, "are-episodic-intrinsic-rewards-remaining-constant-or-increasing-as-learning-progresses-in-an-episodic-task"]], "Environment Dynamics": [[4, "environment-dynamics"]], "Can you train a low entropy forward dynamics and/or reward model (also useful for offline RL)?": [[4, "can-you-train-a-low-entropy-forward-dynamics-and-or-reward-model-also-useful-for-offline-rl"]], "Observation Space": [[4, "observation-space"]], "Are your observations normalized/standardized?": [[4, "are-your-observations-normalized-standardized"]], "Action Space": [[4, "action-space"]], "Is the effect of an action changing dramatically during an episode?": [[4, "is-the-effect-of-an-action-changing-dramatically-during-an-episode"]], "Is the action space too high dimensional?": [[4, "is-the-action-space-too-high-dimensional"]], "Are your actions normalized/standardized?": [[4, "are-your-actions-normalized-standardized"]], "Working with gym": [[5, "working-with-gym"]], "What is OpenAI Gym?": [[5, "what-is-openai-gym"]], "Versioning": [[5, "versioning"]], "Working with habitat-lab": [[6, "working-with-habitat-lab"]], "Setting up your environment for habitat and torchrl": [[6, "setting-up-your-environment-for-habitat-and-torchrl"]], "Installing habitat-lab from pip": [[6, "installing-habitat-lab-from-pip"]], "Installing TorchRL": [[6, "installing-torchrl"]], "Using Habitat": [[6, "using-habitat"]], "Common issues": [[6, "common-issues"]], "Working with MuJoCo-based environments": [[7, "working-with-mujoco-based-environments"]], "Installing MuJoCo": [[7, "installing-mujoco"]], "Prerequisite for rendering (all mujoco versions)": [[7, "prerequisite-for-rendering-all-mujoco-versions"]], "New bindindgs (\u2265 2.1.2)": [[7, "new-bindindgs-2-1-2"]], "Old bindings (\u2264 2.1.1): mujoco-py": [[7, "old-bindings-2-1-1-mujoco-py"]], "Option 1: installing mujoco-py with pip": [[7, "option-1-installing-mujoco-py-with-pip"]], "Option 2: installing mujoco-py from a cloned repo": [[7, "option-2-installing-mujoco-py-from-a-cloned-repo"]], "Common Issues when rendering Mujoco Environments": [[7, "common-issues-when-rendering-mujoco-environments"]], "Common PyTorch errors and solutions": [[8, "common-pytorch-errors-and-solutions"]], "Gradient-related errors [Newcomers]": [[8, "gradient-related-errors-newcomers"]], "My Training is too slow [Newcomers / intermediate]": [[8, "my-training-is-too-slow-newcomers-intermediate"]], "Common bugs": [[8, "common-bugs"]], "Useful resources": [[9, "useful-resources"]], "Pytorch documentation": [[9, "pytorch-documentation"]], "functorch documentation": [[9, "functorch-documentation"]], "Useful RL repos, blogs and websites": [[9, "useful-rl-repos-blogs-and-websites"]], "Educational resource": [[9, "educational-resource"]], "Forums": [[9, "forums"]], "Repos": [[9, "repos"]], "Versioning Issues": [[10, "versioning-issues"]], "Pytorch version": [[10, "pytorch-version"]], "How to reproduce": [[10, "how-to-reproduce"]], "Workarounds": [[10, "workarounds"]], "implement_for": [[11, "implement-for"]], "DataCollectorBase": [[12, "datacollectorbase"]], "MultiSyncDataCollector": [[13, "multisyncdatacollector"]], "MultiaSyncDataCollector": [[14, "multiasyncdatacollector"]], "RandomPolicy": [[15, "randompolicy"]], "SyncDataCollector": [[16, "syncdatacollector"]], "aSyncDataCollector": [[17, "asyncdatacollector"]], "DistributedDataCollector": [[18, "distributeddatacollector"]], "DistributedSyncDataCollector": [[19, "distributedsyncdatacollector"]], "RPCDataCollector": [[20, "rpcdatacollector"]], "RayCollector": [[21, "raycollector"]], "submitit_delayed_launcher": [[22, "submitit-delayed-launcher"]], "split_trajectories": [[23, "split-trajectories"]], "BinaryDiscreteTensorSpec": [[24, "binarydiscretetensorspec"]], "BoundedTensorSpec": [[25, "boundedtensorspec"]], "CompositeSpec": [[26, "compositespec"]], "DiscreteTensorSpec": [[27, "discretetensorspec"]], "MultiDiscreteTensorSpec": [[28, "multidiscretetensorspec"]], "MultiOneHotDiscreteTensorSpec": [[29, "multionehotdiscretetensorspec"]], "MultiStep": [[30, "multistep"]], "OneHotDiscreteTensorSpec": [[31, "onehotdiscretetensorspec"]], "PrioritizedReplayBuffer": [[32, "prioritizedreplaybuffer"]], "ReplayBuffer": [[33, "replaybuffer"]], "TensorDictPrioritizedReplayBuffer": [[34, "tensordictprioritizedreplaybuffer"]], "TensorDictReplayBuffer": [[35, "tensordictreplaybuffer"]], "UnboundedContinuousTensorSpec": [[37, "unboundedcontinuoustensorspec"]], "UnboundedDiscreteTensorSpec": [[38, "unboundeddiscretetensorspec"]], "D4RLExperienceReplay": [[39, "d4rlexperiencereplay"]], "OpenMLExperienceReplay": [[40, "openmlexperiencereplay"]], "LazyMemmapStorage": [[41, "lazymemmapstorage"]], "LazyTensorStorage": [[42, "lazytensorstorage"]], "ListStorage": [[43, "liststorage"]], "PrioritizedSampler": [[44, "prioritizedsampler"]], "RandomSampler": [[45, "randomsampler"]], "RoundRobinWriter": [[46, "roundrobinwriter"]], "Sampler": [[47, "sampler"]], "SamplerWithoutReplacement": [[48, "samplerwithoutreplacement"]], "Storage": [[49, "storage"]], "Writer": [[50, "writer"]], "EnvBase": [[51, "envbase"]], "EnvCreator": [[52, "envcreator"]], "EnvMetaData": [[53, "envmetadata"]], "GymLikeEnv": [[54, "gymlikeenv"]], "ModelBasedEnvBase": [[55, "modelbasedenvbase"]], "MultiThreadedEnv": [[56, "multithreadedenv"]], "ParallelEnv": [[57, "parallelenv"]], "SerialEnv": [[58, "serialenv"]], "BraxEnv": [[59, "braxenv"]], "BraxWrapper": [[60, "braxwrapper"]], "DMControlEnv": [[61, "dmcontrolenv"]], "DMControlWrapper": [[62, "dmcontrolwrapper"]], "GymEnv": [[63, "gymenv"]], "GymWrapper": [[64, "gymwrapper"]], "HabitatEnv": [[65, "habitatenv"]], "JumanjiEnv": [[66, "jumanjienv"]], "JumanjiWrapper": [[67, "jumanjiwrapper"]], "OpenMLEnv": [[68, "openmlenv"]], "VmasEnv": [[69, "vmasenv"]], "VmasWrapper": [[70, "vmaswrapper"]], "DreamerEnv": [[71, "dreamerenv"]], "BinarizeReward": [[72, "binarizereward"]], "CatFrames": [[73, "catframes"]], "CatTensors": [[74, "cattensors"]], "CenterCrop": [[75, "centercrop"]], "Compose": [[76, "compose"]], "DiscreteActionProjection": [[77, "discreteactionprojection"]], "DoubleToFloat": [[78, "doubletofloat"]], "ExcludeTransform": [[79, "excludetransform"]], "FiniteTensorDictCheck": [[80, "finitetensordictcheck"]], "FlattenObservation": [[81, "flattenobservation"]], "FrameSkipTransform": [[82, "frameskiptransform"]], "GrayScale": [[83, "grayscale"]], "InitTracker": [[84, "inittracker"]], "NoopResetEnv": [[85, "noopresetenv"]], "ObservationNorm": [[86, "observationnorm"]], "ObservationTransform": [[87, "observationtransform"]], "PinMemoryTransform": [[88, "pinmemorytransform"]], "R3MTransform": [[89, "r3mtransform"]], "RandomCropTensorDict": [[90, "randomcroptensordict"]], "RenameTransform": [[91, "renametransform"]], "Resize": [[92, "resize"]], "RewardClipping": [[93, "rewardclipping"]], "RewardScaling": [[94, "rewardscaling"]], "RewardSum": [[95, "rewardsum"]], "SelectTransform": [[96, "selecttransform"]], "SqueezeTransform": [[97, "squeezetransform"]], "StepCounter": [[98, "stepcounter"]], "TensorDictPrimer": [[99, "tensordictprimer"]], "TimeMaxPool": [[100, "timemaxpool"]], "ToTensorImage": [[101, "totensorimage"]], "Transform": [[102, "transform"]], "TransformedEnv": [[103, "transformedenv"]], "UnsqueezeTransform": [[104, "unsqueezetransform"]], "VIPRewardTransform": [[105, "viprewardtransform"]], "VIPTransform": [[106, "viptransform"]], "VecNorm": [[107, "vecnorm"], [269, "vecnorm"]], "gSDENoise": [[108, "gsdenoise"]], "check_env_specs": [[109, "check-env-specs"]], "exploration_mode": [[110, "exploration-mode"]], "exploration_type": [[111, "exploration-type"]], "get_available_libraries": [[112, "get-available-libraries"]], "make_composite_from_td": [[113, "make-composite-from-td"]], "set_exploration_mode": [[114, "set-exploration-mode"]], "set_exploration_type": [[115, "set-exploration-type"]], "step_mdp": [[116, "step-mdp"]], "CEMPlanner": [[117, "cemplanner"]], "ConvNet": [[118, "convnet"]], "DdpgCnnActor": [[119, "ddpgcnnactor"]], "DdpgCnnQNet": [[120, "ddpgcnnqnet"]], "DdpgMlpActor": [[121, "ddpgmlpactor"]], "DdpgMlpQNet": [[122, "ddpgmlpqnet"]], "Delta": [[123, "delta"]], "DistributionalDQNnet": [[124, "distributionaldqnnet"]], "DistributionalQValueHook": [[125, "distributionalqvaluehook"]], "DreamerActor": [[126, "dreameractor"]], "DuelingCnnDQNet": [[127, "duelingcnndqnet"]], "IndependentNormal": [[128, "independentnormal"]], "LSTMNet": [[129, "lstmnet"]], "MLP": [[130, "mlp"]], "MPCPlannerBase": [[131, "mpcplannerbase"]], "MPPIPlanner": [[132, "mppiplanner"]], "NoisyLazyLinear": [[133, "noisylazylinear"]], "NoisyLinear": [[134, "noisylinear"]], "NormalParamWrapper": [[135, "normalparamwrapper"]], "ObsDecoder": [[136, "obsdecoder"]], "ObsEncoder": [[137, "obsencoder"]], "OneHotCategorical": [[138, "onehotcategorical"]], "QValueHook": [[139, "qvaluehook"]], "RSSMPosterior": [[140, "rssmposterior"]], "RSSMPrior": [[141, "rssmprior"]], "TanhDelta": [[142, "tanhdelta"]], "TanhNormal": [[143, "tanhnormal"]], "TruncatedNormal": [[144, "truncatednormal"]], "reset_noise": [[145, "reset-noise"]], "Actor": [[146, "actor"]], "ActorCriticOperator": [[147, "actorcriticoperator"]], "ActorCriticWrapper": [[148, "actorcriticwrapper"]], "ActorValueOperator": [[149, "actorvalueoperator"]], "AdditiveGaussianWrapper": [[150, "additivegaussianwrapper"]], "DistributionalQValueActor": [[151, "distributionalqvalueactor"]], "DistributionalQValueModule": [[152, "distributionalqvaluemodule"]], "EGreedyWrapper": [[153, "egreedywrapper"]], "OrnsteinUhlenbeckProcessWrapper": [[154, "ornsteinuhlenbeckprocesswrapper"]], "ProbabilisticActor": [[155, "probabilisticactor"]], "QValueActor": [[156, "qvalueactor"]], "QValueModule": [[157, "qvaluemodule"]], "SafeModule": [[158, "safemodule"]], "SafeProbabilisticModule": [[159, "safeprobabilisticmodule"]], "SafeProbabilisticTensorDictSequential": [[160, "safeprobabilistictensordictsequential"]], "SafeSequential": [[161, "safesequential"]], "ValueOperator": [[162, "valueoperator"]], "WorldModelWrapper": [[163, "worldmodelwrapper"]], "biased_softplus": [[164, "biased-softplus"]], "inv_softplus": [[165, "inv-softplus"]], "mappings": [[166, "mappings"]], "A2CLoss": [[167, "a2closs"]], "ClipPPOLoss": [[168, "clipppoloss"]], "DDPGLoss": [[169, "ddpgloss"]], "DQNLoss": [[170, "dqnloss"]], "DiscreteSACLoss": [[171, "discretesacloss"]], "DistributionalDQNLoss": [[172, "distributionaldqnloss"]], "DreamerActorLoss": [[173, "dreameractorloss"]], "DreamerModelLoss": [[174, "dreamermodelloss"]], "DreamerValueLoss": [[175, "dreamervalueloss"]], "HardUpdate": [[176, "hardupdate"]], "IQLLoss": [[177, "iqlloss"]], "KLPENPPOLoss": [[178, "klpenppoloss"]], "LossModule": [[179, "lossmodule"]], "PPOLoss": [[180, "ppoloss"]], "REDQLoss": [[181, "redqloss"]], "ReinforceLoss": [[182, "reinforceloss"]], "SACLoss": [[183, "sacloss"]], "SoftUpdate": [[184, "softupdate"]], "TD3Loss": [[185, "td3loss"]], "ValueEstimators": [[186, "valueestimators"]], "default_value_kwargs": [[187, "default-value-kwargs"]], "distance_loss": [[188, "distance-loss"]], "hold_out_net": [[189, "hold-out-net"]], "hold_out_params": [[190, "hold-out-params"]], "next_state_value": [[191, "next-state-value"]], "GAE": [[192, "gae"]], "TD0Estimator": [[193, "td0estimator"]], "TD1Estimator": [[194, "td1estimator"]], "TDLambdaEstimator": [[195, "tdlambdaestimator"]], "ValueEstimatorBase": [[196, "valueestimatorbase"]], "generalized_advantage_estimate": [[197, "generalized-advantage-estimate"]], "td0_advantage_estimate": [[198, "td0-advantage-estimate"]], "td0_return_estimate": [[199, "td0-return-estimate"]], "td1_advantage_estimate": [[200, "td1-advantage-estimate"]], "td1_return_estimate": [[201, "td1-return-estimate"]], "td_lambda_advantage_estimate": [[202, "td-lambda-advantage-estimate"]], "td_lambda_return_estimate": [[203, "td-lambda-return-estimate"]], "vec_generalized_advantage_estimate": [[204, "vec-generalized-advantage-estimate"]], "vec_td1_advantage_estimate": [[205, "vec-td1-advantage-estimate"]], "vec_td1_return_estimate": [[206, "vec-td1-return-estimate"]], "vec_td_lambda_advantage_estimate": [[207, "vec-td-lambda-advantage-estimate"]], "vec_td_lambda_return_estimate": [[208, "vec-td-lambda-return-estimate"]], "TensorDictRecorder": [[209, "tensordictrecorder"]], "VideoRecorder": [[210, "videorecorder"]], "Logger": [[211, "logger"]], "CSVLogger": [[212, "csvlogger"]], "generate_exp_name": [[213, "generate-exp-name"]], "get_logger": [[214, "get-logger"]], "MLFlowLogger": [[215, "mlflowlogger"]], "TensorboardLogger": [[216, "tensorboardlogger"]], "WandbLogger": [[217, "wandblogger"]], "BatchSubSampler": [[218, "batchsubsampler"]], "ClearCudaCache": [[219, "clearcudacache"]], "CountFramesLog": [[220, "countframeslog"]], "LogReward": [[221, "logreward"]], "OptimizerHook": [[222, "optimizerhook"]], "Recorder": [[223, "recorder"]], "ReplayBufferTrainer": [[224, "replaybuffertrainer"]], "RewardNormalizer": [[225, "rewardnormalizer"]], "SelectKeys": [[226, "selectkeys"]], "Trainer": [[227, "trainer"]], "TrainerHookBase": [[228, "trainerhookbase"]], "UpdateWeights": [[229, "updateweights"]], "correct_for_frame_skip": [[230, "correct-for-frame-skip"]], "get_stats_random_rollout": [[231, "get-stats-random-rollout"]], "make_a2c_loss": [[232, "make-a2c-loss"]], "make_a2c_model": [[233, "make-a2c-model"]], "make_collector_offpolicy": [[234, "make-collector-offpolicy"]], "make_collector_onpolicy": [[235, "make-collector-onpolicy"]], "make_ddpg_actor": [[236, "make-ddpg-actor"]], "make_ddpg_loss": [[237, "make-ddpg-loss"]], "make_dqn_actor": [[238, "make-dqn-actor"]], "make_dqn_loss": [[239, "make-dqn-loss"]], "make_ppo_loss": [[240, "make-ppo-loss"]], "make_ppo_model": [[241, "make-ppo-model"]], "make_redq_loss": [[242, "make-redq-loss"]], "make_redq_model": [[243, "make-redq-model"]], "make_replay_buffer": [[244, "make-replay-buffer"]], "make_sac_loss": [[245, "make-sac-loss"]], "make_sac_model": [[246, "make-sac-model"]], "make_target_updater": [[247, "make-target-updater"]], "make_trainer": [[248, "make-trainer"]], "parallel_env_constructor": [[249, "parallel-env-constructor"]], "sync_async_collector": [[250, "sync-async-collector"]], "sync_sync_collector": [[251, "sync-sync-collector"]], "transformed_env_constructor": [[252, "transformed-env-constructor"]], "README Tutos": [[253, "readme-tutos"], [263, "readme-tutos"]], "API Reference": [[254, "api-reference"]], "Contributing": [[255, "contributing"], [268, "contributing"]], "Contents:": [[255, null]], "torchrl.modules package": [[256, "torchrl-modules-package"]], "TensorDict modules: Actors, exploration, value models and generative models": [[256, "tensordict-modules-actors-exploration-value-models-and-generative-models"]], "SafeModules": [[256, "safemodules"]], "Exploration wrappers": [[256, "exploration-wrappers"]], "Probabilistic actors": [[256, "probabilistic-actors"]], "Q-Value actors": [[256, "q-value-actors"]], "Value operators and joined models": [[256, "value-operators-and-joined-models"]], "Other modules": [[256, "other-modules"]], "Hooks": [[256, "hooks"]], "Models": [[256, "models"], [268, "models"]], "Regular modules": [[256, "regular-modules"]], "Algorithm-specific modules": [[256, "algorithm-specific-modules"]], "Planners": [[256, "planners"]], "Distributions": [[256, "distributions"]], "torchrl.objectives package": [[257, "torchrl-objectives-package"]], "Training value functions": [[257, "training-value-functions"]], "DQN": [[257, "dqn"], [261, "dqn"]], "DDPG": [[257, "ddpg"]], "SAC": [[257, "sac"]], "REDQ": [[257, "redq"]], "IQL": [[257, "iql"]], "TD3": [[257, "td3"]], "PPO": [[257, "ppo"]], "A2C": [[257, "a2c"]], "Reinforce": [[257, "reinforce"]], "Dreamer": [[257, "dreamer"]], "Returns": [[257, "returns"]], "torchrl.trainers package": [[258, "torchrl-trainers-package"]], "Checkpointing": [[258, "checkpointing"]], "Trainer and hooks": [[258, "trainer-and-hooks"]], "Builders": [[258, "builders"]], "Loggers": [[258, "loggers"]], "Recording utils": [[258, "recording-utils"]], "torchrl._utils package": [[259, "torchrl-utils-package"]], "TorchRL objectives: Coding a DDPG loss": [[260, "torchrl-objectives-coding-a-ddpg-loss"]], "Imports and setup": [[260, "imports-and-setup"]], "torchrl LossModule": [[260, "torchrl-lossmodule"]], "The __init__ method": [[260, "the-init-method"]], "The value estimator loss method": [[260, "the-value-estimator-loss-method"]], "The actor loss method": [[260, "the-actor-loss-method"]], "The value loss method": [[260, "the-value-loss-method"]], "Putting things together in a forward call": [[260, "putting-things-together-in-a-forward-call"]], "Environment": [[260, "environment"]], "Parallel execution": [[260, "parallel-execution"]], "Normalization of the observations": [[260, "normalization-of-the-observations"]], "Normalization stats": [[260, "normalization-stats"]], "Building the model": [[260, "building-the-model"]], "Data collector": [[260, "data-collector"], [261, "data-collector"], [262, "data-collector"]], "Evaluator: building your recorder object": [[260, "evaluator-building-your-recorder-object"]], "Replay buffer": [[260, "replay-buffer"], [262, "replay-buffer"]], "Loss module construction": [[260, "loss-module-construction"]], "Optimizer": [[260, "optimizer"], [261, "optimizer"]], "Time to train the policy": [[260, "time-to-train-the-policy"]], "Experiment results": [[260, "experiment-results"]], "Conclusion": [[260, "conclusion"], [265, "conclusion"]], "TorchRL trainer: A DQN example": [[261, "torchrl-trainer-a-dqn-example"]], "Building the environment": [[261, "building-the-environment"]], "Compute normalizing constants": [[261, "compute-normalizing-constants"]], "Building the model (Deep Q-network)": [[261, "building-the-model-deep-q-network"]], "Collecting and storing data": [[261, "collecting-and-storing-data"]], "Replay buffers": [[261, "replay-buffers"], [268, "replay-buffers"]], "Loss function": [[261, "loss-function"], [262, "loss-function"]], "Target parameters": [[261, "target-parameters"]], "Hyperparameters": [[261, "hyperparameters"]], "DQN parameters": [[261, "dqn-parameters"]], "Data collection and replay buffer": [[261, "data-collection-and-replay-buffer"]], "Environment and exploration": [[261, "environment-and-exploration"]], "Building a Trainer": [[261, "building-a-trainer"]], "Registering hooks": [[261, "registering-hooks"]], "Conclusion and possible improvements": [[261, "conclusion-and-possible-improvements"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[262, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[262, "define-hyperparameters"]], "Data collection parameters": [[262, "data-collection-parameters"]], "PPO parameters": [[262, "ppo-parameters"]], "Define an environment": [[262, "define-an-environment"]], "Normalization": [[262, "normalization"]], "Value network": [[262, "value-network"]], "Training loop": [[262, "training-loop"], [265, "training-loop"]], "Results": [[262, "results"]], "Conclusion and next steps": [[262, "conclusion-and-next-steps"]], "Task-specific policy in multi-task environments": [[264, "task-specific-policy-in-multi-task-environments"]], "Executing diverse tasks in parallel": [[264, "executing-diverse-tasks-in-parallel"]], "Rollout": [[264, "rollout"]], "Pendulum: Writing your environment and transforms with TorchRL": [[265, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[265, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[265, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[265, "environment-metadata-env-spec"]], "Specs shape": [[265, "specs-shape"]], "Reproducible experiments: seeding": [[265, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[265, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[265, "testing-our-environment"]], "Transforming an environment": [[265, "transforming-an-environment"]], "Writing custom transforms": [[265, "writing-custom-transforms"]], "Executing a rollout": [[265, "executing-a-rollout"]], "Batching computations": [[265, "batching-computations"]], "Training a simple policy": [[265, "training-a-simple-policy"]], "Using pretrained models": [[266, "using-pretrained-models"]], "Computation times": [[267, "computation-times"]], "Introduction to TorchRL": [[268, "introduction-to-torchrl"]], "Data": [[268, "data"]], "TensorDict": [[268, "tensordict"]], "Envs": [[268, "envs"]], "Changing environments config": [[268, "changing-environments-config"]], "Vectorized Environments": [[268, "vectorized-environments"]], "Modules": [[268, "modules"]], "TensorDictModules": [[268, "tensordictmodules"]], "Sequences of Modules": [[268, "sequences-of-modules"]], "Functional Programming (Ensembling / Meta-RL)": [[268, "functional-programming-ensembling-meta-rl"]], "Specialized Classes": [[268, "specialized-classes"]], "Using Environments and Modules": [[268, "using-environments-and-modules"]], "Collectors": [[268, "collectors"]], "Objectives": [[268, "objectives"]], "State of the Library": [[268, "state-of-the-library"]], "Installing the Library": [[268, "installing-the-library"]], "TorchRL envs": [[269, "torchrl-envs"]], "Gym environments": [[269, "gym-environments"]], "Env Specs": [[269, "env-specs"]], "Seeding, resetting and steps": [[269, "seeding-resetting-and-steps"]], "Rollouts": [[269, "rollouts"]], "frame_skip": [[269, "frame-skip"]], "Rendering": [[269, "rendering"]], "DeepMind Control environments": [[269, "deepmind-control-environments"]], "Transforming envs": [[269, "transforming-envs"]], "Environment device": [[269, "environment-device"]], "Running environments in parallel": [[269, "running-environments-in-parallel"]], "Closing parallel environments": [[269, "closing-parallel-environments"]], "Seeding": [[269, "seeding"]], "Accessing environment attributes": [[269, "accessing-environment-attributes"]], "kwargs for parallel environments": [[269, "kwargs-for-parallel-environments"]], "Transforming parallel environments": [[269, "transforming-parallel-environments"]]}, "indexentries": {"implement_for (class in torchrl._utils)": [[11, "torchrl._utils.implement_for"]], "datacollectorbase (class in torchrl.collectors.collectors)": [[12, "torchrl.collectors.collectors.DataCollectorBase"]], "update_policy_weights_() (torchrl.collectors.collectors.datacollectorbase method)": [[12, "torchrl.collectors.collectors.DataCollectorBase.update_policy_weights_"]], "multisyncdatacollector (class in torchrl.collectors.collectors)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.update_policy_weights_"]], "multiasyncdatacollector (class in torchrl.collectors.collectors)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.update_policy_weights_"]], "randompolicy (class in torchrl.collectors.collectors)": [[15, "torchrl.collectors.collectors.RandomPolicy"]], "syncdatacollector (class in torchrl.collectors.collectors)": [[16, "torchrl.collectors.collectors.SyncDataCollector"]], "iterator() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.iterator"]], "load_state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.reset"]], "rollout() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.rollout"]], "set_seed() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.update_policy_weights_"]], "asyncdatacollector (class in torchrl.collectors.collectors)": [[17, "torchrl.collectors.collectors.aSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.update_policy_weights_"]], "distributeddatacollector (class in torchrl.collectors.distributed)": [[18, "torchrl.collectors.distributed.DistributedDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.distributeddatacollector method)": [[18, "torchrl.collectors.distributed.DistributedDataCollector.update_policy_weights_"]], "distributedsyncdatacollector (class in torchrl.collectors.distributed)": [[19, "torchrl.collectors.distributed.DistributedSyncDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.distributedsyncdatacollector method)": [[19, "torchrl.collectors.distributed.DistributedSyncDataCollector.update_policy_weights_"]], "rpcdatacollector (class in torchrl.collectors.distributed)": [[20, "torchrl.collectors.distributed.RPCDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.rpcdatacollector method)": [[20, "torchrl.collectors.distributed.RPCDataCollector.update_policy_weights_"]], "raycollector (class in torchrl.collectors.distributed)": [[21, "torchrl.collectors.distributed.RayCollector"]], "add_collectors() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.add_collectors"]], "load_state_dict() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.load_state_dict"]], "local_policy() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.local_policy"]], "remote_collectors() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.remote_collectors"]], "set_seed() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.set_seed"]], "shutdown() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.shutdown"]], "state_dict() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.state_dict"]], "stop_remote_collectors() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.stop_remote_collectors"]], "update_policy_weights_() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.update_policy_weights_"]], "submitit_delayed_launcher (class in torchrl.collectors.distributed)": [[22, "torchrl.collectors.distributed.submitit_delayed_launcher"]], "split_trajectories() (in module torchrl.collectors.utils)": [[23, "torchrl.collectors.utils.split_trajectories"]], "binarydiscretetensorspec (class in torchrl.data)": [[24, "torchrl.data.BinaryDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.encode"]], "expand() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.binarydiscretetensorspec class method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.index"]], "is_in() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.is_in"]], "project() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.project"]], "rand() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.zero"]], "boundedtensorspec (class in torchrl.data)": [[25, "torchrl.data.BoundedTensorSpec"]], "assert_is_in() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.assert_is_in"]], "encode() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.encode"]], "expand() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.expand"]], "implements_for_spec() (torchrl.data.boundedtensorspec class method)": [[25, "torchrl.data.BoundedTensorSpec.implements_for_spec"]], "index() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.index"]], "is_in() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.is_in"]], "project() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.project"]], "rand() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.rand"]], "squeeze() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.squeeze"]], "to_numpy() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.to_numpy"]], "type_check() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.type_check"]], "zero() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.zero"]], "compositespec (class in torchrl.data)": [[26, "torchrl.data.CompositeSpec"]], "assert_is_in() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.assert_is_in"]], "encode() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.encode"]], "expand() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.expand"]], "implements_for_spec() (torchrl.data.compositespec class method)": [[26, "torchrl.data.CompositeSpec.implements_for_spec"]], "index() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.index"]], "is_in() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.is_in"]], "items() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.items"]], "keys() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.keys"]], "project() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.project"]], "rand() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.rand"]], "squeeze() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.squeeze"]], "to_numpy() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.to_numpy"]], "type_check() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.type_check"]], "values() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.values"]], "zero() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.zero"]], "discretetensorspec (class in torchrl.data)": [[27, "torchrl.data.DiscreteTensorSpec"]], "assert_is_in() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.encode"]], "expand() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.discretetensorspec class method)": [[27, "torchrl.data.DiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.index"]], "is_in() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.is_in"]], "project() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.project"]], "rand() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.type_check"]], "zero() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.zero"]], "multidiscretetensorspec (class in torchrl.data)": [[28, "torchrl.data.MultiDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.multidiscretetensorspec class method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.project"]], "rand() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.zero"]], "multionehotdiscretetensorspec (class in torchrl.data)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.multionehotdiscretetensorspec class method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.squeeze"]], "to_categorical() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_categorical"]], "to_categorical_spec() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_categorical_spec"]], "to_numpy() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.zero"]], "multistep (class in torchrl.data)": [[30, "torchrl.data.MultiStep"]], "add_module() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.add_module"]], "apply() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.apply"]], "bfloat16() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.bfloat16"]], "buffers() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.buffers"]], "children() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.children"]], "cpu() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.cpu"]], "cuda() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.cuda"]], "double() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.double"]], "eval() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.eval"]], "extra_repr() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.extra_repr"]], "float() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.float"]], "forward() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.forward"]], "get_buffer() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_buffer"]], "get_extra_state() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_extra_state"]], "get_parameter() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_parameter"]], "get_submodule() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_submodule"]], "half() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.half"]], "ipu() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.ipu"]], "load_state_dict() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.load_state_dict"]], "modules() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.modules"]], "named_buffers() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_buffers"]], "named_children() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_children"]], "named_modules() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_modules"]], "named_parameters() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_parameters"]], "parameters() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.parameters"]], "register_backward_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_backward_hook"]], "register_buffer() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_buffer"]], "register_forward_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_forward_hook"]], "register_forward_pre_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_load_state_dict_post_hook"]], "register_module() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_module"]], "register_parameter() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_parameter"]], "register_state_dict_pre_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.requires_grad_"]], "set_extra_state() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.set_extra_state"]], "share_memory() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.share_memory"]], "state_dict() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.state_dict"]], "to() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.to"]], "to_empty() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.to_empty"]], "train() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.train"]], "type() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.type"]], "xpu() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.xpu"]], "zero_grad() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.zero_grad"]], "onehotdiscretetensorspec (class in torchrl.data)": [[31, "torchrl.data.OneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.onehotdiscretetensorspec class method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.squeeze"]], "to_categorical() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.to_categorical"]], "to_categorical_spec() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.to_categorical_spec"]], "to_numpy() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.zero"]], "prioritizedreplaybuffer (class in torchrl.data)": [[32, "torchrl.data.PrioritizedReplayBuffer"]], "add() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.sample"]], "replaybuffer (class in torchrl.data)": [[33, "torchrl.data.ReplayBuffer"]], "add() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.add"]], "append_transform() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.append_transform"]], "extend() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.extend"]], "insert_transform() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.insert_transform"]], "sample() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.sample"]], "tensordictprioritizedreplaybuffer (class in torchrl.data)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer"]], "add() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.sample"]], "tensordictreplaybuffer (class in torchrl.data)": [[35, "torchrl.data.TensorDictReplayBuffer"]], "add() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.sample"]], "tensorspec (class in torchrl.data)": [[36, "torchrl.data.TensorSpec"]], "assert_is_in() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.assert_is_in"]], "encode() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.encode"]], "expand() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.expand"]], "implements_for_spec() (torchrl.data.tensorspec class method)": [[36, "torchrl.data.TensorSpec.implements_for_spec"]], "index() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.index"]], "is_in() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.is_in"]], "project() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.project"]], "rand() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.rand"]], "squeeze() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.squeeze"]], "to_numpy() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.to_numpy"]], "type_check() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.type_check"]], "zero() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.zero"]], "unboundedcontinuoustensorspec (class in torchrl.data)": [[37, "torchrl.data.UnboundedContinuousTensorSpec"]], "assert_is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.encode"]], "expand() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.expand"]], "implements_for_spec() (torchrl.data.unboundedcontinuoustensorspec class method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.implements_for_spec"]], "index() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.index"]], "is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.is_in"]], "project() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.project"]], "rand() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.rand"]], "squeeze() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.squeeze"]], "to_numpy() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.type_check"]], "zero() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.zero"]], "unboundeddiscretetensorspec (class in torchrl.data)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.encode"]], "expand() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.unboundeddiscretetensorspec class method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.index"]], "is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.is_in"]], "project() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.project"]], "rand() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.zero"]], "d4rlexperiencereplay (class in torchrl.data.datasets)": [[39, "torchrl.data.datasets.D4RLExperienceReplay"]], "add() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.add"]], "append_transform() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.append_transform"]], "extend() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.extend"]], "insert_transform() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.insert_transform"]], "sample() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.sample"]], "openmlexperiencereplay (class in torchrl.data.datasets)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay"]], "add() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.add"]], "append_transform() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.append_transform"]], "extend() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.extend"]], "insert_transform() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.insert_transform"]], "sample() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.sample"]], "lazymemmapstorage (class in torchrl.data.replay_buffers)": [[41, "torchrl.data.replay_buffers.LazyMemmapStorage"]], "attach() (torchrl.data.replay_buffers.lazymemmapstorage method)": [[41, "torchrl.data.replay_buffers.LazyMemmapStorage.attach"]], "lazytensorstorage (class in torchrl.data.replay_buffers)": [[42, "torchrl.data.replay_buffers.LazyTensorStorage"]], "attach() (torchrl.data.replay_buffers.lazytensorstorage method)": [[42, "torchrl.data.replay_buffers.LazyTensorStorage.attach"]], "liststorage (class in torchrl.data.replay_buffers)": [[43, "torchrl.data.replay_buffers.ListStorage"]], "attach() (torchrl.data.replay_buffers.liststorage method)": [[43, "torchrl.data.replay_buffers.ListStorage.attach"]], "prioritizedsampler (class in torchrl.data.replay_buffers)": [[44, "torchrl.data.replay_buffers.PrioritizedSampler"]], "update_priority() (torchrl.data.replay_buffers.prioritizedsampler method)": [[44, "torchrl.data.replay_buffers.PrioritizedSampler.update_priority"]], "randomsampler (class in torchrl.data.replay_buffers)": [[45, "torchrl.data.replay_buffers.RandomSampler"]], "roundrobinwriter (class in torchrl.data.replay_buffers)": [[46, "torchrl.data.replay_buffers.RoundRobinWriter"]], "add() (torchrl.data.replay_buffers.roundrobinwriter method)": [[46, "torchrl.data.replay_buffers.RoundRobinWriter.add"]], "extend() (torchrl.data.replay_buffers.roundrobinwriter method)": [[46, "torchrl.data.replay_buffers.RoundRobinWriter.extend"]], "sampler (class in torchrl.data.replay_buffers)": [[47, "torchrl.data.replay_buffers.Sampler"]], "samplerwithoutreplacement (class in torchrl.data.replay_buffers)": [[48, "torchrl.data.replay_buffers.SamplerWithoutReplacement"]], "storage (class in torchrl.data.replay_buffers)": [[49, "torchrl.data.replay_buffers.Storage"]], "attach() (torchrl.data.replay_buffers.storage method)": [[49, "torchrl.data.replay_buffers.Storage.attach"]], "writer (class in torchrl.data.replay_buffers)": [[50, "torchrl.data.replay_buffers.Writer"]], "add() (torchrl.data.replay_buffers.writer method)": [[50, "torchrl.data.replay_buffers.Writer.add"]], "extend() (torchrl.data.replay_buffers.writer method)": [[50, "torchrl.data.replay_buffers.Writer.extend"]], "envbase (class in torchrl.envs)": [[51, "torchrl.envs.EnvBase"]], "add_module() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.add_module"]], "apply() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.apply"]], "batch_locked (torchrl.envs.envbase property)": [[51, "torchrl.envs.EnvBase.batch_locked"]], "bfloat16() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.bfloat16"]], "buffers() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.buffers"]], "children() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.children"]], "cpu() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.cpu"]], "cuda() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.cuda"]], "double() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.double"]], "eval() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.eval"]], "extra_repr() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.extra_repr"]], "fake_tensordict() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.fake_tensordict"]], "float() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.float"]], "forward() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.forward"]], "get_buffer() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_buffer"]], "get_extra_state() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_extra_state"]], "get_parameter() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_parameter"]], "get_submodule() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_submodule"]], "half() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.half"]], "ipu() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.ipu"]], "load_state_dict() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.load_state_dict"]], "modules() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.modules"]], "named_buffers() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_buffers"]], "named_children() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_children"]], "named_modules() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_modules"]], "named_parameters() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_parameters"]], "parameters() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.parameters"]], "rand_action() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.rand_action"]], "rand_step() (torchrl.envs.envbase method)": [[51, "id0"], [51, "torchrl.envs.EnvBase.rand_step"]], "register_backward_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_backward_hook"]], "register_buffer() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_buffer"]], "register_forward_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_module"]], "register_parameter() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.requires_grad_"]], "reset() (torchrl.envs.envbase method)": [[51, "id1"], [51, "torchrl.envs.EnvBase.reset"]], "rollout() (torchrl.envs.envbase method)": [[51, "id2"], [51, "torchrl.envs.EnvBase.rollout"]], "set_extra_state() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.set_extra_state"]], "set_seed() (torchrl.envs.envbase method)": [[51, "id3"], [51, "torchrl.envs.EnvBase.set_seed"]], "share_memory() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.share_memory"]], "specs (torchrl.envs.envbase property)": [[51, "torchrl.envs.EnvBase.specs"]], "state_dict() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.state_dict"]], "step() (torchrl.envs.envbase method)": [[51, "id4"], [51, "torchrl.envs.EnvBase.step"]], "to() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.to"]], "to_empty() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.to_empty"]], "train() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.train"]], "type() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.type"]], "xpu() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.xpu"]], "zero_grad() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.zero_grad"]], "envcreator (class in torchrl.envs)": [[52, "torchrl.envs.EnvCreator"]], "envmetadata (class in torchrl.envs)": [[53, "torchrl.envs.EnvMetaData"]], "gymlikeenv (class in torchrl.envs)": [[54, "torchrl.envs.GymLikeEnv"]], "add_module() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.add_module"]], "apply() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.apply"]], "batch_locked (torchrl.envs.gymlikeenv property)": [[54, "torchrl.envs.GymLikeEnv.batch_locked"]], "bfloat16() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.bfloat16"]], "buffers() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.buffers"]], "children() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.children"]], "close() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.close"]], "cpu() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.cpu"]], "cuda() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.cuda"]], "double() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.double"]], "eval() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.eval"]], "extra_repr() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.fake_tensordict"]], "float() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.float"]], "forward() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.forward"]], "get_buffer() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_buffer"]], "get_extra_state() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_extra_state"]], "get_parameter() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_parameter"]], "get_submodule() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_submodule"]], "half() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.half"]], "ipu() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.ipu"]], "load_state_dict() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.load_state_dict"]], "modules() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.modules"]], "named_buffers() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_buffers"]], "named_children() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_children"]], "named_modules() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_modules"]], "named_parameters() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_parameters"]], "parameters() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.parameters"]], "rand_action() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.rand_action"]], "rand_step() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.rand_step"]], "read_action() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_action"]], "read_done() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_done"]], "read_obs() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_obs"]], "read_reward() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_reward"]], "register_backward_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_module"]], "register_parameter() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.requires_grad_"]], "reset() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.reset"]], "rollout() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.rollout"]], "set_extra_state() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.set_extra_state"]], "set_info_dict_reader() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.set_info_dict_reader"]], "set_seed() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.set_seed"]], "share_memory() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.share_memory"]], "specs (torchrl.envs.gymlikeenv property)": [[54, "torchrl.envs.GymLikeEnv.specs"]], "state_dict() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.state_dict"]], "step() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.step"]], "to() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.to"]], "to_empty() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.to_empty"]], "train() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.train"]], "type() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.type"]], "xpu() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.xpu"]], "zero_grad() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.zero_grad"]], "modelbasedenvbase() (in module torchrl.envs)": [[55, "torchrl.envs.ModelBasedEnvBase"]], "rand_step() (in module torchrl.envs)": [[55, "torchrl.envs.rand_step"]], "reset() (in module torchrl.envs)": [[55, "torchrl.envs.reset"]], "rollout() (in module torchrl.envs)": [[55, "torchrl.envs.rollout"]], "set_seed() (in module torchrl.envs)": [[55, "torchrl.envs.set_seed"]], "step() (in module torchrl.envs)": [[55, "torchrl.envs.step"]], "multithreadedenv (class in torchrl.envs)": [[56, "torchrl.envs.MultiThreadedEnv"]], "add_module() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.add_module"]], "apply() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.apply"]], "batch_locked (torchrl.envs.multithreadedenv property)": [[56, "torchrl.envs.MultiThreadedEnv.batch_locked"]], "bfloat16() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.bfloat16"]], "buffers() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.buffers"]], "children() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.children"]], "close() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.close"]], "cpu() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.cpu"]], "cuda() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.cuda"]], "double() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.double"]], "eval() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.eval"]], "extra_repr() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.fake_tensordict"]], "float() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.float"]], "forward() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.forward"]], "get_buffer() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_buffer"]], "get_extra_state() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_extra_state"]], "get_parameter() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_parameter"]], "get_submodule() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_submodule"]], "half() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.half"]], "ipu() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.ipu"]], "load_state_dict() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.load_state_dict"]], "modules() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.modules"]], "named_buffers() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_buffers"]], "named_children() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_children"]], "named_modules() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_modules"]], "named_parameters() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_parameters"]], "parameters() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.parameters"]], "rand_action() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.rand_action"]], "rand_step() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.rand_step"]], "register_backward_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_module"]], "register_parameter() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.requires_grad_"]], "reset() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.reset"]], "rollout() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.rollout"]], "set_extra_state() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.set_extra_state"]], "set_seed() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.set_seed"]], "share_memory() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.share_memory"]], "specs (torchrl.envs.multithreadedenv property)": [[56, "torchrl.envs.MultiThreadedEnv.specs"]], "state_dict() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.state_dict"]], "step() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.step"]], "to() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.to"]], "to_empty() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.to_empty"]], "train() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.train"]], "type() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.type"]], "xpu() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.xpu"]], "zero_grad() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.zero_grad"]], "parallelenv (class in torchrl.envs)": [[57, "torchrl.envs.ParallelEnv"]], "add_module() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.add_module"]], "apply() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.apply"]], "batch_locked (torchrl.envs.parallelenv property)": [[57, "torchrl.envs.ParallelEnv.batch_locked"]], "bfloat16() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.bfloat16"]], "buffers() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.buffers"]], "children() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.children"]], "cpu() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.cpu"]], "cuda() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.cuda"]], "double() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.double"]], "eval() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.eval"]], "extra_repr() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.fake_tensordict"]], "float() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.float"]], "forward() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.forward"]], "get_buffer() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_buffer"]], "get_extra_state() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_extra_state"]], "get_parameter() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_parameter"]], "get_submodule() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_submodule"]], "half() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.half"]], "ipu() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.ipu"]], "load_state_dict() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.load_state_dict"]], "modules() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.modules"]], "named_buffers() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_buffers"]], "named_children() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_children"]], "named_modules() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_modules"]], "named_parameters() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_parameters"]], "parameters() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.parameters"]], "rand_action() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.rand_action"]], "rand_step() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.rand_step"]], "register_backward_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_module"]], "register_parameter() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.requires_grad_"]], "reset() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.reset"]], "rollout() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.rollout"]], "set_extra_state() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.set_extra_state"]], "set_seed() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.set_seed"]], "share_memory() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.share_memory"]], "specs (torchrl.envs.parallelenv property)": [[57, "torchrl.envs.ParallelEnv.specs"]], "state_dict() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.state_dict"]], "step() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.step"]], "to() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.to"]], "to_empty() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.to_empty"]], "train() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.train"]], "type() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.type"]], "update_kwargs() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.update_kwargs"]], "xpu() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.xpu"]], "zero_grad() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.zero_grad"]], "serialenv (class in torchrl.envs)": [[58, "torchrl.envs.SerialEnv"]], "add_module() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.add_module"]], "apply() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.apply"]], "batch_locked (torchrl.envs.serialenv property)": [[58, "torchrl.envs.SerialEnv.batch_locked"]], "bfloat16() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.bfloat16"]], "buffers() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.buffers"]], "children() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.children"]], "cpu() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.cpu"]], "cuda() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.cuda"]], "double() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.double"]], "eval() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.eval"]], "extra_repr() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.fake_tensordict"]], "float() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.float"]], "forward() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.forward"]], "get_buffer() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_buffer"]], "get_extra_state() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_extra_state"]], "get_parameter() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_parameter"]], "get_submodule() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_submodule"]], "half() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.half"]], "ipu() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.ipu"]], "load_state_dict() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.load_state_dict"]], "modules() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.modules"]], "named_buffers() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_buffers"]], "named_children() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_children"]], "named_modules() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_modules"]], "named_parameters() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_parameters"]], "parameters() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.parameters"]], "rand_action() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.rand_action"]], "rand_step() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.rand_step"]], "register_backward_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_module"]], "register_parameter() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.requires_grad_"]], "reset() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.reset"]], "rollout() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.rollout"]], "set_extra_state() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.set_extra_state"]], "set_seed() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.set_seed"]], "share_memory() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.share_memory"]], "specs (torchrl.envs.serialenv property)": [[58, "torchrl.envs.SerialEnv.specs"]], "state_dict() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.state_dict"]], "step() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.step"]], "to() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.to"]], "to_empty() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.to_empty"]], "train() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.train"]], "type() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.type"]], "update_kwargs() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.update_kwargs"]], "xpu() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.xpu"]], "zero_grad() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.zero_grad"]], "braxenv() (in module torchrl.envs.libs.brax)": [[59, "torchrl.envs.libs.brax.BraxEnv"]], "braxwrapper() (in module torchrl.envs.libs.brax)": [[60, "torchrl.envs.libs.brax.BraxWrapper"]], "dmcontrolenv() (in module torchrl.envs.libs.dm_control)": [[61, "torchrl.envs.libs.dm_control.DMControlEnv"]], "dmcontrolwrapper() (in module torchrl.envs.libs.dm_control)": [[62, "torchrl.envs.libs.dm_control.DMControlWrapper"]], "gymenv() (in module torchrl.envs.libs.gym)": [[63, "torchrl.envs.libs.gym.GymEnv"]], "gymwrapper() (in module torchrl.envs.libs.gym)": [[64, "torchrl.envs.libs.gym.GymWrapper"]], "habitatenv() (in module torchrl.envs.libs.habitat)": [[65, "torchrl.envs.libs.habitat.HabitatEnv"]], "jumanjienv() (in module torchrl.envs.libs.jumanji)": [[66, "torchrl.envs.libs.jumanji.JumanjiEnv"]], "jumanjiwrapper() (in module torchrl.envs.libs.jumanji)": [[67, "torchrl.envs.libs.jumanji.JumanjiWrapper"]], "openmlenv() (in module torchrl.envs.libs.openml)": [[68, "torchrl.envs.libs.openml.OpenMLEnv"]], "vmasenv() (in module torchrl.envs.libs.vmas)": [[69, "torchrl.envs.libs.vmas.VmasEnv"]], "vmaswrapper() (in module torchrl.envs.libs.vmas)": [[70, "torchrl.envs.libs.vmas.VmasWrapper"]], "dreamerenv() (in module torchrl.envs.model_based.dreamer)": [[71, "torchrl.envs.model_based.dreamer.DreamerEnv"]], "binarizereward (class in torchrl.envs.transforms)": [[72, "torchrl.envs.transforms.BinarizeReward"]], "transform_reward_spec() (torchrl.envs.transforms.binarizereward method)": [[72, "torchrl.envs.transforms.BinarizeReward.transform_reward_spec"]], "catframes (class in torchrl.envs.transforms)": [[73, "torchrl.envs.transforms.CatFrames"]], "forward() (torchrl.envs.transforms.catframes method)": [[73, "torchrl.envs.transforms.CatFrames.forward"]], "reset() (torchrl.envs.transforms.catframes method)": [[73, "torchrl.envs.transforms.CatFrames.reset"]], "transform_observation_spec() (torchrl.envs.transforms.catframes method)": [[73, "torchrl.envs.transforms.CatFrames.transform_observation_spec"]], "cattensors (class in torchrl.envs.transforms)": [[74, "torchrl.envs.transforms.CatTensors"]], "forward() (torchrl.envs.transforms.cattensors method)": [[74, "torchrl.envs.transforms.CatTensors.forward"]], "transform_observation_spec() (torchrl.envs.transforms.cattensors method)": [[74, "torchrl.envs.transforms.CatTensors.transform_observation_spec"]], "centercrop (class in torchrl.envs.transforms)": [[75, "torchrl.envs.transforms.CenterCrop"]], "transform_observation_spec() (torchrl.envs.transforms.centercrop method)": [[75, "torchrl.envs.transforms.CenterCrop.transform_observation_spec"]], "compose (class in torchrl.envs.transforms)": [[76, "torchrl.envs.transforms.Compose"]], "forward() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.forward"]], "reset() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.reset"]], "to() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.to"]], "transform_input_spec() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.transform_reward_spec"]], "discreteactionprojection (class in torchrl.envs.transforms)": [[77, "torchrl.envs.transforms.DiscreteActionProjection"]], "transform_input_spec() (torchrl.envs.transforms.discreteactionprojection method)": [[77, "torchrl.envs.transforms.DiscreteActionProjection.transform_input_spec"]], "doubletofloat (class in torchrl.envs.transforms)": [[78, "torchrl.envs.transforms.DoubleToFloat"]], "transform_input_spec() (torchrl.envs.transforms.doubletofloat method)": [[78, "torchrl.envs.transforms.DoubleToFloat.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.doubletofloat method)": [[78, "torchrl.envs.transforms.DoubleToFloat.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.doubletofloat method)": [[78, "torchrl.envs.transforms.DoubleToFloat.transform_reward_spec"]], "excludetransform (class in torchrl.envs.transforms)": [[79, "torchrl.envs.transforms.ExcludeTransform"]], "forward() (torchrl.envs.transforms.excludetransform method)": [[79, "torchrl.envs.transforms.ExcludeTransform.forward"]], "reset() (torchrl.envs.transforms.excludetransform method)": [[79, "torchrl.envs.transforms.ExcludeTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.excludetransform method)": [[79, "torchrl.envs.transforms.ExcludeTransform.transform_observation_spec"]], "finitetensordictcheck (class in torchrl.envs.transforms)": [[80, "torchrl.envs.transforms.FiniteTensorDictCheck"]], "forward() (torchrl.envs.transforms.finitetensordictcheck method)": [[80, "torchrl.envs.transforms.FiniteTensorDictCheck.forward"]], "flattenobservation (class in torchrl.envs.transforms)": [[81, "torchrl.envs.transforms.FlattenObservation"]], "forward() (torchrl.envs.transforms.flattenobservation method)": [[81, "torchrl.envs.transforms.FlattenObservation.forward"]], "transform_observation_spec() (torchrl.envs.transforms.flattenobservation method)": [[81, "torchrl.envs.transforms.FlattenObservation.transform_observation_spec"]], "frameskiptransform (class in torchrl.envs.transforms)": [[82, "torchrl.envs.transforms.FrameSkipTransform"]], "forward() (torchrl.envs.transforms.frameskiptransform method)": [[82, "torchrl.envs.transforms.FrameSkipTransform.forward"]], "grayscale (class in torchrl.envs.transforms)": [[83, "torchrl.envs.transforms.GrayScale"]], "transform_observation_spec() (torchrl.envs.transforms.grayscale method)": [[83, "torchrl.envs.transforms.GrayScale.transform_observation_spec"]], "inittracker (class in torchrl.envs.transforms)": [[84, "torchrl.envs.transforms.InitTracker"]], "forward() (torchrl.envs.transforms.inittracker method)": [[84, "torchrl.envs.transforms.InitTracker.forward"]], "reset() (torchrl.envs.transforms.inittracker method)": [[84, "torchrl.envs.transforms.InitTracker.reset"]], "transform_observation_spec() (torchrl.envs.transforms.inittracker method)": [[84, "torchrl.envs.transforms.InitTracker.transform_observation_spec"]], "noopresetenv (class in torchrl.envs.transforms)": [[85, "torchrl.envs.transforms.NoopResetEnv"]], "reset() (torchrl.envs.transforms.noopresetenv method)": [[85, "torchrl.envs.transforms.NoopResetEnv.reset"]], "observationnorm (class in torchrl.envs.transforms)": [[86, "torchrl.envs.transforms.ObservationNorm"]], "init_stats() (torchrl.envs.transforms.observationnorm method)": [[86, "torchrl.envs.transforms.ObservationNorm.init_stats"]], "transform_input_spec() (torchrl.envs.transforms.observationnorm method)": [[86, "torchrl.envs.transforms.ObservationNorm.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.observationnorm method)": [[86, "torchrl.envs.transforms.ObservationNorm.transform_observation_spec"]], "observationtransform (class in torchrl.envs.transforms)": [[87, "torchrl.envs.transforms.ObservationTransform"]], "pinmemorytransform (class in torchrl.envs.transforms)": [[88, "torchrl.envs.transforms.PinMemoryTransform"]], "forward() (torchrl.envs.transforms.pinmemorytransform method)": [[88, "torchrl.envs.transforms.PinMemoryTransform.forward"]], "r3mtransform (class in torchrl.envs.transforms)": [[89, "torchrl.envs.transforms.R3MTransform"]], "to() (torchrl.envs.transforms.r3mtransform method)": [[89, "torchrl.envs.transforms.R3MTransform.to"]], "randomcroptensordict (class in torchrl.envs.transforms)": [[90, "torchrl.envs.transforms.RandomCropTensorDict"]], "forward() (torchrl.envs.transforms.randomcroptensordict method)": [[90, "torchrl.envs.transforms.RandomCropTensorDict.forward"]], "renametransform (class in torchrl.envs.transforms)": [[91, "torchrl.envs.transforms.RenameTransform"]], "forward() (torchrl.envs.transforms.renametransform method)": [[91, "torchrl.envs.transforms.RenameTransform.forward"]], "transform_input_spec() (torchrl.envs.transforms.renametransform method)": [[91, "torchrl.envs.transforms.RenameTransform.transform_input_spec"]], "transform_output_spec() (torchrl.envs.transforms.renametransform method)": [[91, "torchrl.envs.transforms.RenameTransform.transform_output_spec"]], "resize (class in torchrl.envs.transforms)": [[92, "torchrl.envs.transforms.Resize"]], "transform_observation_spec() (torchrl.envs.transforms.resize method)": [[92, "torchrl.envs.transforms.Resize.transform_observation_spec"]], "rewardclipping (class in torchrl.envs.transforms)": [[93, "torchrl.envs.transforms.RewardClipping"]], "transform_reward_spec() (torchrl.envs.transforms.rewardclipping method)": [[93, "torchrl.envs.transforms.RewardClipping.transform_reward_spec"]], "rewardscaling (class in torchrl.envs.transforms)": [[94, "torchrl.envs.transforms.RewardScaling"]], "transform_reward_spec() (torchrl.envs.transforms.rewardscaling method)": [[94, "torchrl.envs.transforms.RewardScaling.transform_reward_spec"]], "rewardsum (class in torchrl.envs.transforms)": [[95, "torchrl.envs.transforms.RewardSum"]], "forward() (torchrl.envs.transforms.rewardsum method)": [[95, "torchrl.envs.transforms.RewardSum.forward"]], "reset() (torchrl.envs.transforms.rewardsum method)": [[95, "torchrl.envs.transforms.RewardSum.reset"]], "transform_observation_spec() (torchrl.envs.transforms.rewardsum method)": [[95, "torchrl.envs.transforms.RewardSum.transform_observation_spec"]], "selecttransform (class in torchrl.envs.transforms)": [[96, "torchrl.envs.transforms.SelectTransform"]], "forward() (torchrl.envs.transforms.selecttransform method)": [[96, "torchrl.envs.transforms.SelectTransform.forward"]], "reset() (torchrl.envs.transforms.selecttransform method)": [[96, "torchrl.envs.transforms.SelectTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.selecttransform method)": [[96, "torchrl.envs.transforms.SelectTransform.transform_observation_spec"]], "squeezetransform (class in torchrl.envs.transforms)": [[97, "torchrl.envs.transforms.SqueezeTransform"]], "stepcounter (class in torchrl.envs.transforms)": [[98, "torchrl.envs.transforms.StepCounter"]], "forward() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.forward"]], "reset() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.reset"]], "transform_input_spec() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.transform_observation_spec"]], "tensordictprimer (class in torchrl.envs.transforms)": [[99, "torchrl.envs.transforms.TensorDictPrimer"]], "forward() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.forward"]], "reset() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.reset"]], "to() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.to"]], "transform_observation_spec() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.transform_observation_spec"]], "timemaxpool (class in torchrl.envs.transforms)": [[100, "torchrl.envs.transforms.TimeMaxPool"]], "forward() (torchrl.envs.transforms.timemaxpool method)": [[100, "torchrl.envs.transforms.TimeMaxPool.forward"]], "reset() (torchrl.envs.transforms.timemaxpool method)": [[100, "torchrl.envs.transforms.TimeMaxPool.reset"]], "transform_observation_spec() (torchrl.envs.transforms.timemaxpool method)": [[100, "torchrl.envs.transforms.TimeMaxPool.transform_observation_spec"]], "totensorimage (class in torchrl.envs.transforms)": [[101, "torchrl.envs.transforms.ToTensorImage"]], "transform_observation_spec() (torchrl.envs.transforms.totensorimage method)": [[101, "torchrl.envs.transforms.ToTensorImage.transform_observation_spec"]], "transform (class in torchrl.envs.transforms)": [[102, "torchrl.envs.transforms.Transform"]], "forward() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.forward"]], "reset() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.reset"]], "transform_done_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_done_spec"]], "transform_input_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_observation_spec"]], "transform_output_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_output_spec"]], "transform_reward_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_reward_spec"]], "transformedenv (class in torchrl.envs.transforms)": [[103, "torchrl.envs.transforms.TransformedEnv"]], "action_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.action_spec"]], "batch_locked (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.batch_locked"]], "done_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.done_spec"]], "eval() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.eval"]], "input_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.input_spec"]], "load_state_dict() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.load_state_dict"]], "observation_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.observation_spec"]], "output_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.output_spec"]], "reward_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.reward_spec"]], "set_seed() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.set_seed"]], "state_dict() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.state_dict"]], "to() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.to"]], "train() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.train"]], "unsqueezetransform (class in torchrl.envs.transforms)": [[104, "torchrl.envs.transforms.UnsqueezeTransform"]], "transform_input_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[104, "torchrl.envs.transforms.UnsqueezeTransform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[104, "torchrl.envs.transforms.UnsqueezeTransform.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[104, "torchrl.envs.transforms.UnsqueezeTransform.transform_reward_spec"]], "viprewardtransform (class in torchrl.envs.transforms)": [[105, "torchrl.envs.transforms.VIPRewardTransform"]], "forward() (torchrl.envs.transforms.viprewardtransform method)": [[105, "torchrl.envs.transforms.VIPRewardTransform.forward"]], "reset() (torchrl.envs.transforms.viprewardtransform method)": [[105, "torchrl.envs.transforms.VIPRewardTransform.reset"]], "viptransform (class in torchrl.envs.transforms)": [[106, "torchrl.envs.transforms.VIPTransform"]], "to() (torchrl.envs.transforms.viptransform method)": [[106, "torchrl.envs.transforms.VIPTransform.to"]], "vecnorm (class in torchrl.envs.transforms)": [[107, "torchrl.envs.transforms.VecNorm"]], "build_td_for_shared_vecnorm() (torchrl.envs.transforms.vecnorm static method)": [[107, "torchrl.envs.transforms.VecNorm.build_td_for_shared_vecnorm"]], "forward() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.forward"]], "get_extra_state() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.get_extra_state"]], "set_extra_state() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.set_extra_state"]], "to_observation_norm() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.to_observation_norm"]], "gsdenoise (class in torchrl.envs.transforms)": [[108, "torchrl.envs.transforms.gSDENoise"]], "check_env_specs() (in module torchrl.envs.utils)": [[109, "torchrl.envs.utils.check_env_specs"]], "exploration_mode() (in module torchrl.envs.utils)": [[110, "torchrl.envs.utils.exploration_mode"]], "exploration_type() (in module torchrl.envs.utils)": [[111, "torchrl.envs.utils.exploration_type"]], "get_available_libraries() (in module torchrl.envs.utils)": [[112, "torchrl.envs.utils.get_available_libraries"]], "make_composite_from_td() (in module torchrl.envs.utils)": [[113, "torchrl.envs.utils.make_composite_from_td"]], "set_exploration_mode() (in module torchrl.envs.utils)": [[114, "torchrl.envs.utils.set_exploration_mode"]], "set_exploration_type() (in module torchrl.envs.utils)": [[115, "torchrl.envs.utils.set_exploration_type"]], "step_mdp() (in module torchrl.envs.utils)": [[116, "torchrl.envs.utils.step_mdp"]], "cemplanner (class in torchrl.modules)": [[117, "torchrl.modules.CEMPlanner"]], "planning() (torchrl.modules.cemplanner method)": [[117, "torchrl.modules.CEMPlanner.planning"]], "convnet (class in torchrl.modules)": [[118, "torchrl.modules.ConvNet"]], "forward() (torchrl.modules.convnet method)": [[118, "torchrl.modules.ConvNet.forward"]], "ddpgcnnactor (class in torchrl.modules)": [[119, "torchrl.modules.DdpgCnnActor"]], "forward() (torchrl.modules.ddpgcnnactor method)": [[119, "torchrl.modules.DdpgCnnActor.forward"]], "ddpgcnnqnet (class in torchrl.modules)": [[120, "torchrl.modules.DdpgCnnQNet"]], "forward() (torchrl.modules.ddpgcnnqnet method)": [[120, "torchrl.modules.DdpgCnnQNet.forward"]], "ddpgmlpactor (class in torchrl.modules)": [[121, "torchrl.modules.DdpgMlpActor"]], "forward() (torchrl.modules.ddpgmlpactor method)": [[121, "torchrl.modules.DdpgMlpActor.forward"]], "ddpgmlpqnet (class in torchrl.modules)": [[122, "torchrl.modules.DdpgMlpQNet"]], "forward() (torchrl.modules.ddpgmlpqnet method)": [[122, "torchrl.modules.DdpgMlpQNet.forward"]], "delta (class in torchrl.modules)": [[123, "torchrl.modules.Delta"]], "log_prob() (torchrl.modules.delta method)": [[123, "torchrl.modules.Delta.log_prob"]], "mean (torchrl.modules.delta property)": [[123, "torchrl.modules.Delta.mean"]], "mode (torchrl.modules.delta property)": [[123, "torchrl.modules.Delta.mode"]], "rsample() (torchrl.modules.delta method)": [[123, "torchrl.modules.Delta.rsample"]], "sample() (torchrl.modules.delta method)": [[123, "torchrl.modules.Delta.sample"]], "distributionaldqnnet (class in torchrl.modules)": [[124, "torchrl.modules.DistributionalDQNnet"]], "forward() (torchrl.modules.distributionaldqnnet method)": [[124, "torchrl.modules.DistributionalDQNnet.forward"]], "distributionalqvaluehook (class in torchrl.modules)": [[125, "torchrl.modules.DistributionalQValueHook"]], "dreameractor (class in torchrl.modules)": [[126, "torchrl.modules.DreamerActor"]], "forward() (torchrl.modules.dreameractor method)": [[126, "torchrl.modules.DreamerActor.forward"]], "duelingcnndqnet (class in torchrl.modules)": [[127, "torchrl.modules.DuelingCnnDQNet"]], "forward() (torchrl.modules.duelingcnndqnet method)": [[127, "torchrl.modules.DuelingCnnDQNet.forward"]], "independentnormal (class in torchrl.modules)": [[128, "torchrl.modules.IndependentNormal"]], "mode (torchrl.modules.independentnormal property)": [[128, "torchrl.modules.IndependentNormal.mode"]], "lstmnet (class in torchrl.modules)": [[129, "torchrl.modules.LSTMNet"]], "forward() (torchrl.modules.lstmnet method)": [[129, "torchrl.modules.LSTMNet.forward"]], "mlp (class in torchrl.modules)": [[130, "torchrl.modules.MLP"]], "forward() (torchrl.modules.mlp method)": [[130, "torchrl.modules.MLP.forward"]], "mpcplannerbase (class in torchrl.modules)": [[131, "torchrl.modules.MPCPlannerBase"]], "forward() (torchrl.modules.mpcplannerbase method)": [[131, "torchrl.modules.MPCPlannerBase.forward"]], "planning() (torchrl.modules.mpcplannerbase method)": [[131, "torchrl.modules.MPCPlannerBase.planning"]], "mppiplanner (class in torchrl.modules)": [[132, "torchrl.modules.MPPIPlanner"]], "planning() (torchrl.modules.mppiplanner method)": [[132, "torchrl.modules.MPPIPlanner.planning"]], "noisylazylinear (class in torchrl.modules)": [[133, "torchrl.modules.NoisyLazyLinear"]], "initialize_parameters() (torchrl.modules.noisylazylinear method)": [[133, "torchrl.modules.NoisyLazyLinear.initialize_parameters"]], "noisylinear (class in torchrl.modules)": [[134, "torchrl.modules.NoisyLinear"]], "normalparamwrapper (class in torchrl.modules)": [[135, "torchrl.modules.NormalParamWrapper"]], "forward() (torchrl.modules.normalparamwrapper method)": [[135, "torchrl.modules.NormalParamWrapper.forward"]], "obsdecoder (class in torchrl.modules)": [[136, "torchrl.modules.ObsDecoder"]], "forward() (torchrl.modules.obsdecoder method)": [[136, "torchrl.modules.ObsDecoder.forward"]], "obsencoder (class in torchrl.modules)": [[137, "torchrl.modules.ObsEncoder"]], "forward() (torchrl.modules.obsencoder method)": [[137, "torchrl.modules.ObsEncoder.forward"]], "onehotcategorical (class in torchrl.modules)": [[138, "torchrl.modules.OneHotCategorical"]], "log_prob() (torchrl.modules.onehotcategorical method)": [[138, "torchrl.modules.OneHotCategorical.log_prob"]], "mode (torchrl.modules.onehotcategorical property)": [[138, "torchrl.modules.OneHotCategorical.mode"]], "rsample() (torchrl.modules.onehotcategorical method)": [[138, "torchrl.modules.OneHotCategorical.rsample"]], "sample() (torchrl.modules.onehotcategorical method)": [[138, "torchrl.modules.OneHotCategorical.sample"]], "qvaluehook (class in torchrl.modules)": [[139, "torchrl.modules.QValueHook"]], "rssmposterior (class in torchrl.modules)": [[140, "torchrl.modules.RSSMPosterior"]], "forward() (torchrl.modules.rssmposterior method)": [[140, "torchrl.modules.RSSMPosterior.forward"]], "rssmprior (class in torchrl.modules)": [[141, "torchrl.modules.RSSMPrior"]], "forward() (torchrl.modules.rssmprior method)": [[141, "torchrl.modules.RSSMPrior.forward"]], "tanhdelta (class in torchrl.modules)": [[142, "torchrl.modules.TanhDelta"]], "mean (torchrl.modules.tanhdelta property)": [[142, "torchrl.modules.TanhDelta.mean"]], "mode (torchrl.modules.tanhdelta property)": [[142, "torchrl.modules.TanhDelta.mode"]], "tanhnormal (class in torchrl.modules)": [[143, "torchrl.modules.TanhNormal"]], "mode (torchrl.modules.tanhnormal property)": [[143, "torchrl.modules.TanhNormal.mode"]], "truncatednormal (class in torchrl.modules)": [[144, "torchrl.modules.TruncatedNormal"]], "log_prob() (torchrl.modules.truncatednormal method)": [[144, "torchrl.modules.TruncatedNormal.log_prob"]], "mode (torchrl.modules.truncatednormal property)": [[144, "torchrl.modules.TruncatedNormal.mode"]], "reset_noise (class in torchrl.modules)": [[145, "torchrl.modules.reset_noise"]], "actor (class in torchrl.modules.tensordict_module)": [[146, "torchrl.modules.tensordict_module.Actor"]], "actorcriticoperator (class in torchrl.modules.tensordict_module)": [[147, "torchrl.modules.tensordict_module.ActorCriticOperator"]], "get_critic_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[147, "torchrl.modules.tensordict_module.ActorCriticOperator.get_critic_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[147, "torchrl.modules.tensordict_module.ActorCriticOperator.get_value_operator"]], "actorcriticwrapper (class in torchrl.modules.tensordict_module)": [[148, "torchrl.modules.tensordict_module.ActorCriticWrapper"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[148, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[148, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_value_operator"]], "actorvalueoperator (class in torchrl.modules.tensordict_module)": [[149, "torchrl.modules.tensordict_module.ActorValueOperator"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[149, "torchrl.modules.tensordict_module.ActorValueOperator.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[149, "torchrl.modules.tensordict_module.ActorValueOperator.get_value_operator"]], "additivegaussianwrapper (class in torchrl.modules.tensordict_module)": [[150, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper"]], "forward() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[150, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.forward"]], "step() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[150, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.step"]], "distributionalqvalueactor (class in torchrl.modules.tensordict_module)": [[151, "torchrl.modules.tensordict_module.DistributionalQValueActor"]], "distributionalqvaluemodule (class in torchrl.modules.tensordict_module)": [[152, "torchrl.modules.tensordict_module.DistributionalQValueModule"]], "forward() (torchrl.modules.tensordict_module.distributionalqvaluemodule method)": [[152, "torchrl.modules.tensordict_module.DistributionalQValueModule.forward"]], "egreedywrapper (class in torchrl.modules.tensordict_module)": [[153, "torchrl.modules.tensordict_module.EGreedyWrapper"]], "forward() (torchrl.modules.tensordict_module.egreedywrapper method)": [[153, "torchrl.modules.tensordict_module.EGreedyWrapper.forward"]], "step() (torchrl.modules.tensordict_module.egreedywrapper method)": [[153, "torchrl.modules.tensordict_module.EGreedyWrapper.step"]], "ornsteinuhlenbeckprocesswrapper (class in torchrl.modules.tensordict_module)": [[154, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper"]], "forward() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[154, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.forward"]], "step() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[154, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.step"]], "probabilisticactor (class in torchrl.modules.tensordict_module)": [[155, "torchrl.modules.tensordict_module.ProbabilisticActor"]], "qvalueactor (class in torchrl.modules.tensordict_module)": [[156, "torchrl.modules.tensordict_module.QValueActor"]], "qvaluemodule (class in torchrl.modules.tensordict_module)": [[157, "torchrl.modules.tensordict_module.QValueModule"]], "forward() (torchrl.modules.tensordict_module.qvaluemodule method)": [[157, "torchrl.modules.tensordict_module.QValueModule.forward"]], "safemodule (class in torchrl.modules.tensordict_module)": [[158, "torchrl.modules.tensordict_module.SafeModule"]], "random() (torchrl.modules.tensordict_module.safemodule method)": [[158, "torchrl.modules.tensordict_module.SafeModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safemodule method)": [[158, "torchrl.modules.tensordict_module.SafeModule.random_sample"]], "to() (torchrl.modules.tensordict_module.safemodule method)": [[158, "torchrl.modules.tensordict_module.SafeModule.to"]], "safeprobabilisticmodule (class in torchrl.modules.tensordict_module)": [[159, "torchrl.modules.tensordict_module.SafeProbabilisticModule"]], "random() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[159, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[159, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random_sample"]], "safeprobabilistictensordictsequential (class in torchrl.modules.tensordict_module)": [[160, "torchrl.modules.tensordict_module.SafeProbabilisticTensorDictSequential"]], "safesequential (class in torchrl.modules.tensordict_module)": [[161, "torchrl.modules.tensordict_module.SafeSequential"]], "valueoperator (class in torchrl.modules.tensordict_module)": [[162, "torchrl.modules.tensordict_module.ValueOperator"]], "worldmodelwrapper (class in torchrl.modules.tensordict_module)": [[163, "torchrl.modules.tensordict_module.WorldModelWrapper"]], "get_reward_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[163, "torchrl.modules.tensordict_module.WorldModelWrapper.get_reward_operator"]], "get_transition_model_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[163, "torchrl.modules.tensordict_module.WorldModelWrapper.get_transition_model_operator"]], "biased_softplus (class in torchrl.modules.utils)": [[164, "torchrl.modules.utils.biased_softplus"]], "forward() (torchrl.modules.utils.biased_softplus method)": [[164, "torchrl.modules.utils.biased_softplus.forward"]], "inv_softplus (class in torchrl.modules.utils)": [[165, "torchrl.modules.utils.inv_softplus"]], "mappings (class in torchrl.modules.utils)": [[166, "torchrl.modules.utils.mappings"]], "a2closs (class in torchrl.objectives)": [[167, "torchrl.objectives.A2CLoss"]], "forward() (torchrl.objectives.a2closs method)": [[167, "torchrl.objectives.A2CLoss.forward"]], "make_value_estimator() (torchrl.objectives.a2closs method)": [[167, "torchrl.objectives.A2CLoss.make_value_estimator"]], "clipppoloss (class in torchrl.objectives)": [[168, "torchrl.objectives.ClipPPOLoss"]], "forward() (torchrl.objectives.clipppoloss method)": [[168, "torchrl.objectives.ClipPPOLoss.forward"]], "ddpgloss (class in torchrl.objectives)": [[169, "torchrl.objectives.DDPGLoss"]], "forward() (torchrl.objectives.ddpgloss method)": [[169, "torchrl.objectives.DDPGLoss.forward"]], "make_value_estimator() (torchrl.objectives.ddpgloss method)": [[169, "torchrl.objectives.DDPGLoss.make_value_estimator"]], "dqnloss (class in torchrl.objectives)": [[170, "torchrl.objectives.DQNLoss"]], "forward() (torchrl.objectives.dqnloss method)": [[170, "torchrl.objectives.DQNLoss.forward"]], "make_value_estimator() (torchrl.objectives.dqnloss method)": [[170, "torchrl.objectives.DQNLoss.make_value_estimator"]], "discretesacloss (class in torchrl.objectives)": [[171, "torchrl.objectives.DiscreteSACLoss"]], "forward() (torchrl.objectives.discretesacloss method)": [[171, "torchrl.objectives.DiscreteSACLoss.forward"]], "make_value_estimator() (torchrl.objectives.discretesacloss method)": [[171, "torchrl.objectives.DiscreteSACLoss.make_value_estimator"]], "distributionaldqnloss (class in torchrl.objectives)": [[172, "torchrl.objectives.DistributionalDQNLoss"]], "forward() (torchrl.objectives.distributionaldqnloss method)": [[172, "torchrl.objectives.DistributionalDQNLoss.forward"]], "make_value_estimator() (torchrl.objectives.distributionaldqnloss method)": [[172, "torchrl.objectives.DistributionalDQNLoss.make_value_estimator"]], "dreameractorloss (class in torchrl.objectives)": [[173, "torchrl.objectives.DreamerActorLoss"]], "forward() (torchrl.objectives.dreameractorloss method)": [[173, "torchrl.objectives.DreamerActorLoss.forward"]], "make_value_estimator() (torchrl.objectives.dreameractorloss method)": [[173, "torchrl.objectives.DreamerActorLoss.make_value_estimator"]], "dreamermodelloss (class in torchrl.objectives)": [[174, "torchrl.objectives.DreamerModelLoss"]], "forward() (torchrl.objectives.dreamermodelloss method)": [[174, "torchrl.objectives.DreamerModelLoss.forward"]], "dreamervalueloss (class in torchrl.objectives)": [[175, "torchrl.objectives.DreamerValueLoss"]], "forward() (torchrl.objectives.dreamervalueloss method)": [[175, "torchrl.objectives.DreamerValueLoss.forward"]], "hardupdate (class in torchrl.objectives)": [[176, "torchrl.objectives.HardUpdate"]], "iqlloss (class in torchrl.objectives)": [[177, "torchrl.objectives.IQLLoss"]], "forward() (torchrl.objectives.iqlloss method)": [[177, "torchrl.objectives.IQLLoss.forward"]], "loss_value_diff() (torchrl.objectives.iqlloss static method)": [[177, "torchrl.objectives.IQLLoss.loss_value_diff"]], "make_value_estimator() (torchrl.objectives.iqlloss method)": [[177, "torchrl.objectives.IQLLoss.make_value_estimator"]], "klpenppoloss (class in torchrl.objectives)": [[178, "torchrl.objectives.KLPENPPOLoss"]], "forward() (torchrl.objectives.klpenppoloss method)": [[178, "torchrl.objectives.KLPENPPOLoss.forward"]], "lossmodule (class in torchrl.objectives)": [[179, "torchrl.objectives.LossModule"]], "convert_to_functional() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.convert_to_functional"]], "cpu() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.cpu"]], "cuda() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.cuda"]], "double() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.double"]], "float() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.float"]], "forward() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.forward"]], "half() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.half"]], "make_value_estimator() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.make_value_estimator"]], "named_parameters() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.named_parameters"]], "parameters() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.parameters"]], "register_buffer() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.register_buffer"]], "to() (torchrl.objectives.lossmodule method)": [[179, "torchrl.objectives.LossModule.to"]], "value_estimator (torchrl.objectives.lossmodule property)": [[179, "torchrl.objectives.LossModule.value_estimator"]], "ppoloss (class in torchrl.objectives)": [[180, "torchrl.objectives.PPOLoss"]], "forward() (torchrl.objectives.ppoloss method)": [[180, "torchrl.objectives.PPOLoss.forward"]], "make_value_estimator() (torchrl.objectives.ppoloss method)": [[180, "torchrl.objectives.PPOLoss.make_value_estimator"]], "redqloss (class in torchrl.objectives)": [[181, "torchrl.objectives.REDQLoss"]], "forward() (torchrl.objectives.redqloss method)": [[181, "torchrl.objectives.REDQLoss.forward"]], "make_value_estimator() (torchrl.objectives.redqloss method)": [[181, "torchrl.objectives.REDQLoss.make_value_estimator"]], "reinforceloss (class in torchrl.objectives)": [[182, "torchrl.objectives.ReinforceLoss"]], "forward() (torchrl.objectives.reinforceloss method)": [[182, "torchrl.objectives.ReinforceLoss.forward"]], "make_value_estimator() (torchrl.objectives.reinforceloss method)": [[182, "torchrl.objectives.ReinforceLoss.make_value_estimator"]], "sacloss (class in torchrl.objectives)": [[183, "torchrl.objectives.SACLoss"]], "forward() (torchrl.objectives.sacloss method)": [[183, "torchrl.objectives.SACLoss.forward"]], "make_value_estimator() (torchrl.objectives.sacloss method)": [[183, "torchrl.objectives.SACLoss.make_value_estimator"]], "softupdate (class in torchrl.objectives)": [[184, "torchrl.objectives.SoftUpdate"]], "td3loss (class in torchrl.objectives)": [[185, "torchrl.objectives.TD3Loss"]], "forward() (torchrl.objectives.td3loss method)": [[185, "torchrl.objectives.TD3Loss.forward"]], "make_value_estimator() (torchrl.objectives.td3loss method)": [[185, "torchrl.objectives.TD3Loss.make_value_estimator"]], "valueestimators (class in torchrl.objectives)": [[186, "torchrl.objectives.ValueEstimators"]], "default_value_kwargs (class in torchrl.objectives)": [[187, "torchrl.objectives.default_value_kwargs"]], "distance_loss (class in torchrl.objectives)": [[188, "torchrl.objectives.distance_loss"]], "hold_out_net (class in torchrl.objectives)": [[189, "torchrl.objectives.hold_out_net"]], "hold_out_params (class in torchrl.objectives)": [[190, "torchrl.objectives.hold_out_params"]], "next_state_value (class in torchrl.objectives)": [[191, "torchrl.objectives.next_state_value"]], "gae (class in torchrl.objectives.value)": [[192, "torchrl.objectives.value.GAE"]], "forward() (torchrl.objectives.value.gae method)": [[192, "torchrl.objectives.value.GAE.forward"]], "value_estimate() (torchrl.objectives.value.gae method)": [[192, "torchrl.objectives.value.GAE.value_estimate"]], "td0estimator (class in torchrl.objectives.value)": [[193, "torchrl.objectives.value.TD0Estimator"]], "forward() (torchrl.objectives.value.td0estimator method)": [[193, "torchrl.objectives.value.TD0Estimator.forward"]], "value_estimate() (torchrl.objectives.value.td0estimator method)": [[193, "torchrl.objectives.value.TD0Estimator.value_estimate"]], "td1estimator (class in torchrl.objectives.value)": [[194, "torchrl.objectives.value.TD1Estimator"]], "forward() (torchrl.objectives.value.td1estimator method)": [[194, "torchrl.objectives.value.TD1Estimator.forward"]], "value_estimate() (torchrl.objectives.value.td1estimator method)": [[194, "torchrl.objectives.value.TD1Estimator.value_estimate"]], "tdlambdaestimator (class in torchrl.objectives.value)": [[195, "torchrl.objectives.value.TDLambdaEstimator"]], "forward() (torchrl.objectives.value.tdlambdaestimator method)": [[195, "torchrl.objectives.value.TDLambdaEstimator.forward"]], "value_estimate() (torchrl.objectives.value.tdlambdaestimator method)": [[195, "torchrl.objectives.value.TDLambdaEstimator.value_estimate"]], "valueestimatorbase (class in torchrl.objectives.value)": [[196, "torchrl.objectives.value.ValueEstimatorBase"]], "forward() (torchrl.objectives.value.valueestimatorbase method)": [[196, "torchrl.objectives.value.ValueEstimatorBase.forward"]], "value_estimate() (torchrl.objectives.value.valueestimatorbase method)": [[196, "torchrl.objectives.value.ValueEstimatorBase.value_estimate"]], "generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[197, "torchrl.objectives.value.functional.generalized_advantage_estimate"]], "td0_advantage_estimate (class in torchrl.objectives.value.functional)": [[198, "torchrl.objectives.value.functional.td0_advantage_estimate"]], "td0_return_estimate (class in torchrl.objectives.value.functional)": [[199, "torchrl.objectives.value.functional.td0_return_estimate"]], "td1_advantage_estimate (class in torchrl.objectives.value.functional)": [[200, "torchrl.objectives.value.functional.td1_advantage_estimate"]], "td1_return_estimate (class in torchrl.objectives.value.functional)": [[201, "torchrl.objectives.value.functional.td1_return_estimate"]], "td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[202, "torchrl.objectives.value.functional.td_lambda_advantage_estimate"]], "td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[203, "torchrl.objectives.value.functional.td_lambda_return_estimate"]], "vec_generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[204, "torchrl.objectives.value.functional.vec_generalized_advantage_estimate"]], "vec_td1_advantage_estimate (class in torchrl.objectives.value.functional)": [[205, "torchrl.objectives.value.functional.vec_td1_advantage_estimate"]], "vec_td1_return_estimate (class in torchrl.objectives.value.functional)": [[206, "torchrl.objectives.value.functional.vec_td1_return_estimate"]], "vec_td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[207, "torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate"]], "vec_td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[208, "torchrl.objectives.value.functional.vec_td_lambda_return_estimate"]], "tensordictrecorder() (in module torchrl.record)": [[209, "torchrl.record.TensorDictRecorder"]], "videorecorder() (in module torchrl.record)": [[210, "torchrl.record.VideoRecorder"]], "logger() (in module torchrl.record.loggers)": [[211, "torchrl.record.loggers.Logger"]], "csvlogger() (in module torchrl.record.loggers.csv)": [[212, "torchrl.record.loggers.csv.CSVLogger"]], "generate_exp_name() (in module torchrl.record.loggers)": [[213, "torchrl.record.loggers.generate_exp_name"]], "get_logger() (in module torchrl.record.loggers)": [[214, "torchrl.record.loggers.get_logger"]], "mlflowlogger() (in module torchrl.record.loggers.mlflow)": [[215, "torchrl.record.loggers.mlflow.MLFlowLogger"]], "tensorboardlogger() (in module torchrl.record.loggers.tensorboard)": [[216, "torchrl.record.loggers.tensorboard.TensorboardLogger"]], "wandblogger() (in module torchrl.record.loggers.wandb)": [[217, "torchrl.record.loggers.wandb.WandbLogger"]], "batchsubsampler (class in torchrl.trainers)": [[218, "torchrl.trainers.BatchSubSampler"]], "register() (torchrl.trainers.batchsubsampler method)": [[218, "torchrl.trainers.BatchSubSampler.register"]], "clearcudacache (class in torchrl.trainers)": [[219, "torchrl.trainers.ClearCudaCache"]], "register() (torchrl.trainers.clearcudacache method)": [[219, "torchrl.trainers.ClearCudaCache.register"]], "countframeslog (class in torchrl.trainers)": [[220, "torchrl.trainers.CountFramesLog"]], "register() (torchrl.trainers.countframeslog method)": [[220, "torchrl.trainers.CountFramesLog.register"]], "logreward (class in torchrl.trainers)": [[221, "torchrl.trainers.LogReward"]], "register() (torchrl.trainers.logreward method)": [[221, "torchrl.trainers.LogReward.register"]], "optimizerhook (class in torchrl.trainers)": [[222, "torchrl.trainers.OptimizerHook"]], "register() (torchrl.trainers.optimizerhook method)": [[222, "torchrl.trainers.OptimizerHook.register"]], "recorder (class in torchrl.trainers)": [[223, "torchrl.trainers.Recorder"]], "register() (torchrl.trainers.recorder method)": [[223, "torchrl.trainers.Recorder.register"]], "replaybuffertrainer (class in torchrl.trainers)": [[224, "torchrl.trainers.ReplayBufferTrainer"]], "register() (torchrl.trainers.replaybuffertrainer method)": [[224, "torchrl.trainers.ReplayBufferTrainer.register"]], "rewardnormalizer (class in torchrl.trainers)": [[225, "torchrl.trainers.RewardNormalizer"]], "register() (torchrl.trainers.rewardnormalizer method)": [[225, "torchrl.trainers.RewardNormalizer.register"]], "selectkeys (class in torchrl.trainers)": [[226, "torchrl.trainers.SelectKeys"]], "register() (torchrl.trainers.selectkeys method)": [[226, "torchrl.trainers.SelectKeys.register"]], "trainer (class in torchrl.trainers)": [[227, "torchrl.trainers.Trainer"]], "trainerhookbase (class in torchrl.trainers)": [[228, "torchrl.trainers.TrainerHookBase"]], "register() (torchrl.trainers.trainerhookbase method)": [[228, "torchrl.trainers.TrainerHookBase.register"]], "updateweights (class in torchrl.trainers)": [[229, "torchrl.trainers.UpdateWeights"]], "register() (torchrl.trainers.updateweights method)": [[229, "torchrl.trainers.UpdateWeights.register"]], "correct_for_frame_skip() (in module torchrl.trainers.helpers)": [[230, "torchrl.trainers.helpers.correct_for_frame_skip"]], "get_stats_random_rollout() (in module torchrl.trainers.helpers)": [[231, "torchrl.trainers.helpers.get_stats_random_rollout"]], "make_a2c_loss() (in module torchrl.trainers.helpers)": [[232, "torchrl.trainers.helpers.make_a2c_loss"]], "make_a2c_model() (in module torchrl.trainers.helpers)": [[233, "torchrl.trainers.helpers.make_a2c_model"]], "make_collector_offpolicy() (in module torchrl.trainers.helpers)": [[234, "torchrl.trainers.helpers.make_collector_offpolicy"]], "make_collector_onpolicy() (in module torchrl.trainers.helpers)": [[235, "torchrl.trainers.helpers.make_collector_onpolicy"]], "make_ddpg_actor() (in module torchrl.trainers.helpers)": [[236, "torchrl.trainers.helpers.make_ddpg_actor"]], "make_ddpg_loss() (in module torchrl.trainers.helpers)": [[237, "torchrl.trainers.helpers.make_ddpg_loss"]], "make_dqn_actor() (in module torchrl.trainers.helpers)": [[238, "torchrl.trainers.helpers.make_dqn_actor"]], "make_dqn_loss() (in module torchrl.trainers.helpers)": [[239, "torchrl.trainers.helpers.make_dqn_loss"]], "make_ppo_loss() (in module torchrl.trainers.helpers)": [[240, "torchrl.trainers.helpers.make_ppo_loss"]], "make_ppo_model() (in module torchrl.trainers.helpers)": [[241, "torchrl.trainers.helpers.make_ppo_model"]], "make_redq_loss() (in module torchrl.trainers.helpers)": [[242, "torchrl.trainers.helpers.make_redq_loss"]], "make_redq_model() (in module torchrl.trainers.helpers)": [[243, "torchrl.trainers.helpers.make_redq_model"]], "make_replay_buffer() (in module torchrl.trainers.helpers)": [[244, "torchrl.trainers.helpers.make_replay_buffer"]], "make_sac_loss() (in module torchrl.trainers.helpers)": [[245, "torchrl.trainers.helpers.make_sac_loss"]], "make_sac_model() (in module torchrl.trainers.helpers)": [[246, "torchrl.trainers.helpers.make_sac_model"]], "make_target_updater() (in module torchrl.trainers.helpers)": [[247, "torchrl.trainers.helpers.make_target_updater"]], "make_trainer() (in module torchrl.trainers.helpers)": [[248, "torchrl.trainers.helpers.make_trainer"]], "parallel_env_constructor() (in module torchrl.trainers.helpers)": [[249, "torchrl.trainers.helpers.parallel_env_constructor"]], "sync_async_collector() (in module torchrl.trainers.helpers)": [[250, "torchrl.trainers.helpers.sync_async_collector"]], "sync_sync_collector() (in module torchrl.trainers.helpers)": [[251, "torchrl.trainers.helpers.sync_sync_collector"]], "transformed_env_constructor() (in module torchrl.trainers.helpers)": [[252, "torchrl.trainers.helpers.transformed_env_constructor"]]}})