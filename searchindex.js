Search.setIndex({"docnames": ["index", "reference/collectors", "reference/data", "reference/envs", "reference/generated/knowledge_base/DEBUGGING_RL", "reference/generated/knowledge_base/GYM", "reference/generated/knowledge_base/HABITAT", "reference/generated/knowledge_base/MUJOCO_INSTALLATION", "reference/generated/knowledge_base/PRO-TIPS", "reference/generated/knowledge_base/RESOURCES", "reference/generated/knowledge_base/VERSIONING_ISSUES", "reference/generated/torchrl._utils.implement_for", "reference/generated/torchrl.collectors.collectors.DataCollectorBase", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector", "reference/generated/torchrl.collectors.collectors.RandomPolicy", "reference/generated/torchrl.collectors.collectors.SyncDataCollector", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector", "reference/generated/torchrl.collectors.distributed.DistributedDataCollector", "reference/generated/torchrl.collectors.distributed.DistributedSyncDataCollector", "reference/generated/torchrl.collectors.distributed.RPCDataCollector", "reference/generated/torchrl.collectors.distributed.RayCollector", "reference/generated/torchrl.collectors.distributed.submitit_delayed_launcher", "reference/generated/torchrl.collectors.utils.split_trajectories", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec", "reference/generated/torchrl.data.BoundedTensorSpec", "reference/generated/torchrl.data.CompositeSpec", "reference/generated/torchrl.data.DiscreteTensorSpec", "reference/generated/torchrl.data.MultiDiscreteTensorSpec", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec", "reference/generated/torchrl.data.MultiStep", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec", "reference/generated/torchrl.data.PrioritizedReplayBuffer", "reference/generated/torchrl.data.ReplayBuffer", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer", "reference/generated/torchrl.data.TensorDictReplayBuffer", "reference/generated/torchrl.data.TensorSpec", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec", "reference/generated/torchrl.data.datasets.D4RLExperienceReplay", "reference/generated/torchrl.data.datasets.OpenMLExperienceReplay", "reference/generated/torchrl.data.replay_buffers.LazyMemmapStorage", "reference/generated/torchrl.data.replay_buffers.LazyTensorStorage", "reference/generated/torchrl.data.replay_buffers.ListStorage", "reference/generated/torchrl.data.replay_buffers.PrioritizedSampler", "reference/generated/torchrl.data.replay_buffers.RandomSampler", "reference/generated/torchrl.data.replay_buffers.RoundRobinWriter", "reference/generated/torchrl.data.replay_buffers.Sampler", "reference/generated/torchrl.data.replay_buffers.SamplerWithoutReplacement", "reference/generated/torchrl.data.replay_buffers.Storage", "reference/generated/torchrl.data.replay_buffers.Writer", "reference/generated/torchrl.envs.EnvBase", "reference/generated/torchrl.envs.EnvCreator", "reference/generated/torchrl.envs.EnvMetaData", "reference/generated/torchrl.envs.GymLikeEnv", "reference/generated/torchrl.envs.ModelBasedEnvBase", "reference/generated/torchrl.envs.MultiThreadedEnv", "reference/generated/torchrl.envs.ParallelEnv", "reference/generated/torchrl.envs.SerialEnv", "reference/generated/torchrl.envs.libs.brax.BraxEnv", "reference/generated/torchrl.envs.libs.brax.BraxWrapper", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper", "reference/generated/torchrl.envs.libs.gym.GymEnv", "reference/generated/torchrl.envs.libs.gym.GymWrapper", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper", "reference/generated/torchrl.envs.libs.openml.OpenMLEnv", "reference/generated/torchrl.envs.libs.vmas.VmasEnv", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv", "reference/generated/torchrl.envs.transforms.BinarizeReward", "reference/generated/torchrl.envs.transforms.CatFrames", "reference/generated/torchrl.envs.transforms.CatTensors", "reference/generated/torchrl.envs.transforms.CenterCrop", "reference/generated/torchrl.envs.transforms.Compose", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection", "reference/generated/torchrl.envs.transforms.DoubleToFloat", "reference/generated/torchrl.envs.transforms.ExcludeTransform", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck", "reference/generated/torchrl.envs.transforms.FlattenObservation", "reference/generated/torchrl.envs.transforms.FrameSkipTransform", "reference/generated/torchrl.envs.transforms.GrayScale", "reference/generated/torchrl.envs.transforms.InitTracker", "reference/generated/torchrl.envs.transforms.NoopResetEnv", "reference/generated/torchrl.envs.transforms.ObservationNorm", "reference/generated/torchrl.envs.transforms.ObservationTransform", "reference/generated/torchrl.envs.transforms.PinMemoryTransform", "reference/generated/torchrl.envs.transforms.R3MTransform", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict", "reference/generated/torchrl.envs.transforms.RenameTransform", "reference/generated/torchrl.envs.transforms.Resize", "reference/generated/torchrl.envs.transforms.RewardClipping", "reference/generated/torchrl.envs.transforms.RewardScaling", "reference/generated/torchrl.envs.transforms.RewardSum", "reference/generated/torchrl.envs.transforms.SelectTransform", "reference/generated/torchrl.envs.transforms.SqueezeTransform", "reference/generated/torchrl.envs.transforms.StepCounter", "reference/generated/torchrl.envs.transforms.TensorDictPrimer", "reference/generated/torchrl.envs.transforms.TimeMaxPool", "reference/generated/torchrl.envs.transforms.ToTensorImage", "reference/generated/torchrl.envs.transforms.Transform", "reference/generated/torchrl.envs.transforms.TransformedEnv", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform", "reference/generated/torchrl.envs.transforms.VIPRewardTransform", "reference/generated/torchrl.envs.transforms.VIPTransform", "reference/generated/torchrl.envs.transforms.VecNorm", "reference/generated/torchrl.envs.transforms.gSDENoise", "reference/generated/torchrl.envs.utils.check_env_specs", "reference/generated/torchrl.envs.utils.exploration_mode", "reference/generated/torchrl.envs.utils.exploration_type", "reference/generated/torchrl.envs.utils.get_available_libraries", "reference/generated/torchrl.envs.utils.make_composite_from_td", "reference/generated/torchrl.envs.utils.set_exploration_mode", "reference/generated/torchrl.envs.utils.set_exploration_type", "reference/generated/torchrl.envs.utils.step_mdp", "reference/generated/torchrl.modules.CEMPlanner", "reference/generated/torchrl.modules.ConvNet", "reference/generated/torchrl.modules.DdpgCnnActor", "reference/generated/torchrl.modules.DdpgCnnQNet", "reference/generated/torchrl.modules.DdpgMlpActor", "reference/generated/torchrl.modules.DdpgMlpQNet", "reference/generated/torchrl.modules.Delta", "reference/generated/torchrl.modules.DistributionalDQNnet", "reference/generated/torchrl.modules.DistributionalQValueHook", "reference/generated/torchrl.modules.DreamerActor", "reference/generated/torchrl.modules.DuelingCnnDQNet", "reference/generated/torchrl.modules.IndependentNormal", "reference/generated/torchrl.modules.LSTMNet", "reference/generated/torchrl.modules.MLP", "reference/generated/torchrl.modules.MPCPlannerBase", "reference/generated/torchrl.modules.MPPIPlanner", "reference/generated/torchrl.modules.NoisyLazyLinear", "reference/generated/torchrl.modules.NoisyLinear", "reference/generated/torchrl.modules.NormalParamWrapper", "reference/generated/torchrl.modules.ObsDecoder", "reference/generated/torchrl.modules.ObsEncoder", "reference/generated/torchrl.modules.OneHotCategorical", "reference/generated/torchrl.modules.QValueHook", "reference/generated/torchrl.modules.RSSMPosterior", "reference/generated/torchrl.modules.RSSMPrior", "reference/generated/torchrl.modules.TanhDelta", "reference/generated/torchrl.modules.TanhNormal", "reference/generated/torchrl.modules.TruncatedNormal", "reference/generated/torchrl.modules.reset_noise", "reference/generated/torchrl.modules.tensordict_module.Actor", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor", "reference/generated/torchrl.modules.tensordict_module.QValueActor", "reference/generated/torchrl.modules.tensordict_module.SafeModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticTensorDictSequential", "reference/generated/torchrl.modules.tensordict_module.SafeSequential", "reference/generated/torchrl.modules.tensordict_module.ValueOperator", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper", "reference/generated/torchrl.modules.utils.biased_softplus", "reference/generated/torchrl.modules.utils.inv_softplus", "reference/generated/torchrl.modules.utils.mappings", "reference/generated/torchrl.objectives.A2CLoss", "reference/generated/torchrl.objectives.ClipPPOLoss", "reference/generated/torchrl.objectives.DDPGLoss", "reference/generated/torchrl.objectives.DQNLoss", "reference/generated/torchrl.objectives.DiscreteSACLoss", "reference/generated/torchrl.objectives.DistributionalDQNLoss", "reference/generated/torchrl.objectives.DreamerActorLoss", "reference/generated/torchrl.objectives.DreamerModelLoss", "reference/generated/torchrl.objectives.DreamerValueLoss", "reference/generated/torchrl.objectives.HardUpdate", "reference/generated/torchrl.objectives.IQLLoss", "reference/generated/torchrl.objectives.KLPENPPOLoss", "reference/generated/torchrl.objectives.LossModule", "reference/generated/torchrl.objectives.PPOLoss", "reference/generated/torchrl.objectives.REDQLoss", "reference/generated/torchrl.objectives.ReinforceLoss", "reference/generated/torchrl.objectives.SACLoss", "reference/generated/torchrl.objectives.SoftUpdate", "reference/generated/torchrl.objectives.TD3Loss", "reference/generated/torchrl.objectives.ValueEstimators", "reference/generated/torchrl.objectives.default_value_kwargs", "reference/generated/torchrl.objectives.distance_loss", "reference/generated/torchrl.objectives.hold_out_net", "reference/generated/torchrl.objectives.hold_out_params", "reference/generated/torchrl.objectives.next_state_value", "reference/generated/torchrl.objectives.value.GAE", "reference/generated/torchrl.objectives.value.TD0Estimator", "reference/generated/torchrl.objectives.value.TD1Estimator", "reference/generated/torchrl.objectives.value.TDLambdaEstimator", "reference/generated/torchrl.objectives.value.ValueEstimatorBase", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td0_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td0_return_estimate", "reference/generated/torchrl.objectives.value.functional.td1_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td1_return_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td1_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td1_return_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate", "reference/generated/torchrl.record.TensorDictRecorder", "reference/generated/torchrl.record.VideoRecorder", "reference/generated/torchrl.record.loggers.Logger", "reference/generated/torchrl.record.loggers.csv.CSVLogger", "reference/generated/torchrl.record.loggers.generate_exp_name", "reference/generated/torchrl.record.loggers.get_logger", "reference/generated/torchrl.record.loggers.mlflow.MLFlowLogger", "reference/generated/torchrl.record.loggers.tensorboard.TensorboardLogger", "reference/generated/torchrl.record.loggers.wandb.WandbLogger", "reference/generated/torchrl.trainers.BatchSubSampler", "reference/generated/torchrl.trainers.ClearCudaCache", "reference/generated/torchrl.trainers.CountFramesLog", "reference/generated/torchrl.trainers.LogReward", "reference/generated/torchrl.trainers.OptimizerHook", "reference/generated/torchrl.trainers.Recorder", "reference/generated/torchrl.trainers.ReplayBufferTrainer", "reference/generated/torchrl.trainers.RewardNormalizer", "reference/generated/torchrl.trainers.SelectKeys", "reference/generated/torchrl.trainers.Trainer", "reference/generated/torchrl.trainers.TrainerHookBase", "reference/generated/torchrl.trainers.UpdateWeights", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout", "reference/generated/torchrl.trainers.helpers.make_a2c_loss", "reference/generated/torchrl.trainers.helpers.make_a2c_model", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss", "reference/generated/torchrl.trainers.helpers.make_dqn_actor", "reference/generated/torchrl.trainers.helpers.make_dqn_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_model", "reference/generated/torchrl.trainers.helpers.make_redq_loss", "reference/generated/torchrl.trainers.helpers.make_redq_model", "reference/generated/torchrl.trainers.helpers.make_replay_buffer", "reference/generated/torchrl.trainers.helpers.make_sac_loss", "reference/generated/torchrl.trainers.helpers.make_sac_model", "reference/generated/torchrl.trainers.helpers.make_target_updater", "reference/generated/torchrl.trainers.helpers.make_trainer", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor", "reference/generated/torchrl.trainers.helpers.sync_async_collector", "reference/generated/torchrl.trainers.helpers.sync_sync_collector", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor", "reference/generated/tutorials/README", "reference/index", "reference/knowledge_base", "reference/modules", "reference/objectives", "reference/trainers", "reference/utils", "tutorials/coding_ddpg", "tutorials/coding_dqn", "tutorials/coding_ppo", "tutorials/index", "tutorials/multi_task", "tutorials/pendulum", "tutorials/pretrained_models", "tutorials/sg_execution_times", "tutorials/torchrl_demo", "tutorials/torchrl_envs"], "filenames": ["index.rst", "reference/collectors.rst", "reference/data.rst", "reference/envs.rst", "reference/generated/knowledge_base/DEBUGGING_RL.rst", "reference/generated/knowledge_base/GYM.rst", "reference/generated/knowledge_base/HABITAT.rst", "reference/generated/knowledge_base/MUJOCO_INSTALLATION.rst", "reference/generated/knowledge_base/PRO-TIPS.rst", "reference/generated/knowledge_base/RESOURCES.rst", "reference/generated/knowledge_base/VERSIONING_ISSUES.rst", "reference/generated/torchrl._utils.implement_for.rst", "reference/generated/torchrl.collectors.collectors.DataCollectorBase.rst", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.RandomPolicy.rst", "reference/generated/torchrl.collectors.collectors.SyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector.rst", "reference/generated/torchrl.collectors.distributed.DistributedDataCollector.rst", "reference/generated/torchrl.collectors.distributed.DistributedSyncDataCollector.rst", "reference/generated/torchrl.collectors.distributed.RPCDataCollector.rst", "reference/generated/torchrl.collectors.distributed.RayCollector.rst", "reference/generated/torchrl.collectors.distributed.submitit_delayed_launcher.rst", "reference/generated/torchrl.collectors.utils.split_trajectories.rst", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec.rst", "reference/generated/torchrl.data.BoundedTensorSpec.rst", "reference/generated/torchrl.data.CompositeSpec.rst", "reference/generated/torchrl.data.DiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiDiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiStep.rst", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.PrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.ReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictReplayBuffer.rst", "reference/generated/torchrl.data.TensorSpec.rst", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec.rst", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec.rst", "reference/generated/torchrl.data.datasets.D4RLExperienceReplay.rst", "reference/generated/torchrl.data.datasets.OpenMLExperienceReplay.rst", "reference/generated/torchrl.data.replay_buffers.LazyMemmapStorage.rst", "reference/generated/torchrl.data.replay_buffers.LazyTensorStorage.rst", "reference/generated/torchrl.data.replay_buffers.ListStorage.rst", "reference/generated/torchrl.data.replay_buffers.PrioritizedSampler.rst", "reference/generated/torchrl.data.replay_buffers.RandomSampler.rst", "reference/generated/torchrl.data.replay_buffers.RoundRobinWriter.rst", "reference/generated/torchrl.data.replay_buffers.Sampler.rst", "reference/generated/torchrl.data.replay_buffers.SamplerWithoutReplacement.rst", "reference/generated/torchrl.data.replay_buffers.Storage.rst", "reference/generated/torchrl.data.replay_buffers.Writer.rst", "reference/generated/torchrl.envs.EnvBase.rst", "reference/generated/torchrl.envs.EnvCreator.rst", "reference/generated/torchrl.envs.EnvMetaData.rst", "reference/generated/torchrl.envs.GymLikeEnv.rst", "reference/generated/torchrl.envs.ModelBasedEnvBase.rst", "reference/generated/torchrl.envs.MultiThreadedEnv.rst", "reference/generated/torchrl.envs.ParallelEnv.rst", "reference/generated/torchrl.envs.SerialEnv.rst", "reference/generated/torchrl.envs.libs.brax.BraxEnv.rst", "reference/generated/torchrl.envs.libs.brax.BraxWrapper.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper.rst", "reference/generated/torchrl.envs.libs.gym.GymEnv.rst", "reference/generated/torchrl.envs.libs.gym.GymWrapper.rst", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper.rst", "reference/generated/torchrl.envs.libs.openml.OpenMLEnv.rst", "reference/generated/torchrl.envs.libs.vmas.VmasEnv.rst", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper.rst", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv.rst", "reference/generated/torchrl.envs.transforms.BinarizeReward.rst", "reference/generated/torchrl.envs.transforms.CatFrames.rst", "reference/generated/torchrl.envs.transforms.CatTensors.rst", "reference/generated/torchrl.envs.transforms.CenterCrop.rst", "reference/generated/torchrl.envs.transforms.Compose.rst", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection.rst", "reference/generated/torchrl.envs.transforms.DoubleToFloat.rst", "reference/generated/torchrl.envs.transforms.ExcludeTransform.rst", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck.rst", "reference/generated/torchrl.envs.transforms.FlattenObservation.rst", "reference/generated/torchrl.envs.transforms.FrameSkipTransform.rst", "reference/generated/torchrl.envs.transforms.GrayScale.rst", "reference/generated/torchrl.envs.transforms.InitTracker.rst", "reference/generated/torchrl.envs.transforms.NoopResetEnv.rst", "reference/generated/torchrl.envs.transforms.ObservationNorm.rst", "reference/generated/torchrl.envs.transforms.ObservationTransform.rst", "reference/generated/torchrl.envs.transforms.PinMemoryTransform.rst", "reference/generated/torchrl.envs.transforms.R3MTransform.rst", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict.rst", "reference/generated/torchrl.envs.transforms.RenameTransform.rst", "reference/generated/torchrl.envs.transforms.Resize.rst", "reference/generated/torchrl.envs.transforms.RewardClipping.rst", "reference/generated/torchrl.envs.transforms.RewardScaling.rst", "reference/generated/torchrl.envs.transforms.RewardSum.rst", "reference/generated/torchrl.envs.transforms.SelectTransform.rst", "reference/generated/torchrl.envs.transforms.SqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.StepCounter.rst", "reference/generated/torchrl.envs.transforms.TensorDictPrimer.rst", "reference/generated/torchrl.envs.transforms.TimeMaxPool.rst", "reference/generated/torchrl.envs.transforms.ToTensorImage.rst", "reference/generated/torchrl.envs.transforms.Transform.rst", "reference/generated/torchrl.envs.transforms.TransformedEnv.rst", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.VIPRewardTransform.rst", "reference/generated/torchrl.envs.transforms.VIPTransform.rst", "reference/generated/torchrl.envs.transforms.VecNorm.rst", "reference/generated/torchrl.envs.transforms.gSDENoise.rst", "reference/generated/torchrl.envs.utils.check_env_specs.rst", "reference/generated/torchrl.envs.utils.exploration_mode.rst", "reference/generated/torchrl.envs.utils.exploration_type.rst", "reference/generated/torchrl.envs.utils.get_available_libraries.rst", "reference/generated/torchrl.envs.utils.make_composite_from_td.rst", "reference/generated/torchrl.envs.utils.set_exploration_mode.rst", "reference/generated/torchrl.envs.utils.set_exploration_type.rst", "reference/generated/torchrl.envs.utils.step_mdp.rst", "reference/generated/torchrl.modules.CEMPlanner.rst", "reference/generated/torchrl.modules.ConvNet.rst", "reference/generated/torchrl.modules.DdpgCnnActor.rst", "reference/generated/torchrl.modules.DdpgCnnQNet.rst", "reference/generated/torchrl.modules.DdpgMlpActor.rst", "reference/generated/torchrl.modules.DdpgMlpQNet.rst", "reference/generated/torchrl.modules.Delta.rst", "reference/generated/torchrl.modules.DistributionalDQNnet.rst", "reference/generated/torchrl.modules.DistributionalQValueHook.rst", "reference/generated/torchrl.modules.DreamerActor.rst", "reference/generated/torchrl.modules.DuelingCnnDQNet.rst", "reference/generated/torchrl.modules.IndependentNormal.rst", "reference/generated/torchrl.modules.LSTMNet.rst", "reference/generated/torchrl.modules.MLP.rst", "reference/generated/torchrl.modules.MPCPlannerBase.rst", "reference/generated/torchrl.modules.MPPIPlanner.rst", "reference/generated/torchrl.modules.NoisyLazyLinear.rst", "reference/generated/torchrl.modules.NoisyLinear.rst", "reference/generated/torchrl.modules.NormalParamWrapper.rst", "reference/generated/torchrl.modules.ObsDecoder.rst", "reference/generated/torchrl.modules.ObsEncoder.rst", "reference/generated/torchrl.modules.OneHotCategorical.rst", "reference/generated/torchrl.modules.QValueHook.rst", "reference/generated/torchrl.modules.RSSMPosterior.rst", "reference/generated/torchrl.modules.RSSMPrior.rst", "reference/generated/torchrl.modules.TanhDelta.rst", "reference/generated/torchrl.modules.TanhNormal.rst", "reference/generated/torchrl.modules.TruncatedNormal.rst", "reference/generated/torchrl.modules.reset_noise.rst", "reference/generated/torchrl.modules.tensordict_module.Actor.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor.rst", "reference/generated/torchrl.modules.tensordict_module.QValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.SafeModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticTensorDictSequential.rst", "reference/generated/torchrl.modules.tensordict_module.SafeSequential.rst", "reference/generated/torchrl.modules.tensordict_module.ValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper.rst", "reference/generated/torchrl.modules.utils.biased_softplus.rst", "reference/generated/torchrl.modules.utils.inv_softplus.rst", "reference/generated/torchrl.modules.utils.mappings.rst", "reference/generated/torchrl.objectives.A2CLoss.rst", "reference/generated/torchrl.objectives.ClipPPOLoss.rst", "reference/generated/torchrl.objectives.DDPGLoss.rst", "reference/generated/torchrl.objectives.DQNLoss.rst", "reference/generated/torchrl.objectives.DiscreteSACLoss.rst", "reference/generated/torchrl.objectives.DistributionalDQNLoss.rst", "reference/generated/torchrl.objectives.DreamerActorLoss.rst", "reference/generated/torchrl.objectives.DreamerModelLoss.rst", "reference/generated/torchrl.objectives.DreamerValueLoss.rst", "reference/generated/torchrl.objectives.HardUpdate.rst", "reference/generated/torchrl.objectives.IQLLoss.rst", "reference/generated/torchrl.objectives.KLPENPPOLoss.rst", "reference/generated/torchrl.objectives.LossModule.rst", "reference/generated/torchrl.objectives.PPOLoss.rst", "reference/generated/torchrl.objectives.REDQLoss.rst", "reference/generated/torchrl.objectives.ReinforceLoss.rst", "reference/generated/torchrl.objectives.SACLoss.rst", "reference/generated/torchrl.objectives.SoftUpdate.rst", "reference/generated/torchrl.objectives.TD3Loss.rst", "reference/generated/torchrl.objectives.ValueEstimators.rst", "reference/generated/torchrl.objectives.default_value_kwargs.rst", "reference/generated/torchrl.objectives.distance_loss.rst", "reference/generated/torchrl.objectives.hold_out_net.rst", "reference/generated/torchrl.objectives.hold_out_params.rst", "reference/generated/torchrl.objectives.next_state_value.rst", "reference/generated/torchrl.objectives.value.GAE.rst", "reference/generated/torchrl.objectives.value.TD0Estimator.rst", "reference/generated/torchrl.objectives.value.TD1Estimator.rst", "reference/generated/torchrl.objectives.value.TDLambdaEstimator.rst", "reference/generated/torchrl.objectives.value.ValueEstimatorBase.rst", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td0_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td0_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td1_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td1_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td1_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td1_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate.rst", "reference/generated/torchrl.record.TensorDictRecorder.rst", "reference/generated/torchrl.record.VideoRecorder.rst", "reference/generated/torchrl.record.loggers.Logger.rst", "reference/generated/torchrl.record.loggers.csv.CSVLogger.rst", "reference/generated/torchrl.record.loggers.generate_exp_name.rst", "reference/generated/torchrl.record.loggers.get_logger.rst", "reference/generated/torchrl.record.loggers.mlflow.MLFlowLogger.rst", "reference/generated/torchrl.record.loggers.tensorboard.TensorboardLogger.rst", "reference/generated/torchrl.record.loggers.wandb.WandbLogger.rst", "reference/generated/torchrl.trainers.BatchSubSampler.rst", "reference/generated/torchrl.trainers.ClearCudaCache.rst", "reference/generated/torchrl.trainers.CountFramesLog.rst", "reference/generated/torchrl.trainers.LogReward.rst", "reference/generated/torchrl.trainers.OptimizerHook.rst", "reference/generated/torchrl.trainers.Recorder.rst", "reference/generated/torchrl.trainers.ReplayBufferTrainer.rst", "reference/generated/torchrl.trainers.RewardNormalizer.rst", "reference/generated/torchrl.trainers.SelectKeys.rst", "reference/generated/torchrl.trainers.Trainer.rst", "reference/generated/torchrl.trainers.TrainerHookBase.rst", "reference/generated/torchrl.trainers.UpdateWeights.rst", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip.rst", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_loss.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_model.rst", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_actor.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_model.rst", "reference/generated/torchrl.trainers.helpers.make_redq_loss.rst", "reference/generated/torchrl.trainers.helpers.make_redq_model.rst", "reference/generated/torchrl.trainers.helpers.make_replay_buffer.rst", "reference/generated/torchrl.trainers.helpers.make_sac_loss.rst", "reference/generated/torchrl.trainers.helpers.make_sac_model.rst", "reference/generated/torchrl.trainers.helpers.make_target_updater.rst", "reference/generated/torchrl.trainers.helpers.make_trainer.rst", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor.rst", "reference/generated/torchrl.trainers.helpers.sync_async_collector.rst", "reference/generated/torchrl.trainers.helpers.sync_sync_collector.rst", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor.rst", "reference/generated/tutorials/README.rst", "reference/index.rst", "reference/knowledge_base.rst", "reference/modules.rst", "reference/objectives.rst", "reference/trainers.rst", "reference/utils.rst", "tutorials/coding_ddpg.rst", "tutorials/coding_dqn.rst", "tutorials/coding_ppo.rst", "tutorials/index.rst", "tutorials/multi_task.rst", "tutorials/pendulum.rst", "tutorials/pretrained_models.rst", "tutorials/sg_execution_times.rst", "tutorials/torchrl_demo.rst", "tutorials/torchrl_envs.rst"], "titles": ["Welcome to the TorchRL Documentation!", "torchrl.collectors package", "torchrl.data package", "torchrl.envs package", "Things to consider when debugging RL", "Working with gym", "Working with <code class=\"docutils literal notranslate\"><span class=\"pre\">habitat-lab</span></code>", "Working with MuJoCo-based environments", "Common PyTorch errors and solutions", "Useful resources", "Versioning Issues", "implement_for", "DataCollectorBase", "MultiSyncDataCollector", "MultiaSyncDataCollector", "RandomPolicy", "SyncDataCollector", "aSyncDataCollector", "DistributedDataCollector", "DistributedSyncDataCollector", "RPCDataCollector", "RayCollector", "submitit_delayed_launcher", "split_trajectories", "BinaryDiscreteTensorSpec", "BoundedTensorSpec", "CompositeSpec", "DiscreteTensorSpec", "MultiDiscreteTensorSpec", "MultiOneHotDiscreteTensorSpec", "MultiStep", "OneHotDiscreteTensorSpec", "PrioritizedReplayBuffer", "ReplayBuffer", "TensorDictPrioritizedReplayBuffer", "TensorDictReplayBuffer", "TensorSpec", "UnboundedContinuousTensorSpec", "UnboundedDiscreteTensorSpec", "D4RLExperienceReplay", "OpenMLExperienceReplay", "LazyMemmapStorage", "LazyTensorStorage", "ListStorage", "PrioritizedSampler", "RandomSampler", "RoundRobinWriter", "Sampler", "SamplerWithoutReplacement", "Storage", "Writer", "EnvBase", "EnvCreator", "EnvMetaData", "GymLikeEnv", "ModelBasedEnvBase", "MultiThreadedEnv", "ParallelEnv", "SerialEnv", "BraxEnv", "BraxWrapper", "DMControlEnv", "DMControlWrapper", "GymEnv", "GymWrapper", "HabitatEnv", "JumanjiEnv", "JumanjiWrapper", "OpenMLEnv", "VmasEnv", "VmasWrapper", "DreamerEnv", "BinarizeReward", "CatFrames", "CatTensors", "CenterCrop", "Compose", "DiscreteActionProjection", "DoubleToFloat", "ExcludeTransform", "FiniteTensorDictCheck", "FlattenObservation", "FrameSkipTransform", "GrayScale", "InitTracker", "NoopResetEnv", "ObservationNorm", "ObservationTransform", "PinMemoryTransform", "R3MTransform", "RandomCropTensorDict", "RenameTransform", "Resize", "RewardClipping", "RewardScaling", "RewardSum", "SelectTransform", "SqueezeTransform", "StepCounter", "TensorDictPrimer", "TimeMaxPool", "ToTensorImage", "Transform", "TransformedEnv", "UnsqueezeTransform", "VIPRewardTransform", "VIPTransform", "VecNorm", "gSDENoise", "check_env_specs", "exploration_mode", "exploration_type", "get_available_libraries", "make_composite_from_td", "set_exploration_mode", "set_exploration_type", "step_mdp", "CEMPlanner", "ConvNet", "DdpgCnnActor", "DdpgCnnQNet", "DdpgMlpActor", "DdpgMlpQNet", "Delta", "DistributionalDQNnet", "DistributionalQValueHook", "DreamerActor", "DuelingCnnDQNet", "IndependentNormal", "LSTMNet", "MLP", "MPCPlannerBase", "MPPIPlanner", "NoisyLazyLinear", "NoisyLinear", "NormalParamWrapper", "ObsDecoder", "ObsEncoder", "OneHotCategorical", "QValueHook", "RSSMPosterior", "RSSMPrior", "TanhDelta", "TanhNormal", "TruncatedNormal", "reset_noise", "Actor", "ActorCriticOperator", "ActorCriticWrapper", "ActorValueOperator", "AdditiveGaussianWrapper", "DistributionalQValueActor", "EGreedyWrapper", "OrnsteinUhlenbeckProcessWrapper", "ProbabilisticActor", "QValueActor", "SafeModule", "SafeProbabilisticModule", "SafeProbabilisticTensorDictSequential", "SafeSequential", "ValueOperator", "WorldModelWrapper", "biased_softplus", "inv_softplus", "mappings", "A2CLoss", "ClipPPOLoss", "DDPGLoss", "DQNLoss", "DiscreteSACLoss", "DistributionalDQNLoss", "DreamerActorLoss", "DreamerModelLoss", "DreamerValueLoss", "HardUpdate", "IQLLoss", "KLPENPPOLoss", "LossModule", "PPOLoss", "REDQLoss", "ReinforceLoss", "SACLoss", "SoftUpdate", "TD3Loss", "ValueEstimators", "default_value_kwargs", "distance_loss", "hold_out_net", "hold_out_params", "next_state_value", "GAE", "TD0Estimator", "TD1Estimator", "TDLambdaEstimator", "ValueEstimatorBase", "generalized_advantage_estimate", "td0_advantage_estimate", "td0_return_estimate", "td1_advantage_estimate", "td1_return_estimate", "td_lambda_advantage_estimate", "td_lambda_return_estimate", "vec_generalized_advantage_estimate", "vec_td1_advantage_estimate", "vec_td1_return_estimate", "vec_td_lambda_advantage_estimate", "vec_td_lambda_return_estimate", "TensorDictRecorder", "VideoRecorder", "Logger", "CSVLogger", "generate_exp_name", "get_logger", "MLFlowLogger", "TensorboardLogger", "WandbLogger", "BatchSubSampler", "ClearCudaCache", "CountFramesLog", "LogReward", "OptimizerHook", "Recorder", "ReplayBufferTrainer", "RewardNormalizer", "SelectKeys", "Trainer", "TrainerHookBase", "UpdateWeights", "correct_for_frame_skip", "get_stats_random_rollout", "make_a2c_loss", "make_a2c_model", "make_collector_offpolicy", "make_collector_onpolicy", "make_ddpg_actor", "make_ddpg_loss", "make_dqn_actor", "make_dqn_loss", "make_ppo_loss", "make_ppo_model", "make_redq_loss", "make_redq_model", "make_replay_buffer", "make_sac_loss", "make_sac_model", "make_target_updater", "make_trainer", "parallel_env_constructor", "sync_async_collector", "sync_sync_collector", "transformed_env_constructor", "README Tutos", "API Reference", "Knowledge Base", "torchrl.modules package", "torchrl.objectives package", "torchrl.trainers package", "torchrl._utils package", "TorchRL objectives: Coding a DDPG loss", "TorchRL trainer: A DQN example", "Reinforcement Learning (PPO) with TorchRL Tutorial", "README Tutos", "Task-specific policy in multi-task environments", "Pendulum: Writing your environment and transforms with TorchRL", "Using pretrained models", "Computation times", "Introduction to TorchRL", "TorchRL envs"], "terms": {"The": [0, 1, 2, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 51, 54, 56, 57, 58, 76, 79, 86, 89, 94, 96, 99, 103, 106, 116, 117, 119, 120, 121, 122, 129, 131, 132, 134, 135, 140, 141, 146, 147, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 189, 190, 191, 192, 193, 194, 210, 213, 214, 215, 216, 220, 246, 248, 249, 254, 255, 256, 259, 260, 263, 264, 266, 267], "tensordict": [0, 1, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 32, 33, 34, 35, 39, 40, 41, 42, 44, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 116, 117, 125, 129, 131, 132, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 207, 216, 220, 221, 222, 224, 225, 231, 234, 236, 239, 241, 244, 252, 255, 256, 258, 259, 260, 262, 263, 264, 267], "class": [0, 1, 2, 3, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 248, 249, 250, 254, 255, 256, 258, 259, 260, 267], "ha": [0, 3, 4, 5, 7, 8, 10, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 52, 54, 56, 57, 58, 73, 99, 103, 150, 152, 157, 176, 258, 259, 260, 262, 263, 264, 266, 267], "been": [0, 5, 7, 8, 17, 18, 20, 21, 48, 51, 54, 56, 57, 58, 102, 258, 259, 260, 262, 263, 267], "move": [0, 4, 21, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 116, 130, 156, 177, 223, 258, 259, 266, 267], "out": [0, 3, 4, 5, 21, 30, 39, 51, 54, 56, 57, 58, 99, 109, 133, 134, 146, 151, 153, 154, 155, 156, 157, 187, 188, 256, 258, 259, 260, 263, 266, 267], "dedic": [0, 1, 18, 19, 20, 21, 147, 148, 149, 254, 258, 262], "librari": [0, 5, 6, 7, 8, 9, 10, 18, 19, 20, 39, 56, 112, 252, 253, 254, 257, 258, 259, 260, 263, 267], "take": [0, 1, 3, 8, 23, 51, 54, 56, 57, 58, 98, 100, 102, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 164, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 216, 227, 254, 256, 258, 259, 260, 263, 267], "look": [0, 3, 5, 7, 8, 30, 51, 54, 56, 57, 58, 89, 90, 154, 157, 158, 159, 255, 260, 263, 264, 266, 267], "find": [0, 1, 4, 6, 18, 19, 20, 32, 150, 152, 219, 223, 258, 259], "sourc": [0, 1, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 258, 259, 260, 261, 262, 263, 264, 266, 267], "code": [0, 3, 5, 7, 8, 89, 159, 259, 260, 261, 262, 264, 265, 266, 267], "github": [0, 2, 5, 6, 7, 10, 18, 19, 20, 264, 266], "i": [0, 1, 2, 3, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 68, 72, 73, 74, 75, 76, 77, 79, 81, 84, 85, 86, 89, 90, 91, 94, 95, 96, 98, 99, 101, 102, 103, 105, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 139, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 186, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 216, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 234, 239, 241, 244, 246, 250, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "an": [0, 1, 2, 3, 5, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 68, 75, 77, 80, 85, 86, 89, 90, 91, 92, 99, 101, 102, 103, 107, 109, 118, 119, 120, 121, 122, 129, 130, 131, 133, 137, 147, 148, 149, 153, 154, 157, 158, 161, 164, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 191, 192, 193, 194, 208, 211, 220, 221, 225, 226, 229, 234, 247, 248, 249, 250, 253, 254, 255, 258, 259, 262, 264, 266, 267], "open": [0, 5, 7, 11, 259, 266], "reinforc": [0, 2, 3, 9, 73, 119, 120, 121, 122, 125, 153, 165, 170, 174, 175, 180, 181, 182, 234, 252, 259, 261, 263, 265, 266], "learn": [0, 2, 3, 7, 8, 9, 18, 30, 40, 73, 119, 120, 121, 122, 125, 132, 134, 153, 165, 170, 174, 175, 179, 180, 181, 182, 234, 254, 255, 258, 259, 261, 262, 263, 265, 266, 267], "rl": [0, 1, 2, 3, 5, 8, 10, 13, 14, 16, 17, 55, 134, 146, 154, 160, 165, 177, 178, 216, 253, 254, 255, 256, 258, 259, 260, 264, 267], "pytorch": [0, 1, 2, 101, 225, 253, 256, 258, 260, 263, 264, 266, 267], "It": [0, 2, 3, 4, 7, 30, 34, 39, 51, 54, 55, 56, 57, 58, 65, 86, 90, 103, 109, 119, 121, 126, 140, 141, 153, 157, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 221, 241, 253, 254, 255, 258, 259, 263, 264, 266, 267], "provid": [0, 1, 2, 3, 5, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 45, 51, 54, 55, 56, 57, 58, 74, 75, 81, 85, 86, 89, 90, 95, 99, 103, 106, 107, 118, 125, 129, 130, 131, 146, 150, 152, 153, 154, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 208, 212, 216, 222, 229, 231, 239, 241, 244, 246, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "python": [0, 3, 5, 6, 7, 10, 21, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267], "first": [0, 1, 3, 4, 5, 7, 8, 11, 18, 20, 21, 39, 54, 74, 81, 86, 89, 90, 101, 103, 130, 133, 137, 146, 151, 154, 155, 156, 157, 166, 172, 176, 177, 178, 207, 224, 254, 258, 259, 260, 262, 263, 264, 266, 267], "low": [0, 77, 258, 259, 263, 266], "high": [0, 9, 34, 77, 190, 195, 202, 258, 259, 266], "level": [0, 4, 22, 26, 176, 258, 259, 266], "abstract": [0, 8, 24, 25, 26, 27, 28, 36, 37, 38, 50, 51, 87, 131, 194, 217, 226, 256, 260, 263, 266], "ar": [0, 1, 2, 3, 7, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 49, 51, 52, 54, 55, 56, 57, 58, 68, 76, 77, 78, 80, 81, 89, 95, 99, 102, 103, 104, 106, 107, 113, 117, 122, 123, 129, 131, 134, 138, 141, 153, 154, 156, 157, 158, 159, 164, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 186, 189, 190, 191, 192, 193, 194, 222, 246, 250, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267], "intend": [0, 7, 13, 14, 16, 17, 18, 19, 20, 21, 77, 254, 266], "effici": [0, 1, 2, 4, 8, 134, 254, 258, 259, 260, 262, 264, 266], "modular": [0, 159, 266], "properli": [0, 260, 263, 266], "test": [0, 3, 5, 109, 129, 221, 246, 260, 266], "aim": [0, 3, 7, 89, 106, 130, 228, 253, 254, 255, 258, 259, 266], "support": [0, 1, 3, 18, 20, 26, 39, 40, 49, 56, 68, 86, 102, 112, 125, 151, 156, 159, 170, 190, 191, 192, 193, 213, 254, 256, 260, 263, 266], "research": [0, 7, 9, 266], "most": [0, 3, 7, 8, 30, 77, 258, 260, 263, 266], "written": [0, 3, 39, 41, 51, 54, 56, 57, 58, 73, 95, 98, 100, 146, 151, 153, 154, 155, 156, 157, 160, 165, 166, 176, 178, 180, 189, 207, 208, 254, 255, 256, 258, 262, 263, 266], "highli": [0, 2, 266, 267], "wai": [0, 3, 4, 89, 91, 106, 178, 190, 191, 192, 193, 254, 258, 259, 260, 262, 264, 266, 267], "can": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 48, 51, 52, 54, 56, 57, 58, 73, 76, 77, 85, 86, 89, 90, 95, 99, 102, 103, 106, 107, 117, 128, 131, 132, 134, 135, 143, 144, 146, 150, 151, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 221, 231, 239, 241, 244, 248, 249, 250, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "easili": [0, 3, 7, 231, 239, 241, 244, 255, 258, 259, 260, 266, 267], "swap": [0, 3, 260, 264, 266], "compon": [0, 2, 3, 41, 42, 43, 49, 125, 139, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 220, 225, 258, 259, 260, 262, 263, 264, 266], "transform": [0, 1, 2, 4, 8, 13, 14, 16, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 52, 54, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 119, 125, 126, 139, 162, 164, 208, 222, 231, 234, 236, 239, 241, 244, 250, 252, 259, 261, 264, 265], "them": [0, 2, 7, 21, 32, 33, 34, 35, 39, 40, 51, 52, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 176, 208, 258, 259, 262, 263, 264, 266, 267], "write": [0, 3, 8, 23, 30, 54, 88, 146, 151, 155, 156, 157, 159, 160, 167, 168, 169, 175, 179, 181, 183, 189, 194, 208, 254, 256, 258, 259, 260, 261, 262, 264, 265, 266], "new": [0, 3, 4, 8, 13, 14, 16, 17, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 44, 48, 51, 54, 56, 57, 58, 95, 102, 107, 116, 153, 156, 157, 161, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 258, 260, 263, 266, 267], "ones": [0, 15, 26, 30, 32, 34, 35, 51, 54, 56, 57, 58, 74, 76, 78, 86, 89, 99, 103, 106, 156, 177, 258, 260, 263, 266, 267], "littl": [0, 3, 260, 266, 267], "effort": [0, 3, 263, 266], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 48, 49, 51, 54, 55, 56, 57, 58, 65, 73, 74, 76, 77, 80, 82, 84, 86, 89, 90, 91, 95, 96, 99, 100, 102, 103, 105, 106, 107, 109, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 190, 191, 192, 193, 194, 207, 216, 218, 221, 222, 225, 227, 228, 229, 231, 239, 241, 244, 246, 250, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "repo": [0, 6, 39, 253, 266], "attempt": [0, 150, 152, 153, 175, 266], "align": [0, 266], "exist": [0, 4, 18, 21, 30, 51, 54, 56, 57, 58, 74, 103, 229, 250, 266, 267], "ecosystem": [0, 266], "dataset": [0, 32, 33, 34, 35, 39, 40, 68, 107, 252, 258, 259, 264, 266, 267], "pillar": [0, 266], "environ": [0, 1, 2, 3, 5, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 77, 78, 82, 85, 86, 89, 90, 102, 103, 107, 109, 117, 129, 131, 132, 171, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 216, 218, 221, 228, 229, 231, 232, 233, 234, 236, 239, 241, 244, 246, 247, 248, 249, 250, 253, 254, 261, 264, 265], "model": [0, 1, 3, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 55, 56, 57, 58, 89, 99, 106, 108, 118, 130, 131, 132, 147, 148, 149, 156, 161, 165, 166, 171, 172, 173, 175, 176, 177, 178, 179, 181, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 252, 253, 256, 260, 261, 263, 265, 267], "data": [0, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 68, 86, 98, 109, 113, 117, 125, 129, 132, 139, 146, 151, 152, 153, 154, 155, 156, 157, 159, 160, 167, 169, 178, 179, 181, 183, 190, 191, 192, 193, 194, 216, 222, 225, 227, 232, 246, 248, 249, 250, 252, 254, 255, 256, 263, 264, 267], "util": [0, 3, 17, 23, 30, 51, 54, 56, 57, 58, 89, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 162, 163, 164, 246, 252, 257, 258, 260, 263, 266, 267], "e": [0, 1, 3, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 26, 30, 31, 41, 42, 51, 52, 54, 56, 57, 58, 74, 76, 81, 86, 89, 95, 99, 102, 103, 106, 109, 128, 132, 135, 139, 143, 144, 154, 156, 157, 177, 189, 190, 191, 192, 193, 216, 228, 249, 254, 258, 259, 260, 263, 264, 266, 267], "g": [0, 1, 3, 7, 8, 10, 11, 30, 31, 51, 52, 54, 56, 57, 58, 74, 76, 81, 86, 89, 95, 99, 102, 103, 106, 109, 128, 132, 143, 144, 154, 156, 157, 177, 189, 198, 199, 200, 201, 203, 204, 205, 206, 249, 254, 258, 259, 260, 263, 264, 266, 267], "collector": [0, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 98, 153, 222, 225, 227, 232, 233, 246, 248, 249, 252, 256, 267], "contain": [0, 3, 7, 12, 13, 14, 16, 17, 19, 20, 26, 30, 32, 33, 34, 35, 36, 39, 40, 44, 46, 49, 50, 51, 54, 55, 56, 57, 58, 76, 78, 89, 99, 103, 106, 107, 116, 117, 118, 130, 132, 146, 151, 154, 155, 156, 160, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 212, 216, 228, 231, 234, 236, 239, 241, 244, 246, 247, 248, 249, 250, 254, 255, 256, 258, 259, 260, 263, 264, 266, 267], "etc": [0, 3, 7, 8, 11, 30, 37, 38, 51, 54, 56, 57, 58, 103, 130, 258, 259, 260, 266, 267], "have": [0, 1, 3, 5, 6, 7, 8, 13, 14, 17, 18, 20, 21, 26, 28, 30, 32, 33, 34, 35, 39, 48, 49, 51, 54, 56, 57, 58, 73, 85, 86, 99, 102, 103, 107, 109, 118, 129, 130, 158, 159, 165, 166, 176, 178, 186, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 216, 225, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "few": [0, 2, 8, 216, 260, 266, 267], "depend": [0, 1, 2, 3, 4, 7, 8, 160, 178, 254, 258, 260, 263, 266, 267], "possibl": [0, 3, 4, 27, 30, 31, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177, 221, 225, 258, 260, 263, 266, 267], "standard": [0, 86, 94, 107, 117, 126, 132, 133, 134, 150, 183, 190, 191, 192, 193, 258, 259, 266], "numpi": [0, 11, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 101, 225, 263, 266, 267], "common": [0, 3, 4, 21, 54, 57, 58, 147, 148, 149, 166, 176, 178, 246, 253, 254, 256, 258, 260, 262, 264, 266, 267], "openai": [0, 7, 63, 64, 260, 263, 266, 267], "gym": [0, 3, 4, 8, 11, 13, 14, 16, 21, 22, 52, 54, 63, 64, 84, 86, 91, 99, 107, 231, 234, 236, 239, 241, 244, 246, 253, 258, 259, 260, 263, 264, 266], "onli": [0, 1, 3, 4, 7, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 74, 76, 77, 81, 86, 89, 90, 99, 103, 106, 107, 129, 146, 151, 154, 155, 156, 157, 158, 159, 165, 166, 176, 177, 178, 181, 194, 229, 256, 258, 259, 260, 262, 263, 266, 267], "option": [0, 4, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 51, 52, 54, 55, 56, 57, 58, 61, 68, 73, 74, 75, 77, 78, 81, 82, 84, 85, 86, 89, 90, 91, 94, 98, 99, 100, 101, 103, 104, 106, 107, 109, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 203, 204, 205, 206, 208, 216, 218, 219, 220, 221, 222, 223, 225, 229, 231, 234, 239, 241, 244, 246, 248, 249, 250, 254, 263, 266], "On": [0, 3, 7, 18, 19, 20, 21, 254, 259], "end": [0, 13, 14, 30, 32, 33, 34, 35, 39, 40, 48, 51, 54, 56, 57, 58, 103, 118, 131, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 258, 259, 260, 262, 263, 264, 266, 267], "come": [0, 1, 3, 8, 57, 58, 146, 147, 148, 149, 154, 160, 258, 259, 260, 266, 267], "set": [0, 1, 2, 3, 7, 9, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 32, 33, 34, 35, 39, 40, 48, 49, 51, 53, 54, 55, 56, 57, 58, 74, 76, 84, 89, 98, 99, 103, 106, 109, 114, 115, 131, 150, 156, 177, 216, 221, 222, 233, 250, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 266, 267], "re": [0, 3, 8, 30, 48, 51, 54, 56, 57, 58, 154, 157, 256, 258, 260, 262, 263, 266, 267], "usabl": [0, 256, 266], "function": [0, 3, 8, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 41, 42, 43, 49, 51, 52, 54, 56, 57, 58, 78, 103, 107, 109, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 135, 136, 137, 138, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 231, 234, 236, 239, 241, 244, 246, 252, 254, 258, 262, 263, 267], "cost": [0, 2, 27, 258, 259, 263], "return": [0, 3, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 50, 51, 52, 54, 55, 56, 57, 58, 61, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 116, 117, 119, 120, 121, 122, 123, 125, 128, 129, 130, 131, 132, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 154, 155, 156, 157, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 186, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 225, 228, 231, 232, 234, 236, 239, 241, 244, 246, 247, 248, 249, 250, 252, 254, 256, 258, 259, 260, 262, 263, 264, 266, 267], "process": [0, 1, 2, 3, 4, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 51, 52, 54, 56, 57, 58, 107, 153, 256, 258, 259, 263, 264, 266, 267], "good": [0, 1, 4, 9, 258, 260, 266, 267], "runtim": [0, 3, 30, 51, 54, 56, 57, 58, 263], "perform": [0, 3, 4, 8, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 85, 103, 117, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 131, 132, 135, 136, 137, 140, 141, 150, 152, 153, 162, 172, 178, 221, 225, 255, 258, 259, 260, 262, 263, 267], "ppo": [0, 4, 8, 154, 157, 166, 176, 178, 231, 238, 239, 252, 254, 258, 259, 261, 265], "pendulum": [0, 3, 13, 14, 16, 17, 21, 22, 52, 56, 63, 64, 76, 84, 86, 91, 99, 103, 107, 246, 254, 259, 260, 261, 265, 266, 267], "your": [0, 2, 3, 7, 8, 10, 18, 30, 51, 54, 56, 57, 58, 107, 250, 253, 254, 255, 259, 260, 261, 265, 266], "introduct": [0, 255, 261, 265, 267], "us": [0, 1, 2, 3, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 30, 32, 33, 34, 35, 39, 40, 44, 45, 51, 52, 54, 55, 56, 57, 58, 61, 68, 74, 75, 77, 84, 86, 89, 90, 91, 99, 101, 102, 103, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120, 125, 126, 128, 130, 131, 132, 134, 135, 143, 144, 146, 151, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 186, 189, 190, 191, 192, 193, 194, 195, 202, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 242, 246, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267], "pretrain": [0, 261, 265], "task": [0, 9, 57, 58, 61, 89, 106, 175, 258, 259, 260, 261, 263, 265, 266, 267], "specif": [0, 5, 8, 34, 35, 54, 225, 252, 256, 260, 261, 265], "polici": [0, 1, 2, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 51, 54, 55, 56, 57, 58, 77, 114, 115, 125, 134, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 167, 169, 176, 178, 179, 180, 181, 183, 221, 227, 231, 232, 233, 234, 236, 239, 246, 248, 249, 254, 255, 256, 259, 261, 264, 265, 266, 267], "multi": [0, 3, 7, 9, 30, 51, 54, 56, 57, 58, 129, 130, 258, 259, 261, 263, 265, 266], "object": [0, 3, 4, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 30, 41, 42, 43, 49, 51, 54, 56, 57, 58, 78, 86, 89, 102, 103, 107, 132, 146, 147, 154, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 229, 232, 233, 245, 246, 250, 252, 254, 256, 259, 260, 261, 263, 265, 267], "ddpg": [0, 119, 120, 121, 122, 167, 174, 182, 234, 235, 252, 254, 259, 261, 265, 266], "loss": [0, 3, 8, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 220, 225, 230, 235, 237, 238, 240, 241, 243, 246, 255, 256, 261, 263, 265, 266], "trainer": [0, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 258, 261, 265], "A": [0, 1, 3, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 65, 77, 82, 89, 90, 91, 99, 102, 103, 105, 107, 108, 109, 116, 117, 118, 125, 130, 132, 134, 135, 150, 152, 154, 157, 159, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 190, 191, 192, 193, 194, 209, 210, 213, 218, 225, 227, 231, 236, 239, 241, 244, 246, 255, 258, 260, 261, 263, 265, 267], "dqn": [0, 125, 151, 155, 165, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179, 180, 181, 182, 183, 236, 237, 252, 254, 261, 265], "exampl": [0, 1, 2, 3, 4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 21, 22, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 39, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 74, 76, 77, 78, 84, 86, 89, 91, 99, 101, 103, 106, 107, 113, 116, 117, 118, 125, 129, 130, 132, 135, 138, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 184, 185, 190, 191, 192, 193, 216, 217, 218, 219, 220, 222, 223, 224, 227, 231, 234, 236, 239, 241, 244, 246, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267], "api": [0, 3, 5, 89, 106, 255, 256, 263, 266, 267], "packag": [0, 6, 7, 10, 252, 253, 258, 266, 267], "singl": [0, 3, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 73, 74, 89, 101, 106, 118, 129, 130, 159, 166, 169, 170, 176, 178, 179, 183, 198, 199, 200, 201, 203, 204, 205, 206, 241, 250, 252, 258, 259, 260, 262, 263, 264], "node": [0, 2, 18, 19, 20, 21, 22, 231, 234, 236, 239, 241, 244, 252], "distribut": [0, 2, 3, 4, 9, 10, 18, 19, 20, 21, 22, 86, 117, 123, 124, 125, 126, 128, 132, 135, 138, 140, 141, 142, 143, 144, 150, 151, 154, 157, 158, 165, 166, 170, 176, 178, 252, 256, 259, 260, 263, 266, 267], "helper": [0, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 258, 259, 263], "replai": [0, 8, 13, 14, 16, 32, 33, 34, 35, 39, 40, 44, 45, 46, 47, 49, 77, 90, 99, 167, 168, 169, 175, 179, 181, 183, 222, 225, 242, 246, 252, 256, 263, 264], "buffer": [0, 1, 3, 4, 8, 13, 14, 16, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 54, 55, 56, 57, 58, 76, 77, 89, 90, 99, 103, 106, 146, 151, 154, 155, 156, 159, 160, 167, 168, 169, 175, 177, 179, 181, 183, 222, 225, 242, 246, 252, 256, 263, 264, 267], "compos": [0, 3, 30, 32, 33, 34, 35, 39, 40, 45, 46, 47, 51, 54, 56, 57, 58, 102, 103, 107, 172, 231, 234, 236, 239, 241, 244, 252, 258, 259, 260, 262, 266, 267], "tensorspec": [0, 3, 15, 24, 25, 26, 27, 28, 29, 31, 37, 38, 51, 55, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 252, 263], "env": [0, 1, 2, 5, 6, 7, 8, 13, 14, 16, 18, 19, 20, 21, 22, 30, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 131, 132, 156, 177, 207, 229, 231, 232, 233, 234, 236, 239, 241, 244, 246, 248, 249, 250, 252, 254, 258, 259, 260, 261, 262, 264, 265], "envbas": [0, 3, 13, 14, 16, 17, 18, 19, 20, 21, 52, 54, 56, 57, 58, 85, 91, 102, 103, 107, 109, 117, 131, 132, 221, 229, 231, 232, 233, 234, 236, 239, 241, 244, 246, 248, 249, 250, 252], "gymlikeenv": [0, 252], "envmetadata": [0, 252], "vector": [0, 1, 8, 24, 31, 77, 119, 121, 130, 193, 202, 203, 204, 205, 206, 252, 258, 259, 262, 263, 264, 267], "record": [0, 30, 51, 54, 56, 57, 58, 178, 207, 208, 209, 210, 211, 212, 213, 214, 215, 246, 252, 259, 260], "domain": [0, 2, 8, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 77, 99, 113, 146, 151, 154, 155, 156, 157, 158, 159, 252, 254, 260, 263, 266, 267], "modul": [0, 3, 4, 8, 11, 30, 51, 54, 55, 56, 57, 58, 76, 77, 89, 90, 99, 103, 106, 107, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 190, 191, 192, 193, 194, 225, 230, 235, 237, 238, 240, 243, 246, 252, 255, 256, 259, 260, 262, 263, 264], "actor": [0, 4, 15, 21, 117, 119, 121, 125, 126, 132, 139, 147, 148, 149, 151, 152, 153, 154, 155, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 183, 184, 231, 234, 236, 239, 241, 244, 252, 255, 259, 260, 264, 266], "explor": [0, 1, 108, 134, 146, 150, 151, 152, 153, 154, 155, 156, 157, 165, 221, 232, 233, 246, 252, 260, 263], "valu": [0, 1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 72, 73, 74, 77, 85, 86, 89, 90, 93, 95, 99, 100, 101, 102, 103, 106, 107, 113, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 132, 133, 134, 135, 138, 139, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 216, 218, 219, 220, 221, 222, 225, 231, 234, 239, 241, 244, 246, 252, 256, 259, 262, 263, 266, 267], "gener": [0, 1, 3, 7, 8, 16, 32, 33, 47, 48, 52, 55, 86, 91, 95, 96, 102, 123, 138, 146, 154, 157, 160, 161, 179, 185, 190, 195, 202, 211, 225, 252, 258, 259, 260, 261, 262, 263, 264, 266, 267], "hook": [0, 30, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 135, 136, 137, 139, 140, 141, 150, 151, 152, 153, 155, 162, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 252], "planner": [0, 117, 132, 252], "train": [0, 1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 30, 51, 54, 56, 57, 58, 82, 89, 103, 106, 109, 119, 121, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 225, 227, 246, 252, 256, 259, 264, 267], "sac": [0, 169, 179, 181, 243, 244, 252], "redq": [0, 179, 240, 241, 252], "iql": [0, 175, 252], "td3": [0, 183, 252], "a2c": [0, 165, 230, 252], "dreamer": [0, 71, 126, 171, 172, 173, 252, 254], "checkpoint": [0, 252, 264], "builder": [0, 252, 259, 267], "logger": [0, 208, 210, 211, 212, 213, 214, 215, 219, 225, 246, 250, 252, 259], "_util": [0, 11, 252], "implement_for": [0, 252], "contribut": 0, "thing": [0, 3, 7, 8, 253, 260, 267], "consid": [0, 1, 8, 20, 30, 51, 54, 56, 57, 58, 77, 107, 123, 142, 151, 155, 177, 253, 258, 263], "when": [0, 1, 2, 3, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 51, 52, 54, 56, 57, 58, 68, 76, 77, 85, 86, 89, 90, 95, 99, 102, 103, 106, 107, 114, 115, 117, 130, 131, 132, 133, 143, 154, 156, 157, 159, 162, 166, 176, 177, 178, 184, 189, 207, 208, 222, 250, 253, 254, 256, 258, 259, 260, 263, 264, 267], "debug": [0, 6, 8, 253, 267], "work": [0, 3, 4, 8, 11, 30, 51, 54, 56, 57, 58, 74, 89, 107, 118, 130, 166, 176, 178, 225, 253, 254, 258, 259, 260, 262, 263, 264, 266, 267], "habitat": [0, 65, 253, 264], "lab": [0, 3, 61, 62, 253], "mujoco": [0, 6, 8, 253, 260], "error": [0, 1, 3, 7, 10, 11, 30, 51, 54, 56, 57, 58, 90, 109, 253, 258, 260, 267], "solut": [0, 6, 7, 9, 21, 253, 256, 266], "resourc": [0, 1, 21, 253, 258, 260], "version": [0, 1, 6, 11, 30, 51, 54, 56, 57, 58, 149, 177, 181, 193, 253, 254, 258, 260, 263, 264, 267], "issu": [0, 4, 5, 8, 90, 146, 151, 154, 155, 156, 157, 253, 266], "index": [0, 3, 7, 8, 10, 16, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 50, 77, 116, 262, 266], "search": [0, 259], "page": [0, 7], "somewhat": [1, 255, 267], "equival": [1, 17, 24, 27, 28, 29, 30, 31, 39, 51, 54, 56, 57, 58, 103, 178, 222, 266, 267], "dataload": [1, 48, 259, 260], "except": [1, 3, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 51, 80, 138, 254, 259, 266, 267], "1": [1, 2, 3, 4, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 72, 74, 76, 77, 78, 82, 85, 86, 89, 90, 91, 99, 100, 101, 103, 106, 107, 113, 116, 117, 118, 119, 120, 122, 125, 127, 128, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 162, 165, 166, 169, 172, 175, 176, 177, 178, 179, 181, 182, 189, 190, 191, 192, 193, 197, 198, 199, 203, 204, 206, 216, 221, 222, 223, 231, 234, 236, 239, 241, 244, 246, 250, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267], "thei": [1, 2, 3, 4, 8, 9, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 78, 80, 89, 102, 103, 106, 129, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 222, 225, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "collect": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 30, 32, 33, 34, 35, 39, 40, 86, 89, 106, 109, 153, 167, 169, 179, 181, 183, 216, 222, 225, 227, 228, 229, 246, 256, 258, 263, 264, 266, 267], "over": [1, 2, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 33, 35, 51, 54, 56, 57, 58, 77, 86, 100, 116, 159, 170, 172, 177, 228, 256, 258, 259, 260, 263, 267], "non": [1, 8, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 72, 76, 81, 89, 99, 103, 104, 106, 116, 156, 157, 165, 167, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 183, 190, 191, 192, 193, 254, 258, 263, 267], "static": [1, 107, 175, 263], "2": [1, 3, 8, 10, 11, 13, 14, 16, 21, 22, 28, 29, 30, 32, 33, 34, 35, 51, 52, 54, 56, 57, 58, 68, 69, 70, 74, 76, 77, 86, 89, 99, 103, 106, 107, 113, 118, 119, 120, 121, 125, 127, 129, 130, 135, 151, 152, 153, 156, 160, 166, 167, 169, 175, 176, 177, 178, 179, 181, 183, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 216, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 267], "like": [1, 4, 7, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 65, 101, 109, 179, 255, 258, 260, 263, 264, 267], "being": [1, 3, 7, 8, 17, 18, 20, 21, 30, 51, 54, 56, 57, 58, 77, 78, 91, 103, 114, 115, 153, 166, 176, 177, 178, 208, 222, 227, 248, 249, 250, 254, 258, 259, 260, 263], "": [1, 2, 3, 6, 7, 8, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 109, 118, 134, 147, 149, 150, 154, 156, 157, 175, 177, 181, 190, 191, 192, 193, 194, 241, 244, 254, 258, 259, 260, 262, 263, 264, 266, 267], "accept": [1, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 55, 56, 57, 58, 76, 81, 89, 95, 99, 103, 104, 106, 156, 157, 158, 177, 256, 260, 267], "two": [1, 4, 8, 10, 30, 48, 51, 54, 56, 57, 58, 86, 89, 106, 122, 157, 176, 186, 221, 225, 231, 239, 241, 244, 255, 258, 259, 260, 262, 263, 266, 267], "main": [1, 2, 5, 20, 22, 52, 157, 225, 254, 255, 258, 259, 262, 267], "argument": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 26, 30, 32, 33, 34, 35, 48, 51, 54, 56, 57, 58, 76, 89, 99, 102, 103, 106, 116, 118, 130, 133, 146, 151, 154, 155, 156, 157, 158, 160, 177, 185, 190, 191, 192, 193, 194, 207, 218, 228, 231, 234, 236, 239, 241, 244, 246, 247, 250, 258, 259, 260, 263, 267], "list": [1, 6, 7, 8, 9, 13, 14, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 48, 49, 51, 54, 55, 56, 57, 58, 73, 78, 86, 89, 91, 95, 103, 106, 107, 130, 159, 160, 177, 188, 190, 193, 207, 221, 222, 248, 249, 254, 258, 260, 262, 263, 264, 266, 267], "constructor": [1, 16, 18, 19, 20, 21, 33, 102, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 190, 191, 192, 193, 194, 231, 234, 236, 239, 241, 244, 247, 250, 254, 258, 259, 260], "iter": [1, 13, 14, 16, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 56, 57, 58, 79, 86, 96, 107, 118, 130, 146, 151, 154, 155, 156, 157, 158, 159, 160, 177, 188, 221, 224, 225, 231, 239, 241, 244, 255, 256, 258, 260, 263], "execut": [1, 3, 6, 7, 8, 13, 14, 16, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 51, 52, 54, 55, 56, 57, 58, 99, 158, 159, 229, 250, 254, 256, 259, 260, 265, 267], "step": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 52, 54, 55, 56, 57, 58, 60, 67, 81, 84, 85, 86, 98, 100, 103, 116, 117, 126, 129, 131, 132, 150, 152, 153, 154, 157, 165, 171, 178, 189, 191, 196, 197, 207, 216, 221, 225, 256, 258, 259, 262, 263, 264, 266], "queri": [1, 13, 14, 16, 17, 30, 51, 54, 56, 57, 58, 89, 102, 107, 159, 258, 263, 266], "defin": [1, 2, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 90, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 190, 191, 192, 193, 194, 207, 247, 258, 259, 263, 267], "number": [1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 27, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 51, 54, 55, 56, 57, 58, 68, 73, 77, 82, 85, 86, 94, 98, 100, 107, 117, 118, 123, 124, 126, 127, 128, 130, 132, 135, 136, 137, 140, 141, 142, 143, 144, 146, 150, 151, 152, 153, 154, 155, 156, 157, 160, 164, 169, 171, 175, 176, 179, 181, 183, 216, 218, 221, 225, 227, 228, 229, 248, 249, 250, 254, 258, 259, 260, 263, 264, 267], "befor": [1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 21, 30, 40, 48, 51, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 104, 130, 133, 134, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 191, 192, 193, 222, 258, 260, 263, 267], "deliv": [1, 18, 19, 20, 258, 259, 266], "stack": [1, 7, 8, 18, 20, 21, 57, 58, 107, 158, 159, 207, 216, 254, 259, 262, 263, 266], "user": [1, 2, 5, 8, 21, 30, 39, 51, 54, 56, 57, 58, 103, 129, 178, 247, 255, 256, 258, 259, 263, 266, 267], "reset": [1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 73, 76, 79, 81, 84, 85, 89, 95, 96, 98, 99, 100, 102, 105, 107, 109, 145, 153, 207, 231, 234, 236, 239, 241, 244, 258, 259, 260, 262, 266], "whenev": [1, 3, 30, 32, 33, 34, 35, 84, 177, 227, 254], "reach": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 22, 48, 51, 54, 56, 57, 58, 150, 152, 153, 258, 260, 266, 267], "done": [1, 3, 4, 7, 8, 13, 14, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 86, 91, 94, 96, 98, 99, 102, 103, 107, 116, 117, 132, 167, 168, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 231, 234, 236, 239, 241, 244, 255, 258, 260, 262, 263, 264, 266, 267], "state": [1, 3, 4, 13, 14, 16, 17, 30, 39, 51, 54, 55, 56, 57, 58, 60, 67, 73, 74, 76, 79, 84, 86, 91, 96, 98, 102, 103, 105, 107, 116, 117, 126, 129, 130, 132, 136, 140, 141, 147, 156, 161, 165, 166, 176, 177, 178, 179, 180, 189, 190, 191, 192, 193, 194, 250, 254, 255, 258, 259, 260, 263, 267], "after": [1, 8, 13, 14, 18, 20, 21, 26, 30, 51, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 116, 133, 150, 152, 172, 259, 260, 263, 264, 267], "predefin": [1, 259, 260], "becaus": [1, 3, 4, 7, 102, 122, 129, 146, 151, 154, 155, 156, 157, 258, 259, 262, 263, 267], "potenti": [1, 263], "comput": [1, 3, 4, 8, 13, 16, 21, 27, 30, 51, 54, 56, 57, 58, 86, 103, 105, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 135, 136, 137, 140, 141, 143, 144, 147, 150, 152, 153, 154, 157, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 229, 255, 258, 260, 262, 264], "heavi": [1, 8], "crucial": [1, 175, 258, 259, 260, 263, 267], "configur": [1, 8, 13, 14, 16, 17, 21, 22, 177, 178, 231, 239, 241, 244, 254, 258, 259, 260, 263], "hyperparamet": [1, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 258, 263], "appropri": [1, 3, 4, 7, 13, 14, 16, 17, 46, 50, 99, 247, 250, 258], "paramet": [1, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 239, 241, 244, 246, 247, 248, 249, 250, 254, 255, 258, 263, 264, 266], "consider": [1, 3, 8, 259], "whether": [1, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 55, 56, 57, 58, 103, 118, 130, 160, 166, 167, 168, 169, 170, 176, 177, 178, 179, 181, 183, 193, 258, 259, 260, 263, 267], "should": [1, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 51, 54, 55, 56, 57, 58, 73, 81, 86, 90, 91, 95, 96, 98, 102, 103, 107, 109, 116, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 154, 156, 157, 162, 169, 174, 176, 177, 178, 179, 182, 189, 190, 191, 192, 193, 194, 208, 220, 221, 222, 225, 246, 248, 249, 250, 254, 256, 258, 259, 260, 262, 263, 264, 266, 267], "occur": [1, 8, 14, 74, 86, 90, 146, 151, 154, 155, 156, 157, 172, 267], "serial": [1, 3, 30, 51, 54, 56, 57, 58, 107], "optim": [1, 8, 30, 51, 54, 56, 57, 58, 117, 132, 133, 134, 177, 178, 181, 220, 225, 231, 239, 246, 255, 256, 260, 263], "parallel": [1, 3, 8, 17, 109, 165, 247, 248, 249, 250, 259, 260], "syncdatacollector": [1, 13, 14, 17, 18, 19, 20, 21, 246, 249, 252, 260], "worker": [1, 13, 14, 16, 17, 18, 19, 20, 21, 22, 52, 56, 57, 58, 107, 248, 249, 250, 258, 260, 266, 267], "multisyncdatacollector": [1, 18, 19, 20, 21, 249, 252, 260, 266], "split": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 39, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 254, 256, 260, 266], "workload": 1, "across": [1, 8, 18, 19, 20, 21, 32, 33, 34, 35, 107, 153, 227, 254, 258, 263], "aggreg": [1, 118, 119, 120, 159], "result": [1, 3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 48, 51, 52, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 107, 109, 116, 130, 139, 177, 190, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 227, 254, 259, 263, 264, 266, 267], "final": [1, 3, 4, 21, 150, 152, 153, 158, 190, 221, 254, 258, 259, 260, 263, 267], "multiasyncdatacollector": [1, 17, 18, 19, 20, 21, 248, 252, 258, 259, 260, 266], "sever": [1, 8, 28, 30, 51, 54, 56, 57, 58, 74, 103, 178, 258, 260, 267], "batch": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 23, 27, 30, 31, 32, 33, 34, 35, 39, 40, 45, 48, 51, 54, 55, 56, 57, 58, 68, 81, 86, 90, 99, 103, 104, 107, 123, 124, 129, 133, 138, 142, 153, 156, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 216, 219, 222, 223, 224, 225, 227, 248, 249, 250, 256, 258, 259, 260, 262, 264, 266, 267], "gather": [1, 3, 18, 20, 21, 90, 189, 229, 253, 258, 259, 260, 263, 267], "continu": [1, 9, 25, 37, 113, 119, 120, 121, 122, 153, 157, 159, 182, 190, 195, 202, 234, 254, 258, 260, 263, 266, 267], "concomitantli": 1, "network": [1, 4, 8, 30, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 130, 134, 136, 137, 140, 141, 147, 148, 149, 156, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 192, 193, 194, 231, 234, 239, 245, 246, 254, 255, 256, 258, 262, 263, 267], "impli": [1, 267], "weight": [1, 4, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 134, 156, 165, 166, 169, 172, 177, 227, 245, 254, 256, 258, 259, 260, 262, 263, 266], "mai": [1, 2, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 20, 21, 30, 39, 51, 54, 56, 57, 58, 86, 96, 103, 104, 107, 109, 130, 255, 256, 258, 259, 260, 263, 264, 266, 267], "slightli": [1, 254, 255, 263, 264, 267], "lag": [1, 13, 14, 16, 17, 258, 259, 260], "therefor": [1, 3, 7, 178, 267], "although": [1, 8, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 256, 258, 259], "fastest": 1, "price": 1, "suitabl": 1, "where": [1, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 39, 40, 41, 42, 51, 54, 55, 56, 57, 58, 68, 73, 89, 95, 98, 100, 102, 104, 106, 150, 152, 154, 156, 157, 164, 165, 166, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 255, 256, 258, 259, 260, 262, 263, 267], "asynchron": [1, 9, 14, 21, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 165, 177, 248, 259, 260], "off": [1, 2, 4, 128, 143, 144, 181, 221, 232, 254, 256, 258, 259, 260, 264, 267], "curriculum": [1, 4], "For": [1, 2, 3, 4, 7, 8, 9, 10, 13, 14, 16, 17, 18, 20, 21, 30, 39, 51, 54, 56, 57, 58, 81, 86, 125, 133, 147, 149, 165, 170, 175, 177, 178, 221, 234, 254, 256, 258, 259, 260, 263, 264, 267], "remot": [1, 18, 19, 20, 21, 57, 58, 267], "rollout": [1, 3, 13, 14, 16, 21, 23, 51, 54, 55, 56, 57, 58, 69, 70, 91, 109, 117, 132, 153, 165, 229, 254, 258, 260, 264, 266], "necessari": [1, 4, 6, 8, 13, 14, 16, 17, 96, 179, 190, 191, 192, 193, 194, 255, 258, 260], "synchronis": [1, 52], "from": [1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 51, 52, 54, 55, 56, 57, 58, 74, 77, 79, 84, 86, 89, 90, 91, 96, 98, 99, 101, 102, 103, 104, 106, 107, 113, 116, 117, 119, 120, 121, 122, 125, 128, 130, 131, 132, 133, 135, 139, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 167, 168, 169, 176, 177, 178, 179, 181, 183, 185, 189, 190, 191, 192, 193, 207, 208, 216, 222, 225, 228, 229, 231, 234, 236, 239, 241, 242, 244, 246, 247, 250, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "either": [1, 5, 22, 30, 51, 54, 56, 57, 58, 161, 212, 234, 256, 258, 259, 264, 266, 267], "update_policy_weights_": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 258, 266], "update_at_each_batch": [1, 13, 14, 17, 258], "true": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 69, 70, 74, 76, 77, 81, 84, 85, 86, 89, 90, 91, 94, 98, 99, 101, 103, 104, 106, 107, 109, 113, 116, 117, 118, 119, 120, 121, 122, 127, 128, 130, 132, 133, 134, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 165, 166, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 186, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 218, 219, 221, 222, 225, 236, 250, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "second": [1, 8, 166, 176, 178, 181, 224, 258, 259, 260, 262, 263, 264, 266, 267], "devic": [1, 2, 3, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 41, 42, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 76, 88, 89, 91, 99, 101, 103, 106, 113, 116, 117, 118, 119, 120, 121, 122, 125, 127, 129, 130, 132, 133, 134, 139, 146, 147, 148, 149, 151, 153, 154, 155, 156, 159, 160, 177, 222, 227, 231, 234, 236, 239, 241, 242, 244, 254, 258, 259, 260, 262, 263, 264, 266], "oper": [1, 3, 4, 7, 8, 13, 14, 17, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 81, 102, 125, 135, 147, 148, 149, 156, 161, 165, 166, 167, 168, 170, 176, 177, 178, 180, 189, 190, 191, 192, 193, 225, 234, 236, 241, 244, 252, 256, 258, 259, 260, 262, 263, 267], "instanc": [1, 2, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 36, 39, 51, 52, 54, 55, 56, 57, 58, 62, 73, 86, 99, 102, 107, 113, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 131, 135, 136, 137, 140, 141, 150, 152, 153, 154, 157, 158, 159, 162, 177, 208, 212, 221, 229, 231, 232, 233, 234, 236, 239, 241, 244, 246, 248, 249, 254, 255, 256, 258, 260, 263, 267], "cpu": [1, 3, 8, 10, 13, 14, 16, 18, 19, 20, 21, 24, 30, 34, 35, 36, 41, 42, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 76, 89, 91, 99, 103, 106, 113, 116, 117, 132, 134, 146, 147, 148, 149, 151, 154, 156, 159, 160, 177, 222, 231, 234, 236, 239, 241, 244, 254, 258, 259, 260, 262, 263, 264, 266, 267], "slower": 1, "than": [1, 4, 8, 13, 14, 16, 17, 39, 91, 122, 130, 135, 146, 150, 151, 152, 155, 156, 160, 177, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 253, 255, 258, 259, 260, 263, 266, 267], "one": [1, 3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 44, 46, 49, 50, 51, 52, 54, 56, 57, 58, 68, 77, 85, 86, 89, 97, 103, 104, 106, 107, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 135, 136, 137, 138, 139, 140, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 169, 176, 177, 178, 179, 180, 183, 196, 197, 218, 220, 221, 225, 229, 231, 239, 241, 244, 250, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 267], "cuda": [1, 3, 7, 30, 51, 54, 56, 57, 58, 76, 88, 89, 99, 103, 106, 156, 177, 217, 258, 259, 260, 264, 267], "multipl": [1, 3, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 27, 57, 58, 74, 77, 95, 102, 107, 129, 133, 134, 146, 151, 154, 155, 156, 157, 166, 169, 176, 178, 179, 183, 241, 250, 254, 256, 258, 259, 260, 263, 266], "infer": [1, 57, 58, 107, 133, 258, 260], "run": [1, 3, 4, 5, 6, 7, 8, 10, 13, 14, 17, 21, 30, 51, 54, 55, 56, 57, 58, 61, 62, 85, 86, 103, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 158, 159, 162, 177, 221, 248, 249, 250, 253, 256, 258, 259, 260, 262, 263, 264, 266], "dispatch": [1, 18, 19, 20, 21], "avail": [1, 4, 6, 21, 48, 125, 139, 154, 157, 177, 248, 249, 254, 258, 259, 260, 267], "speed": [1, 2, 4, 8, 27, 255, 258, 259, 260, 263], "up": [1, 2, 3, 8, 9, 27, 39, 178, 253, 254, 255, 258, 259, 260, 263, 267], "avoid": [1, 30, 51, 54, 56, 57, 58, 103, 107, 146, 151, 155, 156, 160, 166, 176, 178, 228, 260], "oom": 1, "choic": [1, 2, 39, 135, 254, 255, 258, 259], "size": [1, 2, 3, 13, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 74, 81, 89, 91, 97, 99, 101, 103, 104, 106, 107, 113, 116, 117, 118, 123, 125, 129, 130, 132, 135, 138, 139, 140, 141, 142, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 177, 189, 190, 191, 192, 193, 194, 208, 216, 222, 231, 234, 236, 239, 241, 244, 254, 258, 259, 260, 262, 263, 264, 266, 267], "pass": [1, 3, 4, 13, 14, 16, 18, 19, 20, 21, 22, 26, 30, 32, 33, 34, 35, 51, 52, 53, 54, 56, 57, 58, 78, 91, 102, 104, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 133, 135, 136, 137, 140, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 166, 176, 177, 178, 190, 191, 192, 193, 194, 222, 248, 249, 250, 254, 258, 259, 260, 262, 263, 267], "ie": [1, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 44, 68, 81, 104, 107, 165, 166, 176, 177, 178, 254, 255, 259, 260], "store": [1, 3, 8, 13, 14, 16, 17, 20, 26, 30, 34, 35, 41, 42, 43, 44, 51, 54, 56, 57, 58, 107, 117, 129, 132, 231, 234, 236, 239, 241, 244, 252, 256, 258, 260, 264, 267], "while": [1, 3, 7, 8, 30, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 175, 176, 177, 178, 254, 258, 260, 263, 264, 266], "wait": [1, 20, 21, 22, 263], "also": [1, 2, 3, 8, 11, 30, 34, 51, 54, 56, 57, 58, 77, 86, 91, 95, 96, 99, 103, 141, 158, 159, 165, 167, 168, 177, 190, 196, 197, 254, 256, 258, 259, 260, 262, 263, 267], "impact": [1, 259], "memori": [1, 2, 3, 8, 21, 27, 30, 41, 51, 52, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 156, 177, 250, 256, 258, 259, 260, 262, 263, 264, 266, 267], "manag": [1, 8, 187, 188, 190, 191, 192, 193, 221], "kei": [1, 3, 7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 103, 105, 106, 107, 116, 117, 131, 132, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 208, 219, 220, 221, 223, 224, 225, 229, 231, 239, 241, 244, 255, 256, 258, 260, 262, 263, 266, 267], "control": [1, 3, 5, 8, 16, 61, 62, 77, 116, 119, 120, 121, 122, 131, 132, 141, 153, 156, 157, 158, 165, 166, 176, 178, 182, 190, 195, 202, 234, 254, 256, 258, 259, 260, 263], "which": [1, 2, 3, 4, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 26, 27, 30, 31, 34, 35, 39, 48, 51, 54, 56, 57, 58, 73, 74, 82, 85, 86, 89, 90, 98, 99, 100, 102, 103, 109, 128, 143, 144, 146, 147, 148, 149, 151, 154, 155, 156, 157, 159, 160, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 186, 190, 216, 220, 231, 234, 236, 239, 241, 244, 254, 255, 256, 258, 259, 260, 262, 263, 264, 267], "storing_devic": [1, 13, 14, 16, 17, 18, 19, 20, 21, 258, 259, 266], "dure": [1, 7, 13, 14, 16, 17, 18, 19, 20, 39, 40, 51, 54, 56, 57, 58, 82, 103, 221, 225, 255, 258, 259, 260, 263, 267], "heurist": [1, 4, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 153, 258, 267], "usual": [1, 3, 4, 6, 7, 8, 39, 51, 54, 56, 57, 58, 134, 178, 190, 191, 192, 193, 194, 207, 231, 239, 241, 244, 253, 254, 256, 258, 259, 260, 267], "same": [1, 3, 4, 11, 13, 14, 16, 18, 19, 20, 21, 30, 39, 48, 51, 52, 54, 56, 57, 58, 77, 82, 85, 86, 102, 103, 107, 118, 130, 153, 258, 259, 260, 262, 263, 264, 267], "storag": [1, 2, 8, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 48, 51, 53, 54, 56, 57, 58, 78, 252, 256, 258, 259, 260, 264], "default": [1, 2, 3, 10, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 44, 51, 54, 56, 57, 58, 61, 68, 73, 74, 77, 81, 85, 86, 89, 90, 94, 98, 99, 100, 101, 103, 104, 106, 107, 109, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 146, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 231, 234, 239, 241, 244, 246, 250, 256, 258, 259, 260, 264, 266, 267], "behaviour": [1, 3, 21, 54, 74, 86, 90, 116, 128, 143, 144, 221, 254, 259, 263], "besid": 1, "those": [1, 5, 7, 26, 57, 58, 86, 99, 154, 157, 158, 159, 227, 248, 249, 254, 258, 259, 263, 267], "choos": [1, 178, 254, 255, 258, 259, 260], "follow": [1, 2, 3, 6, 7, 8, 30, 39, 40, 51, 54, 55, 56, 57, 58, 68, 89, 118, 130, 164, 166, 176, 177, 180, 225, 241, 244, 254, 255, 256, 258, 259, 260, 262, 263, 266, 267], "max_frames_per_traj": [1, 13, 14, 16, 17, 18, 19, 20, 21, 228, 258, 260, 266], "frame": [1, 2, 13, 14, 16, 17, 18, 19, 20, 21, 30, 54, 73, 82, 150, 152, 153, 207, 208, 218, 221, 225, 228, 229, 258, 259, 260, 266, 267], "call": [1, 3, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 45, 48, 49, 51, 54, 56, 57, 58, 68, 73, 76, 77, 78, 81, 84, 86, 88, 89, 95, 98, 99, 103, 106, 107, 109, 114, 115, 117, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 132, 133, 135, 136, 137, 140, 141, 150, 152, 153, 156, 157, 159, 162, 166, 176, 177, 178, 189, 190, 191, 192, 193, 207, 221, 256, 259, 260, 263, 266, 267], "frames_per_batch": [1, 13, 14, 16, 17, 18, 19, 20, 21, 228, 258, 259, 260, 266], "each": [1, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28, 29, 30, 34, 51, 52, 54, 56, 57, 58, 89, 95, 98, 99, 100, 106, 107, 125, 139, 150, 159, 198, 199, 200, 201, 203, 204, 205, 206, 221, 222, 248, 249, 254, 258, 259, 260, 263, 264, 266, 267], "init_random_fram": [1, 13, 14, 16, 17, 18, 19, 20, 21, 228, 258, 259], "random": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 45, 51, 54, 55, 56, 57, 58, 77, 85, 86, 99, 109, 154, 156, 157, 179, 221, 229, 254, 258, 259, 260, 263, 264, 266, 267], "rand_step": [1, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 84, 107, 263, 266, 267], "reset_at_each_it": [1, 13, 14, 16, 17, 18, 19, 20, 21, 258], "split_traj": [1, 13, 14, 16, 17, 18, 19, 20, 21, 39, 258, 259, 260], "trajectori": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 23, 30, 34, 39, 44, 51, 54, 56, 57, 58, 90, 102, 117, 132, 153, 178, 190, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 216, 252, 255, 258, 259, 260, 263, 266, 267], "pad": [1, 23, 39, 118, 119, 120, 129, 222], "along": [1, 23, 39, 73, 74, 86, 90, 95, 101, 130, 134, 154, 156, 157, 177, 254, 258, 259, 263], "mask": [1, 4, 13, 14, 16, 23, 90, 222, 259, 267], "point": [1, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 40, 44, 46, 50, 51, 54, 56, 57, 58, 73, 76, 89, 99, 101, 103, 106, 131, 156, 164, 170, 177, 225, 253, 259, 260, 262, 263, 267], "boolean": [1, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 54, 90, 150, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 256], "repres": [1, 3, 13, 14, 16, 17, 18, 19, 20, 21, 26, 34, 51, 54, 56, 57, 58, 82, 90, 107, 125, 139, 157, 186, 190, 222, 258, 260], "valid": [1, 23, 90, 103, 118, 130, 150, 152, 153, 176, 222, 256, 267], "exploration_mod": [1, 13, 14, 16, 18, 19, 20, 21, 221, 252, 254, 258, 259], "strategi": [1, 16, 254, 256, 258, 259], "reset_when_don": [1, 13, 14, 16, 18, 19, 20, 21], "These": [1, 2, 7, 30, 51, 54, 56, 57, 58, 89, 106, 254, 255, 258, 260, 263, 267], "tool": [1, 5, 263, 267], "backend": [1, 3, 7, 11, 18, 19, 21, 22, 256, 258, 260, 263], "gloo": [1, 18, 19, 22], "nccl": [1, 18, 19], "mpi": [1, 18, 19], "distributeddatacollector": [1, 22, 252], "rpc": [1, 20, 22], "rpcdatacollector": [1, 22, 252], "launcher": [1, 18, 19, 20, 22], "rai": [1, 21], "submitit": [1, 18, 19, 20, 22], "torch": [1, 3, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 44, 48, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 74, 76, 77, 78, 86, 89, 91, 94, 99, 101, 103, 106, 107, 113, 116, 117, 118, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 138, 139, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 163, 177, 190, 191, 192, 193, 216, 223, 224, 231, 234, 236, 239, 241, 244, 246, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "multiprocess": [1, 18, 19, 20, 52, 53, 107, 259, 260, 263, 267], "synchron": [1, 13, 19, 21, 56, 248, 249, 259, 260], "mode": [1, 6, 13, 14, 16, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 103, 107, 110, 114, 115, 123, 128, 138, 142, 143, 144, 154, 157, 221, 258, 259, 266, 267], "folder": [1, 259], "sub": [1, 2, 3, 13, 14, 18, 19, 20, 21, 51, 54, 56, 57, 58, 90, 158, 159, 216, 225, 254, 258, 259, 260, 262, 266, 267], "all": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 52, 54, 55, 56, 57, 58, 76, 80, 86, 89, 95, 99, 100, 103, 106, 107, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 156, 157, 159, 162, 172, 177, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 220, 225, 228, 248, 249, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 266, 267], "variou": [1, 3, 13, 14, 16, 17, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 248, 249, 258, 259, 260, 267], "machin": [1, 7, 18, 19, 20, 30, 40], "One": [1, 2, 4, 8, 29, 31, 138, 150, 152, 156, 186, 212, 258, 259, 267], "wonder": 1, "why": [1, 3, 263, 267], "parallelenv": [1, 2, 3, 13, 14, 16, 17, 20, 56, 58, 247, 252, 258, 259, 260, 262, 266, 267], "instead": [1, 4, 7, 8, 11, 27, 30, 51, 54, 56, 57, 58, 81, 99, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 194, 250, 254, 263, 267], "In": [1, 3, 4, 5, 7, 8, 10, 11, 17, 21, 22, 30, 39, 51, 54, 56, 57, 58, 76, 89, 96, 99, 102, 103, 106, 128, 130, 141, 143, 144, 156, 159, 164, 177, 227, 248, 249, 250, 254, 255, 258, 259, 260, 262, 263, 264, 267], "lower": [1, 2, 17, 21, 25, 107, 140, 141, 260, 263], "io": [1, 56], "footprint": [1, 2], "need": [1, 2, 4, 7, 8, 10, 18, 19, 20, 21, 30, 49, 51, 54, 56, 57, 58, 81, 89, 91, 103, 106, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 133, 135, 136, 137, 140, 141, 150, 152, 153, 156, 162, 164, 169, 179, 180, 181, 183, 189, 194, 208, 225, 250, 254, 255, 258, 259, 260, 263, 266, 267], "commun": [1, 2, 3, 253, 260, 267], "yet": [1, 177, 264], "spec": [1, 2, 3, 15, 21, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 39, 51, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 109, 113, 125, 139, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 231, 234, 236, 239, 241, 244, 254, 258, 259, 260, 262, 266], "plai": [1, 73, 259, 260, 267], "role": [1, 259, 267], "opposit": 1, "direct": [1, 30, 51, 54, 56, 57, 58, 177, 259], "sinc": [1, 3, 4, 5, 7, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 116, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 258, 259, 260, 263, 264, 266, 267], "faster": [1, 4, 56], "share": [1, 2, 3, 6, 8, 41, 42, 43, 49, 52, 57, 58, 107, 147, 148, 149, 165, 166, 176, 178, 250, 254, 260, 262, 266, 267], "among": 1, "achiev": [1, 3, 4, 30, 51, 54, 56, 57, 58, 222, 256, 258, 259, 260, 263, 267], "via": [1, 3, 4, 7, 8, 32, 33, 34, 35, 39, 40, 57, 89, 102, 106, 255, 256, 258, 259, 260, 267], "capabl": [1, 7, 256, 258, 262, 264, 267], "prohibit": [1, 3], "slow": [1, 3, 4], "compar": [1, 3, 51, 221, 255, 258, 260, 267], "gpu": [1, 7, 8, 30, 51, 54, 56, 57, 58, 177, 258, 260, 267], "nativ": [1, 7, 9, 51, 54, 56, 57, 58, 73], "driver": [1, 7], "practic": [1, 4, 5, 8, 128, 143, 144, 164, 253, 258, 259, 260, 264, 267], "mean": [1, 2, 3, 4, 7, 13, 14, 16, 18, 19, 20, 21, 34, 44, 86, 107, 117, 123, 126, 129, 132, 142, 150, 154, 157, 177, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 254, 255, 258, 259, 260, 263, 266, 267], "keyword": [1, 3, 13, 14, 16, 18, 19, 20, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 146, 151, 154, 155, 156, 157, 160, 177, 185, 190, 191, 192, 193, 194, 247, 258, 259, 260, 267], "build": [1, 3, 7, 23, 26, 30, 51, 54, 56, 57, 58, 107, 117, 132, 154, 157, 225, 230, 235, 237, 238, 240, 242, 243, 245, 254, 256, 260, 263, 264, 266, 267], "central": [2, 258, 259], "part": [2, 4, 8, 30, 51, 54, 56, 57, 58, 86, 95, 160, 177, 216, 250, 258, 260, 263, 267], "algorithm": [2, 8, 9, 13, 14, 55, 82, 165, 178, 179, 180, 181, 216, 231, 232, 239, 252, 255, 256, 258, 259, 260, 264, 266], "implement": [2, 3, 9, 11, 16, 30, 49, 51, 54, 56, 57, 58, 91, 102, 107, 128, 142, 143, 144, 165, 175, 178, 181, 231, 239, 241, 244, 254, 256, 258, 259, 260, 263, 266], "wide": [2, 3, 5], "we": [2, 3, 5, 7, 9, 26, 30, 35, 39, 48, 51, 52, 54, 56, 57, 58, 89, 91, 99, 107, 117, 129, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "give": [2, 7, 34, 55, 253, 255, 258, 259, 263, 264, 266], "abil": [2, 263], "veri": [2, 3, 259, 263, 266, 267], "influenti": 2, "sampl": [2, 4, 8, 9, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 51, 54, 55, 56, 57, 58, 68, 90, 110, 111, 114, 115, 117, 123, 128, 132, 138, 140, 143, 144, 146, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 167, 168, 176, 178, 183, 216, 222, 225, 228, 254, 258, 259, 260, 264, 266, 267], "latenc": 2, "especi": [2, 3, 7, 8, 74], "larger": [2, 4, 175], "volum": 2, "lazymemmapstorag": [2, 252, 258, 259, 264], "advis": [2, 267], "due": [2, 3, 5, 264, 267], "serialis": 2, "memmaptensor": [2, 264], "well": [2, 3, 8, 17, 21, 30, 32, 33, 34, 35, 49, 51, 54, 56, 57, 58, 140, 141, 177, 194, 258, 259, 264, 266, 267], "specifi": [2, 11, 13, 14, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 54, 56, 57, 58, 95, 97, 104, 117, 156, 157, 177, 254, 258, 260], "file": [2, 6, 7, 8, 207, 256, 258, 259, 265, 266], "locat": [2, 7, 54, 86, 94, 128, 135, 143, 144, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 258, 259, 260], "improv": [2, 4, 82, 165, 255], "failur": [2, 4], "recoveri": 2, "liststorag": [2, 32, 33, 34, 35, 252], "were": [2, 7, 57, 58, 260], "found": [2, 6, 7, 10, 21, 26, 30, 51, 54, 56, 57, 58, 107, 154, 157, 176, 177, 178, 258, 259, 266], "rough": 2, "benchmark": [2, 3, 9], "http": [2, 5, 6, 7, 10, 18, 19, 20, 32, 40, 44, 56, 73, 89, 119, 120, 121, 122, 125, 126, 127, 132, 134, 136, 137, 140, 141, 153, 165, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 190, 195, 202, 231, 234, 239, 241, 244, 258, 264, 266], "com": [2, 5, 6, 7, 10, 18, 19, 20, 264, 266], "tree": 2, "type": [2, 3, 14, 18, 19, 20, 21, 30, 32, 33, 34, 35, 36, 51, 54, 55, 56, 57, 58, 76, 89, 91, 99, 102, 103, 106, 107, 111, 115, 118, 130, 134, 150, 152, 154, 156, 157, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 185, 231, 234, 236, 239, 241, 244, 248, 254, 258, 259, 260, 263, 267], "1x": 2, "lazytensorstorag": [2, 34, 35, 252, 260], "83x": 2, "3": [2, 3, 6, 7, 10, 11, 13, 14, 15, 16, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 51, 54, 56, 57, 58, 68, 76, 77, 86, 89, 91, 99, 101, 103, 106, 113, 117, 118, 119, 120, 125, 127, 129, 130, 132, 135, 138, 146, 147, 148, 149, 151, 154, 156, 159, 160, 172, 177, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 208, 224, 236, 254, 256, 258, 259, 260, 263, 264, 266, 267], "44x": 2, "too": [2, 7, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 128, 143, 144, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 191, 192, 193, 259, 260, 263, 267], "difficult": [2, 4], "element": [2, 13, 14, 16, 18, 19, 20, 21, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 68, 90, 118, 146, 150, 151, 155, 156, 157, 160, 216, 258, 260, 267], "pai": [2, 8, 258], "attent": [2, 8, 258], "alwai": [2, 20, 30, 51, 54, 56, 57, 58, 85, 170, 254, 255, 259, 260, 263], "lead": [2, 3, 4, 8, 10, 11, 26, 30, 32, 33, 34, 35, 39, 48, 99, 128, 143, 144, 258, 263, 266], "dimens": [2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 73, 74, 81, 86, 90, 97, 101, 104, 107, 118, 130, 133, 134, 142, 143, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 250, 254, 258, 259, 260, 263], "other": [2, 3, 4, 7, 8, 21, 22, 30, 32, 33, 34, 35, 39, 41, 42, 43, 48, 49, 51, 54, 55, 56, 57, 58, 77, 96, 107, 134, 135, 157, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 222, 231, 239, 241, 244, 248, 249, 252, 256, 258, 259, 260, 263, 264, 266, 267], "word": [2, 39, 177, 258, 263, 267], "creat": [2, 3, 4, 5, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 51, 52, 54, 56, 57, 58, 89, 95, 102, 103, 107, 113, 116, 118, 119, 120, 121, 122, 127, 130, 131, 157, 168, 170, 179, 208, 222, 229, 232, 233, 246, 248, 249, 254, 258, 259, 260, 263, 264, 266, 267], "1m": [2, 228, 258, 260, 264], "multidimension": [2, 34, 44], "doe": [2, 3, 18, 32, 34, 39, 44, 49, 133, 158, 159, 165, 166, 170, 176, 178, 189, 225, 254, 256, 258, 259, 260, 263, 267], "desir": [2, 3, 30, 51, 54, 56, 57, 58, 76, 86, 89, 90, 99, 103, 106, 114, 115, 118, 130, 146, 151, 154, 155, 156, 157, 177, 254, 258, 263], "diversifi": 2, "make": [2, 4, 7, 30, 39, 40, 49, 51, 54, 56, 57, 58, 64, 67, 86, 89, 90, 109, 133, 157, 177, 178, 190, 191, 192, 193, 222, 233, 250, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267], "more": [2, 3, 4, 6, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 108, 125, 130, 133, 135, 146, 150, 151, 152, 155, 156, 160, 165, 170, 177, 178, 190, 195, 202, 220, 234, 253, 255, 256, 258, 259, 260, 262, 263, 264, 267], "To": [2, 3, 4, 6, 7, 8, 18, 19, 20, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 107, 147, 148, 149, 153, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 254, 255, 258, 259, 260, 263, 264, 266, 267], "do": [2, 3, 4, 7, 54, 85, 90, 107, 116, 133, 148, 256, 258, 259, 260, 262, 263, 266, 267], "custom": [2, 3, 5, 30, 51, 54, 56, 57, 58, 170, 178, 184, 250, 254, 258, 259, 260], "name": [2, 6, 7, 11, 30, 39, 40, 51, 54, 56, 57, 58, 61, 77, 79, 91, 95, 96, 103, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 231, 234, 236, 239, 241, 244, 256, 258, 259, 260, 263, 267], "randomcroptensordict": [2, 258], "here": [2, 3, 4, 7, 8, 9, 10, 254, 255, 258, 259, 260, 263, 266, 267], "how": [2, 3, 18, 19, 20, 30, 32, 34, 44, 51, 54, 56, 57, 58, 165, 166, 174, 176, 178, 225, 253, 254, 258, 259, 260, 262, 263, 264, 266, 267], "wrapper": [2, 3, 11, 15, 17, 34, 35, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 135, 150, 152, 153, 157, 161, 190, 213, 214, 215, 250, 252, 260, 264, 267], "around": [2, 5, 7, 15, 17, 34, 35, 55, 157, 190, 258, 259, 267], "offlin": [2, 8, 13, 14, 16, 17, 18, 19, 20, 21, 109, 175, 256, 264, 266], "present": [2, 3, 30, 32, 39, 44, 48, 51, 54, 56, 57, 58, 79, 95, 96, 116, 119, 120, 121, 122, 127, 134, 153, 156, 157, 158, 159, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 191, 192, 193, 194, 250, 256, 258, 262, 266], "replaybuff": [2, 34, 35, 50, 90, 242, 246, 252, 260, 264, 266], "sampler": [2, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 48, 49, 90, 252, 258, 260], "By": [2, 3, 31, 54, 157, 221, 250, 258, 264, 267], "map": [2, 3, 8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 51, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 104, 107, 113, 125, 135, 146, 147, 148, 149, 151, 154, 155, 156, 157, 159, 160, 161, 221, 252, 254, 255, 258, 259, 260, 264], "tensor": [2, 3, 8, 13, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 50, 51, 52, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 73, 74, 76, 77, 81, 84, 86, 89, 90, 91, 94, 99, 100, 101, 102, 103, 104, 106, 107, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 138, 139, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 167, 168, 172, 173, 177, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 231, 234, 236, 239, 241, 244, 254, 256, 258, 259, 260, 262, 263, 264, 266, 267], "allow": [2, 3, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 51, 54, 56, 57, 58, 91, 99, 116, 130, 184, 186, 254, 256, 258, 260, 263, 267], "promptli": 2, "virtual": 2, "instal": [2, 5, 10, 18, 19, 20, 39, 40, 225, 253, 260, 267], "respons": [2, 3, 8, 225, 267], "d4rl": [2, 39], "clone": [2, 4, 8, 147, 148, 149, 156, 175, 231, 239, 241, 244, 252, 258, 263, 266], "repositori": [2, 7, 40], "latest": [2, 10, 56, 222, 260, 263, 266], "wheel": [2, 260], "publish": 2, "pypi": [2, 266], "openml": [2, 40, 68], "scikit": [2, 40], "panda": [2, 40], "requir": [2, 3, 4, 7, 8, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 130, 156, 158, 159, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 254, 256, 258, 259, 260, 263, 267], "parent": [2, 3, 21, 36, 51, 74, 81, 82, 86, 89, 99, 102, 104, 147, 177, 178, 194, 258, 263, 266, 267], "subclass": [2, 3, 51, 54, 56, 57, 58, 102, 109, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 151, 152, 153, 155, 156, 157, 158, 162, 178, 259, 263], "basic": [2, 55, 254, 260, 267], "properti": [2, 3, 51, 54, 55, 56, 57, 58, 103, 123, 128, 133, 138, 142, 143, 144, 177, 263], "observ": [2, 3, 8, 13, 14, 16, 21, 30, 36, 39, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 87, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 104, 107, 116, 119, 120, 121, 122, 125, 129, 136, 137, 139, 140, 146, 147, 148, 149, 151, 152, 153, 154, 155, 160, 161, 166, 168, 172, 176, 178, 190, 191, 192, 193, 194, 208, 231, 234, 236, 239, 241, 244, 246, 254, 256, 259, 260, 262, 263, 266, 267], "action": [2, 3, 8, 9, 13, 14, 15, 16, 21, 27, 31, 36, 51, 54, 55, 56, 57, 58, 60, 67, 69, 70, 77, 78, 82, 85, 91, 96, 103, 113, 116, 117, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 139, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 168, 169, 177, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 231, 234, 236, 239, 241, 244, 246, 250, 254, 255, 256, 258, 259, 260, 262, 264, 266, 267], "shape": [2, 3, 13, 14, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 68, 70, 74, 86, 91, 99, 101, 107, 108, 109, 113, 116, 123, 124, 130, 133, 135, 138, 142, 146, 147, 148, 149, 151, 154, 156, 159, 160, 186, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 216, 222, 225, 246, 254, 258, 259, 260, 262, 264, 266, 267], "dtype": [2, 3, 13, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 44, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 76, 77, 78, 86, 89, 91, 99, 101, 103, 106, 109, 113, 116, 117, 125, 132, 133, 134, 139, 146, 147, 148, 149, 151, 153, 154, 155, 156, 159, 160, 177, 190, 191, 192, 193, 231, 234, 236, 239, 241, 244, 254, 260, 262, 263, 264, 266, 267], "import": [2, 3, 4, 6, 7, 10, 13, 14, 15, 16, 21, 22, 32, 33, 34, 35, 39, 44, 52, 54, 55, 84, 86, 89, 91, 99, 106, 107, 113, 116, 117, 125, 130, 132, 135, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 166, 190, 191, 192, 193, 218, 221, 231, 234, 236, 239, 241, 244, 246, 254, 255, 259, 260, 262, 263, 264, 266, 267], "match": [2, 3, 6, 8, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 52, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 107, 118, 123, 130, 142, 146, 151, 154, 155, 156, 157, 160, 169, 176, 179, 181, 222, 227, 254, 258, 260, 262, 263, 266, 267], "input": [2, 3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 55, 56, 57, 58, 68, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 104, 105, 106, 107, 109, 116, 118, 119, 120, 121, 122, 129, 130, 133, 134, 140, 141, 146, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 219, 223, 228, 246, 254, 255, 256, 258, 259, 260, 263, 266, 267], "output": [2, 3, 4, 13, 14, 16, 17, 30, 32, 33, 34, 35, 39, 40, 51, 54, 55, 56, 57, 58, 68, 73, 86, 89, 91, 100, 102, 106, 109, 118, 119, 120, 124, 125, 126, 129, 130, 135, 139, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 194, 208, 216, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267], "send": [2, 3, 8, 266], "receiv": [2, 3, 30, 51, 54, 56, 57, 58, 102, 130, 255, 258, 260, 262, 263], "spawn": [2, 3, 4, 18, 22, 56], "check": [2, 3, 4, 5, 6, 7, 11, 18, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 52, 54, 55, 56, 57, 58, 74, 80, 90, 109, 146, 151, 154, 155, 156, 157, 254, 255, 259, 260, 262, 263, 264, 267], "check_env_spec": [2, 3, 252, 260, 263], "method": [2, 3, 4, 13, 14, 15, 16, 17, 21, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 49, 51, 54, 56, 57, 58, 73, 76, 81, 86, 89, 91, 92, 99, 102, 103, 106, 117, 129, 146, 147, 148, 149, 151, 154, 155, 156, 157, 158, 160, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 194, 207, 247, 255, 256, 257, 259, 260, 263, 267], "saniti": [2, 3, 7, 109, 260], "offer": [3, 7, 254, 259, 263, 267], "handl": [3, 21, 30, 51, 54, 56, 57, 58, 107, 130, 225, 248, 249, 258, 259, 260], "differ": [3, 4, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 73, 77, 86, 91, 103, 104, 125, 130, 132, 139, 175, 177, 178, 186, 190, 191, 192, 196, 197, 221, 225, 227, 248, 249, 254, 255, 256, 258, 259, 260, 262, 263, 264, 267], "dm": [3, 258, 267], "base": [3, 4, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 47, 50, 55, 56, 99, 105, 147, 171, 225, 231, 239, 241, 244, 254, 255, 256, 258, 259, 263, 267], "goal": [3, 4, 258, 259, 260, 263], "abl": [3, 258, 260, 262, 263, 266], "experi": [3, 32, 33, 34, 35, 39, 40, 44, 109, 210, 211, 212, 213, 214, 215, 253, 259, 260], "even": [3, 4, 8, 14, 18, 20, 21, 41, 42, 43, 49, 52, 258, 260, 263, 267], "simul": [3, 5, 7, 8, 71, 117, 132, 254, 258, 260], "some": [3, 4, 7, 8, 9, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 89, 109, 119, 157, 158, 159, 216, 228, 254, 256, 258, 259, 260, 263, 266, 267], "box": [3, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "under": [3, 4, 21, 30, 39, 51, 54, 56, 57, 58, 146, 151, 154, 155, 156, 157, 177, 190, 191, 192, 193, 194, 255, 258, 259, 263, 267], "lib": [3, 5, 6, 7, 9, 10, 13, 14, 16, 21, 22, 52, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 84, 86, 91, 99, 107, 231, 234, 236, 239, 241, 244, 246, 258, 259, 260, 262, 264, 266, 267], "hope": 3, "imit": 3, "nn": [3, 13, 14, 16, 21, 30, 51, 54, 55, 56, 57, 58, 76, 77, 89, 99, 103, 106, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 132, 135, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 168, 170, 177, 190, 191, 192, 193, 241, 244, 246, 254, 255, 258, 259, 260, 262, 263, 264, 266], "typic": [3, 4, 8, 30, 51, 54, 56, 57, 58, 177, 178, 181, 254, 255, 256, 260, 263], "organis": [3, 259, 263], "arbitrari": [3, 31, 57, 58, 254, 258, 259, 263], "nest": [3, 26, 30, 51, 54, 56, 57, 58, 190, 191, 192, 193, 194, 256, 259, 260, 263, 266], "structur": [3, 7, 32, 33, 34, 35, 153, 190, 191, 192, 193, 194, 255, 258, 260, 263, 264], "attribut": [3, 4, 30, 51, 54, 56, 57, 58, 89, 98, 157, 177, 258, 263], "batch_siz": [3, 8, 13, 14, 15, 16, 26, 32, 33, 34, 35, 39, 40, 45, 51, 53, 55, 60, 67, 68, 69, 70, 73, 91, 99, 116, 117, 125, 132, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 216, 222, 231, 234, 236, 239, 241, 244, 254, 258, 259, 260, 262, 263, 264, 266, 267], "togeth": [3, 13, 14, 16, 17, 18, 19, 20, 21, 90, 147, 148, 149, 161, 254, 259, 260], "expect": [3, 4, 7, 26, 30, 36, 48, 51, 54, 55, 56, 57, 58, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 104, 109, 146, 151, 153, 154, 155, 156, 159, 160, 165, 166, 176, 177, 178, 180, 229, 253, 254, 255, 256, 258, 260, 263, 267], "live": [3, 12, 13, 14, 16, 17, 19, 20, 30, 32, 33, 34, 35, 39, 40, 51, 54, 55, 56, 57, 58, 177], "actual": [3, 4, 7, 17, 51, 54, 56, 57, 58, 228, 255, 258, 260, 263], "just": [3, 4, 216, 254, 256, 258, 259, 260, 263, 266, 267], "retriev": [3, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 74, 86, 116, 117, 132, 154, 157, 165, 166, 176, 178, 190, 191, 192, 193, 231, 234, 236, 239, 241, 244, 250, 256, 259, 260, 263, 267], "care": [3, 8, 51, 54, 56, 57, 58, 102, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 258, 260, 263], "see": [3, 6, 7, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 30, 40, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 108, 118, 128, 130, 133, 143, 144, 147, 149, 156, 157, 177, 222, 258, 259, 260, 263, 267], "below": [3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 118, 128, 130, 143, 144, 156, 177, 222, 258, 259, 260, 263], "parametr": [3, 134, 157, 175, 181, 258, 260], "hardwar": 3, "input_spec": [3, 51, 55, 76, 77, 78, 86, 91, 96, 98, 102, 103, 104, 117, 132, 258, 260, 263, 267], "compositespec": [3, 51, 53, 54, 55, 56, 57, 58, 77, 91, 98, 99, 102, 113, 117, 132, 146, 150, 152, 154, 159, 252, 258, 260, 263, 267], "output_spec": [3, 91, 102, 103, 263], "reward": [3, 13, 14, 16, 30, 36, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 72, 76, 78, 91, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 113, 116, 117, 132, 161, 167, 168, 172, 177, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 218, 219, 221, 223, 250, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "observation_spec": [3, 51, 55, 73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 89, 92, 95, 96, 98, 99, 100, 101, 102, 103, 104, 117, 132, 229, 246, 258, 260, 262, 263, 267], "pair": [3, 30, 39, 51, 54, 56, 57, 58, 99, 147, 154, 157, 177, 254, 255, 258, 259, 260, 262, 263, 267], "pointer": [3, 6, 52, 177, 258], "action_spec": [3, 13, 14, 15, 16, 18, 19, 20, 51, 54, 55, 56, 57, 58, 60, 67, 103, 125, 139, 141, 146, 151, 154, 155, 246, 254, 259, 260, 262, 263, 264, 266, 267], "reward_spec": [3, 51, 55, 72, 76, 78, 93, 94, 95, 102, 103, 104, 117, 132, 260, 263, 267], "done_spec": [3, 102, 103, 263, 267], "flag": [3, 8, 32, 33, 34, 35, 39, 40, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 254, 263, 264], "importantli": [3, 154, 157], "4": [3, 7, 13, 14, 16, 24, 27, 31, 32, 33, 55, 61, 62, 63, 66, 107, 117, 118, 119, 120, 125, 126, 127, 129, 130, 132, 135, 138, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 207, 254, 258, 259, 260, 263, 264, 266, 267], "action_s": 3, "help": [3, 4, 30, 51, 54, 56, 57, 58, 253, 255, 258, 259, 260], "prealloc": [3, 263], "consist": [3, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 118, 130, 258, 259, 260, 263, 264, 267], "With": [3, 256, 258, 259, 267], "necessarili": 3, "If": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 54, 55, 56, 57, 58, 74, 75, 77, 79, 81, 85, 86, 89, 90, 95, 96, 99, 102, 103, 106, 107, 116, 118, 129, 130, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 203, 204, 205, 206, 220, 222, 225, 227, 229, 231, 239, 241, 244, 246, 250, 253, 258, 259, 260, 262, 263, 266, 267], "instanti": [3, 21, 57, 58, 102, 258, 259, 263, 267], "0": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 39, 44, 51, 54, 55, 56, 57, 58, 60, 67, 72, 74, 76, 77, 85, 86, 89, 99, 101, 103, 106, 107, 109, 117, 118, 119, 120, 122, 126, 128, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 146, 150, 152, 153, 156, 159, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 193, 196, 197, 216, 223, 246, 250, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267], "stateless": [3, 102, 258, 263, 267], "set_se": [3, 13, 14, 16, 17, 21, 51, 54, 55, 56, 57, 58, 60, 67, 86, 91, 103, 263, 266, 267], "seed": [3, 13, 14, 16, 17, 21, 51, 54, 55, 56, 57, 58, 61, 69, 70, 103, 109, 225], "next": [3, 4, 8, 13, 14, 16, 26, 30, 32, 33, 34, 35, 39, 40, 51, 52, 54, 55, 56, 57, 58, 60, 67, 69, 70, 84, 91, 107, 113, 116, 117, 132, 141, 161, 168, 170, 178, 179, 189, 190, 191, 192, 193, 194, 219, 221, 223, 258, 259, 262, 263, 264, 266, 267], "determinist": [3, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 126, 136, 141, 146, 152, 156, 157, 177, 254, 258, 259, 263, 267], "preced": [3, 129], "without": [3, 7, 9, 30, 51, 54, 56, 57, 58, 148, 149, 179, 189, 190, 191, 192, 193, 194, 246, 253, 254, 258, 259, 260, 263, 267], "risk": [3, 90], "overlap": [3, 34], "consecut": [3, 48, 153, 267], "still": [3, 9, 98, 150, 176, 177, 258, 259, 262, 263, 267], "reproduc": [3, 109, 258, 260], "maximum": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 25, 30, 41, 42, 43, 51, 54, 56, 57, 58, 77, 93, 98, 100, 113, 142, 143, 144, 154, 175, 177, 181, 222, 258, 259, 260, 263, 266, 267], "max_step": [3, 13, 51, 54, 55, 56, 57, 58, 69, 70, 98, 266, 267], "n": [3, 6, 7, 24, 27, 30, 31, 51, 54, 56, 57, 58, 73, 77, 81, 104, 132, 157, 165, 177, 189, 222, 254, 256, 259, 267], "tensordictmodul": [3, 13, 14, 16, 17, 20, 21, 55, 132, 147, 148, 149, 150, 152, 153, 154, 156, 158, 159, 161, 165, 166, 167, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 221, 246, 254, 258, 260, 262, 263, 264], "ani": [3, 5, 8, 26, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 81, 89, 90, 103, 107, 109, 118, 130, 134, 156, 157, 158, 159, 177, 178, 213, 225, 253, 258, 259, 260, 263, 266, 267], "compat": [3, 7, 11, 18, 19, 30, 49, 51, 54, 56, 57, 58, 65, 68, 73, 107, 177, 186, 258, 266], "figur": [3, 258, 260, 263, 267], "summar": [3, 263], "brief": [3, 260, 267], "popul": [3, 33, 84, 99, 258, 260, 263], "entri": [3, 13, 14, 16, 18, 19, 20, 21, 23, 30, 39, 40, 51, 54, 56, 57, 58, 75, 81, 84, 86, 89, 91, 98, 106, 107, 116, 181, 190, 191, 192, 193, 254, 258, 260, 263, 264], "deliveri": 3, "step_mdp": [3, 252, 263, 266, 267], "nasium": 3, "recent": [3, 7, 11, 258, 266, 267], "shift": [3, 30, 162, 260], "termin": [3, 30, 39, 158, 258, 259, 260, 263, 266], "trust": 3, "truncat": [3, 13, 14, 16, 18, 19, 20, 21, 98, 144, 258, 260, 267], "refer": [3, 7, 8, 21, 30, 51, 54, 56, 57, 58, 103, 107, 117, 125, 126, 132, 136, 137, 140, 141, 165, 170, 171, 172, 173, 178, 190, 195, 202, 234, 258, 260, 266], "stepcount": [3, 13, 258, 259, 260, 266], "chosen": [3, 99, 231, 239, 241, 244, 254], "someth": [3, 30, 51, 54, 56, 57, 58, 253, 259, 260, 263, 267], "els": [3, 254, 256, 258, 259, 260, 263, 264], "100": [3, 30, 34, 51, 54, 56, 57, 58, 86, 217, 246, 259, 260, 262, 263, 264, 266, 267], "truncated_kei": [3, 98], "assess": [3, 258], "split_trajectori": [3, 13, 14, 16, 17, 18, 19, 20, 21, 252], "slice": [3, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 39], "adjac": [3, 23, 81], "reli": [3, 165, 255, 258, 260, 263, 267], "traj_id": [3, 13, 14, 16, 23, 266], "junction": 3, "miss": [3, 4, 6, 7, 11, 26, 30, 51, 54, 56, 57, 58, 99, 103, 116, 158, 159, 253, 258], "context": [3, 5, 8, 30, 51, 52, 54, 56, 57, 58, 68, 99, 104, 133, 187, 188, 190, 191, 192, 193, 195, 202, 221, 254, 255, 258, 259, 260, 263, 264], "mark": 3, "through": [3, 4, 5, 8, 16, 18, 20, 21, 57, 58, 90, 130, 157, 158, 159, 162, 190, 191, 192, 193, 254, 258, 259, 260, 262, 263, 264, 267], "inittrack": 3, "our": [3, 7, 8, 18, 254, 258, 259, 260, 262, 264, 266], "tutori": [3, 258, 259, 261, 262, 263, 264, 265, 266, 267], "inform": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 52, 54, 56, 57, 58, 118, 130, 255, 256, 258, 259, 260, 263], "design": [3, 13, 14, 30, 31, 51, 54, 56, 57, 58, 90, 103, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 258, 259, 260, 262, 263, 267], "scratch": [3, 8, 259, 263], "better": [3, 8, 255, 260, 263], "featur": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 31, 51, 54, 56, 57, 58, 73, 81, 99, 104, 107, 118, 126, 127, 130, 133, 134, 157, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 250, 254, 258, 259, 260, 263, 267], "intens": [3, 8], "gym3": 3, "envpool": [3, 56], "interfac": [3, 68, 130, 133, 254, 258, 260, 263], "simultan": [3, 20, 57, 58, 263], "often": [3, 8, 174, 225, 258, 259, 263, 267], "competit": 3, "advantag": [3, 8, 127, 165, 166, 176, 178, 180, 190, 191, 192, 193, 194, 195, 196, 198, 200, 202, 203, 205, 255, 256, 258, 259, 260, 263, 266, 267], "scale": [3, 4, 39, 86, 94, 126, 128, 135, 140, 141, 143, 144, 147, 148, 149, 154, 157, 159, 223, 229, 231, 239, 241, 244, 250, 254, 258, 259, 260, 266], "varieti": 3, "its": [3, 4, 5, 7, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 51, 54, 55, 56, 57, 58, 73, 102, 103, 107, 118, 150, 151, 152, 154, 157, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 225, 246, 256, 258, 259, 260, 263, 264, 267], "own": [3, 13, 14, 17, 22, 30, 51, 54, 56, 57, 58, 259, 260, 263], "As": [3, 4, 51, 54, 56, 57, 58, 157, 254, 258, 259, 260, 263, 264, 266, 267], "inherit": [3, 131, 177, 256, 260], "serialenv": [3, 99, 252, 267], "enjoi": 3, "exact": 3, "Of": [3, 7, 253, 263, 267], "cours": [3, 4, 253, 260, 263, 267], "correspond": [3, 4, 13, 14, 16, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 44, 51, 54, 55, 56, 57, 58, 89, 99, 103, 106, 107, 153, 154, 157, 190, 191, 192, 193, 194, 258, 259, 260, 263, 264], "count": [3, 52, 98, 153, 221, 225, 228, 258, 259, 260, 267], "def": [3, 11, 22, 30, 51, 52, 54, 55, 56, 57, 58, 117, 125, 132, 160, 256, 258, 259, 262, 263, 266, 267], "make_env": [3, 70, 107, 232, 233, 258, 259, 267], "gymenv": [3, 5, 13, 14, 16, 17, 21, 22, 52, 65, 76, 84, 86, 91, 99, 103, 107, 231, 234, 236, 239, 241, 244, 246, 252, 254, 258, 259, 260, 264, 266, 267], "v1": [3, 13, 14, 16, 21, 22, 39, 52, 56, 84, 86, 91, 99, 186, 198, 199, 200, 201, 203, 204, 205, 206, 254, 259, 263, 266, 267], "from_pixel": [3, 61, 62, 231, 239, 241, 244, 258, 259, 264, 266, 267], "9": [3, 7, 30, 32, 33, 34, 107, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 184, 255, 258, 259, 260, 263, 264, 265], "81": [3, 259, 260, 263], "must": [3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 41, 42, 43, 49, 51, 52, 54, 56, 57, 58, 82, 86, 99, 103, 104, 107, 118, 125, 130, 139, 146, 151, 154, 155, 156, 157, 160, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 231, 234, 236, 239, 241, 244, 258, 259, 260, 262, 263, 266], "print": [3, 6, 7, 13, 14, 16, 21, 22, 24, 26, 27, 30, 31, 32, 33, 34, 35, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 74, 77, 78, 84, 86, 91, 99, 101, 107, 113, 116, 118, 125, 130, 135, 138, 139, 146, 147, 148, 149, 151, 152, 153, 155, 156, 159, 160, 177, 231, 234, 236, 239, 241, 244, 246, 254, 256, 259, 260, 262, 263, 264, 266, 267], "simpli": [3, 6, 79, 96, 177, 254, 255, 258, 260, 267], "b": [3, 7, 8, 23, 26, 34, 35, 133, 134, 190, 191, 192, 193, 194, 208, 254, 259, 264], "c": [3, 6, 7, 26, 34, 35, 40, 86, 231, 234, 236, 239, 241, 244, 259], "d": [3, 32, 40, 44, 157, 266], "get": [3, 4, 6, 7, 8, 32, 39, 49, 52, 57, 58, 74, 77, 78, 86, 90, 101, 107, 146, 152, 154, 157, 190, 191, 192, 193, 194, 212, 254, 258, 259, 260, 263, 266, 267], "forc": [3, 6, 7, 13, 14, 18, 20, 21, 259, 263], "reset_work": 3, "fals": [3, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 67, 68, 69, 70, 74, 76, 81, 84, 85, 86, 89, 90, 91, 94, 99, 101, 103, 104, 106, 107, 109, 116, 117, 118, 119, 125, 130, 132, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 186, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 218, 219, 221, 222, 223, 225, 231, 234, 236, 239, 241, 244, 250, 254, 256, 258, 259, 260, 262, 263, 264, 266, 267], "field": [3, 13, 14, 16, 17, 26, 30, 34, 35, 51, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 91, 99, 103, 116, 117, 125, 132, 139, 146, 147, 148, 149, 151, 153, 154, 155, 156, 159, 160, 229, 231, 234, 236, 239, 241, 244, 253, 254, 259, 260, 262, 263, 264, 266, 267], "bool": [3, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 69, 70, 74, 77, 81, 84, 85, 86, 89, 91, 94, 99, 101, 103, 104, 106, 107, 109, 116, 117, 118, 119, 120, 128, 130, 132, 133, 134, 143, 144, 146, 150, 151, 153, 154, 155, 156, 157, 158, 159, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 186, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 218, 219, 221, 222, 223, 225, 231, 234, 236, 239, 241, 244, 250, 259, 260, 262, 263, 264, 266, 267], "pixel": [3, 7, 26, 73, 75, 81, 83, 86, 89, 92, 101, 106, 119, 136, 137, 208, 231, 236, 239, 241, 244, 254, 258, 259, 264, 266, 267], "500": [3, 258, 259, 263, 266, 267], "uint8": [3, 38, 101, 259, 264, 266, 267], "none": [3, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 52, 54, 55, 56, 57, 58, 69, 70, 72, 73, 74, 75, 76, 78, 81, 83, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 129, 130, 131, 132, 133, 134, 138, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 165, 166, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 219, 220, 221, 222, 223, 224, 225, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 254, 256, 258, 259, 260, 263, 266, 267], "is_shar": [3, 13, 14, 16, 26, 34, 35, 55, 60, 67, 68, 69, 70, 91, 99, 107, 116, 117, 125, 132, 139, 146, 147, 148, 149, 151, 153, 154, 155, 156, 159, 160, 231, 234, 236, 239, 241, 244, 254, 260, 262, 263, 264, 266, 267], "note": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 107, 153, 154, 157, 255, 258, 259, 262, 267], "launch": [3, 18, 19, 20, 22], "quit": [3, 254, 258, 259, 260, 267], "time": [3, 4, 7, 8, 13, 14, 16, 17, 18, 20, 21, 30, 32, 33, 34, 35, 51, 52, 54, 56, 57, 58, 68, 74, 90, 99, 100, 107, 116, 126, 129, 153, 166, 169, 172, 176, 177, 178, 179, 183, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 225, 254, 255, 259, 260, 262, 263, 264, 266, 267], "mani": [3, 4, 33, 165, 166, 169, 176, 178, 179, 183, 254, 258, 259, 260, 263, 267], "start": [3, 4, 5, 13, 21, 52, 116, 220, 258, 259, 263, 267], "bottleneck": [3, 8], "so": [3, 4, 6, 7, 10, 30, 51, 54, 56, 57, 58, 99, 107, 158, 159, 177, 260, 263, 267], "onc": [3, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 103, 150, 152, 153, 223, 256, 259, 260, 263, 267], "great": [3, 7, 8, 266], "speedup": [3, 8, 267], "precis": [3, 101, 116, 258, 260], "anoth": [3, 8, 51, 54, 56, 57, 58, 102, 130, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 254, 255, 258, 260, 262, 263, 267], "misspecifi": 3, "caus": [3, 7, 8, 90], "breakag": 3, "t": [3, 4, 6, 7, 8, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 44, 48, 51, 52, 54, 56, 57, 58, 89, 100, 106, 107, 116, 156, 182, 190, 191, 192, 193, 194, 225, 227, 250, 253, 258, 259, 260, 262, 263, 264, 266, 267], "rais": [3, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 80, 103, 109, 258, 260, 266], "assert": [3, 6, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 54, 91, 107, 109, 113, 135, 190, 191, 192, 193, 216, 224, 262, 267], "mismatch": [3, 259], "mostli": [3, 17, 255, 267], "purpos": [3, 7, 246, 258, 260, 264, 267], "want": [3, 6, 7, 8, 86, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 254, 258, 259, 260, 263, 264, 266, 267], "subprocess": [3, 52], "addit": [3, 4, 30, 39, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 150, 156, 164, 177, 190, 255, 258, 259], "multithread": [3, 32, 33, 34, 35, 39, 40, 56], "multithreadedenv": [3, 252], "underneath": 3, "higher": [3, 4, 258, 259, 260, 267], "restrict": [3, 259, 264, 267], "flexibl": [3, 9, 56, 184, 256, 267], "cover": [3, 253, 260, 263, 266], "popular": [3, 254], "atari": [3, 4, 73, 267], "classic": [3, 55, 259], "benchmark_batched_env": 3, "py": [3, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267], "case": [3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 30, 32, 34, 44, 51, 54, 56, 57, 58, 99, 103, 109, 130, 146, 151, 154, 155, 156, 157, 159, 160, 164, 216, 227, 248, 249, 250, 254, 256, 258, 259, 260, 263, 267], "raw": [3, 4, 128, 143, 144, 259, 263], "treat": 3, "logic": 3, "torchvis": [3, 89, 106, 266, 267], "transformedenv": [3, 13, 52, 76, 81, 84, 85, 86, 91, 99, 102, 107, 231, 234, 236, 239, 241, 244, 258, 259, 260, 262, 263, 264, 266, 267], "primit": [3, 4], "built": [3, 5, 7, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 184, 242, 246, 247, 250, 258, 259, 260, 267], "base_env": [3, 77, 78, 99, 258, 259, 260, 264, 266, 267], "totensorimag": [3, 236, 259, 266, 267], "in_kei": [3, 13, 14, 16, 21, 55, 72, 73, 74, 75, 77, 78, 81, 83, 86, 87, 89, 91, 92, 93, 94, 95, 100, 101, 102, 106, 107, 117, 132, 146, 147, 148, 149, 151, 154, 155, 156, 157, 159, 160, 166, 167, 168, 176, 178, 190, 191, 192, 193, 207, 208, 241, 244, 246, 254, 258, 259, 260, 262, 263, 264, 266, 267], "resiz": [3, 259, 267], "64": [3, 119, 120, 127, 258, 259, 260, 262, 263, 264, 266, 267], "now": [3, 7, 32, 258, 259, 260, 262, 264, 267], "appar": [3, 218], "bring": [3, 260, 267], "signific": [3, 5, 8, 260, 267], "kind": [3, 36, 116], "consult": 3, "interest": [3, 154, 157, 254, 259, 260, 263, 267], "abov": [3, 7, 30, 51, 54, 56, 57, 58, 128, 143, 144, 164, 255, 256, 258, 260, 263, 267], "resize_par": 3, "out_kei": [3, 13, 14, 16, 21, 55, 72, 73, 74, 75, 81, 83, 86, 87, 89, 91, 92, 93, 95, 100, 101, 102, 106, 117, 125, 132, 139, 146, 147, 148, 149, 151, 154, 155, 156, 157, 159, 160, 166, 176, 178, 190, 191, 192, 193, 221, 246, 254, 258, 259, 260, 262, 263, 264, 266, 267], "easi": [3, 5, 40, 254, 255, 258, 259, 260, 264, 267], "root": [3, 26, 116, 128, 143, 144, 263, 267], "graph": [3, 4, 8, 187, 188, 258, 263], "inv": [3, 77, 263], "appli": [3, 4, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 56, 57, 58, 73, 74, 76, 77, 79, 80, 81, 82, 84, 88, 90, 91, 95, 96, 98, 99, 100, 102, 103, 105, 107, 143, 190, 220, 256, 258, 259, 260, 263, 266, 267], "revers": 3, "order": [3, 16, 30, 31, 32, 33, 34, 35, 39, 40, 48, 51, 54, 56, 57, 58, 103, 146, 151, 155, 156, 158, 159, 160, 259], "chain": [3, 32, 33, 34, 35, 39, 40, 76, 77, 118, 159, 267], "taken": [3, 51, 54, 56, 57, 58, 255, 258, 260, 263], "includ": [3, 4, 7, 9, 21, 30, 41, 42, 43, 49, 51, 54, 55, 56, 57, 58, 103, 107, 177, 228, 254, 256, 258, 259, 260, 263, 267], "invers": [3, 4, 86, 163, 175, 263], "in_keys_inv": [3, 78, 86, 87, 91, 102, 258, 262, 263, 267], "append_transform": [3, 32, 33, 34, 35, 39, 40, 89, 99, 258, 263, 266, 267], "doubletofloat": [3, 231, 234, 239, 241, 244, 258, 260, 262], "float32": [3, 13, 14, 16, 26, 32, 34, 35, 36, 44, 55, 60, 67, 68, 69, 70, 78, 86, 91, 99, 101, 113, 116, 117, 125, 132, 139, 146, 147, 148, 149, 151, 153, 154, 155, 156, 159, 160, 231, 234, 236, 239, 241, 244, 254, 260, 262, 263, 264, 266, 267], "float64": [3, 30, 51, 54, 56, 57, 58, 69, 76, 89, 99, 103, 106, 156, 177, 262, 267], "append": [3, 8, 32, 33, 34, 35, 39, 40, 52, 99, 258, 259, 260, 263, 264, 266], "regist": [3, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 103, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 177, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 256, 258, 260], "manipul": [3, 4, 8, 89, 267], "keep": [3, 4, 7, 8, 14, 35, 48, 86, 89, 106, 107, 116, 153, 218, 225, 258, 259, 260, 263, 266, 267], "mind": 3, "go": [3, 7, 90, 258, 259, 260, 262, 263, 264, 266, 267], "what": [3, 8, 32, 36, 51, 54, 56, 57, 58, 99, 116, 253, 254, 255, 259, 260, 263, 264, 266, 267], "third_transform": 3, "would": [3, 30, 51, 54, 56, 57, 58, 130, 256, 259, 260, 263, 267], "replac": [3, 6, 7, 30, 77, 116, 254], "unexpect": [3, 30, 51, 54, 56, 57, 58, 103, 267], "behviour": 3, "fortun": 3, "eras": [3, 51, 54, 56, 57, 58], "ident": [3, 13, 14, 16, 30, 57, 58, 248, 249, 259], "alreadi": [3, 8, 30, 51, 54, 56, 57, 58, 157, 258, 260], "place": [3, 13, 14, 16, 17, 26, 30, 51, 52, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 156, 177, 222, 227, 228, 259, 260, 263], "chang": [3, 5, 7, 30, 32, 33, 34, 35, 41, 42, 43, 48, 49, 51, 54, 56, 57, 58, 91, 102, 103, 107, 177, 255, 258, 260, 263, 264, 267], "happen": [3, 150, 259, 264, 267], "catfram": [3, 259], "hold": [3, 187, 188, 263], "about": [3, 5, 7, 18, 19, 20, 255, 258, 259, 260, 263, 266, 267], "notic": [3, 260, 263], "parenthood": 3, "reason": [3, 4, 8, 30, 51, 54, 56, 57, 58, 89, 255, 258, 259, 260], "henc": [3, 32, 90, 254, 258, 260, 263], "composit": [3, 26, 51, 54, 56, 57, 58, 260, 263], "transform1": 3, "transform2": 3, "transform3": 3, "last_two": 3, "isinst": [3, 263], "log": [3, 4, 8, 123, 138, 144, 154, 157, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 218, 219, 221, 225, 246, 254, 255, 256, 258, 259, 260, 263, 266], "reveal": 4, "bug": [4, 266], "curv": 4, "won": [4, 30, 51, 52, 54, 56, 57, 58, 89, 106, 225, 250, 259, 260], "tell": [4, 7, 258], "exploit": 4, "video": [4, 208, 221, 250], "game": [4, 5], "cannot": [4, 7, 22, 26, 90, 259, 260, 263], "cv": 4, "act": 4, "flip": 4, "imag": [4, 7, 61, 75, 89, 101, 106, 130, 258, 259, 264, 267], "correspondingli": 4, "relat": [4, 10, 32, 81, 259, 263], "prescript": 4, "tune": [4, 264], "coeffici": 4, "bonu": [4, 165, 166, 176, 178], "beta": [4, 32, 34, 44, 175, 176, 258, 259, 266], "altern": [4, 27, 56, 164, 177, 258, 260], "reduc": [4, 6, 27, 259, 260], "downstream": [4, 258], "formul": 4, "ob": [4, 8, 26, 78, 86, 101, 113, 116, 160, 190, 191, 192, 193, 259, 262, 263, 266, 267], "rate": [4, 107, 189, 259, 260], "gradient": [4, 30, 51, 54, 56, 57, 58, 103, 128, 134, 143, 144, 165, 166, 176, 177, 178, 180, 189, 190, 191, 192, 193, 225, 258, 260, 263], "norm": [4, 8, 225, 258, 259, 260, 263], "easier": [4, 254, 258], "behavior": [4, 30, 51, 54, 56, 57, 58, 103, 175, 177, 260], "local": [4, 7, 10, 16, 21, 30, 51, 54, 56, 57, 58, 103, 213, 258, 266], "optima": 4, "sens": [4, 263], "product": [4, 9, 248, 249], "sum": [4, 21, 29, 31, 54, 172, 189, 255, 258, 259, 260, 263, 267], "track": [4, 13, 14, 16, 17, 18, 19, 20, 21, 35, 48, 95, 107, 153, 213, 218, 259, 263], "stat": [4, 86, 229, 250, 259, 260], "w": [4, 75, 92, 101, 153, 208, 259], "r": [4, 30, 86, 157, 164, 189, 254, 258, 259, 263, 267], "yield": [4, 16, 21, 30, 51, 54, 56, 57, 58, 177, 258], "insight": 4, "auxiliari": 4, "credit": 4, "assign": [4, 13, 14, 167, 168, 260], "futur": [4, 30, 51, 54, 56, 57, 58, 89, 103, 106, 130, 253, 266], "past": [4, 259], "becom": [4, 21, 267], "between": [4, 5, 13, 14, 16, 17, 21, 30, 48, 51, 54, 56, 57, 58, 77, 85, 93, 101, 103, 109, 118, 130, 154, 157, 165, 166, 172, 173, 176, 177, 178, 186, 190, 221, 225, 255, 258, 259, 267], "spars": 4, "ineffici": 4, "interact": [4, 5, 7, 8, 13, 14, 16, 18, 19, 20, 21, 154, 157, 258, 260, 263, 267], "ad": [4, 13, 14, 16, 30, 32, 33, 34, 35, 39, 40, 44, 51, 54, 56, 57, 58, 95, 103, 133, 134, 153, 165, 166, 176, 178, 259, 267], "intermedi": [4, 258, 264], "instrument": 4, "greatli": 4, "soccer": 4, "kick": 4, "ball": 4, "likelihood": [4, 258], "discov": 4, "score": 4, "undesir": 4, "though": [4, 130, 260], "unintention": 4, "valuabl": 4, "idiosyncrat": 4, "zero": [4, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 51, 54, 56, 57, 58, 74, 77, 86, 113, 116, 117, 129, 152, 153, 162, 177, 190, 191, 192, 193, 266], "subtask": 4, "hierarch": [4, 266], "framework": [4, 9, 22, 55, 266, 267], "individu": [4, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 258], "select": [4, 15, 32, 33, 34, 35, 39, 40, 73, 74, 76, 79, 80, 81, 82, 84, 85, 88, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 117, 224, 258], "fall": 4, "section": [4, 259], "explicit": [4, 11, 129], "mechan": [4, 30, 51, 54, 56, 57, 58, 103, 259, 263], "curios": 4, "magnitudin": 4, "domin": 4, "smaller": [4, 51, 54, 56, 57, 58, 175, 260], "addition": 4, "per": [4, 13, 14, 16, 17, 18, 19, 20, 21, 57, 126, 225, 248, 249, 258, 259, 260, 266], "timestep": [4, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "realli": 4, "larg": [4, 27, 259, 260], "target": [4, 8, 21, 30, 51, 52, 54, 56, 57, 58, 102, 156, 157, 165, 166, 167, 168, 169, 170, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 193, 194, 228, 245, 246, 255, 256, 258, 263], "huge": 4, "std": [4, 86, 107, 135, 150, 258, 267], "torchrl": [4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 261, 262, 264, 265], "initi": [4, 7, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 86, 89, 99, 102, 103, 108, 117, 132, 133, 134, 150, 152, 153, 165, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 183, 231, 234, 236, 239, 241, 244, 250, 259, 263, 267], "estim": [4, 147, 148, 149, 165, 166, 170, 176, 177, 178, 184, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 255, 259, 260, 262, 263, 264, 266, 267], "encount": [4, 57, 58, 253, 259, 263], "unseen": 4, "extrins": 4, "wrong": 4, "goe": [4, 258, 260, 267], "bonus": 4, "denser": 4, "prior": [4, 141, 172], "freshli": 4, "proper": [4, 6, 7, 190, 191, 192, 193, 259, 260], "doesn": [4, 11, 56], "drop": [4, 48, 116], "meant": [4, 55], "encourag": [4, 258, 259], "measur": [4, 260], "novelti": 4, "revisit": 4, "previous": [4, 260, 267], "diminish": 4, "decreas": 4, "ideal": [4, 86, 263], "down": [4, 13, 14, 16, 17], "gone": [4, 5], "anyth": 4, "try": [4, 7, 8, 259, 260, 263, 266, 267], "distil": 4, "add": [4, 6, 21, 30, 32, 33, 34, 35, 39, 40, 46, 50, 51, 54, 56, 57, 58, 133, 165, 177, 220, 260, 263, 266], "nois": [4, 108, 134, 145, 153, 179, 183, 221, 250, 258], "exploratori": [4, 165, 166, 176, 178], "could": [4, 6, 259, 260, 264, 267], "misalign": 4, "trade": 4, "unavoid": 4, "prioriti": [4, 32, 34, 35, 41, 42, 43, 44, 49, 167, 168, 169, 175, 179, 181, 183, 256, 258, 259], "schedul": [4, 7, 221, 260, 263], "separ": [4, 8, 13, 14, 17, 18, 20, 21, 23, 89, 106, 167, 169, 179, 181, 183, 258, 259, 267], "divers": [4, 57, 58], "bootstrap": [4, 170, 191, 196, 197, 258], "noisi": [4, 133, 134, 145, 254], "unstabl": [4, 128, 143, 144], "inher": 4, "stochast": [4, 126, 134, 136, 141, 169, 175, 179, 181, 254, 260], "enemi": 4, "variabl": [4, 7, 8, 27, 31, 132, 147, 148, 149, 177, 179, 256, 259], "pomdp": 4, "previou": [4, 10, 30, 34, 141, 260, 263, 267], "loos": [4, 254, 259, 260], "nonexist": 4, "sure": [4, 7, 40, 49, 250, 254, 258, 260, 263, 266, 267], "architectur": 4, "sequenc": [4, 13, 14, 16, 17, 26, 28, 29, 32, 33, 46, 50, 72, 73, 74, 75, 77, 78, 81, 83, 86, 87, 90, 92, 93, 94, 95, 100, 101, 102, 107, 118, 123, 130, 138, 146, 154, 157, 158, 159, 160, 207, 208, 220, 221, 222, 224, 225, 231, 239, 241, 244, 254, 258, 260, 262, 267], "rather": [4, 91, 258, 259, 260], "last": [4, 13, 14, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 48, 81, 86, 90, 100, 118, 129, 130, 136, 150, 152, 258, 259, 260, 263, 264, 266, 267], "lstm": [4, 129, 135], "explicitli": [4, 259], "rel": [4, 99, 123, 142, 258, 259], "tend": 4, "stabl": [4, 9, 10], "don": [4, 6, 7, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 51, 259, 260, 266, 267], "compens": 4, "descent": [4, 134], "1000": [4, 33, 107, 150, 152, 153, 154, 157, 174, 258, 259, 260, 264], "know": [4, 32, 33, 34, 35, 150, 152, 179, 221, 258, 259, 260], "minimum": [4, 25, 93, 113, 126, 135, 142, 143, 144, 154, 162, 164, 177, 216, 258, 260, 263, 266, 267], "rang": [4, 8, 11, 27, 32, 33, 52, 107, 176, 183, 255, 256, 258, 260, 263, 266], "manual": [4, 18, 20, 21, 258], "deviat": [4, 86, 107, 117, 126, 132, 133, 134, 150, 178, 183, 258], "radic": 4, "begin": [4, 13, 14, 16, 18, 19, 20, 21], "updat": [4, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 30, 32, 34, 44, 51, 54, 55, 56, 57, 58, 77, 103, 105, 107, 117, 132, 153, 154, 156, 157, 165, 174, 178, 182, 190, 191, 192, 193, 194, 221, 225, 227, 232, 233, 245, 246, 256, 258, 259, 260, 263, 266, 267], "stabil": [4, 82], "stage": [4, 258, 263], "never": 4, "prevent": [4, 128, 143, 144, 176, 178, 223], "solv": [4, 10, 253, 258, 259, 260, 263], "entir": [4, 260, 263], "submit": [4, 253, 266], "suffici": [4, 258], "recommend": [4, 7], "system": [4, 5, 260, 263], "adequ": [4, 109, 260], "infeas": 4, "allevi": [4, 254], "prune": 4, "develop": [4, 7, 258, 266], "filter": 4, "fire": [4, 30, 51, 54, 56, 57, 58], "certain": [4, 18, 20, 21, 30, 51, 54, 56, 57, 58, 82, 98, 103, 176, 254, 258, 259, 260, 267], "illeg": 4, "chess": 4, "combin": [4, 102, 259], "grasp": 4, "releas": [4, 7, 10, 30, 51, 54, 56, 57, 58, 103, 266], "top": [4, 117, 132], "p": [4, 52], "wherein": 4, "cumul": [4, 95, 117, 260], "probabl": [4, 8, 123, 130, 138, 144, 154, 157, 254, 259, 266], "q": [4, 119, 120, 121, 122, 124, 125, 127, 139, 149, 167, 168, 169, 170, 174, 175, 179, 181, 183, 241, 244, 252, 258], "flow": [4, 258, 260, 263], "directli": [4, 8, 55, 177, 250, 254, 260, 263], "reparameter": [4, 123, 138], "soft": [4, 174, 181, 182], "critic": [4, 8, 147, 165, 166, 176, 178, 180, 181, 258, 260], "clip": [4, 93, 166, 183, 225, 260, 263], "oppos": 4, "incorrect": 4, "thought": 4, "bound": [4, 17, 21, 25, 26, 30, 51, 54, 56, 57, 58, 107, 140, 141, 146, 151, 153, 154, 155, 156, 157, 254, 258, 259, 260, 267], "region": 4, "squash": [4, 266], "tanh": [4, 118, 128, 130, 142, 143, 144, 260, 263, 264, 266], "correct": [4, 228, 260], "prob": [4, 138, 260], "rememb": 4, "remap": 4, "origin": [4, 8, 13, 14, 16, 17, 77, 89, 103, 106, 154, 156, 157, 174, 177, 178, 241, 244, 258, 262, 263, 267], "side": [4, 267], "real": [5, 157, 255, 263], "world": [5, 55, 161, 172, 263, 267], "robot": [5, 7, 89, 106], "adopt": [5, 258, 267], "histor": 5, "wa": [5, 7, 51, 54, 56, 57, 58, 103, 174, 182, 255, 259, 260, 262, 266], "ceas": 5, "maintain": [5, 9, 263], "fork": 5, "gymnasium": [5, 11, 259, 260, 263, 266], "farama": [5, 260, 263], "foundat": [5, 260], "document": [5, 7, 18, 19, 21, 30, 51, 54, 56, 57, 58, 103, 259, 266], "further": [5, 260], "detail": [5, 6, 7, 30, 51, 54, 56, 57, 58, 103, 125, 165, 170, 178, 234, 253, 259, 262], "usag": [5, 7, 39, 175, 181, 184, 254, 258, 259, 260, 262, 263, 264, 266, 267], "known": [5, 7, 8, 196, 197, 258, 259], "bc": [5, 266], "break": [5, 13, 14, 16, 21, 30, 33, 35, 51, 54, 56, 57, 58, 107, 259, 266], "face": [5, 8, 9, 267], "modif": [5, 26, 30, 51, 54, 56, 57, 58, 81, 177, 260, 263], "against": [5, 7, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 109, 146, 151, 154, 155, 156, 157, 260], "13": [5, 10, 11, 259, 263, 264], "howev": [5, 7, 30, 51, 54, 56, 57, 58, 95, 98, 103, 254, 258, 259, 260, 267], "construct": [5, 30, 32, 33, 34, 35, 51, 54, 56, 57, 58, 109, 141, 157, 177, 225, 231, 239, 254, 259, 260, 263, 267], "automat": [5, 51, 54, 56, 57, 58, 86, 146, 154, 254, 258, 260, 263, 266], "wrap": [5, 13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 109, 147, 148, 149, 161, 254, 258, 259, 260, 267], "best": [5, 9, 266], "gymwrapp": [5, 54, 252, 260, 266], "you": [5, 6, 7, 8, 10, 30, 51, 54, 56, 57, 58, 107, 253, 254, 258, 259, 260, 262, 264, 266, 267], "feel": [5, 253, 266], "free": [5, 7, 165, 172, 178, 256, 260, 266], "gladli": 5, "instruct": [6, 7, 10, 22, 39, 77, 258, 259, 260], "prepar": [6, 260], "conda": [6, 7, 253], "assum": [6, 26, 31, 34, 35, 39, 54, 57, 58, 75, 81, 89, 90, 95, 99, 106, 113, 129, 181, 198, 199, 200, 201, 203, 204, 205, 206, 208, 258, 260, 262, 263], "let": [6, 7, 30, 51, 54, 56, 57, 58, 221, 255, 258, 259, 260, 262, 263, 264, 266, 267], "7": [6, 10, 27, 31, 32, 33, 34, 117, 118, 129, 130, 132, 258, 259, 263, 264, 265, 266], "cmake": 6, "14": [6, 11, 86, 259, 260, 263, 264, 265], "activ": [6, 7, 9, 118, 126, 130, 166, 176, 178, 254, 266], "sim": 6, "bullet": 6, "physic": [6, 7, 256, 258, 263], "headless": [6, 7], "cluster": [6, 7, 8, 18, 21, 253], "withbullet": 6, "forg": [6, 7], "aihabitat": 6, "nightli": 6, "y": [6, 7, 68, 129, 258, 260], "git": [6, 7, 10], "facebookresearch": 6, "subdirectori": 6, "verbos": 6, "export": [6, 7], "magnum_log": 6, "quiet": 6, "habitat_sim_log": 6, "remov": [6, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 97, 177, 267], "command": [6, 7, 10, 260, 263, 267], "readm": [6, 7], "md": [6, 7], "habitatenv": [6, 252], "_has_habitat": 6, "_env": [6, 267], "available_env": [6, 59, 60, 61, 62, 63, 64, 66, 67, 267], "startswith": [6, 255, 258], "oserror": 6, "load": [6, 7, 13, 14, 16, 17, 32, 33, 34, 35, 39, 40, 62, 250, 256, 258], "libllvmlit": 6, "ionstal": 6, "path": [6, 7, 30, 41, 51, 54, 56, 57, 58, 89, 106, 132, 225, 256, 259], "env_nam": [6, 56, 59, 61, 63, 66, 258, 260, 267], "llvmlite": 6, "config": [6, 7, 89, 106, 229, 231, 232, 233, 234, 236, 239, 241, 242, 244, 247], "var": [6, 7, 30, 51, 54, 56, 57, 58, 103, 177], "ld_preload": [6, 7], "python3": [6, 7, 10, 258, 266], "8": [6, 7, 33, 44, 60, 118, 119, 120, 127, 130, 147, 148, 149, 154, 156, 159, 175, 258, 259, 260, 263, 264, 266], "site": [6, 7], "bind": 6, "deactiv": [6, 7], "importerror": [6, 7, 10], "usr": [6, 7, 10, 258, 266], "x86_64": [6, 7], "linux": [6, 7], "gnu": [6, 7], "libopengl": [6, 7], "undefin": [6, 7, 10, 30, 51, 54, 56, 57, 58, 103, 177], "symbol": [6, 7, 10], "_glapi_tls_curr": [6, 7], "link": [6, 7, 259], "right": [6, 7, 129, 259, 260, 263, 267], "mujoco_env": [6, 7], "libglvnd": [6, 7], "glx": [6, 7], "cos7": [6, 7], "reinstal": [6, 7], "xvfbwrapper": [6, 7], "sysroot": [6, 7], "lib64": [6, 7], "libgldispatch": [6, 7], "offici": [7, 39], "stand": [7, 147, 148, 149, 262, 263, 267], "joint": [7, 259], "dynam": [7, 175, 260, 263], "contact": 7, "engin": [7, 263], "facilit": [7, 88, 89, 106, 147, 148, 149, 254, 258, 263], "biomechan": 7, "graphic": 7, "anim": 7, "area": 7, "demand": [7, 267], "fast": [7, 9, 60, 91, 179, 258, 259, 260], "accur": [7, 39, 259, 263], "articul": 7, "acquir": [7, 260], "deepmind": [7, 8, 9, 61, 62, 260], "access": [7, 8, 30, 32, 40, 51, 54, 56, 57, 58, 89, 177, 250, 253, 258, 263], "whomev": 7, "licenc": 7, "incorpor": [7, 263], "relianc": 7, "obsolet": 7, "seri": [7, 8, 31, 46, 50, 58, 85, 102, 208, 254, 255, 258, 259, 260, 267], "legaci": 7, "pro": [7, 253], "tip": [7, 253], "glfw": 7, "osmesa": 7, "egl": 7, "hand": [7, 21, 263], "advic": [7, 267], "sudo": [7, 253], "enabl": [7, 8, 39, 153, 221, 260, 263], "apt": 7, "libglfw3": 7, "libglew2": 7, "libgl1": 7, "mesa": 7, "libosmesa6": 7, "awar": [7, 41, 42, 43, 49, 259], "fact": [7, 8, 258, 260, 263, 264, 267], "indent": 7, "workflow": [7, 147, 148, 149], "glew": 7, "mesalib": 7, "anaconda": 7, "libgl": 7, "cos6": 7, "menpo": 7, "glfw3": 7, "both": [7, 30, 51, 52, 54, 56, 57, 58, 91, 103, 118, 130, 147, 148, 149, 165, 166, 176, 177, 178, 221, 254, 258, 260, 263, 264, 267], "mujoco_gl": 7, "pyopengl_platform": 7, "pre": [7, 22, 30, 42, 51, 54, 56, 57, 58, 89, 106, 267], "binari": [7, 24, 31, 72, 125, 139, 151, 155], "setup": 7, "mkdir": 7, "cd": 7, "tag": [7, 208, 213, 250], "earlier": [7, 258, 260], "roboti": 7, "u": [7, 10, 40, 258, 260, 263, 264, 266, 267], "download": [7, 10, 89, 106, 258, 259, 260, 261, 262, 263, 264, 266, 267], "html": [7, 56], "wget": 7, "mujoco210": 7, "tar": 7, "gz": 7, "xf": 7, "charg": 7, "obtain": [7, 54, 89, 106, 117, 222, 258, 260], "mjkei": 7, "txt": 7, "mjlib_path": 7, "home": [7, 264], "bin": [7, 254], "libmujoco210": 7, "ld_library_path": 7, "mujoco_py_mujoco_path": 7, "mujoco_py_mjkey_path": 7, "reload": 7, "hard": [7, 174, 259, 267], "later": [7, 122, 154, 157, 258, 260], "modifi": [7, 8, 30, 51, 54, 56, 57, 58, 76, 81, 89, 99, 102, 103, 106, 153, 156, 177, 228, 231, 239, 241, 244, 258, 259, 260], "nvidia": 7, "older": [7, 11], "hack": [7, 258], "line": [7, 30, 51, 54, 56, 57, 58, 258, 259, 266], "adatp": 7, "script": [7, 109, 231, 234, 236, 239, 241, 244, 246, 250, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267], "unnot": [7, 90], "until": [7, 21, 260], "complet": [7, 9, 48, 54, 253, 255, 258, 260, 262], "mujoco_pi": 7, "trigger": 7, "pipelin": [7, 260], "problem": [7, 8, 16, 259, 260, 263, 267], "troubleshoot": 7, "gl": 7, "h": [7, 75, 92, 101, 132, 208, 259], "eglshim": 7, "10": [7, 22, 26, 32, 33, 34, 35, 52, 55, 69, 70, 101, 117, 129, 132, 152, 153, 169, 179, 180, 181, 183, 190, 191, 192, 193, 216, 256, 258, 259, 260, 263, 265, 266, 267], "fatal": 7, "No": 7, "directori": [7, 41, 213, 256], "glu": 7, "38": [7, 259, 260, 263], "disappear": [7, 259, 262], "libstdc": 7, "6": [7, 13, 14, 16, 17, 33, 67, 86, 118, 123, 129, 130, 142, 160, 231, 234, 236, 239, 241, 244, 259, 260, 263, 264, 266, 267], "glibcxx_3": 7, "29": [7, 259, 260, 263], "compil": 7, "libosmesa": 7, "libgcc": 7, "Then": [7, 260, 262], "filenotfounderror": 7, "errno": 7, "patchelf": 7, "fatalerror": 7, "gladloadgl": 7, "mj_env": 7, "__init__": [7, 55, 117, 125, 132, 160, 256, 263, 267], "912": 7, "glfwerror": 7, "65537": 7, "sovl": 7, "myscript": 7, "cymj": 7, "linuxgpuextensionbuild": 7, "filenam": [7, 259], "runtimeerror": [7, 8, 30, 51, 54, 56, 57, 58, 103, 267], "job": [7, 18, 19, 20, 22], "slurm": 7, "mjrendercontext": 7, "pyx": 7, "46": [7, 259, 260, 263, 264], "114": [7, 263], "_setup_opengl_context": 7, "opengl_context": 7, "130": [7, 263], "offscreenopenglcontext": 7, "fail": [7, 22, 109], "opengl": 7, "global": [7, 30, 51, 54, 56, 57, 58, 154, 157, 256, 258], "cuda_visible_devic": 7, "id": [7, 23, 153, 179, 211, 241], "slurm_step_gpu": 7, "enviro": [7, 10], "black": 7, "read": [7, 17, 23, 41, 42, 43, 49, 54, 73, 74, 76, 77, 79, 80, 81, 82, 84, 88, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 138, 146, 147, 148, 149, 151, 154, 155, 156, 157, 159, 160, 161, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 191, 192, 193, 194, 208, 221, 225, 231, 239, 241, 244, 254, 258, 259, 260, 262, 263, 264, 267], "onscreen": 7, "101": [7, 263], "displai": [7, 225, 256, 258, 259, 263], "correctli": [7, 30, 51, 54, 56, 57, 58], "loop": [8, 13, 14, 16, 17, 54, 116, 178, 225, 256, 258, 259, 262], "sketch": [8, 256], "_": [8, 52, 74, 77, 78, 86, 91, 101, 107, 146, 151, 155, 156, 160, 164, 190, 191, 192, 193, 258, 259, 260, 263, 266], "n_training_step": 8, "datapoint": 8, "onlin": [8, 13, 17, 165, 178, 216, 250, 260], "n_data_per_train": 8, "no_grad": [8, 30, 51, 54, 56, 57, 58, 190, 191, 192, 193, 260], "replay_buff": [8, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 222, 246, 258, 259, 260], "extend": [8, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 50, 222, 256, 258, 259, 260, 264, 266], "loss_fn": [8, 266], "backward": [8, 30, 51, 54, 56, 57, 58, 107, 258, 260, 263], "zero_grad": [8, 30, 51, 54, 56, 57, 58, 256, 258, 260, 263], "backpropag": [8, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 263], "decor": [8, 11, 190, 191, 192, 193], "differenti": [8, 190, 191, 192, 193, 263], "understand": [8, 258, 259], "denomin": 8, "artifact": 8, "numer": [8, 107, 128, 143, 144, 146, 151, 154, 155, 156, 157, 223, 260, 267], "misconcept": 8, "save": [8, 30, 51, 54, 56, 57, 58, 177, 207, 225, 256], "freed": 8, "appear": [8, 31, 263], "compuat": 8, "twice": 8, "fix": [8, 99, 181, 259, 263, 267], "retain_graph": 8, "discuss": [8, 9], "inplac": [8, 30, 51, 54, 56, 57, 58, 258], "accumul": 8, "onto": [8, 31, 113, 146, 150, 151, 152, 153, 154, 155, 156, 157, 263], "exclud": [8, 39, 79, 116], "forward": [8, 30, 51, 54, 56, 57, 58, 73, 74, 76, 77, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 140, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 191, 192, 193, 194, 255, 263, 266], "submodul": [8, 30, 51, 54, 56, 57, 58, 177], "param": [8, 30, 51, 54, 55, 56, 57, 58, 91, 102, 123, 125, 139, 142, 146, 151, 154, 155, 156, 159, 160, 177, 185, 188, 190, 191, 192, 193, 194, 234, 258, 263, 264, 266], "grad": [8, 30, 51, 54, 56, 57, 58, 258, 260], "whose": [8, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 135, 156, 177], "strictli": [8, 30, 51, 54, 56, 57, 58, 103, 258, 260], "neg": [8, 13, 14, 16, 17, 18, 19, 20, 21, 32, 34, 44, 73, 81, 90, 104, 171, 255, 260, 263], "ask": [8, 258, 260, 264, 267], "core": [8, 231, 234, 236, 239, 241, 244, 256, 266], "much": [8, 32, 34, 44, 176, 178, 260, 263, 267], "render": [8, 221, 258, 259, 260], "upon": [8, 263], "factor": [8, 30, 128, 134, 143, 144, 153, 170, 171, 173, 258, 259, 267], "fit": [8, 11, 86, 255, 256, 258], "everi": [8, 17, 26, 30, 31, 49, 51, 54, 56, 57, 58, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 225, 256, 258, 259, 260, 263], "bottlneck": 8, "affect": [8, 30, 51, 54, 56, 57, 58, 102, 103, 109], "brax": [8, 59, 60, 91, 267], "jax": [8, 11], "improperli": 8, "item": [8, 13, 26, 80, 167, 168, 216, 255, 256, 258, 260, 263], "underli": [8, 263], "tedeiou": 8, "priorit": [8, 32, 34, 44, 167, 168, 169, 175, 179, 181, 183, 258, 259], "amount": [8, 153, 259], "isn": [8, 156], "contigu": [8, 113, 260, 263, 266, 267], "costli": [8, 263], "concaten": [8, 21, 28, 29, 73, 74, 86, 102, 130, 159, 258, 259, 263, 267], "constitut": [8, 259, 263], "plain": 8, "profil": 8, "indic": [8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 48, 50, 51, 54, 56, 57, 58, 74, 98, 99, 118, 130, 153, 162, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 229, 250, 253, 256, 260, 263, 267], "fulli": [8, 30, 51, 54, 56, 57, 58, 259, 263], "frequent": 8, "techniqu": [8, 259], "program": [8, 175, 267], "functorch": [8, 10, 156, 159, 266], "incl": 8, "suit": [8, 62, 260, 267], "mujoco_instal": 8, "valueerror": 8, "bad": 8, "fds_to_keep": 8, "view": [8, 27, 30, 31, 51, 54, 56, 57, 58, 125, 130, 263, 266, 267], "expand": [8, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 156, 159, 177, 263, 266], "new_shap": 8, "content": [8, 13, 14, 16, 32, 33, 34, 35, 48, 56, 118, 130, 177, 260, 263, 266], "lost": 8, "permut": [8, 48, 266, 267], "spin": [9, 267], "deep": [9, 73, 119, 120, 121, 122, 124, 153, 165, 174, 181, 182, 234, 258], "hug": 9, "syllabu": 9, "lectur": 9, "awesom": 9, "curat": 9, "succinct": 9, "summari": [9, 86, 107, 258, 259, 260], "reddit": 9, "reagent": 9, "orient": [9, 267], "baselines3": 9, "tf": 9, "agent": [9, 134, 254, 263], "bandit": [9, 68], "tensorflow": 9, "kera": 9, "acm": 9, "dopamin": 9, "prototyp": 9, "salina": 9, "simpl": [9, 30, 31, 51, 54, 56, 57, 58, 119, 157, 177, 180, 190, 254, 255, 258, 259, 260, 267], "sequenti": [9, 30, 51, 54, 56, 57, 58, 158, 159, 254, 260, 263, 264, 267], "tianshou": 9, "eleg": 9, "rlpyt": 9, "rllib": 9, "industri": [9, 266], "grade": 9, "factori": 9, "throughput": [9, 258], "cherri": 9, "jaxrl": 9, "space": [9, 31, 36, 77, 113, 125, 137, 139, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 169, 254, 259, 260, 263, 266, 267], "mbrl": [9, 55], "rlmeta": 9, "light": 9, "elegantrl": 9, "cloud": 9, "mtrl": 9, "baselin": 9, "689": [10, 265, 266], "dist": [10, 138, 258, 266], "_torchrl": 10, "_zn8pybind116detail11type_casterin2at6tensoreve4loadens_6handleeb": 10, "colab": [10, 260], "notebook": [10, 258, 259, 260, 261, 262, 263, 264, 266, 267], "24": [10, 259, 260, 263, 265], "11": [10, 27, 31, 52, 101, 117, 132, 259, 260, 262, 263], "2022": [10, 266], "12": [10, 259, 260, 263], "pip": [10, 40, 266, 267], "pip3": [10, 260], "extra": [10, 30, 51, 54, 56, 57, 58, 107, 116, 254, 260], "url": 10, "org": [10, 32, 44, 73, 89, 119, 120, 121, 122, 125, 126, 127, 132, 134, 136, 137, 140, 141, 153, 165, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 190, 195, 202, 231, 234, 239, 244, 258, 264], "whl": 10, "There": [10, 254, 256, 260, 263, 267], "upgrad": 10, "relas": 10, "lib_version_her": 10, "module_nam": [11, 177], "str": [11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 44, 51, 53, 54, 56, 57, 58, 61, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 106, 107, 110, 114, 117, 118, 119, 120, 121, 122, 125, 127, 129, 130, 131, 132, 133, 134, 135, 139, 146, 150, 151, 152, 153, 154, 155, 156, 157, 160, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 186, 189, 190, 191, 192, 193, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 231, 234, 239, 241, 242, 244, 250, 259, 260], "from_vers": 11, "to_vers": 11, "intersect": 11, "eg": [11, 41, 42, 43, 49, 77], "v": [11, 107, 129, 147, 175, 181, 254, 258, 259, 266], "longer": [11, 259], "fun": [11, 260], "self": [11, 30, 51, 54, 55, 56, 57, 58, 76, 89, 99, 103, 106, 117, 125, 132, 150, 152, 156, 160, 177, 190, 191, 192, 193, 194, 256, 258, 259, 263, 266], "x": [11, 23, 26, 30, 101, 118, 124, 125, 127, 129, 130, 132, 162, 164, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 225, 258, 260, 263, 266], "27": [11, 259, 260, 263], "arg": [12, 14, 26, 30, 41, 42, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 97, 103, 104, 105, 106, 118, 130, 151, 155, 177, 194, 215, 218, 222, 225, 250, 258, 259, 266], "kwd": 12, "policy_weight": [12, 13, 14, 16, 17, 19, 20], "tensordictbas": [12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 26, 30, 34, 35, 39, 40, 51, 53, 54, 56, 57, 58, 73, 74, 76, 79, 80, 81, 84, 85, 88, 90, 91, 95, 96, 98, 99, 100, 102, 105, 107, 116, 117, 131, 132, 150, 152, 153, 156, 157, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 225, 258, 263], "udpdat": [12, 13, 14, 16, 17, 19, 20], "create_env_fn": [13, 14, 16, 17, 18, 19, 20, 21, 52, 57, 58, 258, 266], "callabl": [13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 52, 54, 55, 56, 57, 58, 164, 177, 232, 233, 248, 249, 250, 259], "int": [13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 54, 55, 56, 57, 58, 61, 73, 74, 75, 76, 77, 81, 82, 85, 86, 89, 90, 92, 97, 98, 100, 103, 104, 106, 109, 113, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 150, 152, 153, 154, 156, 157, 165, 166, 169, 171, 172, 173, 175, 176, 177, 178, 179, 181, 183, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 216, 217, 218, 221, 222, 225, 227, 231, 234, 239, 241, 242, 244, 248, 249, 250, 263], "200": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 69, 70, 119, 120, 126, 140, 141, 258, 263, 265], "total_fram": [13, 14, 16, 17, 18, 19, 20, 21, 225, 228, 246, 256, 258, 259, 260, 266], "create_env_kwarg": [13, 14, 16, 17, 52, 56, 57, 58, 258], "dict": [13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 30, 51, 52, 54, 56, 57, 58, 99, 103, 107, 118, 119, 120, 121, 122, 127, 129, 130, 154, 157, 212, 213, 221, 232, 233, 234, 241, 244, 248, 249, 250, 258, 259, 260, 267], "postproc": [13, 14, 16, 17, 18, 19, 20, 21, 259], "preemptive_threshold": [13, 14], "float": [13, 14, 25, 27, 30, 31, 32, 34, 37, 44, 51, 54, 56, 57, 58, 76, 78, 86, 89, 93, 94, 99, 101, 103, 106, 107, 123, 126, 128, 130, 132, 133, 134, 140, 141, 142, 144, 150, 152, 153, 156, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 223, 258, 259, 267], "given": [13, 14, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 55, 56, 57, 58, 76, 77, 86, 89, 99, 103, 106, 116, 117, 125, 126, 132, 139, 146, 151, 153, 155, 156, 157, 158, 159, 160, 164, 167, 168, 177, 189, 190, 191, 192, 193, 194, 217, 221, 246, 254, 256, 258, 259, 260, 263, 267], "datacollector": [13, 14, 16, 17, 154, 157, 178, 260], "recept": 13, "safe": [13, 14, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 146, 150, 151, 153, 154, 155, 156, 157, 159, 254, 266], "env_mak": [13, 14, 16, 21, 246, 267], "lambda": [13, 14, 16, 17, 21, 22, 52, 171, 173, 193, 200, 201, 205, 206, 246, 255, 258, 259, 266, 267], "50": [13, 14, 16, 21, 259, 260, 263, 264, 265], "linear": [13, 14, 16, 21, 30, 51, 54, 55, 56, 57, 58, 76, 89, 99, 103, 106, 117, 118, 125, 130, 132, 133, 134, 135, 139, 140, 141, 146, 147, 148, 149, 152, 153, 154, 155, 156, 159, 160, 177, 190, 191, 192, 193, 246, 254, 259, 262, 264, 266], "2000": [13, 14, 16, 260], "enumer": [13, 14, 16, 21, 30, 33, 35, 51, 54, 56, 57, 58, 184, 255, 258, 259, 260, 266], "step_count": [13, 14, 16, 98, 260, 266], "int64": [13, 14, 16, 24, 27, 28, 29, 31, 34, 68, 125, 139, 151, 153, 155, 236, 254, 260, 263, 266, 267], "shutdown": [13, 14, 16, 17, 21, 258, 266], "del": [13, 14, 16, 258, 260, 262, 266, 267], "randompolici": [13, 14, 16, 18, 19, 20, 22, 252], "total": [13, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 31, 54, 166, 176, 178, 216, 218, 221, 225, 228, 229, 258, 259, 260, 262, 263, 264, 265, 266, 267], "lifespan": [13, 14, 16, 18, 19, 20, 259], "divis": [13, 14, 16, 18, 19, 20], "endless": [13, 14, 16, 18, 19, 20], "accommod": [13, 14, 16, 17], "kept": [13, 14, 16, 17, 48, 57, 58, 77, 102, 109, 116, 128, 143, 144], "long": [13, 14, 16, 17, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 77], "dictionari": [13, 14, 16, 17, 18, 19, 20, 21, 26, 30, 51, 54, 56, 57, 58, 99, 103, 154, 157, 221, 248, 249, 250, 256, 259, 260, 263, 267], "span": [13, 14, 16, 17, 18, 19, 20, 21], "unless": [13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 48, 51, 54, 56, 57, 58, 260], "n_step": [13, 14, 16, 17, 18, 19, 20, 21, 30, 153, 259, 260], "independ": [13, 14, 16, 17, 18, 19, 20, 21, 102, 104, 255, 256, 258, 259, 266], "ignor": [13, 14, 16, 17, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 77, 79, 96, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 177, 267], "mainli": [13, 14, 16, 17, 18, 19, 20, 21, 254, 263], "post": [13, 14, 16, 18, 19, 20, 21, 30, 51, 54, 56, 57, 58], "multistep": [13, 14, 16, 18, 19, 20, 21, 252, 259], "accord": [13, 14, 16, 17, 18, 19, 20, 21, 86, 94, 128, 133, 140, 143, 144, 254, 263], "return_same_td": [13, 14, 16], "cautious": [13, 14, 16, 178], "whole": [13, 14, 16, 26, 30, 51, 54, 56, 57, 58, 103, 216, 258, 260], "boolm": [13, 14], "update_policy_weight_": [13, 14], "sync": [13, 14, 18, 19, 20, 21, 227, 246, 256, 258, 266], "async": [13, 14, 18, 19, 20, 21, 258, 266], "ratio": [13, 14, 258, 260], "finish": [13, 14, 21], "rest": [13, 14, 254, 260, 266], "earli": [13, 14, 266], "load_state_dict": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 103, 107, 256, 258], "state_dict": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 103, 107, 177, 250, 256, 258, 259, 267], "ordereddict": [13, 14, 16, 17, 21, 30, 51, 54, 56, 57, 58, 103, 107, 259], "form": [13, 14, 17, 30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 107, 164, 165, 166, 176, 178, 225, 254], "worker0": [13, 14, 17], "state_dict0": [13, 14, 17], "worker1": [13, 14, 17], "state_dict1": [13, 14, 17], "reset_idx": [13, 14, 17], "static_se": [13, 14, 16, 17, 21, 51, 54, 56, 57, 58, 103], "integ": [13, 14, 16, 17, 23, 28, 29, 30, 31, 38, 49, 51, 54, 56, 57, 58, 82, 86, 98, 118, 130, 175, 181], "increment": [13, 14, 16, 17, 51, 54, 56, 57, 58, 98, 176], "env_fn": [13, 14, 16, 17, 52, 248, 249], "v0": [13, 14, 17, 54, 63, 64, 66, 67, 76, 103, 107, 246], "env_fn_parallel": [13, 14, 16, 17], "out_se": [13, 14, 16, 17, 267], "shut": [13, 14, 16, 17], "irrevers": [13, 14, 17], "kwarg": [14, 16, 17, 21, 26, 30, 39, 41, 42, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 97, 99, 103, 104, 105, 106, 118, 119, 120, 121, 122, 127, 128, 130, 131, 138, 142, 144, 146, 151, 154, 155, 157, 166, 176, 177, 185, 189, 190, 191, 192, 193, 194, 208, 212, 213, 215, 218, 225, 231, 232, 233, 234, 239, 241, 244, 247, 248, 249, 255, 258, 260, 266], "rand": [15, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 55, 60, 67, 117, 132, 263, 266, 267], "describ": [15, 36, 74, 102, 142, 143, 211, 231, 239, 255, 258, 260, 263, 267], "tensor_spec": [15, 157], "boundedtensorspec": [15, 22, 26, 152, 153, 154, 252, 260, 263, 266, 267], "td": [15, 26, 59, 60, 61, 62, 63, 64, 66, 67, 74, 77, 78, 84, 86, 101, 103, 107, 116, 117, 125, 131, 132, 139, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 191, 192, 193, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 216, 224, 231, 234, 236, 239, 241, 244, 254, 255, 258, 263, 266, 267], "cube": 15, "envcreat": [16, 22, 246, 247, 250, 252, 258, 259, 266, 267], "interruptor": 16, "_interruptor": 16, "outsid": 16, "start_collect": 16, "stop_collect": 16, "preeptiv": 16, "stop": [16, 21, 51, 54, 56, 57, 58, 260, 266, 267], "chunk": 16, "policy_state_dict": 16, "env_state_dict": 16, "close": [16, 17, 54, 56, 165, 166, 176, 178, 258, 262, 263, 266], "pin_memori": [17, 32, 33, 34, 35, 39, 40, 57, 58, 88, 258, 266], "paradigm": 17, "regular": [17, 139, 156, 157, 170, 227, 252, 256, 258, 259, 267], "prefer": [17, 20, 32, 33, 34, 35, 90, 96, 178, 222, 254, 260], "mere": 17, "greater": [17, 258, 259, 266], "signal": [17, 39, 98, 255, 258, 260], "sent": [17, 41, 42, 107], "server": 17, "length": [17, 20, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 57, 58, 90, 107, 117, 118, 119, 121, 124, 130, 132, 146, 151, 155, 156, 160, 216, 222, 258, 260, 263, 267], "postprocessor": 17, "format": [17, 29, 30, 31, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177, 258, 259, 267], "collector_class": [18, 19, 20, 21], "collector_kwarg": [18, 19, 20, 21], "num_workers_per_collector": [18, 19, 20, 21], "slurm_kwarg": [18, 19, 20], "update_after_each_batch": [18, 20, 21], "max_weight_update_interv": [18, 19, 20, 21], "tcp_port": [18, 19, 20, 22], "deriv": [18, 19, 20, 21, 225], "string": [18, 19, 20, 30, 51, 54, 56, 57, 58, 89, 106, 154, 157, 164, 207, 224, 231, 239, 241, 244, 255, 258, 260], "respect": [18, 19, 20, 30, 51, 54, 56, 57, 58, 72, 76, 89, 90, 99, 103, 106, 141, 156, 160, 177, 220, 260], "copi": [18, 19, 20, 21, 30, 51, 54, 56, 57, 58, 91, 103, 116, 177, 255, 258, 259], "subnod": [18, 19, 20, 21], "readi": [18, 20, 21, 253, 259, 260, 262], "serv": [18, 20, 21, 65, 267], "fashion": [18, 20, 21], "executor": [18, 19, 20], "distributed_back": [18, 19], "ucc": [18, 19], "overwritten": [18, 20, 21, 51, 54, 56, 57, 58, 81], "seen": [18, 20, 21, 255, 258, 259], "turn": [18, 20, 21, 83, 104, 221, 255, 258, 259, 263, 264], "mp": [18, 19, 20, 52, 107], "submitit_delai": [18, 22], "former": [18, 19, 20, 32, 33, 34, 35, 39, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 258], "whilst": [18, 19, 20], "latter": [18, 19, 20, 30, 39, 51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 177, 178, 248, 249], "homonym": [18, 19, 20, 263], "visit": [18, 19, 20], "facebookincub": [18, 19, 20], "tcp": [18, 19, 20, 22], "port": [18, 19, 20, 22], "10003": [18, 19, 20, 22], "worker_rank": [18, 19, 21], "update_interv": 19, "frequenc": [19, 258], "visible_devic": 20, "tensorpipe_opt": 20, "experiment": [20, 31, 154, 157], "union": [20, 54, 118, 169, 179], "tensorpiperpcbackendopt": 20, "ray_init_config": 21, "remote_config": 21, "num_collector": [21, 248, 249, 258, 259], "coordin": 21, "hood": [21, 263], "init": [21, 30, 51, 54, 56, 57, 58, 258, 259, 260], "autodetect": 21, "advanc": [21, 32, 33, 34, 35], "similarli": [21, 30, 48, 51, 54, 56, 57, 58, 158, 159, 175, 267], "num_cpu": 21, "num_gpu": 21, "1024": [21, 259], "carri": [21, 51, 54, 56, 57, 58, 177, 259, 263], "equat": [21, 153, 164, 166, 182, 260, 263], "exce": [21, 260], "indefinit": 21, "raydistributedcollector": 21, "distributed_collector": 21, "10000": [21, 225, 260], "add_collector": 21, "num_env": [21, 69, 70], "local_polici": 21, "remote_collector": 21, "stop_remote_collector": 21, "num_job": 22, "tcpport": 22, "submitit_main_conf": 22, "slurm_cpus_per_task": 22, "32": [22, 26, 69, 70, 118, 119, 120, 127, 130, 136, 137, 259, 260, 263, 264, 266, 267], "slurm_gpus_per_nod": 22, "slurm_partit": 22, "timeout_min": 22, "submitit_collection_conf": 22, "delai": 22, "jump": 22, "host": [22, 30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "wherea": [22, 77, 177, 256], "otherwis": [22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 51, 54, 56, 57, 58, 77, 86, 99, 103, 107, 128, 143, 144, 172, 177, 181, 221, 222, 256, 258, 259, 260, 263, 267], "satellit": 22, "rendezv": 22, "hang": 22, "forev": 22, "default_config": 22, "default_slurm_conf_main": 22, "default_slurm_conf": 22, "__name__": [22, 52, 259], "__main__": [22, 52], "rollout_tensordict": 23, "prefix": [23, 30, 51, 54, 56, 57, 58, 103, 177, 207, 267], "max": [23, 31, 34, 44, 77, 100, 142, 143, 144, 166, 169, 179, 181, 258, 260], "durat": 23, "tupl": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 54, 56, 57, 58, 86, 91, 119, 129, 130, 135, 167, 171, 177, 190, 191, 192, 193, 219, 221, 223, 235, 237, 240, 243, 258], "meta": [23, 36, 39, 53, 256, 260], "aren": 23, "discret": [24, 27, 28, 29, 31, 38, 77, 125, 138, 139, 169, 170, 254, 259, 267], "5": [24, 32, 33, 34, 35, 52, 56, 67, 69, 70, 117, 118, 125, 126, 128, 129, 130, 132, 139, 143, 144, 151, 155, 175, 176, 183, 254, 258, 259, 263, 264, 266, 267], "assert_is_in": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "belong": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 107, 254, 258], "encod": [24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 77, 125, 137, 138, 139, 140, 151, 155, 164, 254, 259, 260, 263], "val": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 266], "ndarrai": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 54, 153], "np": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 54, 263], "compli": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "current": [24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 51, 54, 56, 57, 58, 65, 90, 103, 110, 111, 116, 125, 126, 129, 139, 141, 153, 170, 211, 231, 239, 256, 258, 259, 260, 263, 266, 267], "least": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "complient": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "singleton": [24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 118, 130], "classmethod": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "implements_for_spec": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "torch_funct": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "overrid": [24, 25, 26, 27, 28, 29, 31, 33, 36, 37, 38, 250, 254], "tensor_to_index": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "is_in": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 267], "project": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 77, 146, 150, 151, 152, 153, 154, 155, 156, 157, 254, 266, 267], "back": [24, 25, 26, 27, 28, 29, 31, 32, 36, 37, 38, 146, 151, 154, 155, 156, 157, 260, 263], "uniform": [24, 25, 26, 27, 28, 29, 31, 32, 34, 36, 37, 38, 44], "unbound": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 99, 113, 263], "squeez": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 97, 118, 258, 263], "dim": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 73, 74, 99, 104, 107, 129, 250, 259, 263], "to_numpi": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "transformed_in": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 102, 103, 135, 142, 250], "to_one_hot": [24, 27, 28], "hot": [24, 27, 28, 29, 31, 77, 125, 138, 139, 151, 155], "to_one_hot_spec": [24, 27, 28], "onehotdiscretetensorspec": [24, 27, 125, 139, 151, 155, 252, 254], "convert": [24, 27, 28, 29, 30, 31, 51, 54, 56, 57, 58, 76, 78, 89, 99, 103, 106, 107, 156, 164, 177, 258, 259, 260, 263], "type_check": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38], "fill": [24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 99, 263, 264], "upper": 25, "unnam": 26, "effect": [26, 30, 51, 54, 56, 57, 58, 95, 103, 225, 258, 267], "pixels_spec": 26, "observation_vector_spec": 26, "33": [26, 30, 51, 54, 56, 57, 58, 118, 130, 259, 260, 263], "composite_spec": 26, "observation_vector": [26, 74, 231, 234, 239, 241, 244, 258], "within": [26, 30, 34, 35, 51, 54, 56, 57, 58, 107, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 254, 263, 266], "randn": [26, 86, 113, 125, 129, 135, 138, 139, 146, 147, 148, 149, 151, 154, 155, 156, 159, 160, 190, 191, 192, 193, 224, 254, 266, 267], "td_project": 26, "include_nest": 26, "leaves_onli": 26, "itemsview": 26, "immedi": [26, 30, 51, 54, 56, 57, 58, 189], "children": [26, 30, 51, 54, 56, 57, 58], "keysview": 26, "reflect": [26, 116, 177, 228, 259, 260], "selected_kei": [26, 96, 258], "valuesview": 26, "onehottensorspec": 27, "categor": [27, 29, 31, 125, 138, 139, 151, 155], "action_valu": [27, 31, 125, 139, 151, 155, 236, 254], "arang": [27, 31, 125, 151, 216, 254], "argmax": [27, 125, 139, 151, 155], "chosen_action_valu": [27, 31, 155, 236, 254], "outcom": [27, 31, 123, 142], "nvec": [28, 29], "cardin": [28, 29, 125, 139, 260], "ax": [28, 133, 134], "multionehotdiscretetensorspec": [28, 252], "use_regist": [29, 31], "to_categor": [29, 31], "to_categorical_spec": [29, 31], "multidiscretetensorspec": [29, 252], "gamma": [30, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 246, 255, 258, 259, 260, 266], "sutton": [30, 255], "1988": 30, "predict": [30, 126, 131, 132, 161, 170, 172, 173, 189, 254, 258, 259], "tempor": [30, 132, 191, 192, 196, 197], "44": [30, 259, 260, 263, 265], "discount": [30, 52, 170, 171, 173, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 255, 259, 260], "ahead": [30, 267], "add_modul": [30, 51, 54, 56, 57, 58], "child": [30, 51, 54, 56, 57, 58], "fn": [30, 51, 54, 56, 57, 58, 135, 248, 249], "recurs": [30, 51, 54, 56, 57, 58, 177], "init_weight": [30, 51, 54, 56, 57, 58], "m": [30, 51, 54, 56, 57, 58, 77, 157, 254, 259, 263], "fill_": [30, 51, 54, 56, 57, 58, 259, 267], "net": [30, 51, 54, 56, 57, 58, 129, 179, 241, 246, 259, 263, 264, 266], "in_featur": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 118, 119, 120, 121, 122, 129, 130, 133, 134, 147, 156, 177, 266], "out_featur": [30, 51, 54, 55, 56, 57, 58, 76, 89, 99, 103, 106, 117, 118, 119, 120, 121, 122, 126, 127, 129, 130, 132, 133, 134, 147, 151, 156, 177, 254, 258, 266], "bia": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 118, 126, 130, 133, 134, 135, 152, 153, 156, 162, 163, 164, 177, 255, 258, 259, 260, 266], "requires_grad": [30, 51, 54, 56, 57, 58], "bfloat16": [30, 51, 54, 56, 57, 58], "cast": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 156, 177, 231, 234, 236, 239, 241, 244, 267], "datatyp": [30, 51, 54, 56, 57, 58, 177], "member": [30, 51, 54, 56, 57, 58, 177], "xdoctest": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "skip": [30, 51, 54, 56, 57, 58, 82, 103, 109, 154, 157, 177, 207, 208, 218, 221, 258, 259, 260, 263], "buf": [30, 51, 54, 56, 57, 58], "20l": [30, 51, 54, 56, 57, 58, 177], "1l": [30, 51, 54, 56, 57, 58, 177], "5l": [30, 51, 54, 56, 57, 58, 177], "associ": [30, 51, 54, 56, 57, 58, 140, 177, 250, 258], "doubl": [30, 37, 51, 54, 56, 57, 58, 76, 78, 89, 99, 101, 103, 106, 156, 168, 170, 174, 177, 179, 182, 258, 259, 260, 267], "eval": [30, 51, 54, 56, 57, 58, 103, 107, 258, 259, 260], "evalu": [30, 51, 54, 56, 57, 58, 103, 123, 138, 144, 179, 232, 233, 259, 260], "particular": [30, 39, 51, 54, 56, 57, 58, 103, 255, 256, 259, 262], "dropout": [30, 51, 54, 56, 57, 58, 103, 130], "batchnorm": [30, 51, 54, 56, 57, 58, 103, 177], "disabl": [30, 51, 54, 56, 57, 58, 103, 128, 143, 144, 258], "comparison": [30, 51, 54, 56, 57, 58, 103, 177, 258, 259], "similar": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 105, 106, 107, 147, 149, 154, 156, 157, 177, 255, 258, 259, 260, 263, 267], "confus": [30, 51, 54, 56, 57, 58, 103], "extra_repr": [30, 51, 54, 56, 57, 58], "represent": [30, 51, 54, 56, 57, 58, 89, 106, 258, 263, 264, 267], "nontermin": 30, "original_reward": 30, "newli": 30, "OR": 30, "reshap": [30, 130, 260], "get_buff": [30, 51, 54, 56, 57, 58], "throw": [30, 51, 54, 56, 57, 58, 267], "docstr": [30, 51, 54, 56, 57, 58], "get_submodul": [30, 51, 54, 56, 57, 58], "explan": [30, 51, 54, 56, 57, 58], "qualifi": [30, 51, 54, 56, 57, 58], "referenc": [30, 51, 54, 56, 57, 58], "attributeerror": [30, 51, 54, 56, 57, 58, 258], "invalid": [30, 51, 54, 56, 57, 58], "resolv": [30, 51, 54, 56, 57, 58], "get_extra_st": [30, 51, 54, 56, 57, 58, 107], "set_extra_st": [30, 51, 54, 56, 57, 58, 107], "picklabl": [30, 51, 54, 56, 57, 58, 107], "ensur": [30, 32, 34, 44, 48, 51, 54, 56, 57, 58, 73, 89, 107, 254, 259, 260, 263], "guarante": [30, 41, 42, 43, 49, 51, 54, 56, 57, 58, 107, 266], "pickl": [30, 51, 54, 56, 57, 58, 107], "get_paramet": [30, 51, 54, 56, 57, 58], "sai": [30, 51, 54, 56, 57, 58, 264, 267], "net_b": [30, 51, 54, 56, 57, 58], "net_c": [30, 51, 54, 56, 57, 58], "conv": [30, 51, 54, 56, 57, 58, 118, 259], "conv2d": [30, 51, 54, 56, 57, 58, 118, 266], "16": [30, 51, 54, 56, 57, 58, 259, 260, 263], "kernel_s": [30, 51, 54, 56, 57, 58, 118, 119, 120, 259, 266], "stride": [30, 51, 54, 56, 57, 58, 118, 119, 120, 127, 259, 266], "diagram": [30, 51, 54, 56, 57, 58], "show": [30, 51, 54, 56, 57, 58, 254, 258, 260, 263, 266], "itself": [30, 51, 54, 56, 57, 58, 177, 260], "degre": [30, 51, 54, 56, 57, 58], "named_modul": [30, 51, 54, 56, 57, 58], "o": [30, 51, 54, 56, 57, 58, 259], "transit": [30, 39, 51, 54, 56, 57, 58, 161, 258, 263], "half": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177, 258], "ipu": [30, 51, 54, 56, 57, 58], "strict": [30, 51, 54, 56, 57, 58, 103], "descend": [30, 51, 54, 56, 57, 58, 103], "exactli": [30, 51, 54, 56, 57, 58, 65, 103, 258], "persist": [30, 51, 54, 56, 57, 58, 103, 116, 177], "enforc": [30, 48, 51, 54, 56, 57, 58, 103, 158, 263], "missing_kei": [30, 51, 54, 56, 57, 58, 103], "unexpected_kei": [30, 51, 54, 56, 57, 58, 103], "namedtupl": [30, 51, 54, 56, 57, 58, 103], "duplic": [30, 48, 51, 54, 56, 57, 58, 168, 170, 177], "l": [30, 51, 54, 56, 57, 58, 189, 260, 263], "idx": [30, 51, 54, 56, 57, 58], "named_buff": [30, 51, 54, 56, 57, 58], "remove_dupl": [30, 51, 54, 56, 57, 58, 177], "prepend": [30, 51, 54, 56, 57, 58, 177], "running_var": [30, 51, 54, 56, 57, 58], "named_children": [30, 51, 54, 56, 57, 58], "conv4": [30, 51, 54, 56, 57, 58], "conv5": [30, 51, 54, 56, 57, 58], "memo": [30, 51, 54, 56, 57, 58], "named_paramet": [30, 51, 54, 56, 57, 58, 177], "register_backward_hook": [30, 51, 54, 56, 57, 58], "removablehandl": [30, 51, 54, 56, 57, 58], "deprec": [30, 51, 54, 56, 57, 58, 103, 110, 114, 267], "favor": [30, 51, 54, 56, 57, 58, 260], "register_full_backward_hook": [30, 51, 54, 56, 57, 58], "register_buff": [30, 51, 54, 56, 57, 58, 177], "running_mean": [30, 51, 54, 56, 57, 58, 177], "alongsid": [30, 51, 54, 56, 57, 58, 177], "num_featur": [30, 51, 54, 56, 57, 58, 177], "register_forward_hook": [30, 51, 54, 56, 57, 58, 125, 139], "with_kwarg": [30, 51, 54, 56, 57, 58], "posit": [30, 32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 81, 82, 97, 98, 100, 103, 104, 135, 255, 260, 263], "signatur": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177, 255, 258, 263], "possibli": [30, 51, 54, 56, 57, 58, 118, 146, 151, 154, 155, 156, 160, 225, 254, 260, 263, 267], "register_module_forward_hook": [30, 51, 54, 56, 57, 58], "register_forward_pre_hook": [30, 51, 54, 56, 57, 58], "invok": [30, 51, 54, 56, 57, 58], "And": [30, 51, 54, 56, 57, 58], "forward_pr": [30, 51, 54, 56, 57, 58], "register_module_forward_pre_hook": [30, 51, 54, 56, 57, 58], "grad_input": [30, 51, 54, 56, 57, 58], "grad_output": [30, 51, 54, 56, 57, 58], "subsequ": [30, 51, 54, 56, 57, 58], "technic": [30, 51, 54, 56, 57, 58, 259], "caller": [30, 51, 54, 56, 57, 58], "register_module_full_backward_hook": [30, 51, 54, 56, 57, 58], "register_full_backward_pre_hook": [30, 51, 54, 56, 57, 58], "backward_pr": [30, 51, 54, 56, 57, 58], "register_module_full_backward_pre_hook": [30, 51, 54, 56, 57, 58], "register_load_state_dict_post_hook": [30, 51, 54, 56, 57, 58], "incompatible_kei": [30, 51, 54, 56, 57, 58], "thrown": [30, 51, 54, 56, 57, 58], "clear": [30, 51, 54, 56, 57, 58, 217], "register_modul": [30, 51, 54, 56, 57, 58, 256], "alia": [30, 51, 54, 56, 57, 58], "register_paramet": [30, 51, 54, 56, 57, 58], "register_state_dict_pre_hook": [30, 51, 54, 56, 57, 58], "keep_var": [30, 51, 54, 56, 57, 58, 103], "made": [30, 41, 42, 43, 49, 51, 54, 56, 57, 58, 153, 177, 258, 259, 264], "requires_grad_": [30, 51, 54, 56, 57, 58], "autograd": [30, 51, 54, 56, 57, 58, 103], "freez": [30, 51, 54, 56, 57, 58], "finetun": [30, 51, 54, 56, 57, 58], "gan": [30, 51, 54, 56, 57, 58], "share_memori": [30, 51, 52, 54, 56, 57, 58, 258], "share_memory_": [30, 51, 54, 56, 57, 58, 266], "destin": [30, 51, 54, 56, 57, 58, 103, 116], "averag": [30, 51, 54, 56, 57, 58, 103, 107, 153, 171, 172, 223, 258, 260], "shallow": [30, 51, 54, 56, 57, 58, 103], "pleas": [30, 51, 54, 56, 57, 58, 103, 253], "detach": [30, 51, 54, 56, 57, 58, 103, 177, 190, 191, 192, 193, 258], "non_block": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "memory_format": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "channels_last": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "Its": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 107, 156, 177, 194], "complex": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177, 258, 259], "integr": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 122, 132, 156, 177, 254, 263, 264], "unchang": [30, 51, 54, 56, 57, 58, 76, 77, 89, 99, 103, 106, 156, 177, 222, 258], "tri": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "pin": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "4d": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "ignore_w": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "1913": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "3420": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "5113": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "2325": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "torch_doctest_cuda1": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "gpu1": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "1914": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "5112": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "2324": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "float16": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "cdoubl": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "3741": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177, 259], "j": [30, 32, 44, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177, 256], "2382": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "5593": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "4443": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "complex128": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "6122": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "1150": [30, 51, 54, 56, 57, 58, 76, 89, 99, 103, 106, 156, 177], "to_empti": [30, 51, 54, 56, 57, 58], "dst_type": [30, 51, 54, 56, 57, 58], "xpu": [30, 51, 54, 56, 57, 58], "set_to_non": [30, 51, 54, 56, 57, 58], "unidimension": 31, "keepdim": 31, "user_regist": 31, "priori": 31, "definit": [31, 49], "uniqu": 31, "discretebox": [31, 267], "discretetensorspec": [31, 252, 267], "alpha": [32, 34, 44, 118, 169, 179, 181, 258, 266], "ep": [32, 34, 44, 107, 153, 166, 182, 223, 258], "1e": [32, 34, 44, 107, 123, 126, 135, 142, 258, 259, 260], "08": [32, 34, 44, 259, 260, 263], "collate_fn": [32, 33, 34, 35, 39, 40, 266], "prefetch": [32, 33, 34, 35, 39, 40, 258, 259], "schaul": [32, 44], "quan": [32, 44], "antonogl": [32, 44], "silver": [32, 44], "2015": [32, 44], "arxiv": [32, 44, 73, 89, 119, 120, 121, 122, 125, 126, 127, 132, 134, 136, 137, 140, 141, 153, 165, 170, 171, 172, 173, 174, 175, 178, 181, 182, 190, 195, 202, 231, 234, 239, 244, 258, 264], "ab": [32, 44, 89, 107, 126, 127, 132, 134, 136, 137, 140, 141, 165, 171, 172, 173, 174, 175, 178, 181, 231, 239, 258, 264], "1511": [32, 44, 127], "05952": [32, 44], "expon": [32, 34, 44], "\u03b1": [32, 34, 44], "determin": [32, 34, 39, 44, 89, 106, 153, 259], "delta": [32, 34, 44, 142, 154, 157, 252, 255], "null": [32, 34, 44, 72], "max_siz": [32, 33, 34, 35, 41, 43, 49], "1_000": [32, 33, 34, 35], "merg": [32, 33, 34, 35, 39, 40, 263], "mini": [32, 33, 34, 35, 39, 40], "style": [32, 33, 34, 35, 39, 40], "decid": [32, 33, 34, 35, 266], "rb": [32, 33, 34, 35, 39, 40, 259, 264, 266], "meth": [32, 33, 34, 35], "incompat": [32, 33, 34, 35], "drop_last": [32, 33, 34, 35, 48], "return_info": [32, 33, 34, 35, 39, 40], "tensordictprioritizedreplaybuff": [32, 252, 266], "simplifi": [32, 263], "manual_se": [32, 33, 34, 35, 77, 86, 138, 146, 152, 153, 263, 266, 267], "info": [32, 33, 34, 35, 39, 40, 51, 54, 56, 57, 58, 69, 70, 108], "_weight": [32, 34, 266], "arrai": [32, 258], "update_prior": [32, 44, 222, 256, 259, 266], "36278465": 32, "insert_transform": [32, 33, 34, 35, 39, 40], "insert": [32, 33, 34, 35, 39, 40, 46, 50, 104], "writer": [33, 35, 39, 40, 46, 252, 260], "randomsampl": [33, 35, 39, 40, 252, 258], "roundrobinwrit": [33, 35, 39, 40, 252], "priority_kei": [34, 35, 168, 169, 170, 175, 179, 181, 183, 266], "td_error": [34, 35, 167, 168, 169, 170, 175, 179, 181, 183, 258, 266], "reduct": [34, 44], "prioritizedreplaybuff": [34, 252, 266], "update_tensordict_prior": [34, 258, 266], "prioritizedsampl": [34, 35, 252, 258], "min": [34, 44, 142, 143, 144, 166, 169, 179, 181, 259, 260], "median": [34, 44, 154, 157], "len": [34, 118, 130, 258, 263, 264, 266], "include_info": [34, 35, 39, 40], "kw": [35, 46], "int32": [35, 67, 113], "from_env": 39, "use_timeout_as_don": 39, "env_kwarg": [39, 248, 249, 258], "metadata": [39, 260, 267], "reconstruct": [39, 172, 258, 267], "timeout": 39, "recov": [39, 150, 152, 153, 158, 175, 262], "regard": [39, 125, 165, 170, 178, 258, 260, 263], "get_dataset": 39, "qlearning_dataset": 39, "less": [39, 56, 248, 249, 255, 260, 266], "left": [39, 89, 91, 100, 102, 106, 259, 260], "terminate_on_end": 39, "possess": 39, "unexpectedli": 39, "episod": [39, 95, 117, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 259], "absent": 39, "traj_split": 39, "observationnorm": [39, 107, 250, 258, 259, 260, 266], "maze2d": 39, "umaz": 39, "loc": [39, 86, 94, 128, 135, 143, 144, 147, 148, 149, 154, 157, 159, 229, 231, 239, 241, 244, 250, 254, 258, 259, 260, 266], "128": [39, 120, 259, 263, 264], "public": [40, 89, 106], "dua": 40, "graff": 40, "2017": 40, "uci": 40, "archiv": 40, "ic": 40, "edu": 40, "ml": 40, "sklearn": 40, "adult_num": [40, 68], "adult_onehot": [40, 68], "mushroom_num": [40, 68], "mushroom_onehot": [40, 68], "covertyp": [40, 68], "shuttl": [40, 68], "magic": [40, 68], "scratch_dir": [41, 258], "memmap": [41, 57, 58, 107, 222], "attach": [41, 42, 43, 49, 259], "entiti": [41, 42, 43, 49], "alloc": [42, 258], "max_capac": [44, 258], "uniformli": [45, 177, 267], "roundrobin": 46, "piec": [46, 50, 258, 259, 260, 263], "consum": [48, 259, 260], "incomplet": 48, "unlik": [48, 170, 178, 259, 266], "fresh": 48, "caution": [48, 109, 267], "shuffl": 48, "haven": [48, 264], "remain": [48, 77, 134], "draw": 48, "__len__": 49, "_inplace_upd": [51, 56, 57, 58, 59, 60, 68, 69, 70, 103], "_batch_lock": [51, 56, 57, 58, 59, 60, 68, 69, 70, 103], "run_type_check": [51, 55], "batch_lock": [51, 53, 54, 56, 57, 58, 99, 103, 263], "environn": [51, 54, 55, 56, 57, 58, 103], "immut": [51, 54, 56, 57, 58, 91, 103, 231, 239], "fake_tensordict": [51, 54, 56, 57, 58, 259], "fake": [51, 54, 56, 57, 58, 258, 259], "overridden": [51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162], "recip": [51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162], "afterward": [51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162, 267], "silent": [51, 54, 56, 57, 58, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 135, 136, 137, 140, 141, 150, 152, 153, 162], "rand_act": [51, 54, 56, 57, 58], "_step": [51, 54, 56, 57, 58, 81, 91], "privat": [51, 54, 56, 57, 58, 263, 267], "_reset": [51, 54, 55, 56, 57, 58, 117, 132], "callback": [51, 54, 56, 57, 58], "auto_reset": [51, 54, 56, 57, 58, 263], "auto_cast_to_devic": [51, 54, 56, 57, 58], "break_when_any_don": [51, 54, 56, 57, 58], "return_contigu": [51, 54, 56, 57, 58, 109, 262], "soon": [51, 54, 56, 57, 58], "lazystackedtensordict": [51, 54, 55, 56, 57, 58, 117, 132, 262, 266, 267], "concomitt": [51, 54, 56, 57, 58], "workspac": [51, 54, 56, 57, 58], "creator": [52, 232, 233, 248, 249, 250], "substitut": [52, 107], "vecnorm": [52, 250], "env_creat": [52, 258], "test_env1": 52, "_td": 52, "observation_count": [52, 267], "test_env2": 52, "sleep": [52, 267], "p1": 52, "p2": 52, "join": [52, 231, 239, 252, 259, 260], "9934": 52, "env_str": 53, "discard": [54, 116, 207, 267], "info_dict_read": 54, "set_info_dict_read": 54, "put": [54, 107, 250, 254, 259, 260, 263], "f": [54, 164, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 258, 259, 260, 263, 267], "read_act": 54, "read_don": 54, "reader": [54, 259], "frame_skip": [54, 61, 62, 63, 66, 82, 218, 221, 228, 256, 258, 259, 260, 266], "broken": [54, 109], "read_ob": 54, "dictat": [54, 154, 157, 178, 258, 263], "inner": [54, 77, 256, 259, 260, 267], "read_reward": 54, "total_reward": [54, 259], "step_reward": 54, "far": [54, 128, 143, 144, 263, 267], "baseinfodictread": 54, "info_dict": 54, "hoc": 54, "manner": [54, 89, 254, 258, 259, 260, 262, 263], "dict_read": 54, "default_info_dict_read": 54, "my_info_kei": 54, "some_env": 54, "limit": [55, 258, 259, 263], "safeti": 55, "constraint": [55, 260], "behav": [55, 65, 138, 175, 264], "unboundedcontinuoustensorspec": [55, 99, 113, 117, 146, 156, 159, 160, 252, 260, 263, 267], "mymbenv": [55, 117, 132], "world_model": [55, 117, 132, 172], "super": [55, 117, 125, 132, 160, 258, 263, 266], "hidden_observ": [55, 117, 132], "mlp": [55, 117, 118, 119, 120, 121, 122, 129, 132, 147, 151, 231, 239, 241, 244, 254, 259, 262, 264, 266], "worldmodelwrapp": [55, 117, 132], "activation_class": [55, 117, 118, 119, 120, 121, 122, 126, 127, 130, 132, 259, 266], "relu": [55, 117, 132, 135, 164], "activate_last_lay": [55, 117, 122, 130, 132], "depth": [55, 117, 118, 119, 120, 121, 122, 126, 127, 130, 132, 136, 137, 151, 254, 259, 262], "equal": [56, 57, 58, 85, 86, 118, 124, 130, 186, 216, 248, 249, 258, 260, 264], "readthedoc": 56, "en": 56, "python_interfac": 56, "num_work": [56, 57, 58, 258, 259], "thread": 56, "task_id": 56, "my_env_fun": [57, 58], "custom_attribute_list": [57, 58], "custom_attribut": [57, 58], "custom_method_list": [57, 58], "custom_method": [57, 58], "deploi": [57, 58], "creation": [57, 58, 258, 267], "slight": [57, 58, 259], "overhead": [57, 58], "share_individual_td": [57, 58], "lazi": [57, 58, 89, 133, 158, 159, 258, 259, 262, 267], "shared_memori": [57, 58], "policy_proof": [57, 58], "ll": [57, 58, 258, 259, 260, 267], "hidden": [57, 58, 126, 129, 136, 137, 140, 141, 147, 148, 149, 156, 159, 166, 176, 178, 231, 239, 254, 262, 266], "allow_step_when_don": [57, 58], "update_kwarg": [57, 58], "googl": [59, 60, 260], "ant": [59, 60, 264], "get_environ": 60, "87": [60, 259, 263, 264], "acrobot": [60, 267], "fetch": [60, 264, 267], "dm_control": [61, 62, 258, 262, 267], "task_nam": 61, "cheetah": [61, 62, 258, 267], "placehold": [65, 103], "secur": 65, "jumanji": [66, 67], "snake": [66, 67], "6x6": [66, 67], "td1": [67, 165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 258], "12x12": 67, "tsp50": 67, "tsp100": 67, "dataset_nam": 68, "empti": [68, 89, 100, 103, 106, 258, 263], "106": [68, 263], "vma": [69, 70], "scenario": [69, 70, 258, 263], "flock": [69, 70], "continuous_act": [69, 70], "n_agent": [69, 70], "cohesion_rew": 69, "collision_rew": 69, "separation_rew": 69, "velocity_rew": 69, "18": [69, 70, 259, 260, 263, 267], "agent_collision_rew": 70, "agent_distance_rew": 70, "model_bas": [71, 117, 132], "transform_reward_spec": [72, 76, 78, 91, 93, 94, 102, 104], "success": [73, 102, 259, 263, 266], "account": [73, 254, 259], "movement": 73, "veloc": [73, 263, 267], "propos": [73, 131, 174, 182, 241, 244, 254], "pdf": [73, 119, 120, 121, 122, 125, 153, 170, 179, 182, 190, 195, 202, 234, 241, 244], "1312": [73, 259], "5602": 73, "_buffer": [73, 100], "transform_observation_spec": [73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 91, 92, 95, 96, 98, 99, 100, 101, 102, 104, 263], "del_kei": [74, 262, 263], "unsqueeze_if_oor": 74, "observation_posit": 74, "observation_veloc": 74, "delet": 74, "unsqueez": [74, 101, 104, 129, 258, 263], "key1": [74, 216, 224], "key2": [74, 216, 224], "crop": [75, 90, 208], "center": [75, 208], "width": [75, 92], "height": [75, 92], "squar": [75, 128, 143, 144, 208], "rewardsc": [76, 103, 258, 259], "rewardclip": 76, "transformed_env": [76, 102, 103], "tranform": [76, 79, 84, 96, 98, 102, 105], "dest": [76, 89, 106, 156], "transform_input_spec": [76, 77, 78, 86, 91, 98, 102, 104], "num_actions_effect": 77, "max_act": 77, "action_kei": [77, 117, 131, 132, 150, 152, 153], "include_forward": 77, "dimension": [77, 190, 195, 202], "num_act": [77, 169], "action_out": 77, "_call": [77, 81, 263], "inde": [77, 260, 263], "expos": [78, 158, 259], "extern": [78, 267], "excluded_kei": 79, "finit": 80, "first_dim": 81, "last_dim": 81, "allow_positive_dim": [81, 104], "flatten": [81, 222], "th": [81, 104, 263], "permit": [81, 104], "exclus": [81, 250, 254], "frameskip": 81, "repeatedli": [82, 260], "init_kei": 84, "is_init": 84, "tracker": 84, "noop": [85, 266], "30": [85, 140, 141, 259, 260, 263], "op": [85, 150, 152, 227], "randomli": [85, 86, 99, 154, 157, 263], "noop_max": 85, "out_keys_inv": [86, 87, 91, 102, 263], "standard_norm": [86, 94, 258, 259], "affin": [86, 94], "layer": [86, 107, 118, 119, 120, 126, 130, 133, 134, 136, 137, 145, 254, 259, 260, 264], "normal": [86, 107, 118, 128, 130, 135, 143, 144, 150, 154, 157, 166, 176, 178, 221, 223, 250, 254, 256, 267], "set_default_tensor_typ": 86, "doubletensor": 86, "isclos": 86, "next_ob": [86, 190, 191, 192, 193, 266], "rubric": [86, 159], "init_stat": [86, 258, 259, 260], "3752e": 86, "01": [86, 153, 162, 165, 166, 176, 178, 259, 260, 263, 264, 265], "5087e": 86, "03": [86, 259, 260, 263, 264, 265], "9294e": 86, "9636": 86, "5608": [86, 263], "6408": 86, "num_it": [86, 259, 260], "reduce_dim": [86, 258, 259, 260], "cat_dim": [86, 258, 259, 260], "keep_dim": [86, 259], "constant": [86, 256, 258, 260, 267], "statist": [86, 107, 180, 250, 258, 259, 260, 267], "approach": [86, 258, 260, 267], "gaussian": [86, 99, 117, 132, 133, 134, 150, 260], "empir": [86, 117, 132, 154, 157, 258, 260], "3d": 86, "third": 86, "r3m": [89, 264], "resnet": [89, 106], "visual": [89, 106, 260, 263], "embed": [89, 105, 106, 146, 147, 148, 149, 151, 155, 156, 160, 264], "ego4d": [89, 106], "paper": [89, 106, 174, 241, 244, 258, 260], "univers": [89, 106], "suraj": 89, "nair": 89, "aravind": 89, "rajeswaran": 89, "vikash": [89, 106], "kumar": [89, 106], "chelsea": 89, "finn": 89, "abhinav": 89, "gupta": 89, "2203": [89, 132, 264], "12601": [89, 264], "_init": [89, 258], "snippet": [89, 258], "resnet50": [89, 106, 264], "model_nam": [89, 106, 211], "resnet34": 89, "resnet18": 89, "r3m_vec": [89, 264], "feed": [89, 106, 177, 254, 258], "244": [89, 106, 263], "stack_imag": [89, 106], "tread": [89, 106], "separet": [89, 106], "hub": [89, 106, 264], "cach": [89, 103, 106, 217, 264], "resnet50_weight": [89, 106], "imagenet1k_v1": [89, 106], "download_path": [89, 106], "tensor_pixels_kei": [89, 106], "sub_seq_len": 90, "sample_dim": [90, 258], "mask_kei": 90, "primarili": 90, "hesit": 90, "request": 90, "robust": 90, "vari": 90, "mix": [90, 258], "NOT": 90, "improp": 90, "create_copi": 91, "renam": [91, 116, 258], "stuff": 91, "braxenv": [91, 252], "newnam": 91, "transform_output_spec": [91, 102], "untouch": [91, 102], "transform_done_spec": [91, 102], "interpol": [92, 259], "bilinear": 92, "clamp_min": [93, 153], "clamp_max": 93, "clip_min": 93, "scalar": [93, 120, 122, 133, 134, 150, 152, 153, 162, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 254, 259, 263], "clip_max": 93, "episode_": 95, "reward1": 95, "reward2": 95, "ho": 95, "excludetransform": 96, "squeeze_dim": 97, "recognis": 98, "primer": 99, "default_valu": 99, "drawn": [99, 154, 157, 260], "unit": [99, 117, 126, 136, 137, 140, 141, 260], "transfomedenv": 99, "lock": [99, 107, 263], "mykei": 99, "dtype_or_devic": 99, "pool": 100, "255": [101, 263], "ri": 101, "randint": 101, "principl": 102, "cattransform": 102, "notabl": 102, "cache_spec": 103, "anymor": [103, 156], "unsqueeze_dim": [104, 263], "danger": 104, "vip": [105, 106, 264], "toward": 106, "implicit": [106, 175], "jason": 106, "ma": 106, "shagun": 106, "sodhani": 106, "dinesh": 106, "jayaraman": 106, "osbert": 106, "bastani": 106, "ami": 106, "zhang": 106, "vip_vec": 106, "shared_td": 107, "decai": [107, 150, 152, 223, 258, 259, 267], "9999": [107, 263], "0001": [107, 126, 135, 260, 263], "fly": [107, 176, 255, 260, 263, 267], "to_observation_norm": 107, "99": [107, 132, 173, 185, 189, 246, 258, 259, 260, 263, 266], "underflow": [107, 223], "trail": 107, "build_td_for_shared_vecnorm": 107, "memmori": 107, "memmap_": 107, "queue": 107, "td_share": 107, "state_dim": [108, 140, 141], "action_dim": [108, 119, 121, 258, 262], "gsde": [108, 179, 250], "func": 108, "gsdemodul": 108, "check_dtyp": 109, "short": [109, 259, 260], "discrep": [109, 165, 166, 167, 168, 176, 178, 180], "imposs": 109, "heterogen": [109, 258, 259], "interactiontyp": [111, 115], "continuousbox": [113, 260, 263, 266, 267], "zero_": 113, "probabilistictdmodul": [114, 115, 130, 154, 157, 189, 221], "next_tensordict": 116, "keep_oth": [116, 263], "exclude_reward": 116, "exclude_don": 116, "exclude_act": 116, "THe": 116, "next_": 116, "funtion": [116, 263], "planning_horizon": [117, 132], "optim_step": [117, 132, 259], "num_candid": [117, 132], "top_k": [117, 132], "reward_kei": [117, 132, 219, 223], "cross": 117, "entropi": [117, 165, 166, 169, 176, 178, 179, 181], "botev": 117, "et": 117, "al": [117, 236, 267], "2013": 117, "cem": 117, "plan": [117, 131, 132], "varianc": [117, 128, 135, 143, 144, 255, 258, 260], "rank": 117, "k": 117, "repeat": [117, 260, 263], "maximis": [117, 119, 121, 132, 254, 258, 259, 260, 263], "horizon": [117, 132, 260], "modelbasedenv": [117, 132], "mpc": [117, 131, 132], "candid": [117, 132], "modelbasedenvbas": [117, 131, 132, 252], "safemodul": [117, 131, 147, 149, 157, 232, 233, 246, 252, 266], "next_hidden_observ": 117, "num_cel": [118, 119, 120, 121, 122, 126, 127, 130, 147, 259, 260, 266], "elu": [118, 119, 120, 121, 122, 126, 127, 259, 266], "activation_kwarg": [118, 130], "norm_class": [118, 119, 120, 130], "norm_kwarg": [118, 130], "bias_last_lay": [118, 119, 120, 121, 122, 127, 130], "aggregator_class": [118, 119, 120, 259, 266], "squashdim": [118, 119, 266], "aggregator_kwarg": [118, 119, 120, 259], "squeeze_output": [118, 119, 120, 259], "convolut": [118, 119, 120], "neural": [118, 156, 254, 259, 260, 263, 267], "produc": [118, 130, 138, 147, 149, 208, 260, 267], "cell": [118, 130, 260], "kernel": [118, 127, 129], "device_typ": [118, 119, 120, 121, 122, 127, 130, 133, 134], "cnet": 118, "34": [118, 130, 259, 260, 263, 264], "35": [118, 130, 259, 260, 263, 264], "rectangular": 118, "conv_net_kwarg": [119, 120], "mlp_net_kwarg": [119, 120, 121], "use_avg_pool": [119, 120], "WITH": [119, 120, 121, 122, 153, 182, 234], "1509": [119, 120, 121, 122, 132, 153, 174, 182, 234, 258], "02971": [119, 120, 121, 122, 153, 182, 234, 258], "convnet": [119, 266], "ndims_in": 119, "avgpool": [119, 120], "adaptiveavgpool2d": [120, 259], "400": [121, 122, 263], "300": [121, 122, 231, 239, 263], "mlp_net_kwargs_net1": 122, "mlp_net_kwargs_net2": 122, "atol": [123, 142], "06": [123, 142, 259, 260, 263], "rtol": [123, 142], "batch_shap": [123, 142], "event_shap": [123, 142], "absolut": [123, 142, 258], "toler": [123, 142], "log_prob": [123, 138, 144], "densiti": [123, 138, 144], "mass": [123, 138, 144, 263], "rsampl": [123, 138, 157], "sample_shap": [123, 138], "dqnet": 124, "atom": 124, "action_spac": [125, 139, 151, 155], "var_num": [125, 139], "perspect": [125, 170, 260], "1707": [125, 170, 178, 231, 239], "06887": [125, 170], "mult_one_hot": [125, 139, 151, 155], "functional_modul": [125, 139, 155, 156, 159, 254, 258], "make_funct": [125, 139, 154, 155, 156, 159, 160, 177, 254, 266], "tensordict_modul": [125, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 254], "nbin": [125, 151, 254], "customdistributionalqv": 125, "log_softmax": 125, "one_hot": [125, 139, 151, 155], "qvalue_actor": [125, 139, 151, 155, 254], "std_bia": 126, "std_min_val": 126, "belief": [126, 136, 140, 141], "1912": [126, 171, 172, 173], "01603": [126, 171, 172, 173], "softplu": [126, 135, 162, 163, 164], "out_features_valu": 127, "cnn_kwarg": [127, 259], "mlp_kwarg": [127, 129, 259], "duel": 127, "cnn": [127, 259, 266], "06581": 127, "512": [127, 259, 263], "upscal": [128, 143, 144], "tanh_loc": [128, 143, 144], "event_dim": [128, 142, 143], "ultim": [128, 143, 144], "poor": [128, 143, 144], "explos": [128, 143, 144], "switch": [128, 143, 144], "sigma": [128, 143, 144, 150, 153, 260], "formula": [128, 143, 144, 165, 166, 176, 178, 255, 260], "lstm_kwarg": 129, "embedd": 129, "next_observ": [129, 262], "time_step": 129, "2d": 129, "hidden_s": 129, "input_s": 129, "hidden0_in": 129, "hidden1_in": 129, "hidden0_out": 129, "hidden1_out": 129, "single_bias_last_lay": 130, "layer_class": 130, "layer_kwarg": 130, "perceptron": 130, "seamless": 130, "lazylinear": [130, 254, 260, 263, 264, 266], "42": [130, 259, 260, 263], "noisylinear": [130, 133, 252, 259], "noisylazylinear": [130, 252], "At": [131, 259, 260, 262, 263, 264], "mpcplanner": 131, "tensordict_out": [131, 267], "advantage_modul": [132, 260], "temperatur": [132, 175], "mppi": 132, "covari": 132, "william": [132, 180], "aldrich": 132, "theodor": 132, "01149": 132, "hansen": 132, "wang": 132, "su": 132, "04955": 132, "ndunboundedcontinuoustensorspec": [132, 159], "valueoper": [132, 147, 148, 149, 165, 166, 176, 178, 180, 246, 254, 258, 260], "tdlambdaestim": [132, 252, 258], "value_net": [132, 190, 191, 192, 193, 260], "adv": 132, "95": [132, 185, 259, 260, 263], "std_init": [133, 134], "term": [133, 134, 164, 165, 169, 227, 259, 260], "matrix": [133, 134], "initialize_paramet": 133, "isol": 133, "1706": 134, "10295v3": 134, "induc": 134, "aid": 134, "emploi": 134, "scale_map": 135, "biased_softplus_1": 135, "scale_lb": [135, 140, 141], "exp": [135, 164], "module_norm": 135, "decod": 136, "1803": [136, 137], "10122": [136, 137], "rnn_hidden": 136, "latent": 137, "logit": [138, 254], "excacli": 138, "event": [138, 198, 199, 200, 201, 203, 204, 205, 206], "unnorm": 138, "greedi": [139, 152, 259], "hidden_dim": [140, 141], "posterior": [140, 172], "rssm": [140, 141, 172], "1811": [140, 141, 263], "04551": [140, 141], "obs_embed": 140, "rnn_hidden_dim": 141, "dream": 141, "recurr": [141, 259], "tanhtransform": 143, "translat": [146, 154], "character": [146, 151, 154, 155, 156], "overflow": [146, 151, 154, 155, 156, 157], "td_modul": [146, 147, 148, 149, 154, 156, 157, 159, 160, 266], "3635": 146, "0340": 146, "1476": 146, "3911": 146, "1664": [146, 259], "5455": [146, 263], "2247": 146, "4583": 146, "2916": 146, "2160": 146, "5337": 146, "5193": 146, "grad_fn": [146, 152, 266], "addmmbackward0": 146, "common_oper": [147, 149], "policy_oper": [147, 148, 149], "value_oper": [147, 148, 149], "actorvalueoper": [147, 231, 239, 254], "get_policy_oper": [147, 148, 149, 166, 176, 178, 231, 239, 254], "alon": [147, 148, 149], "tdmodul": [147, 148, 149, 246], "get_critic_oper": 147, "probabilisticactor": [147, 148, 149, 169, 175, 181, 254, 258, 260], "tanhnorm": [147, 148, 149, 154, 159, 252, 260, 266], "normalparamwrapp": [147, 148, 149, 154, 159, 252, 266], "module_hidden": [147, 149], "td_module_hidden": [147, 149], "module_act": [147, 149], "td_module_act": [147, 148, 149], "distribution_class": [147, 148, 149, 154, 157, 159, 254, 258, 260, 266], "return_log_prob": [147, 148, 149, 154, 157, 159, 254, 260, 266], "module_valu": [147, 148, 149], "td_module_valu": [147, 148, 149], "state_action_valu": [147, 160, 181, 189, 234, 241, 244, 246, 254, 258, 266], "td_clone": [147, 148, 149], "sample_log_prob": [147, 148, 149, 154, 157, 159, 231, 239, 241, 260, 266], "tensordictmodulewrapp": [147, 232, 233, 246], "get_value_oper": [147, 148, 149, 166, 176, 178, 231, 239], "action_modul": 148, "state_valu": [148, 149, 160, 181, 190, 191, 192, 193, 195, 196, 198, 200, 202, 203, 205, 231, 239, 244, 254, 258, 260], "safesequenti": [148, 149], "qualiti": [149, 254], "actorcriticoper": [149, 166, 176, 178, 231, 239, 254], "embeddig": 149, "refet": 149, "actorcriticwrapp": [149, 254, 258], "sigma_init": 150, "sigma_end": 150, "annealing_num_step": [150, 152, 153, 258, 259], "po": [150, 152], "epsilon": [150, 152, 153, 182, 223, 259, 260], "eps_init": [152, 153, 259], "eps_end": [152, 153, 259], "explorative_polici": [152, 153], "0000": [152, 260, 263, 266], "9055": 152, "9277": [152, 263], "6295": 152, "2532": 152, "addbackward0": [152, 266], "theta": [153, 260, 263], "15": [153, 171, 259, 260, 263], "mu": [153, 260], "dt": [153, 263], "x0": 153, "sigma_min": 153, "n_steps_ann": 153, "ornstein": 153, "uhlenbeck": 153, "ou": [153, 258], "introduc": [153, 258], "auto": [153, 169, 179, 181, 255], "correl": 153, "sort": 153, "prev_nois": 153, "current_sigma": 153, "sqrt": 153, "ou_prev_nois": 153, "ou_step": 153, "increas": 153, "anneal": 153, "_ou_prev_nois": 153, "_ou_step": 153, "probabilist": [154, 252, 260, 266], "default_interaction_mod": [154, 157], "interaction_mod": [154, 157], "set_interaction_mod": [154, 157], "distribution_kwarg": [154, 157, 260], "cache_dist": [154, 157], "diverg": [154, 157, 172, 176], "n_empirical_estim": [154, 157], "functionalmodul": 156, "functionalmodulewithbuff": 156, "grucel": 156, "td_fmodul": 156, "td_function": 156, "td_state": 156, "vmap": [156, 159, 266], "ensembl": [156, 179], "params_repeat": 156, "td_vmap": [156, 159], "irrespect": [156, 157], "random_sampl": [156, 157], "probabilistictensordictmodul": [157, 158, 266], "rule": [157, 254, 260], "get_dist": [157, 158], "__call__": [157, 256], "suppli": 157, "fist": 157, "partial_toler": [158, 159, 262], "probabilistictensordictsequenti": [158, 165, 166, 176, 178, 180, 232, 233, 266], "tensordictsequenti": [158, 254, 258, 262, 264, 266], "who": [158, 159], "AND": [158, 159], "scan": [158, 159], "tensordictsequenci": 159, "tensordictsequ": 159, "safeprobabilisticmodul": [159, 254], "spec1": 159, "net1": 159, "module1": 159, "td_module1": 159, "spec2": 159, "module2": 159, "td_module2": 159, "custommodul": 160, "cat": [160, 266], "transition_model": 161, "reward_model": 161, "imaginari": 161, "imagin": 161, "get_reward_oper": 161, "get_transition_model_oper": 161, "min_val": [162, 164], "bias": [162, 255, 258], "_bia": 162, "invert": [163, 260], "surject": 164, "expln": 164, "biased_softplu": [164, 252], "beggin": 164, "biased_softplus_": 164, "syntax": [164, 258], "condit": [164, 258, 263], "met": [164, 263], "advantage_kei": [165, 166, 176, 178, 180, 190, 191, 192, 193, 260], "value_target_kei": [165, 166, 176, 178, 180, 190, 191, 192, 193, 260], "value_target": [165, 166, 176, 178, 180, 190, 191, 192, 193, 260], "entropy_bonu": [165, 166, 176, 178, 260], "samples_mc_entropi": [165, 166, 176, 178], "entropy_coef": [165, 166, 176, 178, 260], "critic_coef": [165, 166, 176, 178, 260], "loss_critic_typ": [165, 166, 176, 178, 180, 260], "smooth_l1": [165, 166, 167, 168, 169, 175, 176, 178, 179, 180, 181, 183, 186, 260], "separate_loss": [165, 166, 176, 178], "1602": 165, "01783v2": 165, "favour": [165, 166, 176, 178], "mont": [165, 166, 176, 178, 258], "carlo": [165, 166, 176, 178, 258], "l1": [165, 166, 167, 168, 169, 176, 178, 179, 180, 183, 186, 254, 258], "l2": [165, 166, 167, 168, 169, 172, 173, 176, 178, 179, 180, 183, 186, 258], "propag": [165, 166, 176, 178, 190, 191, 192, 193, 260], "throughout": [165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 260, 267], "essenti": [165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 259, 263], "make_value_estim": [165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 184, 255, 258], "value_typ": [165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 185, 258], "valueestim": [165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 185, 252, 255, 258], "hyperparam": [165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 258, 263], "enum": [165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 185, 258], "default_value_kwarg": [165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 252, 258], "dqn_loss": [165, 167, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 183, 184], "dqnloss": [165, 167, 169, 170, 171, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 237, 252, 255, 259], "clip_epsilon": [166, 260], "normalize_advantag": [166, 176, 178], "threshold": [166, 260], "multipli": [166, 169, 176, 178, 179, 181, 223, 258], "head": [166, 176, 178], "somemodul": [166, 176, 178], "actor_head": [166, 176, 178], "someactor": [166, 176, 178], "value_head": [166, 176, 178], "somevalu": [166, 176, 178], "loss_modul": [166, 174, 176, 177, 178, 182, 225, 245, 246, 255, 256, 258, 259, 260], "ppoloss": [166, 176, 238, 252], "regardless": [166, 176, 178], "actor_network": [167, 169, 175, 179, 181, 183, 258], "value_network": [167, 168, 170, 175, 181, 190, 191, 192, 193, 255, 258, 260], "loss_funct": [167, 168, 169, 175, 179, 181, 183, 186, 258], "delay_actor": [167, 181, 183], "delay_valu": [167, 168, 170, 180, 181, 259], "input_tensordict": [167, 168, 170, 258], "qvalueactor": [168, 254, 259], "qvalue_network": [169, 175, 179, 181, 183], "num_qvalue_net": [169, 175, 179, 181, 183], "alpha_init": [169, 179, 181], "min_alpha": [169, 179, 181], "max_alpha": [169, 179, 181], "fixed_alpha": [169, 179, 181], "target_entropy_weight": 169, "98": [169, 190, 191, 192, 193, 259, 260, 263], "target_entropi": [169, 179, 181], "delay_qvalu": [169, 179, 181, 183], "distributionalqvalueactor": [170, 254], "disctount": 170, "actor_model": 171, "value_model": [171, 173], "model_based_env": 171, "dreamerenv": [171, 252], "imagination_horizon": 171, "discount_loss": [171, 173], "lmbda": [171, 185, 190, 193, 195, 200, 201, 202, 205, 206, 255, 258, 260], "unrol": [171, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206], "lambda_kl": 172, "lambda_reco": 172, "lambda_reward": 172, "reco_loss": 172, "reward_loss": 172, "free_nat": 172, "delayed_clamp": 172, "global_averag": 172, "kl": [172, 176], "nat": 172, "clamp": [172, 225, 263], "value_loss": 173, "fake_data": 173, "ddpgloss": [174, 182, 235, 246, 252, 258, 266], "sacloss": [174, 182, 243, 252], "td3loss": [174, 182, 252], "value_network_update_interv": 174, "contrast": 174, "06461": 174, "expectil": 175, "2110": 175, "06169": 175, "tau": [175, 258, 259], "antmaz": 175, "sticht": 175, "loss_value_diff": 175, "diff": 175, "dtarg": 176, "decrement": 176, "samples_mc_kl": 176, "penalti": 176, "old_polici": 176, "new_polici": 176, "adapt": [176, 258, 263], "old": [176, 267], "thu": 176, "distanc": [176, 186, 189, 190], "apart": 176, "analyt": 176, "loss_": [177, 220, 255, 258], "defaylt_value_typ": 177, "equip": 177, "convert_to_funct": [177, 258], "expand_dim": 177, "create_target_param": [177, 258], "compare_against": [177, 258], "funs_to_decor": 177, "stuctur": 177, "_param": 177, "expans": 177, "resampl": 177, "_target_param": 177, "value_estim": [177, 190, 191, 192, 193, 194, 255, 258, 266], "valueestimatorbas": [177, 252], "blend": 177, "upcom": [177, 198, 199, 200, 201, 203, 204, 205, 206, 258], "proxim": [178, 231, 239, 260], "optimis": [178, 221, 260], "flavour": [178, 266], "constrain": 178, "clipppoloss": [178, 252, 260], "klpenppoloss": [178, 252], "regularis": 178, "06347": [178, 231, 239], "gae": [178, 252, 255, 258, 260], "ppo_loss": 178, "tdlambda": [178, 185, 255, 258], "sub_sample_len": 179, "openreview": [179, 241], "ay8zfzm0tdd": [179, 241], "idea": [179, 256], "subsampl": [179, 216, 256], "connectionist": 180, "1992": 180, "doi": 180, "1007": 180, "bf00992696": 180, "1801": [181, 244], "01290": [181, 244], "applic": [181, 263], "1812": 181, "05905": 181, "prod": 181, "n_action": 181, "redqloss": [182, 252], "999": [182, 223, 259], "math": 182, "theta_t": [182, 263], "theta_": [182, 263], "policy_nois": 183, "noise_clip": 183, "td0": [184, 258], "v2": [186, 198, 199, 200, 201, 203, 204, 205, 206, 231, 234, 239, 241, 244], "strict_shap": 186, "view_a": 186, "next_val_kei": 189, "pred_next_v": 189, "usus": 189, "mse": 189, "q_valu": 189, "target_valu": [189, 255, 258, 266], "n_steps_to_next": 189, "value_next_st": 189, "average_ga": [190, 260], "value_kei": [190, 191, 192, 193, 194, 258], "1506": [190, 195, 202], "02438": [190, 195, 202], "exponenti": [190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 223], "advang": 190, "gradient_mod": 190, "value_error": [190, 191, 192, 193, 194], "sign": 190, "unused_arg": 190, "target_param": [190, 191, 192, 193, 194, 258], "relev": [190, 191, 192, 193, 194, 263], "94": [190, 193, 259, 260, 263, 264], "unpack": [190, 191, 192, 193], "recur": [190, 191, 192, 193, 194], "average_reward": [191, 192, 193], "aka": [191, 259], "tdestim": [191, 192, 194], "infti": 192, "valuefunctionbas": 194, "next_state_valu": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 252], "time_dim": [195, 198, 199, 200, 201, 202, 203, 204, 205, 206], "old_stat": [195, 196, 198, 200, 202, 203, 205], "new_stat": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "rolling_gamma": [198, 199, 200, 201, 203, 204, 205, 206], "ti": [198, 199, 200, 201, 203, 204, 205, 206, 259], "g1": [198, 199, 200, 201, 203, 204, 205, 206], "g2": [198, 199, 200, 201, 203, 204, 205, 206], "g3": [198, 199, 200, 201, 203, 204, 205, 206], "g4": [198, 199, 200, 201, 203, 204, 205, 206], "v3": [198, 199, 200, 201, 203, 204, 205, 206], "v4": [198, 199, 200, 201, 203, 204, 205, 206, 258, 260, 264], "out_file_bas": 207, "skip_reset": 207, "dump": 207, "interv": [207, 208, 217, 227, 259, 263], "center_crop": 208, "make_grid": 208, "Will": 208, "grid": 208, "exp_nam": [209, 210, 213, 214, 215, 246, 259], "log_dir": [209, 210, 212, 214, 259], "templat": 209, "csv": [210, 212, 259], "minim": 210, "dependeci": 210, "experiment_nam": [211, 212], "uuid": [211, 259, 267], "date": 211, "logger_typ": 212, "logger_nam": 212, "tensorboard": [212, 214, 266], "wandb": [212, 215, 266], "mlflow": [212, 213], "might": [212, 253, 258, 267], "wandb_kwarg": 212, "mlflow_kwarg": 212, "tracking_uri": 213, "uri": 213, "datastor": 213, "tb_log": 214, "tensoarboard": 214, "sub_traj_len": 216, "min_sub_traj_len": 216, "full": [216, 258, 259, 260, 262, 263, 264, 266, 267], "20": [216, 259, 260, 263, 264, 266, 267], "register_op": [216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 256, 259], "process_optim_batch": [216, 222, 223, 256], "td_out": [216, 224], "_process_optim_batch_hook": [216, 256], "batch_subsampl": 216, "clear_cuda": 217, "pre_optim_step": [217, 256], "counter": [218, 256], "log_pbar": [218, 219, 221, 223, 256, 259], "progress": [218, 219, 221, 225, 256, 259, 267], "bar": [218, 219, 221, 225, 256, 259], "count_fram": 218, "pre_steps_log": [218, 219, 256], "count_frames_log": 218, "lognam": 219, "r_train": [219, 259], "log_reward": [219, 259], "loss_compon": 220, "appl": 220, "omit": [220, 260, 263], "optimizer_hook": 220, "loss_actor": [220, 258], "record_interv": [221, 258, 259], "record_fram": [221, 228, 258, 259], "policy_explor": [221, 246, 258, 259], "log_kei": [221, 259], "suffix": 221, "underestim": 221, "suppos": [221, 256, 267], "set_exploration_mod": [221, 252, 260, 266], "r_evalu": [221, 258], "tensordictreplaybuff": [222, 246, 252, 258, 259], "flatten_tensordict": [222, 259], "max_dim": 222, "rb_trainer": 222, "batch_process": [222, 223, 224, 256], "post_loss": [222, 256], "jitter": 223, "finfo": 223, "default_dtyp": 223, "get_default_dtyp": 223, "reward_norm": 223, "update_reward_stat": 223, "normalize_reward": 223, "make_train": [224, 252], "_process_batch_hook": [224, 256], "select_kei": [224, 256], "versatil": 225, "lossmodul": [225, 245, 246, 252], "optim_steps_per_batch": [225, 256, 259], "epoch": [225, 260], "clip_grad_norm": 225, "partial": 225, "clip_norm": 225, "progress_bar": 225, "tqdm": [225, 258, 260, 263], "save_trainer_interv": 225, "disk": [225, 256, 258, 259], "log_interv": [225, 259], "save_trainer_fil": [225, 256], "datacollectorbas": [227, 232, 233, 246, 252], "update_weights_interv": [227, 259], "sit": [227, 259], "update_weight": 227, "post_step": [227, 256], "cfg": [228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250], "dictconfig": [228, 229, 231, 232, 233, 234, 236, 239, 241, 242, 244, 245, 246, 247, 250], "divid": [228, 254, 258], "unknowingli": 228, "annealing_fram": [228, 258], "init_env_step": [228, 229, 258], "proof_environ": [229, 231, 234, 236, 239, 241, 244, 258], "sta": 229, "ot": 229, "a2closs": [230, 252], "in_keys_actor": [231, 239], "observation_kei": [231, 239, 241, 244], "dummi": [231, 234, 236, 239, 241, 244, 258, 267], "parser_env_arg": [231, 239, 241], "make_ppo_model": [231, 252], "parser_model_args_continu": [231, 239, 241, 244], "cattensor": [231, 234, 239, 241, 244, 258, 262, 263, 267], "hydra": [231, 234, 236, 239, 241, 244], "config_stor": [231, 234, 236, 239, 241, 244], "configstor": [231, 234, 236, 239, 241, 244], "dataclass": [231, 234, 236, 239, 241, 244], "halfcheetah": [231, 234, 239, 241, 244, 258], "config_field": [231, 234, 236, 239, 241, 244], "config_cl": [231, 234, 236, 239, 241, 244], "ppomodelconfig": [231, 239], "envconfig": [231, 234, 236, 239, 241, 244], "make_dataclass": [231, 234, 236, 239, 241, 244], "cls_name": [231, 234, 236, 239, 241, 244], "config_path": [231, 234, 236, 239, 241, 244], "config_nam": [231, 234, 236, 239, 241, 244], "actor_valu": [231, 239], "17": [231, 234, 239, 241, 244, 259, 260, 263, 264], "actor_model_explor": [232, 233, 258], "make_env_kwarg": [232, 233], "actor_net_kwarg": [234, 241, 244], "value_net_kwarg": [234, 244], "modulelist": [234, 241, 244, 258, 266], "ddpgcnnactor": 234, "ddpgmlpactor": [234, 258], "ddpgcnnqnet": 234, "ddpgmlpqnet": [234, 258], "ddpgmodelconfig": 234, "targetnetupdat": [235, 237, 240, 243, 245, 246], "discretemodelconfig": 236, "pong": [236, 267], "v5": [236, 267], "pixels_onli": [236, 258, 259, 266, 267], "210": [236, 263, 267], "160": [236, 259, 263, 267], "redqloss_deprec": 240, "qvalue_net_kwarg": [241, 244], "qvalu": [241, 244], "redqmodelconfig": 241, "replayargsconfig": 242, "sacmodelconfig": 244, "target_net_updat": [246, 258, 259], "constitu": 246, "learnt": [246, 258, 260], "tempfil": [246, 258, 259], "tensorboardlogg": [246, 252], "egreedywrapp": [246, 259], "env_proof": 246, "obs_spec": [246, 263], "net_valu": 246, "dir": [246, 256, 259], "gettempdir": 246, "argpars": [247, 250], "namespac": [247, 250], "parser": [247, 250], "transformed_env_constructor": [247, 252], "num_env_per_collector": [248, 249], "video_tag": 250, "norm_obs_onli": 250, "use_env_cr": 250, "custom_env_mak": 250, "custom_env": 250, "return_transformed_env": 250, "action_dim_gsd": 250, "state_dim_gsd": 250, "batch_dim": 250, "obs_norm_state_dict": 250, "wheter": 250, "maker": 250, "asyncdatacollector": 252, "distributedsyncdatacollector": 252, "submitit_delayed_launch": 252, "raycollector": 252, "samplerwithoutreplac": [252, 260], "d4rlexperiencereplai": 252, "openmlexperiencereplai": 252, "binarydiscretetensorspec": 252, "unboundeddiscretetensorspec": [252, 260, 267], "tensordictrecord": 252, "videorecord": [252, 260], "get_available_librari": 252, "set_exploration_typ": 252, "exploration_typ": 252, "make_composite_from_td": [252, 263], "braxwrapp": 252, "dmcontrolenv": [252, 258, 262, 267], "dmcontrolwrapp": 252, "jumanjienv": 252, "jumanjiwrapp": 252, "openmlenv": 252, "vmasenv": 252, "vmaswrapp": 252, "qvaluehook": 252, "distributionalqvaluehook": 252, "reset_nois": 252, "cemplann": 252, "mpcplannerbas": 252, "mppiplann": 252, "independentnorm": 252, "truncatednorm": 252, "tanhdelta": [252, 258], "onehotcategor": 252, "inv_softplu": 252, "distributionaldqnloss": [252, 259], "discretesacloss": 252, "iqlloss": 252, "reinforceloss": 252, "dreameractorloss": 252, "dreamermodelloss": 252, "dreamervalueloss": 252, "td0estim": [252, 258], "td1estim": [252, 258], "td0_return_estim": 252, "td0_advantage_estim": 252, "td1_return_estim": 252, "vec_td1_return_estim": 252, "td1_advantage_estim": 252, "vec_td1_advantage_estim": 252, "td_lambda_return_estim": 252, "vec_td_lambda_return_estim": 252, "td_lambda_advantage_estim": 252, "vec_td_lambda_advantage_estim": 252, "generalized_advantage_estim": 252, "vec_generalized_advantage_estim": 252, "distance_loss": [252, 258], "hold_out_net": 252, "hold_out_param": [252, 258], "softupd": [252, 258, 259], "hardupd": [252, 258], "batchsubsampl": [252, 256], "clearcudacach": 252, "countframeslog": 252, "logreward": [252, 256, 259], "optimizerhook": [252, 259], "replaybuffertrain": [252, 256, 259], "rewardnorm": 252, "selectkei": [252, 256], "trainerhookbas": [252, 256, 259], "updateweight": [252, 256, 259], "make_a2c_loss": 252, "make_a2c_model": 252, "make_collector_offpolici": 252, "make_collector_onpolici": 252, "make_ddpg_actor": [252, 258], "make_ddpg_loss": 252, "make_dqn_actor": 252, "make_dqn_loss": 252, "make_ppo_loss": 252, "make_redq_loss": 252, "make_redq_model": 252, "make_replay_buff": [252, 258], "make_sac_loss": 252, "make_sac_model": 252, "make_target_updat": 252, "parallel_env_constructor": [252, 258], "sync_async_collector": 252, "sync_sync_collector": 252, "correct_for_frame_skip": 252, "get_stats_random_rollout": 252, "csvlogger": [252, 259], "mlflowlogg": 252, "wandblogg": 252, "get_logg": 252, "generate_exp_nam": 252, "journei": 253, "guid": [253, 258], "textbook": 253, "highlight": 253, "ever": 253, "bump": 253, "think": [253, 260, 267], "benefit": 253, "pr": 253, "ground": [254, 258, 263], "three": [254, 256, 260, 263], "categori": [254, 256], "recycl": 254, "satisfi": 254, "impos": 254, "violat": 254, "noisier": 254, "Their": 254, "normalparamextractor": [254, 260], "sd": 254, "prob_modul": 254, "special": [254, 258, 267], "pick": [254, 258, 259], "tabl": [254, 259], "customari": 254, "semant": 254, "hopefulli": [254, 259], "mathbb": [254, 259], "rightarrow": [254, 259], "soften": 254, "block": 254, "group": [254, 259, 260], "backbon": [254, 262, 266], "make_actor": 254, "make_valu": 254, "shared_param": 254, "make_common": 254, "shown": [254, 262], "alter": 254, "reusabl": [255, 258], "swappabl": [255, 258], "characterist": [255, 258, 263], "trainabl": [255, 258, 264], "whatev": [255, 258], "convent": [255, 258, 263], "smth": [255, 258], "metric": [255, 258], "loss_val": [255, 258, 260], "nutshel": [255, 258], "barto": 255, "chapter": 255, "proxi": 255, "significantli": [255, 258, 259], "next_stat": 255, "value_net_loss": 255, "pow": [255, 258], "therebi": 255, "room": 255, "convers": 255, "signifi": 255, "underperform": 255, "thin": 255, "intric": 255, "flexibli": 255, "outer": [256, 258, 259, 267], "believ": 256, "scheme": [256, 267], "substenti": 256, "_pre_steps_log_hook": 256, "_pre_optim_hook": 256, "sub_batch": 256, "_post_loss_hook": 256, "_post_optim_hook": 256, "post_optim": [256, 259], "_post_optim_log": 256, "post_optim_log": 256, "_post_steps_hook": 256, "_post_steps_log_hook": 256, "post_steps_log": 256, "comment": [256, 259, 266], "extens": 256, "reserv": 256, "logginghook": 256, "logging_hook": 256, "save_dict": 256, "some_valu": 256, "torchsnapshot": 256, "ckpt_backend": 256, "pt": [256, 264], "filepath": 256, "save_train": 256, "load_from_fil": 256, "perfectli": [256, 258, 263], "intern": 257, "author": [258, 259, 260, 263], "vincent": [258, 259, 260, 263], "moen": [258, 259, 260, 263], "assembl": 258, "focus": 258, "straightforward": [258, 259], "overview": [258, 260, 266], "transpar": 258, "understood": 258, "sota": [258, 259, 266], "illustr": [258, 259], "device_count": [258, 259, 264, 267], "loss_dict": 258, "modal": 258, "oblivi": [258, 260], "elementari": 258, "didact": 258, "extract": [258, 260], "speak": 258, "dilut": 258, "pessimist": [258, 259, 260], "target_actor_network_param": 258, "actor_in_kei": 258, "actor_crit": 258, "loss_funt": 258, "noth": [258, 260], "compromis": 258, "simplest": [258, 260, 267], "default_value_estim": 258, "hp": 258, "hasattr": 258, "_value_estim": 258, "elif": [258, 259], "notimplementederror": 258, "unknown": 258, "_loss_actor": 258, "td_copi": 258, "value_network_param": 258, "_loss_valu": [258, 266], "pred_val": [258, 266], "target_value_network_param": 258, "smooth": [258, 259], "loss_valu": [258, 260, 266], "glue": 258, "_forward": 258, "ndimens": 258, "pred_valu": 258, "pred_value_max": 258, "target_value_max": 258, "remaind": 258, "focu": [258, 259, 260], "env_librari": 258, "env_task": 258, "env_arg": 258, "friendli": 258, "torchr": 258, "rescal": 258, "presum": 258, "leav": 258, "make_transformed_env": 258, "reward_sc": 258, "double_to_float_list": 258, "double_to_float_inv_list": 258, "dmcontrol": 258, "leverag": [258, 267], "env_per_collector": 258, "transform_state_dict": 258, "make_t_env": 258, "copy_": 258, "parallel_env": [258, 266, 267], "adjust": [258, 263], "seem": 258, "cheat": 258, "10m": 258, "cautiou": 258, "deal": [258, 260], "magnitud": 258, "thousand": 258, "get_env_stat": 258, "proof_env": 258, "5000": [258, 259, 260], "maxim": [258, 263], "recal": [258, 260], "materi": 258, "small": [258, 260, 267], "ornsteinuhlenbeckprocesswrapp": 258, "env_spec": 258, "actor_net": [258, 260], "q_net": 258, "qnet": 258, "moduless": 258, "sugges": 258, "1_000_000": 258, "tight": 258, "natur": 258, "10_000": 258, "traj_len": 258, "make_record": 258, "recorder_obj": 258, "flavor": 258, "circular": 258, "buffer_s": [258, 259], "random_crop_len": 258, "prb": 258, "buffer_scratch_dir": 258, "temporari": 258, "dirrectori": 258, "tmpdir": [258, 259], "temporarydirectori": [258, 259], "trajecotri": 258, "25": [258, 259, 260, 263], "balanc": [258, 259, 267], "sampel": 258, "dataflow": 258, "ceil_div": 258, "utd": 258, "update_to_data": 258, "realiz": 258, "ve": 258, "_must_": 258, "001": [258, 263], "outdat": 258, "trick": [258, 259], "despit": 258, "thank": 258, "init_": [258, 259], "adam": [258, 259, 260, 263], "optimizer_actor": 258, "actor_network_param": 258, "lr": [258, 259, 260, 263], "weight_decai": [258, 259], "optimizer_valu": 258, "total_collection_step": 258, "pretti": 258, "rewards_ev": 258, "collected_fram": 258, "pbar": [258, 260, 263], "r0": 258, "numel": [258, 260, 264], "current_fram": 258, "sampled_tensordict": 258, "gn1": 258, "clip_grad_norm_": [258, 260, 263], "gn2": 258, "gn": [258, 263], "td_record": 258, "rn": 258, "set_descript": [258, 260, 263], "2f": 258, "traceback": [258, 266], "__w": [258, 266], "doc": [258, 259, 266], "coding_ddpg": [258, 265], "1119": 258, "1501": [258, 266], "_call_impl": [258, 266], "forward_cal": [258, 266], "351": [258, 263], "272": [258, 263], "391": [258, 263], "new_fun": 258, "old_param": 258, "_assign_param": 258, "468": [258, 263], "_swap_stat": 258, "make_stateless": 258, "return_old_tensordict": 258, "307": [258, 263], "old_attr": 258, "getattr": 258, "461": [258, 263], "__getattr__": 258, "err2": 258, "err1": 258, "459": [258, 263], "1614": 258, "plot": [258, 260, 263], "mention": [258, 267], "matplotlib": [258, 260, 263, 267], "pyplot": [258, 260, 263, 267], "plt": [258, 260, 263, 267], "zip": [258, 261], "label": 258, "legend": 258, "xlabel": [258, 263], "ylabel": 258, "tight_layout": 258, "concret": [258, 260], "takeawai": [258, 259], "minut": [258, 259, 260, 262, 263, 264, 266, 267], "671": [258, 265], "5527": [258, 265], "mb": [258, 259, 260, 262, 263, 264, 265, 266, 267], "jupyt": [258, 259, 260, 261, 262, 263, 264, 266, 267], "ipynb": [258, 259, 260, 262, 263, 264, 266, 267], "galleri": [258, 259, 260, 261, 262, 263, 264, 266, 267], "sphinx": [258, 259, 260, 261, 262, 263, 264, 266, 267], "cartpol": [259, 267], "customis": 259, "road": 259, "aspect": 259, "grayscal": [259, 267], "did": [259, 260, 267], "highest": 259, "preprocess": 259, "prerequisit": 259, "familiar": [259, 267], "lookup": 259, "amort": [259, 260], "conjunct": 259, "cart": 259, "pole": 259, "un": 259, "actuat": 259, "frictionless": 259, "upright": [259, 267], "duelingcnndqnet": 259, "is_notebook": 259, "shell": 259, "get_ipython": 259, "__class__": 259, "zmqinteractiveshel": 259, "qtconsol": 259, "terminalinteractiveshel": 259, "ipython": [259, 263], "nameerror": 259, "interpret": 259, "umbrella": 259, "misplac": 259, "misus": 259, "orchestr": 259, "everyth": [259, 260], "five": 259, "64x64": 259, "channel": 259, "motion": [259, 263], "obs_norm_sd": 259, "simpler": 259, "get_norm_stat": 259, "test_env": 259, "make_model": 259, "dummy_env": 259, "output_s": 259, "init_bia": 259, "actor_explor": 259, "eps_greedy_v": 259, "eps_greedy_val_env": 259, "get_replay_buff": 259, "n_optim": 259, "themselv": 259, "simplic": [259, 260, 264], "get_collector": 259, "data_collector": 259, "bunch": 259, "concept": 259, "power": 259, "ubiquit": 259, "get_loss_modul": 259, "target_updat": 259, "sensit": 259, "variat": 259, "2e": [259, 263], "wd": 259, "upd": 259, "02": [259, 260, 263, 264, 265], "harder": [259, 266], "5_000": 259, "500000": 259, "256": [259, 260, 263], "100000": 259, "005": 259, "mandatori": [259, 260, 263], "fairer": 259, "budget": [259, 260], "dqn_exp_": 259, "uuid1": [259, 267], "warn": [259, 267], "9920": 259, "0789": 259, "0790": 259, "tmp": 259, "tmpxi0r2t8z": 259, "dqn_exp_8813fbca": 259, "db5f": 259, "11ed": [259, 267], "bec4": [259, 267], "0242ac120002": [259, 267], "registr": 259, "cumbersom": 259, "buffer_hook": 259, "weight_updat": 259, "descript": [259, 260], "aliv": 259, "00": [259, 260, 263, 264, 265], "37": [259, 260, 263], "70it": 259, "4948": [259, 263], "9259": 259, "10it": [259, 260], "4045": 259, "96": [259, 260, 263, 264], "07": [259, 263], "58": [259, 260, 262, 263, 264, 265], "25it": 259, "05": [259, 260, 263, 264], "22": [259, 260, 263, 264], "11it": 259, "3560": 259, "56": [259, 260, 263, 264], "44it": [259, 263], "4254": 259, "192": [259, 263], "89it": [259, 260], "4497": 259, "224": [259, 263], "31": [259, 263, 264, 265, 266], "32it": [259, 260], "4676": 259, "36": [259, 260, 263], "30it": [259, 263], "3893": 259, "288": [259, 263], "59": [259, 260, 263], "39": [259, 260, 263, 264, 265], "56it": [259, 263], "320": [259, 263, 267], "51": [259, 260, 263], "41": [259, 260, 263], "79it": 259, "4375": 259, "352": [259, 263], "43": [259, 263, 264, 265], "69it": 259, "3712": 259, "384": [259, 263], "97it": [259, 260, 263], "4345": [259, 263], "416": [259, 263], "19": [259, 260, 263], "47": [259, 260, 263], "29it": [259, 263], "448": [259, 263], "49": [259, 263, 264], "31it": [259, 263], "4373": 259, "480": [259, 263, 264], "66it": [259, 260], "54it": [259, 263], "4134": 259, "544": [259, 263], "21": [259, 260, 262, 263], "52": [259, 260, 263, 264, 265], "19it": [259, 263], "576": [259, 263], "23": [259, 260, 263, 265, 267], "608": [259, 263], "53": [259, 263, 264], "640": 259, "51it": [259, 260, 263], "4224": 259, "672": 259, "64it": 259, "3923": 259, "704": 259, "41it": [259, 260, 263], "736": [259, 263], "46it": [259, 260, 263], "768": 259, "3862": 259, "800": 259, "26": [259, 260, 263, 264], "82it": [259, 260, 263], "832": 259, "54": [259, 260, 263, 264], "01it": [259, 260, 263], "864": 259, "87it": [259, 263], "3529": 259, "896": 259, "28": [259, 260, 263, 264], "45": [259, 260, 263, 264], "22it": [259, 260], "3350": [259, 263], "928": 259, "15it": [259, 263], "960": 259, "48": [259, 260, 263, 264], "61it": 259, "992": 259, "38it": [259, 263], "58it": [259, 260, 263], "4193": [259, 263], "1056": 259, "52it": [259, 260, 263], "3983": 259, "1088": 259, "3742": 259, "1120": 259, "35it": [259, 263], "3982": 259, "1152": 259, "65it": 259, "3772": 259, "1184": 259, "36it": [259, 260, 263], "4586": 259, "1216": 259, "1248": 259, "09": [259, 260, 263], "03it": [259, 260, 263], "3771": 259, "1280": 259, "34it": [259, 263], "4526": 259, "37it": [259, 263], "1344": 259, "17it": [259, 260, 263], "1376": 259, "05it": [259, 263], "1408": 259, "1440": 259, "1472": 259, "40": [259, 260, 263], "1504": 259, "74it": [259, 260], "1536": 259, "00it": 259, "1568": 259, "4074": [259, 263], "1600": 259, "1632": [259, 263], "77it": [259, 260], "04": [259, 263, 264, 265], "06it": [259, 260, 263], "1696": 259, "90it": 259, "1728": 259, "18it": [259, 263], "1760": 259, "47it": [259, 263], "1792": 259, "88it": [259, 260, 263], "4164": 259, "1824": 259, "1856": 259, "04it": [259, 260, 263], "1888": 259, "1920": [259, 263], "98it": 259, "1952": 259, "1984": 259, "57": [259, 260, 263, 264], "4012": 259, "2016": 259, "14it": [259, 260], "3590": 259, "2048": [259, 264], "55": [259, 263, 264], "2080": [259, 263], "2112": [259, 263], "2144": 259, "50it": [259, 260, 263], "2176": 259, "60it": [259, 260], "2208": [259, 263], "2240": 259, "4073": 259, "2272": 259, "48it": [259, 263], "2304": 259, "43it": [259, 263], "2336": 259, "24it": [259, 260, 263], "2368": 259, "02it": 259, "2400": [259, 263], "2432": [259, 263], "45it": [259, 260, 263], "2464": 259, "96it": 259, "2496": 259, "12it": 259, "3740": [259, 263], "2528": 259, "86it": [259, 263], "3499": 259, "2560": 259, "2592": [259, 263], "2624": 259, "4434": 259, "2656": 259, "2688": 259, "2720": 259, "83it": [259, 260], "2752": 259, "72it": [259, 260], "4104": 259, "2784": 259, "07it": 259, "2816": 259, "2848": [259, 263], "21it": [259, 263], "2880": 259, "2912": [259, 263], "2944": 259, "91it": [259, 260], "60": [259, 260, 263, 264, 266], "2976": 259, "3008": 259, "61": [259, 260, 263, 264], "3040": 259, "3072": 259, "62": [259, 260, 263, 264], "3104": 259, "57it": [259, 263], "63": [259, 263], "3136": 259, "80it": 259, "3168": 259, "3200": [259, 260], "65": [259, 263, 264], "3232": 259, "93it": 259, "3514": 259, "3264": [259, 263], "66": [259, 260, 263, 264], "3296": 259, "53it": [259, 260, 263], "67": [259, 262, 263, 264], "3328": 259, "3360": [259, 260], "68": [259, 260, 263, 264], "3392": 259, "3424": [259, 263], "69": [259, 263], "3456": 259, "59it": [259, 260], "70": [259, 260, 263, 264], "3488": 259, "3520": 259, "71": [259, 263, 264], "3552": 259, "72": [259, 260, 263, 264], "3584": 259, "3616": 259, "78it": 259, "73": [259, 263, 264], "3648": 259, "92it": [259, 260, 263], "74": [259, 260, 263, 264], "3680": 259, "75": [259, 263], "3744": 259, "76": [259, 260, 263, 264], "3776": 259, "3808": 259, "77": [259, 263], "3840": [259, 263], "3872": 259, "20it": [259, 260], "78": [259, 260, 263, 264], "3904": 259, "79": [259, 263], "3936": 259, "3968": 259, "80": [259, 260, 263, 264], "4000": [259, 260], "4032": 259, "85it": [259, 260], "4797": 259, "4064": 259, "82": [259, 260, 263, 264], "4096": 259, "83": [259, 260, 263, 264], "4128": 259, "4160": 259, "28it": [259, 263], "84": [259, 260, 263, 264], "4192": 259, "85": [259, 260, 263], "4256": 259, "86": [259, 260, 263], "4288": 259, "4320": 259, "4352": 259, "88": [259, 260, 263, 264], "4384": 259, "4645": 259, "4416": 259, "89": [259, 263, 264], "4448": 259, "49it": [259, 260, 263], "90": [259, 260, 263], "4480": 259, "4512": 259, "91": [259, 263], "4544": 259, "92": [259, 260, 263, 264], "4576": 259, "95it": [259, 260], "4608": 259, "93": [259, 263], "4640": 259, "4672": 259, "4704": 259, "40it": [259, 263], "4736": 259, "99it": 259, "4768": 259, "4800": 259, "97": [259, 263, 264], "4832": [259, 263], "27it": [259, 263], "4864": 259, "4896": 259, "4928": 259, "4960": 259, "63it": 259, "4992": 259, "16it": 259, "5024it": 259, "quickli": [259, 267], "print_csv_files_in_fold": 259, "folder_path": 259, "csv_file": 259, "output_str": 259, "dirpath": 259, "walk": [259, 262, 267], "endswith": 259, "strip": 259, "4134137034416199": 259, "4193258285522461": 259, "42241954803466797": 259, "4374600946903229": 259, "44965070486068726": 259, "4044681191444397": 259, "45859628915786743": 259, "43448829650878906": 259, "4948333501815796": 259, "950727939605713": 259, "8108959197998047": 259, "201779365539551": 259, "799062728881836": 259, "1539878845214844": 259, "8729774951934814": 259, "1963725090026855": 259, "240527391433716": 259, "2552781105041504": 259, "grad_norm_0": 259, "93813133239746": 259, "239734649658203": 259, "60008716583252": 259, "209860801696777": 259, "69847583770752": 259, "713064193725586": 259, "731107711791992": 259, "183597564697266": 259, "471681594848633": 259, "10000000894069672": 259, "3513513803482056": 259, "qvaluenetwork": 259, "worst": 259, "accuraci": 259, "fanci": 259, "392": [259, 263, 265], "795": [259, 265], "coding_dqn": [259, 265], "demonstr": [260, 263, 267], "talk": 260, "repetit": 260, "six": 260, "sophist": 260, "invent": 260, "theta_k": 260, "frac": 260, "pi_": 260, "exceed": 260, "discourag": [260, 263], "indispens": 260, "loader": 260, "analyz": 260, "lingua": 260, "franca": 260, "defaultdict": [260, 263], "has_cuda": [260, 267], "3e": 260, "max_grad_norm": 260, "big": [260, 267], "ourselv": [260, 267], "benefici": 260, "errat": 260, "hamper": 260, "reactiv": 260, "xy": 260, "50_000": 260, "sub_batch_s": 260, "num_epoch": 260, "intro": 260, "entropy_ep": 260, "generalist": 260, "interchang": [260, 264], "panel": 260, "charact": 260, "inverteddoublependulum": 260, "transmit": 260, "stai": 260, "thumb": 260, "supplementari": [260, 267], "told": 260, "stringent": 260, "nevertheless": 260, "environemnt": 260, "confid": 260, "succeed": [260, 263], "pack": [260, 267], "ran": 260, "mutli": 260, "boundari": 260, "f_": 260, "text": 260, "mu_": 260, "difficulti": [260, 267], "brought": 260, "scrictli": 260, "d_ob": 260, "d_action": 260, "carrier": 260, "policy_modul": 260, "That": 260, "said": 260, "value_modul": [260, 266], "briefli": 260, "refil": 260, "capac": 260, "conveni": [260, 263], "easiest": 260, "hide": 260, "awai": 260, "mathemat": 260, "tradeoff": 260, "lr_schedul": [260, 263], "cosineannealinglr": [260, 263], "eval_str": 260, "tensordict_data": 260, "data_view": 260, "subdata": 260, "loss_object": 260, "loss_crit": 260, "loss_entropi": 260, "cum_reward_str": 260, "4f": [260, 263], "stepcount_str": 260, "param_group": 260, "lr_str": 260, "eval_rollout": 260, "nice": 260, "50000": 260, "315": [260, 263], "138": [260, 263], "5241": 260, "0992": 260, "0003": [260, 263], "314": [260, 263], "1396": 260, "3000": 260, "318": [260, 263], "1496": 260, "321": [260, 263], "1962": 260, "2171": 260, "6000": 260, "324": [260, 263], "2328": 260, "7000": 260, "326": [260, 263], "2550": 260, "8000": 260, "2517": 260, "9000": 260, "327": [260, 263], "2549": 260, "330": [260, 263], "2717": 260, "11000": 260, "331": [260, 263], "241": [260, 263], "2639": 260, "2644": 260, "12000": 260, "2747": 260, "13000": 260, "332": [260, 263], "2847": 260, "14000": 260, "2765": 260, "15000": 260, "2843": 260, "0002": [260, 263], "16000": 260, "2959": 260, "17000": 260, "2852": 260, "18000": 260, "329": [260, 263], "2845": [260, 263], "19000": 260, "2820": 260, "20000": 260, "2877": 260, "21000": 260, "55it": [260, 263], "493": [260, 263], "9072": 260, "2751": 260, "22000": 260, "2755": 260, "23000": 260, "2909": 260, "24000": 260, "2965": 260, "25000": 260, "2982": 260, "104": [260, 263], "26000": 260, "333": [260, 263], "39it": 260, "3121": 260, "121": [260, 263, 267], "27000": 260, "334": [260, 263], "3108": [260, 263], "260": [260, 263], "28000": 260, "3178": 260, "220": [260, 263], "29000": 260, "152": [260, 263], "30000": 260, "335": [260, 263], "3176": [260, 263], "173": [260, 263], "31000": 260, "336": [260, 263], "784": 260, "2427": 260, "139": [260, 263], "32000": 260, "3145": 260, "33000": 260, "3110": 260, "122": [260, 263, 267], "34000": 260, "3215": 260, "169": [260, 263], "35000": 260, "62it": 260, "3282": 260, "211": [260, 263], "36000": 260, "3224": 260, "186": [260, 263], "37000": 260, "3234": 260, "194": [260, 263], "38000": 260, "3220": [260, 263], "141": [260, 263], "39000": 260, "3217": 260, "136": [260, 263], "40000": 260, "3311": 260, "212": [260, 263], "41000": 260, "337": [260, 263], "1635": [260, 263], "4888": 260, "174": [260, 263], "3237": 260, "42000": 260, "3233": [260, 263], "193": [260, 263], "43000": 260, "3356": 260, "44000": 260, "3326": 260, "176": [260, 263], "45000": 260, "42it": [260, 263], "3337": [260, 263], "340": [260, 263], "46000": 260, "3363": [260, 263], "47000": 260, "3325": 260, "476": [260, 263], "48000": 260, "357": [260, 263], "49000": 260, "3451": 260, "495": [260, 263], "3357": 260, "449": [260, 263], "cap": 260, "figsiz": [260, 263], "subplot": [260, 263, 267], "titl": [260, 263], "bit": 260, "277": [260, 263, 265], "coding_ppo": [260, 265], "tutorials_python": 261, "tutorials_jupyt": 261, "distinct": 262, "humanoid": [262, 267], "env1": 262, "env1_obs_kei": 262, "observation_stand": 262, "env2": 262, "env2_obs_kei": 262, "observation_walk": 262, "tdreset1": 262, "tdreset2": 262, "tdreset": 262, "policy_common": 262, "policy_stand": 262, "policy_walk": 262, "seq": 262, "But": 262, "env1_mak": 262, "env2_mak": 262, "_single_task": 262, "td_rollout": 262, "394": [262, 263, 265], "multi_task": [262, 265], "freeli": 263, "inspir": 263, "sep": 263, "touch": 263, "undertaken": 263, "broader": 263, "challeng": [263, 264], "wider": 263, "algebra": 263, "seamlessli": 263, "acquaint": 263, "avenu": 263, "unsqueezetransform": 263, "_apply_to_composit": 263, "default_x": 263, "pi": 263, "default_i": 263, "four": 263, "_set_se": 263, "torqu": 263, "upward": 263, "angular": 263, "dot": 263, "_t": 263, "sin": 263, "rad": 263, "sec": 263, "gravit": 263, "angl": 263, "deleg": 263, "new_th": 263, "plu": 263, "new_thdot": 263, "thdot": 263, "g_forc": 263, "max_torqu": 263, "angle_norm": 263, "max_spe": 263, "zeros_lik": 263, "albeit": 263, "is_empti": 263, "gen_param": 263, "high_th": 263, "high_thdot": 263, "low_th": 263, "low_thdot": 263, "rng": 263, "lazili": 263, "shortcut": [263, 267], "irrelev": 263, "_make_spec": 263, "td_param": 263, "commong": 263, "pseudo": 263, "pendulumenv": 263, "render_mod": 263, "human": 263, "rgb_arrai": 263, "render_fp": 263, "random_": 263, "_make_step": 263, "staticmethod": 263, "coupl": 263, "complic": [263, 267], "showcas": 263, "skeleton": 263, "_apply_transform": [263, 267], "_inv_apply_transform": [263, 267], "eventu": 263, "subset": [263, 264], "unitari": 263, "sine": 263, "cosin": 263, "sintransform": 263, "costransform": 263, "co": 263, "t_sin": 263, "t_co": 263, "cat_transform": 263, "mdp": 263, "convin": 263, "simple_rollout": 263, "_data": 263, "unexplor": 263, "assumpt": 263, "recreat": 263, "20_000": 263, "init_td": 263, "traj_return": 263, "last_reward": 263, "is_ipython": 263, "inlin": 263, "get_backend": 263, "ion": 263, "gcf": 263, "clear_output": 263, "625": 263, "9981": 263, "3292": 263, "8997": 263, "7032": 263, "696": 263, "8466": 263, "0202": 263, "807": 263, "2897": 263, "6322": 263, "0338": 263, "4880": 263, "504": 263, "1698": 263, "9674": 263, "188": 263, "0643": 263, "9703": 263, "127": 263, "0207": 263, "048": 263, "3501": 263, "5927": 263, "5956": 263, "7665": 263, "732": 263, "3527": 263, "0354": 263, "2219": 263, "2999": 263, "8446": 263, "7448": 263, "961": 263, "7403": 263, "5034": 263, "411": 263, "9381": 263, "7937": 263, "619": 263, "8760": 263, "1022": 263, "6977": 263, "0331": 263, "987": 263, "8657": 263, "4508": 263, "919": 263, "9990": 263, "8757": 263, "921": 263, "9021": 263, "9585": 263, "518": 263, "6612": 263, "6255": 263, "648": 263, "7181": 263, "7913": 263, "089": 263, "0750": 263, "5913": 263, "596": 263, "8299": 263, "4152": 263, "9993": 263, "4527": 263, "2555": 263, "551": 263, "3655": 263, "3651": 263, "6557": 263, "3352": 263, "9137": 263, "7104": 263, "8728": [263, 266], "144": 263, "8547": 263, "6320": 263, "871": 263, "7414": 263, "4717": 263, "7268": 263, "1833": 263, "6634": 263, "3899": 263, "6083": 263, "3508": 263, "5830": 263, "6835": 263, "8209": 263, "3483": 263, "7688": 263, "599": 263, "8693": 263, "3066": 263, "008": 263, "5190": 263, "2003": 263, "5916": 263, "0074": 263, "053": 263, "3596": 263, "3250": 263, "4695": 263, "556": 263, "4941": 263, "0976": 263, "436": 263, "5073": 263, "6267": 263, "7900": 263, "7116": 263, "0649": 263, "206": 263, "9751": 263, "0522": 263, "328": 263, "0844": 263, "7387": 263, "845": 263, "2246": 263, "5251": 263, "3373": 263, "9479": 263, "2709": 263, "3046": 263, "3977": 263, "3212": 263, "642": 263, "3854": 263, "9375": 263, "837": 263, "6287": 263, "6260": 263, "7219": 263, "8860": 263, "6979": 263, "2648": 263, "4459": 263, "3500": 263, "3812": 263, "3433": 263, "222": 263, "4411": 263, "6690": 263, "3777": 263, "1538": 263, "322": 263, "8743": 263, "4807": 263, "22e": 263, "3545": 263, "0107": 263, "2255": 263, "3131": 263, "1588": 263, "4491": 263, "076": 263, "2076": 263, "831": 263, "7440": 263, "6878": 263, "102": [263, 266], "2344": 263, "1025": 263, "902": 263, "9207": 263, "2087": 263, "2254": 263, "9928": 263, "3105": 263, "6532": 263, "8399": 263, "5124": 263, "8030": 263, "6501": 263, "4525": 263, "8541": 263, "8998": 263, "796e": 263, "2027": 263, "1556": 263, "3472": 263, "3081": 263, "396": 263, "3959": 263, "7512": 263, "3240": 263, "8101": 263, "2314": 263, "4188": 263, "295": 263, "9779": 263, "5535": 263, "5627": 263, "6739": 263, "8125": 263, "6816": 263, "755": 263, "26it": 263, "6262": 263, "0773": 263, "8989": 263, "1044": 263, "4514": 263, "0407": 263, "0062": 263, "4916": 263, "0404": 263, "3795": 263, "3577": 263, "3650": 263, "4141": 263, "134": 263, "9704": 263, "9697": 263, "1513": 263, "4501": 263, "285": 263, "2994": 263, "4022": 263, "579": 263, "2008": 263, "9061": 263, "558": 263, "0307": 263, "9752": 263, "5623": 263, "5012": 263, "2079": 263, "5742": 263, "125": 263, "2724": 263, "3876": 263, "2708": 263, "7700": 263, "058": 263, "1960": 263, "1463": 263, "3716": 263, "0288": 263, "2872": 263, "0933": 263, "9320": 263, "1261": 263, "1747": 263, "4484": 263, "0453": 263, "3530": 263, "209": 263, "103": 263, "3564": 263, "3918": 263, "4985": 263, "105": 263, "5372": 263, "6419": 263, "238": 263, "4172": 263, "1033": 263, "107": 263, "5129": 263, "1738": 263, "982": 263, "108": 263, "2507": 263, "6379": 263, "109": 263, "2202": 263, "9865": 263, "110": 263, "6413": 263, "0470": 263, "111": 263, "7870": 263, "4711": 263, "386": 263, "112": 263, "8113": 263, "5438": 263, "113": 263, "7211": 263, "2379": 263, "054": 263, "4828": 263, "5023": 263, "115": 263, "9169": 263, "8205": 263, "171": 263, "116": 263, "0791": 263, "4240": 263, "117": 263, "0138": 263, "3126": 263, "651": 263, "118": 263, "6676": 263, "119": 263, "0057": 263, "120": 263, "4148": 263, "9243": 263, "2873": 263, "2469": 263, "1979": 263, "1586": 263, "123": 263, "6911": 263, "8230": 263, "124": 263, "7729": 263, "9686": 263, "126": 263, "2032": 263, "0313": 263, "656": 263, "9053": 263, "4081": 263, "9441": 263, "3413": 263, "5864": 263, "006": 263, "129": 263, "0038": 263, "5304": 263, "7869": 263, "2975": 263, "131": 263, "7712": 263, "1618": 263, "132": 263, "7366": 263, "133": 263, "4165": 263, "0684": 263, "188e": 263, "8963": 263, "1896": 263, "135": 263, "7390": 263, "9629": 263, "9319": 263, "137": 263, "3621": 263, "7266": 263, "1210": 263, "8384": 263, "5619": 263, "140": 263, "0575": 263, "5144": 263, "8710": 263, "7681": 263, "142": 263, "8321": 263, "8516": 263, "945": 263, "143": 263, "0932": 263, "2351": 263, "773": 263, "0999": 263, "1744": 263, "145": 263, "2118": 263, "8154": 263, "146": 263, "7484": 263, "4035": 263, "147": 263, "5152": 263, "0088": 263, "148": 263, "5423": 263, "7286": 263, "149": 263, "7692": 263, "1465": 263, "150": 263, "0797": 263, "1392": 263, "151": 263, "9611": 263, "9006": 263, "7773": 263, "6767": 263, "153": 263, "4340": 263, "2778": 263, "154": 263, "5407": 263, "8302": 263, "595": 263, "155": 263, "4597": 263, "1627": [263, 267], "156": 263, "7073": 263, "3922": 263, "157": 263, "7815": 263, "9858": 263, "158": 263, "6953": 263, "7051": 263, "159": 263, "6165": 263, "0605": 263, "3321": 263, "9367": 263, "161": 263, "3238": 263, "1825": 263, "162": 263, "6537": 263, "6867": 263, "163": [263, 264], "8555": 263, "0956": 263, "164": 263, "3248": 263, "0159": 263, "165": 263, "2370": 263, "7480": 263, "166": [263, 266], "8993": 263, "8285": 263, "167": 263, "5465": 263, "3198": 263, "168": 263, "9088": 263, "3417": 263, "2199": 263, "2993": 263, "170": 263, "7042": 263, "1570": 263, "6141": 263, "284": 263, "172": 263, "9925": 263, "2946": 263, "5968": 263, "1712": 263, "175": 263, "6813": 263, "9453": 263, "5664": 263, "177": 263, "3610": 263, "9569": 263, "178": 263, "0602": 263, "9931": 263, "179": 263, "7767": 263, "8155": 263, "180": 263, "0498": 263, "7331": 263, "568": 263, "181": 263, "0781": 263, "1768": 263, "182": 263, "9178": 263, "6354": 263, "183": 263, "1244": 263, "8991": 263, "184": 263, "8262": 263, "2116": 263, "185": 263, "2508": 263, "7676": 263, "0428": 263, "2621": 263, "187": 263, "0812": 263, "9802": 263, "199": 263, "9924": 263, "0870": 263, "189": 263, "3196": 263, "2363": 263, "190": 263, "9864": 263, "0182": 263, "191": 263, "0345": 263, "9245": 263, "9191": 263, "1752": 263, "491": 263, "1470": 263, "8907": 263, "257": 263, "1925": 263, "676": 263, "195": 263, "1042": 263, "5107": 263, "842": 263, "196": 263, "0179": 263, "197": 263, "9784": 263, "0536": 263, "198": 263, "8914": 263, "3151": 263, "2599": 263, "7948": 263, "4072": 263, "201": 263, "5997": 263, "8325": 263, "202": 263, "8960": 263, "203": 263, "0600": 263, "8070": 263, "204": 263, "0523": 263, "0025": 263, "205": 263, "5027": 263, "0148": 263, "0363": 263, "3280": 263, "207": 263, "1871": 263, "1571": 263, "208": 263, "8204": 263, "6373": 263, "9863": 263, "2612": 263, "0748": 263, "9467": 263, "8050": 263, "6954": 263, "291": 263, "4752": 263, "1008": 263, "016": 263, "213": 263, "8463": 263, "1723": 263, "214": 263, "6868": 263, "215": 263, "5380": 263, "1126": 263, "891": 263, "216": 263, "2657": 263, "2562": 263, "217": 263, "5513": 263, "0549": 263, "566": 263, "218": 263, "0561": 263, "1288": 263, "607": 263, "219": 263, "3470": 263, "0052": 263, "4686": 263, "0242": 263, "941": 263, "221": 263, "8202": 263, "9284": 263, "1519": 263, "799": 263, "223": 263, "9705": 263, "0056": 263, "027": 263, "9204": 263, "2680": 263, "991": 263, "225": 263, "33it": 263, "0383": 263, "226": 263, "1037": 263, "7906": 263, "227": 263, "3671": 263, "5151": 263, "228": 263, "76it": 263, "9767": 263, "9817": 263, "229": 263, "6483": 263, "0955": 263, "230": 263, "13it": 263, "6856": 263, "5156": 263, "231": 263, "7647": 263, "4922": 263, "232": 263, "71it": 263, "3724": 263, "4932": 263, "233": 263, "3750": 263, "873": 263, "234": 263, "08it": 263, "7854": 263, "2685": 263, "839": 263, "235": 263, "2902": 263, "1122": 263, "618": 263, "236": 263, "0771": 263, "428": 263, "237": 263, "0086": 263, "239": 263, "4450": 263, "1583": 263, "240": [263, 266, 267], "2403": 263, "0024": 263, "569": 263, "242": 263, "1011": 263, "0112": 263, "251": 263, "243": 263, "6538": 263, "0162": 263, "9349": 263, "7379": 263, "245": 263, "8236": 263, "0259": 263, "8227": 263, "246": 263, "4424": 263, "6078": 263, "247": 263, "1075": 263, "2630": 263, "248": 263, "0820": 263, "684": 263, "249": 263, "2719": 263, "7146": 263, "364": 263, "250": 263, "4423": 263, "9679": 263, "4463": 263, "5761": 263, "252": 263, "0347": 263, "0947": 263, "253": 263, "4200": 263, "0638": 263, "254": 263, "4313": 263, "0403": 263, "074": 263, "6630": 263, "0239": 263, "1293": 263, "0677": 263, "638": 263, "8976": 263, "0517": 263, "092": 263, "258": 263, "1411": 263, "259": 263, "0897": 263, "0417": 263, "013": 263, "9226": 263, "0016": 263, "4881": 263, "261": 263, "1743": 263, "0167": 263, "262": 263, "1668": 263, "0481": 263, "263": 263, "1277": 263, "0092": 263, "8715": 263, "264": 263, "0661": 263, "0067": 263, "7747": 263, "265": 263, "2779": 263, "0430": 263, "9998": 263, "266": 263, "9067": 263, "0251": 263, "015": 263, "267": 263, "4558": 263, "0186": 263, "268": 263, "1901": 263, "1413": 263, "269": 263, "1785": 263, "0324": 263, "562": 263, "270": 263, "2759": 263, "826": 263, "271": 263, "1844": 263, "0168": 263, "587": 263, "3009": 263, "0362": 263, "273": 263, "7069": 263, "274": 263, "0793": 263, "5345": 263, "275": 263, "0513": 263, "0211": 263, "088": 263, "276": 263, "4400": 263, "0433": 263, "866": 263, "2846": 263, "0157": 263, "427": 263, "278": 263, "2392": 263, "1046": 263, "408": 263, "279": 263, "1373": 263, "5125": 263, "280": 263, "1448": 263, "0560": 263, "678": 263, "281": 263, "5425": 263, "0506": 263, "282": 263, "5210": 263, "0940": 263, "283": 263, "0558": 263, "876": 263, "2645": 263, "0130": 263, "5357": 263, "7399": 263, "8931": 263, "286": [263, 266], "2394": 263, "9803": 263, "287": 263, "6626": 263, "8780": 263, "2521": 263, "0027": 263, "289": 263, "1452": 263, "0534": 263, "877": 263, "290": 263, "2637": 263, "0477": 263, "519": 263, "2021": 263, "0382": 263, "742": 263, "292": 263, "1473": 263, "0208": 263, "293": 263, "3379": 263, "0450": 263, "294": 263, "2145": 263, "0270": 263, "3688": 263, "7527": 263, "296": 263, "8627": 263, "297": 263, "2180": 263, "0066": 263, "298": 263, "0373": 263, "0055": 263, "299": 263, "5879": 263, "9401": 263, "6223": 263, "8889": 263, "301": 263, "2797": 263, "1580": 263, "302": 263, "9936": 263, "4949": 263, "303": 263, "4579": 263, "9796": 263, "304": 263, "0070": 263, "9057": 263, "305": 263, "2540": 263, "746": 263, "306": 263, "5077": 263, "1406": 263, "7956": 263, "7657": 263, "308": 263, "9119": 263, "1691": 263, "309": 263, "2513": 263, "3036": 263, "310": 263, "0779": 263, "0079": 263, "8692": 263, "311": 263, "9439": 263, "0460": 263, "592": 263, "312": 263, "8099": 263, "0491": 263, "313": 263, "516": 263, "8046": 263, "0147": 263, "404": 263, "0122": 263, "0017": 263, "6365": 263, "316": 263, "1499": 263, "0109": 263, "717": 263, "317": 263, "0034": 263, "4328": 263, "1559": 263, "0010": 263, "3445": 263, "319": 263, "9434": 263, "2862": 263, "9168": 263, "0020": 263, "7494": 263, "7114": 263, "004": 263, "2146": 263, "323": 263, "8207": 263, "0008": 263, "093": 263, "0291": 263, "0036": 263, "733": 263, "325": 263, "0031": 263, "0059": 263, "9693": 263, "4539": 263, "4015": 263, "2260": 263, "0032": 263, "8712": 263, "2449": 263, "0100": 263, "7291": 263, "0009": 263, "5744": 263, "9889": 263, "0205": 263, "563": 263, "9478": 263, "0578": 263, "3117": 263, "3474": 263, "3562": 263, "2034": 263, "0292": 263, "6824": 263, "2522": 263, "565": 263, "9085": 263, "0041": 263, "798": 263, "338": 263, "0409": 263, "0278": 263, "339": 263, "0081": 263, "077": 263, "1038": 263, "0184": 263, "341": 263, "5232": 263, "2485": 263, "948": 263, "342": 263, "3397": 263, "343": 263, "1390": 263, "1946": 263, "344": 263, "9773": 263, "345": 263, "9628": 263, "8776": 263, "346": 263, "593": 263, "347": [263, 264, 265], "4281": 263, "3059": 263, "348": 263, "9241": 263, "0303": 263, "349": 263, "4747": 263, "3566": 263, "350": 263, "5687": 263, "1356": 263, "9195": 263, "2604": 263, "5555": 263, "353": 263, "4093": 263, "354": 263, "3465": 263, "0412": 263, "498": 263, "355": 263, "4612": 263, "0659": 263, "888": 263, "356": 263, "0915": 263, "6161": 263, "4199": 263, "6984": 263, "358": 263, "1434": 263, "5982": 263, "359": 263, "6443": 263, "8121": 263, "360": 263, "9721": 263, "559": 263, "361": 263, "5386": 263, "0893": 263, "362": 263, "1242": [263, 266], "0828": 263, "507": 263, "363": 263, "8708": 263, "548": 263, "9075": 263, "4399": 263, "365": 263, "6237": 263, "0761": 263, "929": 263, "366": 263, "1787": 263, "1726": 263, "367": 263, "4725": 263, "368": 263, "0309": 263, "502": 263, "369": 263, "6823": 263, "0098": 263, "370": 263, "2397": 263, "371": 263, "4634": 263, "0099": 263, "699": 263, "372": 263, "9857": 263, "9962": 263, "373": 263, "9991": 263, "2484": 263, "374": 263, "8959": 263, "737": 263, "375": 263, "1581": 263, "376": 263, "8401": 263, "377": 263, "9562": 263, "0272": 263, "378": 263, "9824": 263, "4239": 263, "379": 263, "2841": 263, "380": 263, "9922": 263, "4334": 263, "381": 263, "9613": 263, "6321": 263, "382": 263, "0516": 263, "8370": 263, "383": 263, "9549": 263, "7350": 263, "1794": 263, "4433": 263, "385": 263, "5432": 263, "738": 263, "9084": 263, "387": 263, "8010": 263, "388": 263, "9532": 263, "6513": 263, "389": 263, "8265": 263, "0729": 263, "390": 263, "8901": 263, "3721": 263, "8347": 263, "7444": 263, "6952": 263, "7052": 263, "393": 263, "4568": 263, "1346": 263, "2150": 263, "0438": 263, "943": 263, "395": 263, "2904": 263, "9225": 263, "3052": 263, "0075": 263, "8393": 263, "397": 263, "1268": 263, "398": 263, "4296": 263, "1481": 263, "399": 263, "5538": 263, "3458": 263, "2728": 263, "1060": 263, "401": 263, "7887": 263, "2564": 263, "402": 263, "9080": 263, "5411": 263, "403": 263, "1620": 263, "7441": 263, "7703": 263, "405": 263, "6127": 263, "3102": 263, "406": 263, "4175": 263, "5960": 263, "407": 263, "0043": 263, "8779": 263, "409": 263, "6928": 263, "410": 263, "2700": 263, "022": 263, "0357": 263, "0019": 263, "028": 263, "412": 263, "0935": 263, "0060": [263, 267], "7993": 263, "413": 263, "9033": 263, "0065": 263, "6378": 263, "414": 263, "9597": 263, "415": 263, "0110": 263, "0005": 263, "4133": 263, "8585": 263, "0042": 263, "6746": 263, "417": 263, "7328": 263, "1174": 263, "4613": 263, "418": 263, "2442": 263, "0233": 263, "419": 263, "3477": 263, "018": 263, "420": 263, "6869": 263, "0289": 263, "4806": 263, "421": 263, "1528": 263, "0134": 263, "422": 263, "1684": 263, "2155": 263, "423": 263, "0116": 263, "5719": 263, "424": 263, "0214": 263, "2801": 263, "425": 263, "4760": 263, "0224": 263, "6168": 263, "426": 263, "2511": 263, "0045": 263, "1865": 263, "8317": 263, "1415": 263, "2207": 263, "0841": 263, "429": 263, "0849": 263, "985": 263, "430": 263, "9495": 263, "0372": 263, "9485": 263, "431": 263, "9242": 263, "0039": 263, "4826": 263, "432": 263, "433": 263, "9218": 263, "1003": 263, "434": 263, "7468": 263, "1522": 263, "435": 263, "7471": 263, "5852": 263, "9354": 263, "0013": 263, "037": 263, "437": 263, "3633": 263, "0187": 263, "061": 263, "438": 263, "7091": 263, "0212": 263, "439": 263, "0950": 263, "6344": 263, "440": 263, "1945": 263, "5790": 263, "441": 263, "6370": 263, "7047": 263, "442": 263, "9447": 263, "0551": 263, "443": 263, "0674": 263, "0146": 263, "046": 263, "444": 263, "0087": 263, "0247": 263, "445": 263, "2640": 263, "0129": 263, "8987": 263, "446": 263, "1670": 263, "5398": 263, "447": 263, "9180": 263, "7940": 263, "2948": 263, "0588": 263, "0486": 263, "0029": 263, "1134": 263, "450": 263, "3267": 263, "5681": 263, "451": 263, "0151": 263, "452": 263, "6647": 263, "0316": 263, "453": 263, "5449": 263, "0209": 263, "097": 263, "454": 263, "9321": 263, "3687": 263, "953": 263, "455": 263, "9511": 263, "2701": 263, "456": 263, "0406": 263, "8281": 263, "457": 263, "0379": 263, "458": 263, "2470": 263, "0437": 263, "5843": 263, "0072": 263, "460": 263, "6838": 263, "3447": 263, "7313": 263, "0355": 263, "462": 263, "9268": 263, "0265": 263, "9834": 263, "463": 263, "8536": 263, "9786": 263, "464": 263, "0696": 263, "7232": 263, "465": 263, "9096": 263, "4422": 263, "466": 263, "3227": 263, "0026": 263, "467": 263, "9565": 263, "9563": 263, "9941": 263, "1284": 263, "469": 263, "1401": 263, "2850": 263, "470": 263, "1807": 263, "8859": 263, "471": 263, "0268": 263, "2992": 263, "472": 263, "7436": 263, "0048": 263, "034": 263, "473": 263, "7046": 263, "0352": 263, "474": 263, "2023": 263, "3258": 263, "515": 263, "475": 263, "0141": 263, "9798": 263, "4474": 263, "0912": 263, "477": 263, "9181": 263, "5476": 263, "478": 263, "1264": 263, "3269": 263, "479": 263, "0714": 263, "0030": 263, "5317": 263, "5477": 263, "0255": 263, "8628": 263, "481": 263, "1258": 263, "0015": 263, "482": 263, "9650": 263, "4266": 263, "483": 263, "8081": 263, "0004": 263, "4455": 263, "484": 263, "5812": 263, "1719": 263, "485": 263, "1741": 263, "486": 263, "1595": 263, "0089": 263, "936": 263, "487": 263, "1667": 263, "3892": 263, "488": 263, "3824": 263, "0093": 263, "6528": 263, "489": 263, "1727": 263, "1435": 263, "059": 263, "490": 263, "0916": 263, "0018": 263, "4518": 263, "9310": 263, "0006": 263, "3553": 263, "492": 263, "9972": 263, "4515": 263, "9493": 263, "8759": 263, "494": 263, "3700": 263, "0269": 263, "4107": 263, "496": 263, "6094": 263, "497": 263, "9116": 263, "1518": [263, 267], "6022": 263, "0047": 263, "2026": 263, "499": 263, "8009": 263, "0007": 263, "1845": 263, "6948": 263, "501": 263, "0971": 263, "0387": 263, "951": 263, "2885": 263, "503": 263, "0894": 263, "2552": 263, "0191": 263, "505": 263, "8276": 263, "506": 263, "9520": 263, "0037": 263, "5835": 263, "0374": 263, "7556": 263, "508": 263, "0579": 263, "0399": 263, "509": 263, "0094": 263, "7127": 263, "510": 263, "0119": 263, "0121": 263, "511": 263, "6013": 263, "0220": 263, "8064": 263, "2684": 263, "8179": 263, "513": 263, "4730": 263, "0046": 263, "5481": 263, "514": 263, "0234": 263, "4331": 263, "8143": 263, "2915": [263, 266], "9051": 263, "0353": 263, "9127": 263, "517": 263, "0527": 263, "6465": 263, "7579": 263, "2010": 263, "3927": 263, "5383": 263, "862": 263, "520": 263, "7386": 263, "1014": 263, "521": 263, "9163": 263, "4487": 263, "522": 263, "5626": 263, "523": 263, "2899": 263, "0113": 263, "524": 263, "6441": 263, "0044": 263, "3965": 263, "525": 263, "5001": 263, "2060": 263, "526": 263, "8905": 263, "4168": 263, "527": 263, "4458": 263, "0012": 263, "051": 263, "528": 263, "9446": 263, "3096": 263, "529": 263, "2399": 263, "1971": 263, "530": 263, "4471": 263, "531": 263, "1270": 263, "0023": 263, "532": [263, 265], "533": 263, "6550": 263, "583": 263, "534": 263, "1092": 263, "0049": 263, "787": 263, "535": 263, "7641": 263, "6674": 263, "536": 263, "0083": 263, "6375": 263, "537": 263, "1713": 263, "4933": 263, "538": 263, "3557": 263, "3964": 263, "539": 263, "0040": 263, "4129": 263, "540": 263, "7999": 263, "541": 263, "2613": 263, "4742": 263, "542": 263, "1826": 263, "934": 263, "543": 263, "3158": 263, "3686": 263, "4047": 263, "545": 263, "7943": 263, "0902": 263, "546": 263, "3889": 263, "547": 263, "4309": 263, "4762": 263, "1662": 263, "9526": 263, "549": 263, "2170": 263, "0520": 263, "4367": 263, "550": 263, "4584": 263, "6931": 263, "0306": 263, "752": 263, "552": 263, "9054": 263, "2062": 263, "553": 263, "9523": 263, "4382": 263, "554": 263, "3534": 263, "0136": 263, "663": 263, "555": 263, "0279": 263, "0171": 263, "5679": 263, "0145": 263, "4652": 263, "557": 263, "1205": 263, "0091": 263, "4838": 263, "0630": 263, "1721": 263, "3604": 263, "560": 263, "1695": [263, 267], "561": 263, "6994": 263, "3646": 263, "0192": 263, "4547": 263, "564": 263, "2580": 263, "2356": 263, "1397": 263, "8400": 263, "7309": 263, "567": 263, "0101": 263, "8539": 263, "1256": 263, "4851": 263, "0284": 263, "570": 263, "7214": 263, "2575": 263, "571": 263, "3996": 263, "572": 263, "2542": 263, "4089": 263, "573": 263, "5782": 263, "0071": 263, "7487": 263, "574": 263, "3665": 263, "0050": 263, "7797": 263, "575": 263, "5660": 263, "1355": 263, "932": 263, "8266": 263, "577": 263, "3782": 263, "743": [263, 266], "578": 263, "1228": 263, "2931": 263, "043": 263, "6242": 263, "580": 263, "7491": 263, "6910": 263, "581": 263, "2258": 263, "0262": 263, "582": 263, "2386": 263, "0249": 263, "816": 263, "2947": 263, "2122": 263, "584": 263, "0096": 263, "0124": 263, "585": 263, "2979": 263, "0156": 263, "586": 263, "3268": 263, "0369": 263, "6409": 263, "4034": 263, "4395": 263, "588": 263, "8407": 263, "4432": 263, "589": 263, "0069": 263, "3628": 263, "590": 263, "3101": 263, "591": 263, "3404": 263, "2964": 263, "594": 263, "8374": 263, "4346": 263, "7782": 263, "3826": 263, "7098": 263, "597": 263, "8646": 263, "0526": 263, "598": 263, "7452": 263, "9579": 263, "0991": 263, "889": 263, "600": 263, "0332": 263, "0199": 263, "601": 263, "602": 263, "7237": 263, "3591": 263, "603": 263, "3797": 263, "0022": 263, "6776": 263, "604": 263, "9337": 263, "1918": 263, "605": 263, "6301": 263, "606": 263, "5972": 263, "5044": 263, "2131": 263, "664": 263, "609": 263, "1180": 263, "6142": 263, "610": 263, "5289": 263, "6693": 263, "611": 263, "4947": 263, "612": 263, "2196": 263, "4060": 263, "613": 263, "7377": 263, "3732": 263, "614": 263, "4574": 263, "0997": 263, "3581": 263, "615": 263, "9247": 263, "3012": 263, "616": 263, "3761": 263, "5136": 263, "617": 263, "4771": 263, "894": 263, "0177": [263, 267], "3644": 263, "620": 263, "5914": 263, "621": 263, "4353": 263, "7637": 263, "622": 263, "7577": 263, "1609": 263, "809": 263, "623": 263, "8873": 263, "624": 263, "6568": 263, "5234": 263, "subject": 263, "saw": 263, "explain": 264, "fine": 264, "semat": 264, "r3mtransform": 264, "sake": 264, "embodi": 264, "ai": 264, "env_transform": [264, 267], "s3": 264, "amazonaw": 264, "r3m_50": 264, "374m": 264, "8m": 264, "118mb": 264, "5mb": 264, "2mb": 264, "0m": 264, "6mb": 264, "8mb": 264, "0mb": 264, "6m": 264, "105m": 264, "3mb": 264, "115m": 264, "131m": 264, "147m": 264, "162m": 264, "1mb": 264, "169m": 264, "7mb": 264, "180m": 264, "195m": 264, "203m": 264, "212m": 264, "219m": 264, "229m": 264, "4mb": 264, "246m": 264, "262m": 264, "9mb": 264, "277m": 264, "285m": 264, "293m": 264, "301m": 264, "310m": 264, "316m": 264, "326m": 264, "332m": 264, "344m": 264, "360m": 264, "373m": 264, "wiser": 264, "again": [264, 267], "conclud": 264, "_storag": 264, "4918": [264, 265], "pretrained_model": [264, 265], "torchrl_demo": [265, 266], "5529": 265, "torchrl_env": [265, 267], "898": [265, 267], "demo": 266, "icml": 266, "dai": 266, "vmoen": 266, "fb": 266, "question": 266, "team": 266, "invest": 266, "platform": 266, "media": 266, "truli": 266, "predominantli": 266, "tensordict1": 266, "tensordict2": 266, "tensordict_sampl": 266, "_sampler": 266, "_sum_tre": 266, "modulenotfounderror": 266, "06984968483448029": 266, "28791671991348267": 266, "gym_env": 266, "noopresetenv": [266, 267], "lazyconv2d": 266, "6400": 266, "backbone_modul": 266, "actor_modul": 266, "params_expand": 266, "tensordict_exp": 266, "base_modul": 266, "0137": 266, "1524": 266, "0641": 266, "copybackward": 266, "1335": 266, "9833": 266, "3497": 266, "6889": 266, "6433": 266, "clampbackward1": 266, "1131": 266, "1761": 266, "3425": 266, "2665": 266, "6207": 266, "1441": 266, "2375": 266, "1372": 266, "3810": 266, "meanbackward1": 266, "roughli": 266, "tensordicts_prealloc": 266, "tensordicts_stack": 266, "tensordict_rollout": [266, 267], "disclaim": 266, "concatmodul": 266, "loss_td": 266, "3391": 266, "_default_get": 266, "1012": 266, "keyerror": 266, "year": 266, "roadmap": 266, "compris": 266, "contributor": 266, "curiou": 266, "feedback": 266, "nascent": 266, "5530": 266, "supervis": 267, "unsupervis": 267, "rom": 267, "licens": 267, "pygam": 267, "unifi": 267, "insid": 267, "_build_env": 267, "sphinx_gallery_start_ignor": 267, "filterwarn": 267, "sphinx_gallery_end_ignor": 267, "adventur": 267, "ram": 267, "airraid": 267, "alien": 267, "amidar": 267, "assault": 267, "7954": 267, "exectut": 267, "reproduct": 267, "tensordict_tprim": 267, "imshow": 267, "axesimag": 267, "0x7f46ccde4eb0": 267, "inconsist": 267, "swingup": 267, "swingup_spars": 267, "ball_in_cup": 267, "catch": 267, "balance_spars": 267, "three_pol": 267, "two_pol": 267, "finger": 267, "turn_easi": 267, "turn_hard": 267, "fish": 267, "swim": 267, "hopper": 267, "hop": 267, "run_pure_st": 267, "bring_bal": 267, "bring_peg": 267, "insert_bal": 267, "insert_peg": 267, "point_mass": 267, "reacher": 267, "swimmer": 267, "swimmer6": 267, "swimmer15": 267, "walker": 267, "dog": 267, "trot": 267, "humanoid_cmu": 267, "lqr": 267, "lqr_2_1": 267, "lqr_6_2": 267, "quadrup": 267, "escap": 267, "stacker": 267, "stack_2": 267, "stack_4": 267, "wrapper1": 267, "wrapper2": 267, "obviou": 267, "truth": 267, "env0": 267, "env_transformed_bi": 267, "stanc": 267, "transformeddistribut": 267, "base_dist": 267, "concat": 267, "mofidi": 267, "transformedenviron": 267, "moderet": 267, "computation": 267, "legitim": 267, "incom": 267, "amongst": 267, "wor": 267, "convention": 267, "scope": 267, "markovian": 267, "3288080526": 267, "sometim": 267, "constain": 267, "foo": 267, "bar_": 267, "get_someth": 267, "bar_b2dc80e": 267, "db5e": 267, "aargh": 267, "foo_list": 267, "vec_env": 267, "_dispatch_caller_parallel": 267, "0x7f47b7896af0": 267, "bar_bb48b216": 267, "9017": 267, "bar_bb42d256": 267, "9a9c": 267, "bar_bb46b2c2": 267, "b76c": 267, "parallen": 267, "carefulli": 267, "commonli": 267, "approxim": 267, "particularili": 267, "evolv": 267, "steadi": 267, "approx": 267, "1797": 267, "0829": 267, "2230": 267, "1416": 267, "_extra_st": 267, "observation_ssq": 267, "observation_sum": 267, "1423": 267, "1597": 267, "2084": 267, "dispach": 267, "absor": 267}, "objects": {"torchrl._utils": [[11, 0, 1, "", "implement_for"]], "torchrl.collectors.collectors": [[12, 0, 1, "", "DataCollectorBase"], [13, 0, 1, "", "MultiSyncDataCollector"], [14, 0, 1, "", "MultiaSyncDataCollector"], [15, 0, 1, "", "RandomPolicy"], [16, 0, 1, "", "SyncDataCollector"], [17, 0, 1, "", "aSyncDataCollector"]], "torchrl.collectors.collectors.DataCollectorBase": [[12, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.MultiSyncDataCollector": [[13, 1, 1, "", "load_state_dict"], [13, 1, 1, "", "reset"], [13, 1, 1, "", "set_seed"], [13, 1, 1, "", "shutdown"], [13, 1, 1, "", "state_dict"], [13, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.MultiaSyncDataCollector": [[14, 1, 1, "", "load_state_dict"], [14, 1, 1, "", "reset"], [14, 1, 1, "", "set_seed"], [14, 1, 1, "", "shutdown"], [14, 1, 1, "", "state_dict"], [14, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.SyncDataCollector": [[16, 1, 1, "", "iterator"], [16, 1, 1, "", "load_state_dict"], [16, 1, 1, "", "reset"], [16, 1, 1, "", "rollout"], [16, 1, 1, "", "set_seed"], [16, 1, 1, "", "shutdown"], [16, 1, 1, "", "state_dict"], [16, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.aSyncDataCollector": [[17, 1, 1, "", "load_state_dict"], [17, 1, 1, "", "reset"], [17, 1, 1, "", "set_seed"], [17, 1, 1, "", "shutdown"], [17, 1, 1, "", "state_dict"], [17, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed": [[18, 0, 1, "", "DistributedDataCollector"], [19, 0, 1, "", "DistributedSyncDataCollector"], [20, 0, 1, "", "RPCDataCollector"], [21, 0, 1, "", "RayCollector"], [22, 0, 1, "", "submitit_delayed_launcher"]], "torchrl.collectors.distributed.DistributedDataCollector": [[18, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.DistributedSyncDataCollector": [[19, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.RPCDataCollector": [[20, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.RayCollector": [[21, 1, 1, "", "add_collectors"], [21, 1, 1, "", "load_state_dict"], [21, 1, 1, "", "local_policy"], [21, 1, 1, "", "remote_collectors"], [21, 1, 1, "", "set_seed"], [21, 1, 1, "", "shutdown"], [21, 1, 1, "", "state_dict"], [21, 1, 1, "", "stop_remote_collectors"], [21, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.utils": [[23, 2, 1, "", "split_trajectories"]], "torchrl.data": [[24, 0, 1, "", "BinaryDiscreteTensorSpec"], [25, 0, 1, "", "BoundedTensorSpec"], [26, 0, 1, "", "CompositeSpec"], [27, 0, 1, "", "DiscreteTensorSpec"], [28, 0, 1, "", "MultiDiscreteTensorSpec"], [29, 0, 1, "", "MultiOneHotDiscreteTensorSpec"], [30, 0, 1, "", "MultiStep"], [31, 0, 1, "", "OneHotDiscreteTensorSpec"], [32, 0, 1, "", "PrioritizedReplayBuffer"], [33, 0, 1, "", "ReplayBuffer"], [34, 0, 1, "", "TensorDictPrioritizedReplayBuffer"], [35, 0, 1, "", "TensorDictReplayBuffer"], [36, 0, 1, "", "TensorSpec"], [37, 0, 1, "", "UnboundedContinuousTensorSpec"], [38, 0, 1, "", "UnboundedDiscreteTensorSpec"]], "torchrl.data.BinaryDiscreteTensorSpec": [[24, 1, 1, "", "assert_is_in"], [24, 1, 1, "", "encode"], [24, 1, 1, "", "expand"], [24, 1, 1, "", "implements_for_spec"], [24, 1, 1, "", "index"], [24, 1, 1, "", "is_in"], [24, 1, 1, "", "project"], [24, 1, 1, "", "rand"], [24, 1, 1, "", "squeeze"], [24, 1, 1, "", "to_numpy"], [24, 1, 1, "", "to_one_hot"], [24, 1, 1, "", "to_one_hot_spec"], [24, 1, 1, "", "type_check"], [24, 1, 1, "", "zero"]], "torchrl.data.BoundedTensorSpec": [[25, 1, 1, "", "assert_is_in"], [25, 1, 1, "", "encode"], [25, 1, 1, "", "expand"], [25, 1, 1, "", "implements_for_spec"], [25, 1, 1, "", "index"], [25, 1, 1, "", "is_in"], [25, 1, 1, "", "project"], [25, 1, 1, "", "rand"], [25, 1, 1, "", "squeeze"], [25, 1, 1, "", "to_numpy"], [25, 1, 1, "", "type_check"], [25, 1, 1, "", "zero"]], "torchrl.data.CompositeSpec": [[26, 1, 1, "", "assert_is_in"], [26, 1, 1, "", "encode"], [26, 1, 1, "", "expand"], [26, 1, 1, "", "implements_for_spec"], [26, 1, 1, "", "index"], [26, 1, 1, "", "is_in"], [26, 1, 1, "", "items"], [26, 1, 1, "", "keys"], [26, 1, 1, "", "project"], [26, 1, 1, "", "rand"], [26, 1, 1, "", "squeeze"], [26, 1, 1, "", "to_numpy"], [26, 1, 1, "", "type_check"], [26, 1, 1, "", "values"], [26, 1, 1, "", "zero"]], "torchrl.data.DiscreteTensorSpec": [[27, 1, 1, "", "assert_is_in"], [27, 1, 1, "", "encode"], [27, 1, 1, "", "expand"], [27, 1, 1, "", "implements_for_spec"], [27, 1, 1, "", "index"], [27, 1, 1, "", "is_in"], [27, 1, 1, "", "project"], [27, 1, 1, "", "rand"], [27, 1, 1, "", "squeeze"], [27, 1, 1, "", "to_numpy"], [27, 1, 1, "", "to_one_hot"], [27, 1, 1, "", "to_one_hot_spec"], [27, 1, 1, "", "type_check"], [27, 1, 1, "", "zero"]], "torchrl.data.MultiDiscreteTensorSpec": [[28, 1, 1, "", "assert_is_in"], [28, 1, 1, "", "encode"], [28, 1, 1, "", "expand"], [28, 1, 1, "", "implements_for_spec"], [28, 1, 1, "", "index"], [28, 1, 1, "", "is_in"], [28, 1, 1, "", "project"], [28, 1, 1, "", "rand"], [28, 1, 1, "", "squeeze"], [28, 1, 1, "", "to_numpy"], [28, 1, 1, "", "to_one_hot"], [28, 1, 1, "", "to_one_hot_spec"], [28, 1, 1, "", "type_check"], [28, 1, 1, "", "zero"]], "torchrl.data.MultiOneHotDiscreteTensorSpec": [[29, 1, 1, "", "assert_is_in"], [29, 1, 1, "", "encode"], [29, 1, 1, "", "expand"], [29, 1, 1, "", "implements_for_spec"], [29, 1, 1, "", "index"], [29, 1, 1, "", "is_in"], [29, 1, 1, "", "project"], [29, 1, 1, "", "rand"], [29, 1, 1, "", "squeeze"], [29, 1, 1, "", "to_categorical"], [29, 1, 1, "", "to_categorical_spec"], [29, 1, 1, "", "to_numpy"], [29, 1, 1, "", "type_check"], [29, 1, 1, "", "zero"]], "torchrl.data.MultiStep": [[30, 1, 1, "", "add_module"], [30, 1, 1, "", "apply"], [30, 1, 1, "", "bfloat16"], [30, 1, 1, "", "buffers"], [30, 1, 1, "", "children"], [30, 1, 1, "", "cpu"], [30, 1, 1, "", "cuda"], [30, 1, 1, "", "double"], [30, 1, 1, "", "eval"], [30, 1, 1, "", "extra_repr"], [30, 1, 1, "", "float"], [30, 1, 1, "", "forward"], [30, 1, 1, "", "get_buffer"], [30, 1, 1, "", "get_extra_state"], [30, 1, 1, "", "get_parameter"], [30, 1, 1, "", "get_submodule"], [30, 1, 1, "", "half"], [30, 1, 1, "", "ipu"], [30, 1, 1, "", "load_state_dict"], [30, 1, 1, "", "modules"], [30, 1, 1, "", "named_buffers"], [30, 1, 1, "", "named_children"], [30, 1, 1, "", "named_modules"], [30, 1, 1, "", "named_parameters"], [30, 1, 1, "", "parameters"], [30, 1, 1, "", "register_backward_hook"], [30, 1, 1, "", "register_buffer"], [30, 1, 1, "", "register_forward_hook"], [30, 1, 1, "", "register_forward_pre_hook"], [30, 1, 1, "", "register_full_backward_hook"], [30, 1, 1, "", "register_full_backward_pre_hook"], [30, 1, 1, "", "register_load_state_dict_post_hook"], [30, 1, 1, "", "register_module"], [30, 1, 1, "", "register_parameter"], [30, 1, 1, "", "register_state_dict_pre_hook"], [30, 1, 1, "", "requires_grad_"], [30, 1, 1, "", "set_extra_state"], [30, 1, 1, "", "share_memory"], [30, 1, 1, "", "state_dict"], [30, 1, 1, "", "to"], [30, 1, 1, "", "to_empty"], [30, 1, 1, "", "train"], [30, 1, 1, "", "type"], [30, 1, 1, "", "xpu"], [30, 1, 1, "", "zero_grad"]], "torchrl.data.OneHotDiscreteTensorSpec": [[31, 1, 1, "", "assert_is_in"], [31, 1, 1, "", "encode"], [31, 1, 1, "", "expand"], [31, 1, 1, "", "implements_for_spec"], [31, 1, 1, "", "index"], [31, 1, 1, "", "is_in"], [31, 1, 1, "", "project"], [31, 1, 1, "", "rand"], [31, 1, 1, "", "squeeze"], [31, 1, 1, "", "to_categorical"], [31, 1, 1, "", "to_categorical_spec"], [31, 1, 1, "", "to_numpy"], [31, 1, 1, "", "type_check"], [31, 1, 1, "", "zero"]], "torchrl.data.PrioritizedReplayBuffer": [[32, 1, 1, "", "add"], [32, 1, 1, "", "append_transform"], [32, 1, 1, "", "extend"], [32, 1, 1, "", "insert_transform"], [32, 1, 1, "", "sample"]], "torchrl.data.ReplayBuffer": [[33, 1, 1, "", "add"], [33, 1, 1, "", "append_transform"], [33, 1, 1, "", "extend"], [33, 1, 1, "", "insert_transform"], [33, 1, 1, "", "sample"]], "torchrl.data.TensorDictPrioritizedReplayBuffer": [[34, 1, 1, "", "add"], [34, 1, 1, "", "append_transform"], [34, 1, 1, "", "extend"], [34, 1, 1, "", "insert_transform"], [34, 1, 1, "", "sample"]], "torchrl.data.TensorDictReplayBuffer": [[35, 1, 1, "", "add"], [35, 1, 1, "", "append_transform"], [35, 1, 1, "", "extend"], [35, 1, 1, "", "insert_transform"], [35, 1, 1, "", "sample"]], "torchrl.data.TensorSpec": [[36, 1, 1, "", "assert_is_in"], [36, 1, 1, "", "encode"], [36, 1, 1, "", "expand"], [36, 1, 1, "", "implements_for_spec"], [36, 1, 1, "", "index"], [36, 1, 1, "", "is_in"], [36, 1, 1, "", "project"], [36, 1, 1, "", "rand"], [36, 1, 1, "", "squeeze"], [36, 1, 1, "", "to_numpy"], [36, 1, 1, "", "type_check"], [36, 1, 1, "", "zero"]], "torchrl.data.UnboundedContinuousTensorSpec": [[37, 1, 1, "", "assert_is_in"], [37, 1, 1, "", "encode"], [37, 1, 1, "", "expand"], [37, 1, 1, "", "implements_for_spec"], [37, 1, 1, "", "index"], [37, 1, 1, "", "is_in"], [37, 1, 1, "", "project"], [37, 1, 1, "", "rand"], [37, 1, 1, "", "squeeze"], [37, 1, 1, "", "to_numpy"], [37, 1, 1, "", "type_check"], [37, 1, 1, "", "zero"]], "torchrl.data.UnboundedDiscreteTensorSpec": [[38, 1, 1, "", "assert_is_in"], [38, 1, 1, "", "encode"], [38, 1, 1, "", "expand"], [38, 1, 1, "", "implements_for_spec"], [38, 1, 1, "", "index"], [38, 1, 1, "", "is_in"], [38, 1, 1, "", "project"], [38, 1, 1, "", "rand"], [38, 1, 1, "", "squeeze"], [38, 1, 1, "", "to_numpy"], [38, 1, 1, "", "type_check"], [38, 1, 1, "", "zero"]], "torchrl.data.datasets": [[39, 0, 1, "", "D4RLExperienceReplay"], [40, 0, 1, "", "OpenMLExperienceReplay"]], "torchrl.data.datasets.D4RLExperienceReplay": [[39, 1, 1, "", "add"], [39, 1, 1, "", "append_transform"], [39, 1, 1, "", "extend"], [39, 1, 1, "", "insert_transform"], [39, 1, 1, "", "sample"]], "torchrl.data.datasets.OpenMLExperienceReplay": [[40, 1, 1, "", "add"], [40, 1, 1, "", "append_transform"], [40, 1, 1, "", "extend"], [40, 1, 1, "", "insert_transform"], [40, 1, 1, "", "sample"]], "torchrl.data.replay_buffers": [[41, 0, 1, "", "LazyMemmapStorage"], [42, 0, 1, "", "LazyTensorStorage"], [43, 0, 1, "", "ListStorage"], [44, 0, 1, "", "PrioritizedSampler"], [45, 0, 1, "", "RandomSampler"], [46, 0, 1, "", "RoundRobinWriter"], [47, 0, 1, "", "Sampler"], [48, 0, 1, "", "SamplerWithoutReplacement"], [49, 0, 1, "", "Storage"], [50, 0, 1, "", "Writer"]], "torchrl.data.replay_buffers.LazyMemmapStorage": [[41, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.LazyTensorStorage": [[42, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.ListStorage": [[43, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.PrioritizedSampler": [[44, 1, 1, "", "update_priority"]], "torchrl.data.replay_buffers.RoundRobinWriter": [[46, 1, 1, "", "add"], [46, 1, 1, "", "extend"]], "torchrl.data.replay_buffers.Storage": [[49, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.Writer": [[50, 1, 1, "", "add"], [50, 1, 1, "", "extend"]], "torchrl.envs": [[51, 0, 1, "", "EnvBase"], [52, 0, 1, "", "EnvCreator"], [53, 0, 1, "", "EnvMetaData"], [54, 0, 1, "", "GymLikeEnv"], [55, 2, 1, "", "ModelBasedEnvBase"], [56, 0, 1, "", "MultiThreadedEnv"], [57, 0, 1, "", "ParallelEnv"], [58, 0, 1, "", "SerialEnv"], [55, 1, 1, "", "rand_step"], [55, 1, 1, "", "reset"], [55, 1, 1, "", "rollout"], [55, 1, 1, "", "set_seed"], [55, 1, 1, "", "step"]], "torchrl.envs.EnvBase": [[51, 1, 1, "", "add_module"], [51, 1, 1, "", "apply"], [51, 3, 1, "", "batch_locked"], [51, 1, 1, "", "bfloat16"], [51, 1, 1, "", "buffers"], [51, 1, 1, "", "children"], [51, 1, 1, "", "cpu"], [51, 1, 1, "", "cuda"], [51, 1, 1, "", "double"], [51, 1, 1, "", "eval"], [51, 1, 1, "", "extra_repr"], [51, 1, 1, "", "fake_tensordict"], [51, 1, 1, "", "float"], [51, 1, 1, "", "forward"], [51, 1, 1, "", "get_buffer"], [51, 1, 1, "", "get_extra_state"], [51, 1, 1, "", "get_parameter"], [51, 1, 1, "", "get_submodule"], [51, 1, 1, "", "half"], [51, 1, 1, "", "ipu"], [51, 1, 1, "", "load_state_dict"], [51, 1, 1, "", "modules"], [51, 1, 1, "", "named_buffers"], [51, 1, 1, "", "named_children"], [51, 1, 1, "", "named_modules"], [51, 1, 1, "", "named_parameters"], [51, 1, 1, "", "parameters"], [51, 1, 1, "", "rand_action"], [51, 1, 1, "id0", "rand_step"], [51, 1, 1, "", "register_backward_hook"], [51, 1, 1, "", "register_buffer"], [51, 1, 1, "", "register_forward_hook"], [51, 1, 1, "", "register_forward_pre_hook"], [51, 1, 1, "", "register_full_backward_hook"], [51, 1, 1, "", "register_full_backward_pre_hook"], [51, 1, 1, "", "register_load_state_dict_post_hook"], [51, 1, 1, "", "register_module"], [51, 1, 1, "", "register_parameter"], [51, 1, 1, "", "register_state_dict_pre_hook"], [51, 1, 1, "", "requires_grad_"], [51, 1, 1, "id1", "reset"], [51, 1, 1, "id2", "rollout"], [51, 1, 1, "", "set_extra_state"], [51, 1, 1, "id3", "set_seed"], [51, 1, 1, "", "share_memory"], [51, 3, 1, "", "specs"], [51, 1, 1, "", "state_dict"], [51, 1, 1, "id4", "step"], [51, 1, 1, "", "to"], [51, 1, 1, "", "to_empty"], [51, 1, 1, "", "train"], [51, 1, 1, "", "type"], [51, 1, 1, "", "xpu"], [51, 1, 1, "", "zero_grad"]], "torchrl.envs.GymLikeEnv": [[54, 1, 1, "", "add_module"], [54, 1, 1, "", "apply"], [54, 3, 1, "", "batch_locked"], [54, 1, 1, "", "bfloat16"], [54, 1, 1, "", "buffers"], [54, 1, 1, "", "children"], [54, 1, 1, "", "close"], [54, 1, 1, "", "cpu"], [54, 1, 1, "", "cuda"], [54, 1, 1, "", "double"], [54, 1, 1, "", "eval"], [54, 1, 1, "", "extra_repr"], [54, 1, 1, "", "fake_tensordict"], [54, 1, 1, "", "float"], [54, 1, 1, "", "forward"], [54, 1, 1, "", "get_buffer"], [54, 1, 1, "", "get_extra_state"], [54, 1, 1, "", "get_parameter"], [54, 1, 1, "", "get_submodule"], [54, 1, 1, "", "half"], [54, 1, 1, "", "ipu"], [54, 1, 1, "", "load_state_dict"], [54, 1, 1, "", "modules"], [54, 1, 1, "", "named_buffers"], [54, 1, 1, "", "named_children"], [54, 1, 1, "", "named_modules"], [54, 1, 1, "", "named_parameters"], [54, 1, 1, "", "parameters"], [54, 1, 1, "", "rand_action"], [54, 1, 1, "", "rand_step"], [54, 1, 1, "", "read_action"], [54, 1, 1, "", "read_done"], [54, 1, 1, "", "read_obs"], [54, 1, 1, "", "read_reward"], [54, 1, 1, "", "register_backward_hook"], [54, 1, 1, "", "register_buffer"], [54, 1, 1, "", "register_forward_hook"], [54, 1, 1, "", "register_forward_pre_hook"], [54, 1, 1, "", "register_full_backward_hook"], [54, 1, 1, "", "register_full_backward_pre_hook"], [54, 1, 1, "", "register_load_state_dict_post_hook"], [54, 1, 1, "", "register_module"], [54, 1, 1, "", "register_parameter"], [54, 1, 1, "", "register_state_dict_pre_hook"], [54, 1, 1, "", "requires_grad_"], [54, 1, 1, "", "reset"], [54, 1, 1, "", "rollout"], [54, 1, 1, "", "set_extra_state"], [54, 1, 1, "", "set_info_dict_reader"], [54, 1, 1, "", "set_seed"], [54, 1, 1, "", "share_memory"], [54, 3, 1, "", "specs"], [54, 1, 1, "", "state_dict"], [54, 1, 1, "", "step"], [54, 1, 1, "", "to"], [54, 1, 1, "", "to_empty"], [54, 1, 1, "", "train"], [54, 1, 1, "", "type"], [54, 1, 1, "", "xpu"], [54, 1, 1, "", "zero_grad"]], "torchrl.envs.MultiThreadedEnv": [[56, 1, 1, "", "add_module"], [56, 1, 1, "", "apply"], [56, 3, 1, "", "batch_locked"], [56, 1, 1, "", "bfloat16"], [56, 1, 1, "", "buffers"], [56, 1, 1, "", "children"], [56, 1, 1, "", "close"], [56, 1, 1, "", "cpu"], [56, 1, 1, "", "cuda"], [56, 1, 1, "", "double"], [56, 1, 1, "", "eval"], [56, 1, 1, "", "extra_repr"], [56, 1, 1, "", "fake_tensordict"], [56, 1, 1, "", "float"], [56, 1, 1, "", "forward"], [56, 1, 1, "", "get_buffer"], [56, 1, 1, "", "get_extra_state"], [56, 1, 1, "", "get_parameter"], [56, 1, 1, "", "get_submodule"], [56, 1, 1, "", "half"], [56, 1, 1, "", "ipu"], [56, 1, 1, "", "load_state_dict"], [56, 1, 1, "", "modules"], [56, 1, 1, "", "named_buffers"], [56, 1, 1, "", "named_children"], [56, 1, 1, "", "named_modules"], [56, 1, 1, "", "named_parameters"], [56, 1, 1, "", "parameters"], [56, 1, 1, "", "rand_action"], [56, 1, 1, "", "rand_step"], [56, 1, 1, "", "register_backward_hook"], [56, 1, 1, "", "register_buffer"], [56, 1, 1, "", "register_forward_hook"], [56, 1, 1, "", "register_forward_pre_hook"], [56, 1, 1, "", "register_full_backward_hook"], [56, 1, 1, "", "register_full_backward_pre_hook"], [56, 1, 1, "", "register_load_state_dict_post_hook"], [56, 1, 1, "", "register_module"], [56, 1, 1, "", "register_parameter"], [56, 1, 1, "", "register_state_dict_pre_hook"], [56, 1, 1, "", "requires_grad_"], [56, 1, 1, "", "reset"], [56, 1, 1, "", "rollout"], [56, 1, 1, "", "set_extra_state"], [56, 1, 1, "", "set_seed"], [56, 1, 1, "", "share_memory"], [56, 3, 1, "", "specs"], [56, 1, 1, "", "state_dict"], [56, 1, 1, "", "step"], [56, 1, 1, "", "to"], [56, 1, 1, "", "to_empty"], [56, 1, 1, "", "train"], [56, 1, 1, "", "type"], [56, 1, 1, "", "xpu"], [56, 1, 1, "", "zero_grad"]], "torchrl.envs.ParallelEnv": [[57, 1, 1, "", "add_module"], [57, 1, 1, "", "apply"], [57, 3, 1, "", "batch_locked"], [57, 1, 1, "", "bfloat16"], [57, 1, 1, "", "buffers"], [57, 1, 1, "", "children"], [57, 1, 1, "", "cpu"], [57, 1, 1, "", "cuda"], [57, 1, 1, "", "double"], [57, 1, 1, "", "eval"], [57, 1, 1, "", "extra_repr"], [57, 1, 1, "", "fake_tensordict"], [57, 1, 1, "", "float"], [57, 1, 1, "", "forward"], [57, 1, 1, "", "get_buffer"], [57, 1, 1, "", "get_extra_state"], [57, 1, 1, "", "get_parameter"], [57, 1, 1, "", "get_submodule"], [57, 1, 1, "", "half"], [57, 1, 1, "", "ipu"], [57, 1, 1, "", "load_state_dict"], [57, 1, 1, "", "modules"], [57, 1, 1, "", "named_buffers"], [57, 1, 1, "", "named_children"], [57, 1, 1, "", "named_modules"], [57, 1, 1, "", "named_parameters"], [57, 1, 1, "", "parameters"], [57, 1, 1, "", "rand_action"], [57, 1, 1, "", "rand_step"], [57, 1, 1, "", "register_backward_hook"], [57, 1, 1, "", "register_buffer"], [57, 1, 1, "", "register_forward_hook"], [57, 1, 1, "", "register_forward_pre_hook"], [57, 1, 1, "", "register_full_backward_hook"], [57, 1, 1, "", "register_full_backward_pre_hook"], [57, 1, 1, "", "register_load_state_dict_post_hook"], [57, 1, 1, "", "register_module"], [57, 1, 1, "", "register_parameter"], [57, 1, 1, "", "register_state_dict_pre_hook"], [57, 1, 1, "", "requires_grad_"], [57, 1, 1, "", "reset"], [57, 1, 1, "", "rollout"], [57, 1, 1, "", "set_extra_state"], [57, 1, 1, "", "set_seed"], [57, 1, 1, "", "share_memory"], [57, 3, 1, "", "specs"], [57, 1, 1, "", "state_dict"], [57, 1, 1, "", "step"], [57, 1, 1, "", "to"], [57, 1, 1, "", "to_empty"], [57, 1, 1, "", "train"], [57, 1, 1, "", "type"], [57, 1, 1, "", "update_kwargs"], [57, 1, 1, "", "xpu"], [57, 1, 1, "", "zero_grad"]], "torchrl.envs.SerialEnv": [[58, 1, 1, "", "add_module"], [58, 1, 1, "", "apply"], [58, 3, 1, "", "batch_locked"], [58, 1, 1, "", "bfloat16"], [58, 1, 1, "", "buffers"], [58, 1, 1, "", "children"], [58, 1, 1, "", "cpu"], [58, 1, 1, "", "cuda"], [58, 1, 1, "", "double"], [58, 1, 1, "", "eval"], [58, 1, 1, "", "extra_repr"], [58, 1, 1, "", "fake_tensordict"], [58, 1, 1, "", "float"], [58, 1, 1, "", "forward"], [58, 1, 1, "", "get_buffer"], [58, 1, 1, "", "get_extra_state"], [58, 1, 1, "", "get_parameter"], [58, 1, 1, "", "get_submodule"], [58, 1, 1, "", "half"], [58, 1, 1, "", "ipu"], [58, 1, 1, "", "load_state_dict"], [58, 1, 1, "", "modules"], [58, 1, 1, "", "named_buffers"], [58, 1, 1, "", "named_children"], [58, 1, 1, "", "named_modules"], [58, 1, 1, "", "named_parameters"], [58, 1, 1, "", "parameters"], [58, 1, 1, "", "rand_action"], [58, 1, 1, "", "rand_step"], [58, 1, 1, "", "register_backward_hook"], [58, 1, 1, "", "register_buffer"], [58, 1, 1, "", "register_forward_hook"], [58, 1, 1, "", "register_forward_pre_hook"], [58, 1, 1, "", "register_full_backward_hook"], [58, 1, 1, "", "register_full_backward_pre_hook"], [58, 1, 1, "", "register_load_state_dict_post_hook"], [58, 1, 1, "", "register_module"], [58, 1, 1, "", "register_parameter"], [58, 1, 1, "", "register_state_dict_pre_hook"], [58, 1, 1, "", "requires_grad_"], [58, 1, 1, "", "reset"], [58, 1, 1, "", "rollout"], [58, 1, 1, "", "set_extra_state"], [58, 1, 1, "", "set_seed"], [58, 1, 1, "", "share_memory"], [58, 3, 1, "", "specs"], [58, 1, 1, "", "state_dict"], [58, 1, 1, "", "step"], [58, 1, 1, "", "to"], [58, 1, 1, "", "to_empty"], [58, 1, 1, "", "train"], [58, 1, 1, "", "type"], [58, 1, 1, "", "update_kwargs"], [58, 1, 1, "", "xpu"], [58, 1, 1, "", "zero_grad"]], "torchrl.envs.libs.brax": [[59, 2, 1, "", "BraxEnv"], [60, 2, 1, "", "BraxWrapper"]], "torchrl.envs.libs.dm_control": [[61, 2, 1, "", "DMControlEnv"], [62, 2, 1, "", "DMControlWrapper"]], "torchrl.envs.libs.gym": [[63, 2, 1, "", "GymEnv"], [64, 2, 1, "", "GymWrapper"]], "torchrl.envs.libs.habitat": [[65, 2, 1, "", "HabitatEnv"]], "torchrl.envs.libs.jumanji": [[66, 2, 1, "", "JumanjiEnv"], [67, 2, 1, "", "JumanjiWrapper"]], "torchrl.envs.libs.openml": [[68, 2, 1, "", "OpenMLEnv"]], "torchrl.envs.libs.vmas": [[69, 2, 1, "", "VmasEnv"], [70, 2, 1, "", "VmasWrapper"]], "torchrl.envs.model_based.dreamer": [[71, 2, 1, "", "DreamerEnv"]], "torchrl.envs.transforms": [[72, 0, 1, "", "BinarizeReward"], [73, 0, 1, "", "CatFrames"], [74, 0, 1, "", "CatTensors"], [75, 0, 1, "", "CenterCrop"], [76, 0, 1, "", "Compose"], [77, 0, 1, "", "DiscreteActionProjection"], [78, 0, 1, "", "DoubleToFloat"], [79, 0, 1, "", "ExcludeTransform"], [80, 0, 1, "", "FiniteTensorDictCheck"], [81, 0, 1, "", "FlattenObservation"], [82, 0, 1, "", "FrameSkipTransform"], [83, 0, 1, "", "GrayScale"], [84, 0, 1, "", "InitTracker"], [85, 0, 1, "", "NoopResetEnv"], [86, 0, 1, "", "ObservationNorm"], [87, 0, 1, "", "ObservationTransform"], [88, 0, 1, "", "PinMemoryTransform"], [89, 0, 1, "", "R3MTransform"], [90, 0, 1, "", "RandomCropTensorDict"], [91, 0, 1, "", "RenameTransform"], [92, 0, 1, "", "Resize"], [93, 0, 1, "", "RewardClipping"], [94, 0, 1, "", "RewardScaling"], [95, 0, 1, "", "RewardSum"], [96, 0, 1, "", "SelectTransform"], [97, 0, 1, "", "SqueezeTransform"], [98, 0, 1, "", "StepCounter"], [99, 0, 1, "", "TensorDictPrimer"], [100, 0, 1, "", "TimeMaxPool"], [101, 0, 1, "", "ToTensorImage"], [102, 0, 1, "", "Transform"], [103, 0, 1, "", "TransformedEnv"], [104, 0, 1, "", "UnsqueezeTransform"], [105, 0, 1, "", "VIPRewardTransform"], [106, 0, 1, "", "VIPTransform"], [107, 0, 1, "", "VecNorm"], [108, 0, 1, "", "gSDENoise"]], "torchrl.envs.transforms.BinarizeReward": [[72, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.CatFrames": [[73, 1, 1, "", "forward"], [73, 1, 1, "", "reset"], [73, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CatTensors": [[74, 1, 1, "", "forward"], [74, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CenterCrop": [[75, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Compose": [[76, 1, 1, "", "forward"], [76, 1, 1, "", "reset"], [76, 1, 1, "", "to"], [76, 1, 1, "", "transform_input_spec"], [76, 1, 1, "", "transform_observation_spec"], [76, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.DiscreteActionProjection": [[77, 1, 1, "", "transform_input_spec"]], "torchrl.envs.transforms.DoubleToFloat": [[78, 1, 1, "", "transform_input_spec"], [78, 1, 1, "", "transform_observation_spec"], [78, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.ExcludeTransform": [[79, 1, 1, "", "forward"], [79, 1, 1, "", "reset"], [79, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FiniteTensorDictCheck": [[80, 1, 1, "", "forward"]], "torchrl.envs.transforms.FlattenObservation": [[81, 1, 1, "", "forward"], [81, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FrameSkipTransform": [[82, 1, 1, "", "forward"]], "torchrl.envs.transforms.GrayScale": [[83, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.InitTracker": [[84, 1, 1, "", "forward"], [84, 1, 1, "", "reset"], [84, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.NoopResetEnv": [[85, 1, 1, "", "reset"]], "torchrl.envs.transforms.ObservationNorm": [[86, 1, 1, "", "init_stats"], [86, 1, 1, "", "transform_input_spec"], [86, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.PinMemoryTransform": [[88, 1, 1, "", "forward"]], "torchrl.envs.transforms.R3MTransform": [[89, 1, 1, "", "to"]], "torchrl.envs.transforms.RandomCropTensorDict": [[90, 1, 1, "", "forward"]], "torchrl.envs.transforms.RenameTransform": [[91, 1, 1, "", "forward"], [91, 1, 1, "", "transform_input_spec"], [91, 1, 1, "", "transform_output_spec"]], "torchrl.envs.transforms.Resize": [[92, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.RewardClipping": [[93, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardScaling": [[94, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardSum": [[95, 1, 1, "", "forward"], [95, 1, 1, "", "reset"], [95, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.SelectTransform": [[96, 1, 1, "", "forward"], [96, 1, 1, "", "reset"], [96, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.StepCounter": [[98, 1, 1, "", "forward"], [98, 1, 1, "", "reset"], [98, 1, 1, "", "transform_input_spec"], [98, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TensorDictPrimer": [[99, 1, 1, "", "forward"], [99, 1, 1, "", "reset"], [99, 1, 1, "", "to"], [99, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TimeMaxPool": [[100, 1, 1, "", "forward"], [100, 1, 1, "", "reset"], [100, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.ToTensorImage": [[101, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Transform": [[102, 1, 1, "", "forward"], [102, 1, 1, "", "reset"], [102, 1, 1, "", "transform_done_spec"], [102, 1, 1, "", "transform_input_spec"], [102, 1, 1, "", "transform_observation_spec"], [102, 1, 1, "", "transform_output_spec"], [102, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.TransformedEnv": [[103, 3, 1, "", "action_spec"], [103, 3, 1, "", "batch_locked"], [103, 3, 1, "", "done_spec"], [103, 1, 1, "", "eval"], [103, 3, 1, "", "input_spec"], [103, 1, 1, "", "load_state_dict"], [103, 3, 1, "", "observation_spec"], [103, 3, 1, "", "output_spec"], [103, 3, 1, "", "reward_spec"], [103, 1, 1, "", "set_seed"], [103, 1, 1, "", "state_dict"], [103, 1, 1, "", "to"], [103, 1, 1, "", "train"]], "torchrl.envs.transforms.UnsqueezeTransform": [[104, 1, 1, "", "transform_input_spec"], [104, 1, 1, "", "transform_observation_spec"], [104, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.VIPRewardTransform": [[105, 1, 1, "", "forward"], [105, 1, 1, "", "reset"]], "torchrl.envs.transforms.VIPTransform": [[106, 1, 1, "", "to"]], "torchrl.envs.transforms.VecNorm": [[107, 1, 1, "", "build_td_for_shared_vecnorm"], [107, 1, 1, "", "forward"], [107, 1, 1, "", "get_extra_state"], [107, 1, 1, "", "set_extra_state"], [107, 1, 1, "", "to_observation_norm"]], "torchrl.envs.utils": [[109, 2, 1, "", "check_env_specs"], [110, 2, 1, "", "exploration_mode"], [111, 2, 1, "", "exploration_type"], [112, 2, 1, "", "get_available_libraries"], [113, 2, 1, "", "make_composite_from_td"], [114, 2, 1, "", "set_exploration_mode"], [115, 2, 1, "", "set_exploration_type"], [116, 2, 1, "", "step_mdp"]], "torchrl.modules": [[117, 0, 1, "", "CEMPlanner"], [118, 0, 1, "", "ConvNet"], [119, 0, 1, "", "DdpgCnnActor"], [120, 0, 1, "", "DdpgCnnQNet"], [121, 0, 1, "", "DdpgMlpActor"], [122, 0, 1, "", "DdpgMlpQNet"], [123, 0, 1, "", "Delta"], [124, 0, 1, "", "DistributionalDQNnet"], [125, 0, 1, "", "DistributionalQValueHook"], [126, 0, 1, "", "DreamerActor"], [127, 0, 1, "", "DuelingCnnDQNet"], [128, 0, 1, "", "IndependentNormal"], [129, 0, 1, "", "LSTMNet"], [130, 0, 1, "", "MLP"], [131, 0, 1, "", "MPCPlannerBase"], [132, 0, 1, "", "MPPIPlanner"], [133, 0, 1, "", "NoisyLazyLinear"], [134, 0, 1, "", "NoisyLinear"], [135, 0, 1, "", "NormalParamWrapper"], [136, 0, 1, "", "ObsDecoder"], [137, 0, 1, "", "ObsEncoder"], [138, 0, 1, "", "OneHotCategorical"], [139, 0, 1, "", "QValueHook"], [140, 0, 1, "", "RSSMPosterior"], [141, 0, 1, "", "RSSMPrior"], [142, 0, 1, "", "TanhDelta"], [143, 0, 1, "", "TanhNormal"], [144, 0, 1, "", "TruncatedNormal"], [145, 0, 1, "", "reset_noise"]], "torchrl.modules.CEMPlanner": [[117, 1, 1, "", "planning"]], "torchrl.modules.ConvNet": [[118, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnActor": [[119, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnQNet": [[120, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpActor": [[121, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpQNet": [[122, 1, 1, "", "forward"]], "torchrl.modules.Delta": [[123, 1, 1, "", "log_prob"], [123, 3, 1, "", "mean"], [123, 3, 1, "", "mode"], [123, 1, 1, "", "rsample"], [123, 1, 1, "", "sample"]], "torchrl.modules.DistributionalDQNnet": [[124, 1, 1, "", "forward"]], "torchrl.modules.DreamerActor": [[126, 1, 1, "", "forward"]], "torchrl.modules.DuelingCnnDQNet": [[127, 1, 1, "", "forward"]], "torchrl.modules.IndependentNormal": [[128, 3, 1, "", "mode"]], "torchrl.modules.LSTMNet": [[129, 1, 1, "", "forward"]], "torchrl.modules.MLP": [[130, 1, 1, "", "forward"]], "torchrl.modules.MPCPlannerBase": [[131, 1, 1, "", "forward"], [131, 1, 1, "", "planning"]], "torchrl.modules.MPPIPlanner": [[132, 1, 1, "", "planning"]], "torchrl.modules.NoisyLazyLinear": [[133, 1, 1, "", "initialize_parameters"]], "torchrl.modules.NormalParamWrapper": [[135, 1, 1, "", "forward"]], "torchrl.modules.ObsDecoder": [[136, 1, 1, "", "forward"]], "torchrl.modules.ObsEncoder": [[137, 1, 1, "", "forward"]], "torchrl.modules.OneHotCategorical": [[138, 1, 1, "", "log_prob"], [138, 3, 1, "", "mode"], [138, 1, 1, "", "rsample"], [138, 1, 1, "", "sample"]], "torchrl.modules.RSSMPosterior": [[140, 1, 1, "", "forward"]], "torchrl.modules.RSSMPrior": [[141, 1, 1, "", "forward"]], "torchrl.modules.TanhDelta": [[142, 3, 1, "", "mean"], [142, 3, 1, "", "mode"]], "torchrl.modules.TanhNormal": [[143, 3, 1, "", "mode"]], "torchrl.modules.TruncatedNormal": [[144, 1, 1, "", "log_prob"], [144, 3, 1, "", "mode"]], "torchrl.modules.tensordict_module": [[146, 0, 1, "", "Actor"], [147, 0, 1, "", "ActorCriticOperator"], [148, 0, 1, "", "ActorCriticWrapper"], [149, 0, 1, "", "ActorValueOperator"], [150, 0, 1, "", "AdditiveGaussianWrapper"], [151, 0, 1, "", "DistributionalQValueActor"], [152, 0, 1, "", "EGreedyWrapper"], [153, 0, 1, "", "OrnsteinUhlenbeckProcessWrapper"], [154, 0, 1, "", "ProbabilisticActor"], [155, 0, 1, "", "QValueActor"], [156, 0, 1, "", "SafeModule"], [157, 0, 1, "", "SafeProbabilisticModule"], [158, 0, 1, "", "SafeProbabilisticTensorDictSequential"], [159, 0, 1, "", "SafeSequential"], [160, 0, 1, "", "ValueOperator"], [161, 0, 1, "", "WorldModelWrapper"]], "torchrl.modules.tensordict_module.ActorCriticOperator": [[147, 1, 1, "", "get_critic_operator"], [147, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorCriticWrapper": [[148, 1, 1, "", "get_policy_operator"], [148, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorValueOperator": [[149, 1, 1, "", "get_policy_operator"], [149, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.AdditiveGaussianWrapper": [[150, 1, 1, "", "forward"], [150, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.EGreedyWrapper": [[152, 1, 1, "", "forward"], [152, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper": [[153, 1, 1, "", "forward"], [153, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.SafeModule": [[156, 1, 1, "", "random"], [156, 1, 1, "", "random_sample"], [156, 1, 1, "", "to"]], "torchrl.modules.tensordict_module.SafeProbabilisticModule": [[157, 1, 1, "", "random"], [157, 1, 1, "", "random_sample"]], "torchrl.modules.tensordict_module.WorldModelWrapper": [[161, 1, 1, "", "get_reward_operator"], [161, 1, 1, "", "get_transition_model_operator"]], "torchrl.modules.utils": [[162, 0, 1, "", "biased_softplus"], [163, 0, 1, "", "inv_softplus"], [164, 0, 1, "", "mappings"]], "torchrl.modules.utils.biased_softplus": [[162, 1, 1, "", "forward"]], "torchrl.objectives": [[165, 0, 1, "", "A2CLoss"], [166, 0, 1, "", "ClipPPOLoss"], [167, 0, 1, "", "DDPGLoss"], [168, 0, 1, "", "DQNLoss"], [169, 0, 1, "", "DiscreteSACLoss"], [170, 0, 1, "", "DistributionalDQNLoss"], [171, 0, 1, "", "DreamerActorLoss"], [172, 0, 1, "", "DreamerModelLoss"], [173, 0, 1, "", "DreamerValueLoss"], [174, 0, 1, "", "HardUpdate"], [175, 0, 1, "", "IQLLoss"], [176, 0, 1, "", "KLPENPPOLoss"], [177, 0, 1, "", "LossModule"], [178, 0, 1, "", "PPOLoss"], [179, 0, 1, "", "REDQLoss"], [180, 0, 1, "", "ReinforceLoss"], [181, 0, 1, "", "SACLoss"], [182, 0, 1, "", "SoftUpdate"], [183, 0, 1, "", "TD3Loss"], [184, 0, 1, "", "ValueEstimators"], [185, 0, 1, "", "default_value_kwargs"], [186, 0, 1, "", "distance_loss"], [187, 0, 1, "", "hold_out_net"], [188, 0, 1, "", "hold_out_params"], [189, 0, 1, "", "next_state_value"]], "torchrl.objectives.A2CLoss": [[165, 1, 1, "", "forward"], [165, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.ClipPPOLoss": [[166, 1, 1, "", "forward"]], "torchrl.objectives.DDPGLoss": [[167, 1, 1, "", "forward"], [167, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DQNLoss": [[168, 1, 1, "", "forward"], [168, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DiscreteSACLoss": [[169, 1, 1, "", "forward"], [169, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DistributionalDQNLoss": [[170, 1, 1, "", "forward"], [170, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DreamerActorLoss": [[171, 1, 1, "", "forward"], [171, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.DreamerModelLoss": [[172, 1, 1, "", "forward"]], "torchrl.objectives.DreamerValueLoss": [[173, 1, 1, "", "forward"]], "torchrl.objectives.IQLLoss": [[175, 1, 1, "", "forward"], [175, 1, 1, "", "loss_value_diff"], [175, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.KLPENPPOLoss": [[176, 1, 1, "", "forward"]], "torchrl.objectives.LossModule": [[177, 1, 1, "", "convert_to_functional"], [177, 1, 1, "", "cpu"], [177, 1, 1, "", "cuda"], [177, 1, 1, "", "double"], [177, 1, 1, "", "float"], [177, 1, 1, "", "forward"], [177, 1, 1, "", "half"], [177, 1, 1, "", "make_value_estimator"], [177, 1, 1, "", "named_parameters"], [177, 1, 1, "", "parameters"], [177, 1, 1, "", "register_buffer"], [177, 1, 1, "", "to"], [177, 3, 1, "", "value_estimator"]], "torchrl.objectives.PPOLoss": [[178, 1, 1, "", "forward"], [178, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.REDQLoss": [[179, 1, 1, "", "forward"], [179, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.ReinforceLoss": [[180, 1, 1, "", "forward"], [180, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.SACLoss": [[181, 1, 1, "", "forward"], [181, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.TD3Loss": [[183, 1, 1, "", "forward"], [183, 1, 1, "", "make_value_estimator"]], "torchrl.objectives.value": [[190, 0, 1, "", "GAE"], [191, 0, 1, "", "TD0Estimator"], [192, 0, 1, "", "TD1Estimator"], [193, 0, 1, "", "TDLambdaEstimator"], [194, 0, 1, "", "ValueEstimatorBase"]], "torchrl.objectives.value.GAE": [[190, 1, 1, "", "forward"], [190, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.TD0Estimator": [[191, 1, 1, "", "forward"], [191, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.TD1Estimator": [[192, 1, 1, "", "forward"], [192, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.TDLambdaEstimator": [[193, 1, 1, "", "forward"], [193, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.ValueEstimatorBase": [[194, 1, 1, "", "forward"], [194, 1, 1, "", "value_estimate"]], "torchrl.objectives.value.functional": [[195, 0, 1, "", "generalized_advantage_estimate"], [196, 0, 1, "", "td0_advantage_estimate"], [197, 0, 1, "", "td0_return_estimate"], [198, 0, 1, "", "td1_advantage_estimate"], [199, 0, 1, "", "td1_return_estimate"], [200, 0, 1, "", "td_lambda_advantage_estimate"], [201, 0, 1, "", "td_lambda_return_estimate"], [202, 0, 1, "", "vec_generalized_advantage_estimate"], [203, 0, 1, "", "vec_td1_advantage_estimate"], [204, 0, 1, "", "vec_td1_return_estimate"], [205, 0, 1, "", "vec_td_lambda_advantage_estimate"], [206, 0, 1, "", "vec_td_lambda_return_estimate"]], "torchrl.record": [[207, 2, 1, "", "TensorDictRecorder"], [208, 2, 1, "", "VideoRecorder"]], "torchrl.record.loggers": [[209, 2, 1, "", "Logger"], [211, 2, 1, "", "generate_exp_name"], [212, 2, 1, "", "get_logger"]], "torchrl.record.loggers.csv": [[210, 2, 1, "", "CSVLogger"]], "torchrl.record.loggers.mlflow": [[213, 2, 1, "", "MLFlowLogger"]], "torchrl.record.loggers.tensorboard": [[214, 2, 1, "", "TensorboardLogger"]], "torchrl.record.loggers.wandb": [[215, 2, 1, "", "WandbLogger"]], "torchrl.trainers": [[216, 0, 1, "", "BatchSubSampler"], [217, 0, 1, "", "ClearCudaCache"], [218, 0, 1, "", "CountFramesLog"], [219, 0, 1, "", "LogReward"], [220, 0, 1, "", "OptimizerHook"], [221, 0, 1, "", "Recorder"], [222, 0, 1, "", "ReplayBufferTrainer"], [223, 0, 1, "", "RewardNormalizer"], [224, 0, 1, "", "SelectKeys"], [225, 0, 1, "", "Trainer"], [226, 0, 1, "", "TrainerHookBase"], [227, 0, 1, "", "UpdateWeights"]], "torchrl.trainers.BatchSubSampler": [[216, 1, 1, "", "register"]], "torchrl.trainers.ClearCudaCache": [[217, 1, 1, "", "register"]], "torchrl.trainers.CountFramesLog": [[218, 1, 1, "", "register"]], "torchrl.trainers.LogReward": [[219, 1, 1, "", "register"]], "torchrl.trainers.OptimizerHook": [[220, 1, 1, "", "register"]], "torchrl.trainers.Recorder": [[221, 1, 1, "", "register"]], "torchrl.trainers.ReplayBufferTrainer": [[222, 1, 1, "", "register"]], "torchrl.trainers.RewardNormalizer": [[223, 1, 1, "", "register"]], "torchrl.trainers.SelectKeys": [[224, 1, 1, "", "register"]], "torchrl.trainers.TrainerHookBase": [[226, 1, 1, "", "register"]], "torchrl.trainers.UpdateWeights": [[227, 1, 1, "", "register"]], "torchrl.trainers.helpers": [[228, 2, 1, "", "correct_for_frame_skip"], [229, 2, 1, "", "get_stats_random_rollout"], [230, 2, 1, "", "make_a2c_loss"], [231, 2, 1, "", "make_a2c_model"], [232, 2, 1, "", "make_collector_offpolicy"], [233, 2, 1, "", "make_collector_onpolicy"], [234, 2, 1, "", "make_ddpg_actor"], [235, 2, 1, "", "make_ddpg_loss"], [236, 2, 1, "", "make_dqn_actor"], [237, 2, 1, "", "make_dqn_loss"], [238, 2, 1, "", "make_ppo_loss"], [239, 2, 1, "", "make_ppo_model"], [240, 2, 1, "", "make_redq_loss"], [241, 2, 1, "", "make_redq_model"], [242, 2, 1, "", "make_replay_buffer"], [243, 2, 1, "", "make_sac_loss"], [244, 2, 1, "", "make_sac_model"], [245, 2, 1, "", "make_target_updater"], [246, 2, 1, "", "make_trainer"], [247, 2, 1, "", "parallel_env_constructor"], [248, 2, 1, "", "sync_async_collector"], [249, 2, 1, "", "sync_sync_collector"], [250, 2, 1, "", "transformed_env_constructor"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "property", "Python property"]}, "titleterms": {"welcom": 0, "torchrl": [0, 1, 2, 3, 6, 254, 255, 256, 257, 258, 259, 260, 263, 266, 267], "document": [0, 9], "tutori": [0, 260], "basic": 0, "intermedi": [0, 8], "advanc": 0, "refer": [0, 252], "knowledg": [0, 253], "base": [0, 7, 253], "indic": 0, "tabl": 0, "collector": [1, 258, 259, 260, 266], "packag": [1, 2, 3, 254, 255, 256, 257], "singl": [1, 4], "node": 1, "data": [1, 2, 4, 258, 259, 260, 266], "distribut": [1, 254], "helper": [1, 3], "function": [1, 4, 255, 259, 260, 266], "replai": [2, 258, 259, 260, 266], "buffer": [2, 258, 259, 260, 266], "compos": [2, 76], "store": [2, 259], "trajectori": 2, "dataset": 2, "tensorspec": [2, 36], "util": [2, 254, 255, 256], "env": [3, 263, 266, 267], "vector": [3, 266], "transform": [3, 102, 258, 260, 263, 266, 267], "clone": [3, 7], "record": [3, 221, 256, 258], "domain": 3, "specif": [3, 254, 262], "librari": [3, 266], "thing": [4, 258, 263], "consid": 4, "when": [4, 7], "debug": 4, "rl": [4, 9, 266], "gener": [4, 254], "have": 4, "you": 4, "valid": 4, "your": [4, 6, 258, 263], "algorithm": [4, 254], "implement": 4, "few": 4, "small": 4, "toi": 4, "problem": 4, "known": 4, "optim": [4, 258, 259], "return": [4, 255], "e": 4, "g": 4, "gridworld": 4, "mountaincar": 4, "visual": 4, "agent": 4, "Be": 4, "veri": 4, "care": 4, "ani": 4, "augment": 4, "polici": [4, 258, 260, 262, 263], "doe": 4, "entropi": 4, "converg": 4, "too": [4, 8], "quickli": 4, "slowli": 4, "chang": [4, 266], "drastic": 4, "reward": 4, "beyond": 4, "go": 4, "up": [4, 6], "i": [4, 5, 8], "favor": 4, "compon": 4, "veloc": 4, "v": 4, "l2": 4, "action": [4, 263], "magnitud": 4, "task": [4, 262], "horizon": 4, "extrem": 4, "long": 4, "ar": 4, "normal": [4, 258, 259, 260], "standard": 4, "explor": [4, 254, 258, 259], "valu": [4, 254, 255, 258, 260], "loss": [4, 258, 259, 260], "earli": 4, "train": [4, 8, 255, 258, 260, 263], "roughli": 4, "uniformli": 4, "random": 4, "intrins": 4, "decai": 4, "learn": [4, 260], "progress": 4, "singleton": 4, "episod": 4, "remain": 4, "constant": [4, 259], "increas": 4, "an": [4, 260, 263], "environ": [4, 6, 7, 258, 259, 260, 262, 263, 266, 267], "dynam": 4, "can": 4, "low": 4, "forward": [4, 258], "model": [4, 254, 258, 259, 264, 266], "also": 4, "us": [4, 6, 9, 264, 266], "offlin": 4, "observ": [4, 258], "space": 4, "effect": [4, 263], "dramat": 4, "dure": 4, "high": 4, "dimension": 4, "work": [5, 6, 7], "gym": [5, 267], "what": 5, "openai": 5, "version": [5, 7, 10], "habitat": 6, "lab": 6, "set": 6, "instal": [6, 7, 266], "from": [6, 7], "pip": [6, 7], "common": [6, 7, 8], "issu": [6, 7, 10], "mujoco": 7, "prerequisit": 7, "render": [7, 267], "all": 7, "new": 7, "bindindg": 7, "2": 7, "1": 7, "old": 7, "bind": 7, "py": 7, "option": 7, "repo": [7, 9], "pytorch": [8, 9, 10], "error": 8, "solut": 8, "gradient": 8, "relat": 8, "newcom": 8, "my": 8, "slow": 8, "bug": 8, "resourc": 9, "functorch": 9, "blog": 9, "websit": 9, "educ": 9, "forum": 9, "how": 10, "reproduc": [10, 263], "workaround": 10, "implement_for": 11, "datacollectorbas": 12, "multisyncdatacollector": 13, "multiasyncdatacollector": 14, "randompolici": 15, "syncdatacollector": 16, "asyncdatacollector": 17, "distributeddatacollector": 18, "distributedsyncdatacollector": 19, "rpcdatacollector": 20, "raycollector": 21, "submitit_delayed_launch": 22, "split_trajectori": 23, "binarydiscretetensorspec": 24, "boundedtensorspec": 25, "compositespec": 26, "discretetensorspec": 27, "multidiscretetensorspec": 28, "multionehotdiscretetensorspec": 29, "multistep": 30, "onehotdiscretetensorspec": 31, "prioritizedreplaybuff": 32, "replaybuff": 33, "tensordictprioritizedreplaybuff": 34, "tensordictreplaybuff": 35, "unboundedcontinuoustensorspec": 37, "unboundeddiscretetensorspec": 38, "d4rlexperiencereplai": 39, "openmlexperiencereplai": 40, "lazymemmapstorag": 41, "lazytensorstorag": 42, "liststorag": 43, "prioritizedsampl": 44, "randomsampl": 45, "roundrobinwrit": 46, "sampler": 47, "samplerwithoutreplac": 48, "storag": 49, "writer": 50, "envbas": [51, 263], "envcreat": 52, "envmetadata": 53, "gymlikeenv": 54, "modelbasedenvbas": 55, "multithreadedenv": 56, "parallelenv": 57, "serialenv": 58, "braxenv": 59, "braxwrapp": 60, "dmcontrolenv": 61, "dmcontrolwrapp": 62, "gymenv": 63, "gymwrapp": 64, "habitatenv": 65, "jumanjienv": 66, "jumanjiwrapp": 67, "openmlenv": 68, "vmasenv": 69, "vmaswrapp": 70, "dreamerenv": 71, "binarizereward": 72, "catfram": 73, "cattensor": 74, "centercrop": 75, "discreteactionproject": 77, "doubletofloat": 78, "excludetransform": 79, "finitetensordictcheck": 80, "flattenobserv": 81, "frameskiptransform": 82, "grayscal": 83, "inittrack": 84, "noopresetenv": 85, "observationnorm": 86, "observationtransform": 87, "pinmemorytransform": 88, "r3mtransform": 89, "randomcroptensordict": 90, "renametransform": 91, "resiz": 92, "rewardclip": 93, "rewardsc": 94, "rewardsum": 95, "selecttransform": 96, "squeezetransform": 97, "stepcount": 98, "tensordictprim": 99, "timemaxpool": 100, "totensorimag": 101, "transformedenv": 103, "unsqueezetransform": 104, "viprewardtransform": 105, "viptransform": 106, "vecnorm": [107, 267], "gsdenois": 108, "check_env_spec": 109, "exploration_mod": 110, "exploration_typ": 111, "get_available_librari": 112, "make_composite_from_td": 113, "set_exploration_mod": 114, "set_exploration_typ": 115, "step_mdp": 116, "cemplann": 117, "convnet": 118, "ddpgcnnactor": 119, "ddpgcnnqnet": 120, "ddpgmlpactor": 121, "ddpgmlpqnet": 122, "delta": 123, "distributionaldqnnet": 124, "distributionalqvaluehook": 125, "dreameractor": 126, "duelingcnndqnet": 127, "independentnorm": 128, "lstmnet": 129, "mlp": 130, "mpcplannerbas": 131, "mppiplann": 132, "noisylazylinear": 133, "noisylinear": 134, "normalparamwrapp": 135, "obsdecod": 136, "obsencod": 137, "onehotcategor": 138, "qvaluehook": 139, "rssmposterior": 140, "rssmprior": 141, "tanhdelta": 142, "tanhnorm": 143, "truncatednorm": 144, "reset_nois": 145, "actor": [146, 254, 258], "actorcriticoper": 147, "actorcriticwrapp": 148, "actorvalueoper": 149, "additivegaussianwrapp": 150, "distributionalqvalueactor": 151, "egreedywrapp": 152, "ornsteinuhlenbeckprocesswrapp": 153, "probabilisticactor": 154, "qvalueactor": 155, "safemodul": [156, 254], "safeprobabilisticmodul": 157, "safeprobabilistictensordictsequenti": 158, "safesequenti": 159, "valueoper": 160, "worldmodelwrapp": 161, "biased_softplu": 162, "inv_softplu": 163, "map": 164, "a2closs": 165, "clipppoloss": 166, "ddpgloss": 167, "dqnloss": 168, "discretesacloss": 169, "distributionaldqnloss": 170, "dreameractorloss": 171, "dreamermodelloss": 172, "dreamervalueloss": 173, "hardupd": 174, "iqlloss": 175, "klpenppoloss": 176, "lossmodul": [177, 258], "ppoloss": 178, "redqloss": 179, "reinforceloss": 180, "sacloss": 181, "softupd": 182, "td3loss": 183, "valueestim": 184, "default_value_kwarg": 185, "distance_loss": 186, "hold_out_net": 187, "hold_out_param": 188, "next_state_valu": 189, "gae": 190, "td0estim": 191, "td1estim": 192, "tdlambdaestim": 193, "valueestimatorbas": 194, "generalized_advantage_estim": 195, "td0_advantage_estim": 196, "td0_return_estim": 197, "td1_advantage_estim": 198, "td1_return_estim": 199, "td_lambda_advantage_estim": 200, "td_lambda_return_estim": 201, "vec_generalized_advantage_estim": 202, "vec_td1_advantage_estim": 203, "vec_td1_return_estim": 204, "vec_td_lambda_advantage_estim": 205, "vec_td_lambda_return_estim": 206, "tensordictrecord": 207, "videorecord": 208, "logger": [209, 256], "csvlogger": 210, "generate_exp_nam": 211, "get_logg": 212, "mlflowlogg": 213, "tensorboardlogg": 214, "wandblogg": 215, "batchsubsampl": 216, "clearcudacach": 217, "countframeslog": 218, "logreward": 219, "optimizerhook": 220, "replaybuffertrain": 222, "rewardnorm": 223, "selectkei": 224, "trainer": [225, 256, 259], "trainerhookbas": 226, "updateweight": 227, "correct_for_frame_skip": 228, "get_stats_random_rollout": 229, "make_a2c_loss": 230, "make_a2c_model": 231, "make_collector_offpolici": 232, "make_collector_onpolici": 233, "make_ddpg_actor": 234, "make_ddpg_loss": 235, "make_dqn_actor": 236, "make_dqn_loss": 237, "make_ppo_loss": 238, "make_ppo_model": 239, "make_redq_loss": 240, "make_redq_model": 241, "make_replay_buff": 242, "make_sac_loss": 243, "make_sac_model": 244, "make_target_updat": 245, "make_train": 246, "parallel_env_constructor": 247, "sync_async_collector": 248, "sync_sync_collector": 249, "transformed_env_constructor": 250, "readm": [251, 261], "tuto": [251, 261], "api": 252, "contribut": [253, 266], "content": 253, "modul": [254, 258, 266], "tensordict": [254, 266], "wrapper": 254, "probabilist": 254, "q": [254, 259], "oper": 254, "join": 254, "other": 254, "hook": [254, 256, 259], "regular": 254, "planner": 254, "object": [255, 258, 266], "dqn": [255, 259], "ddpg": [255, 258], "sac": 255, "redq": 255, "iql": 255, "td3": 255, "ppo": [255, 260], "a2c": 255, "reinforc": [255, 260], "dreamer": 255, "checkpoint": 256, "builder": 256, "_util": 257, "code": [258, 263], "import": 258, "setup": 258, "The": 258, "__init__": 258, "method": 258, "estim": 258, "put": 258, "togeth": [258, 263], "call": 258, "parallel": [258, 262, 267], "execut": [258, 262, 263], "stat": 258, "build": [258, 259], "evalu": 258, "construct": 258, "time": [258, 265], "experi": [258, 263], "result": [258, 260], "conclus": [258, 259, 260, 263], "A": 259, "exampl": 259, "comput": [259, 263, 265], "deep": 259, "network": [259, 260], "collect": [259, 260], "target": 259, "paramet": [259, 260], "hyperparamet": [259, 260], "regist": 259, "possibl": 259, "improv": 259, "defin": 260, "loop": [260, 263], "next": 260, "step": [260, 267], "multi": 262, "divers": 262, "rollout": [262, 263, 267], "pendulum": 263, "write": 263, "_step": 263, "reset": [263, 267], "simul": 263, "_reset": 263, "metadata": 263, "_spec": 263, "spec": [263, 267], "shape": 263, "seed": [263, 267], "wrap": 263, "class": [263, 266], "test": 263, "our": 263, "custom": 263, "batch": 263, "simpl": 263, "pretrain": 264, "introduct": 266, "config": 266, "tensordictmodul": 266, "sequenc": 266, "program": 266, "ensembl": 266, "meta": 266, "special": 266, "state": 266, "frame_skip": 267, "deepmind": 267, "control": 267, "devic": 267, "run": 267, "close": 267, "access": 267, "attribut": 267, "kwarg": 267}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Welcome to the TorchRL Documentation!": [[0, "welcome-to-the-torchrl-documentation"]], "Tutorials": [[0, "tutorials"]], "Basics": [[0, "basics"]], "Intermediate": [[0, "intermediate"]], "Advanced": [[0, "advanced"]], "References": [[0, "references"]], "Knowledge Base": [[0, "knowledge-base"], [253, "knowledge-base"]], "Indices and tables": [[0, "indices-and-tables"]], "torchrl.collectors package": [[1, "torchrl-collectors-package"]], "Single node data collectors": [[1, "single-node-data-collectors"]], "Distributed data collectors": [[1, "distributed-data-collectors"]], "Helper functions": [[1, "helper-functions"]], "torchrl.data package": [[2, "torchrl-data-package"]], "Replay Buffers": [[2, "replay-buffers"]], "Composable Replay Buffers": [[2, "composable-replay-buffers"]], "Storing trajectories": [[2, "storing-trajectories"]], "Datasets": [[2, "datasets"]], "TensorSpec": [[2, "tensorspec"], [36, "tensorspec"]], "Utils": [[2, "utils"], [254, "utils"], [255, "utils"], [256, "utils"]], "torchrl.envs package": [[3, "torchrl-envs-package"]], "Vectorized envs": [[3, "vectorized-envs"]], "Transforms": [[3, "transforms"], [258, "transforms"], [260, "transforms"], [266, "transforms"]], "Cloning transforms": [[3, "cloning-transforms"]], "Recorders": [[3, "recorders"]], "Helpers": [[3, "helpers"]], "Domain-specific": [[3, "domain-specific"]], "Libraries": [[3, "libraries"]], "Things to consider when debugging RL": [[4, "things-to-consider-when-debugging-rl"]], "General": [[4, "general"]], "Have you validated your algorithm implementation on a few small, toy problems with known optimal returns e.g. gridworlds, mountaincar?": [[4, "have-you-validated-your-algorithm-implementation-on-a-few-small-toy-problems-with-known-optimal-returns-e-g-gridworlds-mountaincar"]], "Have you visualized your agents?": [[4, "have-you-visualized-your-agents"]], "Be very careful with any data augmentation.": [[4, "be-very-careful-with-any-data-augmentation"]], "Policy": [[4, "policy"], [260, "policy"], [262, "policy"]], "Does the entropy of your policy converge too quickly, too slowly or change drastically?": [[4, "does-the-entropy-of-your-policy-converge-too-quickly-too-slowly-or-change-drastically"]], "Rewards (beyond \u201cgoing up\u201d)": [[4, "rewards-beyond-going-up"]], "Is the agent favoring a single component of the reward function (i.e. velocity vs L2 action magnitude)?": [[4, "is-the-agent-favoring-a-single-component-of-the-reward-function-i-e-velocity-vs-l2-action-magnitude"]], "Is the task horizon extremely long?": [[4, "is-the-task-horizon-extremely-long"]], "Are your rewards normalized/standardized?": [[4, "are-your-rewards-normalized-standardized"]], "Exploration": [[4, "exploration"], [254, "exploration"], [258, "exploration"]], "Is value loss going up early in training?": [[4, "is-value-loss-going-up-early-in-training"]], "Are actions (roughly) uniformly/normally random early in training?": [[4, "are-actions-roughly-uniformly-normally-random-early-in-training"]], "Are intrinsic rewards decaying as learning progresses in a singleton task?": [[4, "are-intrinsic-rewards-decaying-as-learning-progresses-in-a-singleton-task"]], "Are episodic intrinsic rewards remaining constant or increasing as learning progresses in an episodic task?": [[4, "are-episodic-intrinsic-rewards-remaining-constant-or-increasing-as-learning-progresses-in-an-episodic-task"]], "Environment Dynamics": [[4, "environment-dynamics"]], "Can you train a low entropy forward dynamics and/or reward model (also useful for offline RL)?": [[4, "can-you-train-a-low-entropy-forward-dynamics-and-or-reward-model-also-useful-for-offline-rl"]], "Observation Space": [[4, "observation-space"]], "Are your observations normalized/standardized?": [[4, "are-your-observations-normalized-standardized"]], "Action Space": [[4, "action-space"]], "Is the effect of an action changing dramatically during an episode?": [[4, "is-the-effect-of-an-action-changing-dramatically-during-an-episode"]], "Is the action space too high dimensional?": [[4, "is-the-action-space-too-high-dimensional"]], "Are your actions normalized/standardized?": [[4, "are-your-actions-normalized-standardized"]], "Working with gym": [[5, "working-with-gym"]], "What is OpenAI Gym?": [[5, "what-is-openai-gym"]], "Versioning": [[5, "versioning"]], "Working with habitat-lab": [[6, "working-with-habitat-lab"]], "Setting up your environment for habitat and torchrl": [[6, "setting-up-your-environment-for-habitat-and-torchrl"]], "Installing habitat-lab from pip": [[6, "installing-habitat-lab-from-pip"]], "Installing TorchRL": [[6, "installing-torchrl"]], "Using Habitat": [[6, "using-habitat"]], "Common issues": [[6, "common-issues"]], "Working with MuJoCo-based environments": [[7, "working-with-mujoco-based-environments"]], "Installing MuJoCo": [[7, "installing-mujoco"]], "Prerequisite for rendering (all mujoco versions)": [[7, "prerequisite-for-rendering-all-mujoco-versions"]], "New bindindgs (\u2265 2.1.2)": [[7, "new-bindindgs-2-1-2"]], "Old bindings (\u2264 2.1.1): mujoco-py": [[7, "old-bindings-2-1-1-mujoco-py"]], "Option 1: installing mujoco-py with pip": [[7, "option-1-installing-mujoco-py-with-pip"]], "Option 2: installing mujoco-py from a cloned repo": [[7, "option-2-installing-mujoco-py-from-a-cloned-repo"]], "Common Issues when rendering Mujoco Environments": [[7, "common-issues-when-rendering-mujoco-environments"]], "Common PyTorch errors and solutions": [[8, "common-pytorch-errors-and-solutions"]], "Gradient-related errors [Newcomers]": [[8, "gradient-related-errors-newcomers"]], "My Training is too slow [Newcomers / intermediate]": [[8, "my-training-is-too-slow-newcomers-intermediate"]], "Common bugs": [[8, "common-bugs"]], "Useful resources": [[9, "useful-resources"]], "Pytorch documentation": [[9, "pytorch-documentation"]], "functorch documentation": [[9, "functorch-documentation"]], "Useful RL repos, blogs and websites": [[9, "useful-rl-repos-blogs-and-websites"]], "Educational resource": [[9, "educational-resource"]], "Forums": [[9, "forums"]], "Repos": [[9, "repos"]], "Versioning Issues": [[10, "versioning-issues"]], "Pytorch version": [[10, "pytorch-version"]], "How to reproduce": [[10, "how-to-reproduce"]], "Workarounds": [[10, "workarounds"]], "implement_for": [[11, "implement-for"]], "DataCollectorBase": [[12, "datacollectorbase"]], "MultiSyncDataCollector": [[13, "multisyncdatacollector"]], "MultiaSyncDataCollector": [[14, "multiasyncdatacollector"]], "RandomPolicy": [[15, "randompolicy"]], "SyncDataCollector": [[16, "syncdatacollector"]], "aSyncDataCollector": [[17, "asyncdatacollector"]], "DistributedDataCollector": [[18, "distributeddatacollector"]], "DistributedSyncDataCollector": [[19, "distributedsyncdatacollector"]], "RPCDataCollector": [[20, "rpcdatacollector"]], "RayCollector": [[21, "raycollector"]], "submitit_delayed_launcher": [[22, "submitit-delayed-launcher"]], "split_trajectories": [[23, "split-trajectories"]], "BinaryDiscreteTensorSpec": [[24, "binarydiscretetensorspec"]], "BoundedTensorSpec": [[25, "boundedtensorspec"]], "CompositeSpec": [[26, "compositespec"]], "DiscreteTensorSpec": [[27, "discretetensorspec"]], "MultiDiscreteTensorSpec": [[28, "multidiscretetensorspec"]], "MultiOneHotDiscreteTensorSpec": [[29, "multionehotdiscretetensorspec"]], "MultiStep": [[30, "multistep"]], "OneHotDiscreteTensorSpec": [[31, "onehotdiscretetensorspec"]], "PrioritizedReplayBuffer": [[32, "prioritizedreplaybuffer"]], "ReplayBuffer": [[33, "replaybuffer"]], "TensorDictPrioritizedReplayBuffer": [[34, "tensordictprioritizedreplaybuffer"]], "TensorDictReplayBuffer": [[35, "tensordictreplaybuffer"]], "UnboundedContinuousTensorSpec": [[37, "unboundedcontinuoustensorspec"]], "UnboundedDiscreteTensorSpec": [[38, "unboundeddiscretetensorspec"]], "D4RLExperienceReplay": [[39, "d4rlexperiencereplay"]], "OpenMLExperienceReplay": [[40, "openmlexperiencereplay"]], "LazyMemmapStorage": [[41, "lazymemmapstorage"]], "LazyTensorStorage": [[42, "lazytensorstorage"]], "ListStorage": [[43, "liststorage"]], "PrioritizedSampler": [[44, "prioritizedsampler"]], "RandomSampler": [[45, "randomsampler"]], "RoundRobinWriter": [[46, "roundrobinwriter"]], "Sampler": [[47, "sampler"]], "SamplerWithoutReplacement": [[48, "samplerwithoutreplacement"]], "Storage": [[49, "storage"]], "Writer": [[50, "writer"]], "EnvBase": [[51, "envbase"]], "EnvCreator": [[52, "envcreator"]], "EnvMetaData": [[53, "envmetadata"]], "GymLikeEnv": [[54, "gymlikeenv"]], "ModelBasedEnvBase": [[55, "modelbasedenvbase"]], "MultiThreadedEnv": [[56, "multithreadedenv"]], "ParallelEnv": [[57, "parallelenv"]], "SerialEnv": [[58, "serialenv"]], "BraxEnv": [[59, "braxenv"]], "BraxWrapper": [[60, "braxwrapper"]], "DMControlEnv": [[61, "dmcontrolenv"]], "DMControlWrapper": [[62, "dmcontrolwrapper"]], "GymEnv": [[63, "gymenv"]], "GymWrapper": [[64, "gymwrapper"]], "HabitatEnv": [[65, "habitatenv"]], "JumanjiEnv": [[66, "jumanjienv"]], "JumanjiWrapper": [[67, "jumanjiwrapper"]], "OpenMLEnv": [[68, "openmlenv"]], "VmasEnv": [[69, "vmasenv"]], "VmasWrapper": [[70, "vmaswrapper"]], "DreamerEnv": [[71, "dreamerenv"]], "BinarizeReward": [[72, "binarizereward"]], "CatFrames": [[73, "catframes"]], "CatTensors": [[74, "cattensors"]], "CenterCrop": [[75, "centercrop"]], "Compose": [[76, "compose"]], "DiscreteActionProjection": [[77, "discreteactionprojection"]], "DoubleToFloat": [[78, "doubletofloat"]], "ExcludeTransform": [[79, "excludetransform"]], "FiniteTensorDictCheck": [[80, "finitetensordictcheck"]], "FlattenObservation": [[81, "flattenobservation"]], "FrameSkipTransform": [[82, "frameskiptransform"]], "GrayScale": [[83, "grayscale"]], "InitTracker": [[84, "inittracker"]], "NoopResetEnv": [[85, "noopresetenv"]], "ObservationNorm": [[86, "observationnorm"]], "ObservationTransform": [[87, "observationtransform"]], "PinMemoryTransform": [[88, "pinmemorytransform"]], "R3MTransform": [[89, "r3mtransform"]], "RandomCropTensorDict": [[90, "randomcroptensordict"]], "RenameTransform": [[91, "renametransform"]], "Resize": [[92, "resize"]], "RewardClipping": [[93, "rewardclipping"]], "RewardScaling": [[94, "rewardscaling"]], "RewardSum": [[95, "rewardsum"]], "SelectTransform": [[96, "selecttransform"]], "SqueezeTransform": [[97, "squeezetransform"]], "StepCounter": [[98, "stepcounter"]], "TensorDictPrimer": [[99, "tensordictprimer"]], "TimeMaxPool": [[100, "timemaxpool"]], "ToTensorImage": [[101, "totensorimage"]], "Transform": [[102, "transform"]], "TransformedEnv": [[103, "transformedenv"]], "UnsqueezeTransform": [[104, "unsqueezetransform"]], "VIPRewardTransform": [[105, "viprewardtransform"]], "VIPTransform": [[106, "viptransform"]], "VecNorm": [[107, "vecnorm"], [267, "vecnorm"]], "gSDENoise": [[108, "gsdenoise"]], "check_env_specs": [[109, "check-env-specs"]], "exploration_mode": [[110, "exploration-mode"]], "exploration_type": [[111, "exploration-type"]], "get_available_libraries": [[112, "get-available-libraries"]], "make_composite_from_td": [[113, "make-composite-from-td"]], "set_exploration_mode": [[114, "set-exploration-mode"]], "set_exploration_type": [[115, "set-exploration-type"]], "step_mdp": [[116, "step-mdp"]], "CEMPlanner": [[117, "cemplanner"]], "ConvNet": [[118, "convnet"]], "DdpgCnnActor": [[119, "ddpgcnnactor"]], "DdpgCnnQNet": [[120, "ddpgcnnqnet"]], "DdpgMlpActor": [[121, "ddpgmlpactor"]], "DdpgMlpQNet": [[122, "ddpgmlpqnet"]], "Delta": [[123, "delta"]], "DistributionalDQNnet": [[124, "distributionaldqnnet"]], "DistributionalQValueHook": [[125, "distributionalqvaluehook"]], "DreamerActor": [[126, "dreameractor"]], "DuelingCnnDQNet": [[127, "duelingcnndqnet"]], "IndependentNormal": [[128, "independentnormal"]], "LSTMNet": [[129, "lstmnet"]], "MLP": [[130, "mlp"]], "MPCPlannerBase": [[131, "mpcplannerbase"]], "MPPIPlanner": [[132, "mppiplanner"]], "NoisyLazyLinear": [[133, "noisylazylinear"]], "NoisyLinear": [[134, "noisylinear"]], "NormalParamWrapper": [[135, "normalparamwrapper"]], "ObsDecoder": [[136, "obsdecoder"]], "ObsEncoder": [[137, "obsencoder"]], "OneHotCategorical": [[138, "onehotcategorical"]], "QValueHook": [[139, "qvaluehook"]], "RSSMPosterior": [[140, "rssmposterior"]], "RSSMPrior": [[141, "rssmprior"]], "TanhDelta": [[142, "tanhdelta"]], "TanhNormal": [[143, "tanhnormal"]], "TruncatedNormal": [[144, "truncatednormal"]], "reset_noise": [[145, "reset-noise"]], "Actor": [[146, "actor"]], "ActorCriticOperator": [[147, "actorcriticoperator"]], "ActorCriticWrapper": [[148, "actorcriticwrapper"]], "ActorValueOperator": [[149, "actorvalueoperator"]], "AdditiveGaussianWrapper": [[150, "additivegaussianwrapper"]], "DistributionalQValueActor": [[151, "distributionalqvalueactor"]], "EGreedyWrapper": [[152, "egreedywrapper"]], "OrnsteinUhlenbeckProcessWrapper": [[153, "ornsteinuhlenbeckprocesswrapper"]], "ProbabilisticActor": [[154, "probabilisticactor"]], "QValueActor": [[155, "qvalueactor"]], "SafeModule": [[156, "safemodule"]], "SafeProbabilisticModule": [[157, "safeprobabilisticmodule"]], "SafeProbabilisticTensorDictSequential": [[158, "safeprobabilistictensordictsequential"]], "SafeSequential": [[159, "safesequential"]], "ValueOperator": [[160, "valueoperator"]], "WorldModelWrapper": [[161, "worldmodelwrapper"]], "biased_softplus": [[162, "biased-softplus"]], "inv_softplus": [[163, "inv-softplus"]], "mappings": [[164, "mappings"]], "A2CLoss": [[165, "a2closs"]], "ClipPPOLoss": [[166, "clipppoloss"]], "DDPGLoss": [[167, "ddpgloss"]], "DQNLoss": [[168, "dqnloss"]], "DiscreteSACLoss": [[169, "discretesacloss"]], "DistributionalDQNLoss": [[170, "distributionaldqnloss"]], "DreamerActorLoss": [[171, "dreameractorloss"]], "DreamerModelLoss": [[172, "dreamermodelloss"]], "DreamerValueLoss": [[173, "dreamervalueloss"]], "HardUpdate": [[174, "hardupdate"]], "IQLLoss": [[175, "iqlloss"]], "KLPENPPOLoss": [[176, "klpenppoloss"]], "LossModule": [[177, "lossmodule"]], "PPOLoss": [[178, "ppoloss"]], "REDQLoss": [[179, "redqloss"]], "ReinforceLoss": [[180, "reinforceloss"]], "SACLoss": [[181, "sacloss"]], "SoftUpdate": [[182, "softupdate"]], "TD3Loss": [[183, "td3loss"]], "ValueEstimators": [[184, "valueestimators"]], "default_value_kwargs": [[185, "default-value-kwargs"]], "distance_loss": [[186, "distance-loss"]], "hold_out_net": [[187, "hold-out-net"]], "hold_out_params": [[188, "hold-out-params"]], "next_state_value": [[189, "next-state-value"]], "GAE": [[190, "gae"]], "TD0Estimator": [[191, "td0estimator"]], "TD1Estimator": [[192, "td1estimator"]], "TDLambdaEstimator": [[193, "tdlambdaestimator"]], "ValueEstimatorBase": [[194, "valueestimatorbase"]], "generalized_advantage_estimate": [[195, "generalized-advantage-estimate"]], "td0_advantage_estimate": [[196, "td0-advantage-estimate"]], "td0_return_estimate": [[197, "td0-return-estimate"]], "td1_advantage_estimate": [[198, "td1-advantage-estimate"]], "td1_return_estimate": [[199, "td1-return-estimate"]], "td_lambda_advantage_estimate": [[200, "td-lambda-advantage-estimate"]], "td_lambda_return_estimate": [[201, "td-lambda-return-estimate"]], "vec_generalized_advantage_estimate": [[202, "vec-generalized-advantage-estimate"]], "vec_td1_advantage_estimate": [[203, "vec-td1-advantage-estimate"]], "vec_td1_return_estimate": [[204, "vec-td1-return-estimate"]], "vec_td_lambda_advantage_estimate": [[205, "vec-td-lambda-advantage-estimate"]], "vec_td_lambda_return_estimate": [[206, "vec-td-lambda-return-estimate"]], "TensorDictRecorder": [[207, "tensordictrecorder"]], "VideoRecorder": [[208, "videorecorder"]], "Logger": [[209, "logger"]], "CSVLogger": [[210, "csvlogger"]], "generate_exp_name": [[211, "generate-exp-name"]], "get_logger": [[212, "get-logger"]], "MLFlowLogger": [[213, "mlflowlogger"]], "TensorboardLogger": [[214, "tensorboardlogger"]], "WandbLogger": [[215, "wandblogger"]], "BatchSubSampler": [[216, "batchsubsampler"]], "ClearCudaCache": [[217, "clearcudacache"]], "CountFramesLog": [[218, "countframeslog"]], "LogReward": [[219, "logreward"]], "OptimizerHook": [[220, "optimizerhook"]], "Recorder": [[221, "recorder"]], "ReplayBufferTrainer": [[222, "replaybuffertrainer"]], "RewardNormalizer": [[223, "rewardnormalizer"]], "SelectKeys": [[224, "selectkeys"]], "Trainer": [[225, "trainer"]], "TrainerHookBase": [[226, "trainerhookbase"]], "UpdateWeights": [[227, "updateweights"]], "correct_for_frame_skip": [[228, "correct-for-frame-skip"]], "get_stats_random_rollout": [[229, "get-stats-random-rollout"]], "make_a2c_loss": [[230, "make-a2c-loss"]], "make_a2c_model": [[231, "make-a2c-model"]], "make_collector_offpolicy": [[232, "make-collector-offpolicy"]], "make_collector_onpolicy": [[233, "make-collector-onpolicy"]], "make_ddpg_actor": [[234, "make-ddpg-actor"]], "make_ddpg_loss": [[235, "make-ddpg-loss"]], "make_dqn_actor": [[236, "make-dqn-actor"]], "make_dqn_loss": [[237, "make-dqn-loss"]], "make_ppo_loss": [[238, "make-ppo-loss"]], "make_ppo_model": [[239, "make-ppo-model"]], "make_redq_loss": [[240, "make-redq-loss"]], "make_redq_model": [[241, "make-redq-model"]], "make_replay_buffer": [[242, "make-replay-buffer"]], "make_sac_loss": [[243, "make-sac-loss"]], "make_sac_model": [[244, "make-sac-model"]], "make_target_updater": [[245, "make-target-updater"]], "make_trainer": [[246, "make-trainer"]], "parallel_env_constructor": [[247, "parallel-env-constructor"]], "sync_async_collector": [[248, "sync-async-collector"]], "sync_sync_collector": [[249, "sync-sync-collector"]], "transformed_env_constructor": [[250, "transformed-env-constructor"]], "README Tutos": [[251, "readme-tutos"], [261, "readme-tutos"]], "API Reference": [[252, "api-reference"]], "Contributing": [[253, "contributing"], [266, "contributing"]], "Contents:": [[253, null]], "torchrl.modules package": [[254, "torchrl-modules-package"]], "TensorDict modules: Actors, exploration, value models and generative models": [[254, "tensordict-modules-actors-exploration-value-models-and-generative-models"]], "SafeModules": [[254, "safemodules"]], "Exploration wrappers": [[254, "exploration-wrappers"]], "Probabilistic actors": [[254, "probabilistic-actors"]], "Q-Value actors": [[254, "q-value-actors"]], "Value operators and joined models": [[254, "value-operators-and-joined-models"]], "Other modules": [[254, "other-modules"]], "Hooks": [[254, "hooks"]], "Models": [[254, "models"], [266, "models"]], "Regular modules": [[254, "regular-modules"]], "Algorithm-specific modules": [[254, "algorithm-specific-modules"]], "Planners": [[254, "planners"]], "Distributions": [[254, "distributions"]], "torchrl.objectives package": [[255, "torchrl-objectives-package"]], "Training value functions": [[255, "training-value-functions"]], "DQN": [[255, "dqn"], [259, "dqn"]], "DDPG": [[255, "ddpg"]], "SAC": [[255, "sac"]], "REDQ": [[255, "redq"]], "IQL": [[255, "iql"]], "TD3": [[255, "td3"]], "PPO": [[255, "ppo"]], "A2C": [[255, "a2c"]], "Reinforce": [[255, "reinforce"]], "Dreamer": [[255, "dreamer"]], "Returns": [[255, "returns"]], "torchrl.trainers package": [[256, "torchrl-trainers-package"]], "Checkpointing": [[256, "checkpointing"]], "Trainer and hooks": [[256, "trainer-and-hooks"]], "Builders": [[256, "builders"]], "Loggers": [[256, "loggers"]], "Recording utils": [[256, "recording-utils"]], "torchrl._utils package": [[257, "torchrl-utils-package"]], "TorchRL objectives: Coding a DDPG loss": [[258, "torchrl-objectives-coding-a-ddpg-loss"]], "Imports and setup": [[258, "imports-and-setup"]], "torchrl LossModule": [[258, "torchrl-lossmodule"]], "The __init__ method": [[258, "the-init-method"]], "The value estimator loss method": [[258, "the-value-estimator-loss-method"]], "The actor loss method": [[258, "the-actor-loss-method"]], "The value loss method": [[258, "the-value-loss-method"]], "Putting things together in a forward call": [[258, "putting-things-together-in-a-forward-call"]], "Environment": [[258, "environment"]], "Parallel execution": [[258, "parallel-execution"]], "Normalization of the observations": [[258, "normalization-of-the-observations"]], "Normalization stats": [[258, "normalization-stats"]], "Building the model": [[258, "building-the-model"]], "Data collector": [[258, "data-collector"], [259, "data-collector"], [260, "data-collector"]], "Evaluator: building your recorder object": [[258, "evaluator-building-your-recorder-object"]], "Replay buffer": [[258, "replay-buffer"], [260, "replay-buffer"]], "Loss module construction": [[258, "loss-module-construction"]], "Optimizer": [[258, "optimizer"], [259, "optimizer"]], "Time to train the policy": [[258, "time-to-train-the-policy"]], "Experiment results": [[258, "experiment-results"]], "Conclusion": [[258, "conclusion"], [263, "conclusion"]], "TorchRL trainer: A DQN example": [[259, "torchrl-trainer-a-dqn-example"]], "Building the environment": [[259, "building-the-environment"]], "Compute normalizing constants": [[259, "compute-normalizing-constants"]], "Building the model (Deep Q-network)": [[259, "building-the-model-deep-q-network"]], "Collecting and storing data": [[259, "collecting-and-storing-data"]], "Replay buffers": [[259, "replay-buffers"], [266, "replay-buffers"]], "Loss function": [[259, "loss-function"], [260, "loss-function"]], "Target parameters": [[259, "target-parameters"]], "Hyperparameters": [[259, "hyperparameters"]], "DQN parameters": [[259, "dqn-parameters"]], "Data collection and replay buffer": [[259, "data-collection-and-replay-buffer"]], "Environment and exploration": [[259, "environment-and-exploration"]], "Building a Trainer": [[259, "building-a-trainer"]], "Registering hooks": [[259, "registering-hooks"]], "Conclusion and possible improvements": [[259, "conclusion-and-possible-improvements"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[260, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[260, "define-hyperparameters"]], "Data collection parameters": [[260, "data-collection-parameters"]], "PPO parameters": [[260, "ppo-parameters"]], "Define an environment": [[260, "define-an-environment"]], "Normalization": [[260, "normalization"]], "Value network": [[260, "value-network"]], "Training loop": [[260, "training-loop"], [263, "training-loop"]], "Results": [[260, "results"]], "Conclusion and next steps": [[260, "conclusion-and-next-steps"]], "Task-specific policy in multi-task environments": [[262, "task-specific-policy-in-multi-task-environments"]], "Executing diverse tasks in parallel": [[262, "executing-diverse-tasks-in-parallel"]], "Rollout": [[262, "rollout"]], "Pendulum: Writing your environment and transforms with TorchRL": [[263, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[263, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[263, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[263, "environment-metadata-env-spec"]], "Specs shape": [[263, "specs-shape"]], "Reproducible experiments: seeding": [[263, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[263, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[263, "testing-our-environment"]], "Transforming an environment": [[263, "transforming-an-environment"]], "Writing custom transforms": [[263, "writing-custom-transforms"]], "Executing a rollout": [[263, "executing-a-rollout"]], "Batching computations": [[263, "batching-computations"]], "Training a simple policy": [[263, "training-a-simple-policy"]], "Using pretrained models": [[264, "using-pretrained-models"]], "Computation times": [[265, "computation-times"]], "Introduction to TorchRL": [[266, "introduction-to-torchrl"]], "Data": [[266, "data"]], "TensorDict": [[266, "tensordict"]], "Envs": [[266, "envs"]], "Changing environments config": [[266, "changing-environments-config"]], "Vectorized Environments": [[266, "vectorized-environments"]], "Modules": [[266, "modules"]], "TensorDictModules": [[266, "tensordictmodules"]], "Sequences of Modules": [[266, "sequences-of-modules"]], "Functional Programming (Ensembling / Meta-RL)": [[266, "functional-programming-ensembling-meta-rl"]], "Specialized Classes": [[266, "specialized-classes"]], "Using Environments and Modules": [[266, "using-environments-and-modules"]], "Collectors": [[266, "collectors"]], "Objectives": [[266, "objectives"]], "State of the Library": [[266, "state-of-the-library"]], "Installing the Library": [[266, "installing-the-library"]], "TorchRL envs": [[267, "torchrl-envs"]], "Gym environments": [[267, "gym-environments"]], "Env Specs": [[267, "env-specs"]], "Seeding, resetting and steps": [[267, "seeding-resetting-and-steps"]], "Rollouts": [[267, "rollouts"]], "frame_skip": [[267, "frame-skip"]], "Rendering": [[267, "rendering"]], "DeepMind Control environments": [[267, "deepmind-control-environments"]], "Transforming envs": [[267, "transforming-envs"]], "Environment device": [[267, "environment-device"]], "Running environments in parallel": [[267, "running-environments-in-parallel"]], "Closing parallel environments": [[267, "closing-parallel-environments"]], "Seeding": [[267, "seeding"]], "Accessing environment attributes": [[267, "accessing-environment-attributes"]], "kwargs for parallel environments": [[267, "kwargs-for-parallel-environments"]], "Transforming parallel environments": [[267, "transforming-parallel-environments"]]}, "indexentries": {"implement_for (class in torchrl._utils)": [[11, "torchrl._utils.implement_for"]], "datacollectorbase (class in torchrl.collectors.collectors)": [[12, "torchrl.collectors.collectors.DataCollectorBase"]], "update_policy_weights_() (torchrl.collectors.collectors.datacollectorbase method)": [[12, "torchrl.collectors.collectors.DataCollectorBase.update_policy_weights_"]], "multisyncdatacollector (class in torchrl.collectors.collectors)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.update_policy_weights_"]], "multiasyncdatacollector (class in torchrl.collectors.collectors)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.update_policy_weights_"]], "randompolicy (class in torchrl.collectors.collectors)": [[15, "torchrl.collectors.collectors.RandomPolicy"]], "syncdatacollector (class in torchrl.collectors.collectors)": [[16, "torchrl.collectors.collectors.SyncDataCollector"]], "iterator() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.iterator"]], "load_state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.reset"]], "rollout() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.rollout"]], "set_seed() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.update_policy_weights_"]], "asyncdatacollector (class in torchrl.collectors.collectors)": [[17, "torchrl.collectors.collectors.aSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.update_policy_weights_"]], "distributeddatacollector (class in torchrl.collectors.distributed)": [[18, "torchrl.collectors.distributed.DistributedDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.distributeddatacollector method)": [[18, "torchrl.collectors.distributed.DistributedDataCollector.update_policy_weights_"]], "distributedsyncdatacollector (class in torchrl.collectors.distributed)": [[19, "torchrl.collectors.distributed.DistributedSyncDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.distributedsyncdatacollector method)": [[19, "torchrl.collectors.distributed.DistributedSyncDataCollector.update_policy_weights_"]], "rpcdatacollector (class in torchrl.collectors.distributed)": [[20, "torchrl.collectors.distributed.RPCDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.rpcdatacollector method)": [[20, "torchrl.collectors.distributed.RPCDataCollector.update_policy_weights_"]], "raycollector (class in torchrl.collectors.distributed)": [[21, "torchrl.collectors.distributed.RayCollector"]], "add_collectors() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.add_collectors"]], "load_state_dict() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.load_state_dict"]], "local_policy() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.local_policy"]], "remote_collectors() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.remote_collectors"]], "set_seed() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.set_seed"]], "shutdown() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.shutdown"]], "state_dict() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.state_dict"]], "stop_remote_collectors() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.stop_remote_collectors"]], "update_policy_weights_() (torchrl.collectors.distributed.raycollector method)": [[21, "torchrl.collectors.distributed.RayCollector.update_policy_weights_"]], "submitit_delayed_launcher (class in torchrl.collectors.distributed)": [[22, "torchrl.collectors.distributed.submitit_delayed_launcher"]], "split_trajectories() (in module torchrl.collectors.utils)": [[23, "torchrl.collectors.utils.split_trajectories"]], "binarydiscretetensorspec (class in torchrl.data)": [[24, "torchrl.data.BinaryDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.encode"]], "expand() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.binarydiscretetensorspec class method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.index"]], "is_in() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.is_in"]], "project() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.project"]], "rand() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.binarydiscretetensorspec method)": [[24, "torchrl.data.BinaryDiscreteTensorSpec.zero"]], "boundedtensorspec (class in torchrl.data)": [[25, "torchrl.data.BoundedTensorSpec"]], "assert_is_in() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.assert_is_in"]], "encode() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.encode"]], "expand() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.expand"]], "implements_for_spec() (torchrl.data.boundedtensorspec class method)": [[25, "torchrl.data.BoundedTensorSpec.implements_for_spec"]], "index() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.index"]], "is_in() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.is_in"]], "project() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.project"]], "rand() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.rand"]], "squeeze() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.squeeze"]], "to_numpy() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.to_numpy"]], "type_check() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.type_check"]], "zero() (torchrl.data.boundedtensorspec method)": [[25, "torchrl.data.BoundedTensorSpec.zero"]], "compositespec (class in torchrl.data)": [[26, "torchrl.data.CompositeSpec"]], "assert_is_in() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.assert_is_in"]], "encode() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.encode"]], "expand() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.expand"]], "implements_for_spec() (torchrl.data.compositespec class method)": [[26, "torchrl.data.CompositeSpec.implements_for_spec"]], "index() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.index"]], "is_in() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.is_in"]], "items() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.items"]], "keys() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.keys"]], "project() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.project"]], "rand() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.rand"]], "squeeze() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.squeeze"]], "to_numpy() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.to_numpy"]], "type_check() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.type_check"]], "values() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.values"]], "zero() (torchrl.data.compositespec method)": [[26, "torchrl.data.CompositeSpec.zero"]], "discretetensorspec (class in torchrl.data)": [[27, "torchrl.data.DiscreteTensorSpec"]], "assert_is_in() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.encode"]], "expand() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.discretetensorspec class method)": [[27, "torchrl.data.DiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.index"]], "is_in() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.is_in"]], "project() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.project"]], "rand() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.type_check"]], "zero() (torchrl.data.discretetensorspec method)": [[27, "torchrl.data.DiscreteTensorSpec.zero"]], "multidiscretetensorspec (class in torchrl.data)": [[28, "torchrl.data.MultiDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.multidiscretetensorspec class method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.project"]], "rand() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multidiscretetensorspec method)": [[28, "torchrl.data.MultiDiscreteTensorSpec.zero"]], "multionehotdiscretetensorspec (class in torchrl.data)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.multionehotdiscretetensorspec class method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.squeeze"]], "to_categorical() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_categorical"]], "to_categorical_spec() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_categorical_spec"]], "to_numpy() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multionehotdiscretetensorspec method)": [[29, "torchrl.data.MultiOneHotDiscreteTensorSpec.zero"]], "multistep (class in torchrl.data)": [[30, "torchrl.data.MultiStep"]], "add_module() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.add_module"]], "apply() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.apply"]], "bfloat16() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.bfloat16"]], "buffers() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.buffers"]], "children() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.children"]], "cpu() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.cpu"]], "cuda() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.cuda"]], "double() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.double"]], "eval() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.eval"]], "extra_repr() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.extra_repr"]], "float() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.float"]], "forward() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.forward"]], "get_buffer() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_buffer"]], "get_extra_state() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_extra_state"]], "get_parameter() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_parameter"]], "get_submodule() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.get_submodule"]], "half() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.half"]], "ipu() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.ipu"]], "load_state_dict() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.load_state_dict"]], "modules() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.modules"]], "named_buffers() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_buffers"]], "named_children() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_children"]], "named_modules() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_modules"]], "named_parameters() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.named_parameters"]], "parameters() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.parameters"]], "register_backward_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_backward_hook"]], "register_buffer() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_buffer"]], "register_forward_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_forward_hook"]], "register_forward_pre_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_load_state_dict_post_hook"]], "register_module() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_module"]], "register_parameter() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_parameter"]], "register_state_dict_pre_hook() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.requires_grad_"]], "set_extra_state() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.set_extra_state"]], "share_memory() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.share_memory"]], "state_dict() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.state_dict"]], "to() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.to"]], "to_empty() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.to_empty"]], "train() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.train"]], "type() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.type"]], "xpu() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.xpu"]], "zero_grad() (torchrl.data.multistep method)": [[30, "torchrl.data.MultiStep.zero_grad"]], "onehotdiscretetensorspec (class in torchrl.data)": [[31, "torchrl.data.OneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.onehotdiscretetensorspec class method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.squeeze"]], "to_categorical() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.to_categorical"]], "to_categorical_spec() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.to_categorical_spec"]], "to_numpy() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.onehotdiscretetensorspec method)": [[31, "torchrl.data.OneHotDiscreteTensorSpec.zero"]], "prioritizedreplaybuffer (class in torchrl.data)": [[32, "torchrl.data.PrioritizedReplayBuffer"]], "add() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.prioritizedreplaybuffer method)": [[32, "torchrl.data.PrioritizedReplayBuffer.sample"]], "replaybuffer (class in torchrl.data)": [[33, "torchrl.data.ReplayBuffer"]], "add() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.add"]], "append_transform() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.append_transform"]], "extend() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.extend"]], "insert_transform() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.insert_transform"]], "sample() (torchrl.data.replaybuffer method)": [[33, "torchrl.data.ReplayBuffer.sample"]], "tensordictprioritizedreplaybuffer (class in torchrl.data)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer"]], "add() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[34, "torchrl.data.TensorDictPrioritizedReplayBuffer.sample"]], "tensordictreplaybuffer (class in torchrl.data)": [[35, "torchrl.data.TensorDictReplayBuffer"]], "add() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictreplaybuffer method)": [[35, "torchrl.data.TensorDictReplayBuffer.sample"]], "tensorspec (class in torchrl.data)": [[36, "torchrl.data.TensorSpec"]], "assert_is_in() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.assert_is_in"]], "encode() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.encode"]], "expand() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.expand"]], "implements_for_spec() (torchrl.data.tensorspec class method)": [[36, "torchrl.data.TensorSpec.implements_for_spec"]], "index() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.index"]], "is_in() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.is_in"]], "project() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.project"]], "rand() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.rand"]], "squeeze() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.squeeze"]], "to_numpy() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.to_numpy"]], "type_check() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.type_check"]], "zero() (torchrl.data.tensorspec method)": [[36, "torchrl.data.TensorSpec.zero"]], "unboundedcontinuoustensorspec (class in torchrl.data)": [[37, "torchrl.data.UnboundedContinuousTensorSpec"]], "assert_is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.encode"]], "expand() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.expand"]], "implements_for_spec() (torchrl.data.unboundedcontinuoustensorspec class method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.implements_for_spec"]], "index() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.index"]], "is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.is_in"]], "project() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.project"]], "rand() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.rand"]], "squeeze() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.squeeze"]], "to_numpy() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.type_check"]], "zero() (torchrl.data.unboundedcontinuoustensorspec method)": [[37, "torchrl.data.UnboundedContinuousTensorSpec.zero"]], "unboundeddiscretetensorspec (class in torchrl.data)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.encode"]], "expand() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.unboundeddiscretetensorspec class method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.index"]], "is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.is_in"]], "project() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.project"]], "rand() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.unboundeddiscretetensorspec method)": [[38, "torchrl.data.UnboundedDiscreteTensorSpec.zero"]], "d4rlexperiencereplay (class in torchrl.data.datasets)": [[39, "torchrl.data.datasets.D4RLExperienceReplay"]], "add() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.add"]], "append_transform() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.append_transform"]], "extend() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.extend"]], "insert_transform() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.insert_transform"]], "sample() (torchrl.data.datasets.d4rlexperiencereplay method)": [[39, "torchrl.data.datasets.D4RLExperienceReplay.sample"]], "openmlexperiencereplay (class in torchrl.data.datasets)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay"]], "add() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.add"]], "append_transform() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.append_transform"]], "extend() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.extend"]], "insert_transform() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.insert_transform"]], "sample() (torchrl.data.datasets.openmlexperiencereplay method)": [[40, "torchrl.data.datasets.OpenMLExperienceReplay.sample"]], "lazymemmapstorage (class in torchrl.data.replay_buffers)": [[41, "torchrl.data.replay_buffers.LazyMemmapStorage"]], "attach() (torchrl.data.replay_buffers.lazymemmapstorage method)": [[41, "torchrl.data.replay_buffers.LazyMemmapStorage.attach"]], "lazytensorstorage (class in torchrl.data.replay_buffers)": [[42, "torchrl.data.replay_buffers.LazyTensorStorage"]], "attach() (torchrl.data.replay_buffers.lazytensorstorage method)": [[42, "torchrl.data.replay_buffers.LazyTensorStorage.attach"]], "liststorage (class in torchrl.data.replay_buffers)": [[43, "torchrl.data.replay_buffers.ListStorage"]], "attach() (torchrl.data.replay_buffers.liststorage method)": [[43, "torchrl.data.replay_buffers.ListStorage.attach"]], "prioritizedsampler (class in torchrl.data.replay_buffers)": [[44, "torchrl.data.replay_buffers.PrioritizedSampler"]], "update_priority() (torchrl.data.replay_buffers.prioritizedsampler method)": [[44, "torchrl.data.replay_buffers.PrioritizedSampler.update_priority"]], "randomsampler (class in torchrl.data.replay_buffers)": [[45, "torchrl.data.replay_buffers.RandomSampler"]], "roundrobinwriter (class in torchrl.data.replay_buffers)": [[46, "torchrl.data.replay_buffers.RoundRobinWriter"]], "add() (torchrl.data.replay_buffers.roundrobinwriter method)": [[46, "torchrl.data.replay_buffers.RoundRobinWriter.add"]], "extend() (torchrl.data.replay_buffers.roundrobinwriter method)": [[46, "torchrl.data.replay_buffers.RoundRobinWriter.extend"]], "sampler (class in torchrl.data.replay_buffers)": [[47, "torchrl.data.replay_buffers.Sampler"]], "samplerwithoutreplacement (class in torchrl.data.replay_buffers)": [[48, "torchrl.data.replay_buffers.SamplerWithoutReplacement"]], "storage (class in torchrl.data.replay_buffers)": [[49, "torchrl.data.replay_buffers.Storage"]], "attach() (torchrl.data.replay_buffers.storage method)": [[49, "torchrl.data.replay_buffers.Storage.attach"]], "writer (class in torchrl.data.replay_buffers)": [[50, "torchrl.data.replay_buffers.Writer"]], "add() (torchrl.data.replay_buffers.writer method)": [[50, "torchrl.data.replay_buffers.Writer.add"]], "extend() (torchrl.data.replay_buffers.writer method)": [[50, "torchrl.data.replay_buffers.Writer.extend"]], "envbase (class in torchrl.envs)": [[51, "torchrl.envs.EnvBase"]], "add_module() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.add_module"]], "apply() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.apply"]], "batch_locked (torchrl.envs.envbase property)": [[51, "torchrl.envs.EnvBase.batch_locked"]], "bfloat16() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.bfloat16"]], "buffers() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.buffers"]], "children() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.children"]], "cpu() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.cpu"]], "cuda() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.cuda"]], "double() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.double"]], "eval() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.eval"]], "extra_repr() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.extra_repr"]], "fake_tensordict() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.fake_tensordict"]], "float() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.float"]], "forward() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.forward"]], "get_buffer() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_buffer"]], "get_extra_state() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_extra_state"]], "get_parameter() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_parameter"]], "get_submodule() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.get_submodule"]], "half() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.half"]], "ipu() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.ipu"]], "load_state_dict() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.load_state_dict"]], "modules() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.modules"]], "named_buffers() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_buffers"]], "named_children() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_children"]], "named_modules() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_modules"]], "named_parameters() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.named_parameters"]], "parameters() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.parameters"]], "rand_action() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.rand_action"]], "rand_step() (torchrl.envs.envbase method)": [[51, "id0"], [51, "torchrl.envs.EnvBase.rand_step"]], "register_backward_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_backward_hook"]], "register_buffer() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_buffer"]], "register_forward_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_module"]], "register_parameter() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.requires_grad_"]], "reset() (torchrl.envs.envbase method)": [[51, "id1"], [51, "torchrl.envs.EnvBase.reset"]], "rollout() (torchrl.envs.envbase method)": [[51, "id2"], [51, "torchrl.envs.EnvBase.rollout"]], "set_extra_state() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.set_extra_state"]], "set_seed() (torchrl.envs.envbase method)": [[51, "id3"], [51, "torchrl.envs.EnvBase.set_seed"]], "share_memory() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.share_memory"]], "specs (torchrl.envs.envbase property)": [[51, "torchrl.envs.EnvBase.specs"]], "state_dict() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.state_dict"]], "step() (torchrl.envs.envbase method)": [[51, "id4"], [51, "torchrl.envs.EnvBase.step"]], "to() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.to"]], "to_empty() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.to_empty"]], "train() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.train"]], "type() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.type"]], "xpu() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.xpu"]], "zero_grad() (torchrl.envs.envbase method)": [[51, "torchrl.envs.EnvBase.zero_grad"]], "envcreator (class in torchrl.envs)": [[52, "torchrl.envs.EnvCreator"]], "envmetadata (class in torchrl.envs)": [[53, "torchrl.envs.EnvMetaData"]], "gymlikeenv (class in torchrl.envs)": [[54, "torchrl.envs.GymLikeEnv"]], "add_module() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.add_module"]], "apply() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.apply"]], "batch_locked (torchrl.envs.gymlikeenv property)": [[54, "torchrl.envs.GymLikeEnv.batch_locked"]], "bfloat16() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.bfloat16"]], "buffers() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.buffers"]], "children() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.children"]], "close() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.close"]], "cpu() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.cpu"]], "cuda() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.cuda"]], "double() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.double"]], "eval() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.eval"]], "extra_repr() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.fake_tensordict"]], "float() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.float"]], "forward() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.forward"]], "get_buffer() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_buffer"]], "get_extra_state() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_extra_state"]], "get_parameter() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_parameter"]], "get_submodule() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.get_submodule"]], "half() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.half"]], "ipu() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.ipu"]], "load_state_dict() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.load_state_dict"]], "modules() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.modules"]], "named_buffers() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_buffers"]], "named_children() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_children"]], "named_modules() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_modules"]], "named_parameters() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.named_parameters"]], "parameters() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.parameters"]], "rand_action() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.rand_action"]], "rand_step() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.rand_step"]], "read_action() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_action"]], "read_done() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_done"]], "read_obs() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_obs"]], "read_reward() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.read_reward"]], "register_backward_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_module"]], "register_parameter() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.requires_grad_"]], "reset() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.reset"]], "rollout() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.rollout"]], "set_extra_state() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.set_extra_state"]], "set_info_dict_reader() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.set_info_dict_reader"]], "set_seed() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.set_seed"]], "share_memory() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.share_memory"]], "specs (torchrl.envs.gymlikeenv property)": [[54, "torchrl.envs.GymLikeEnv.specs"]], "state_dict() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.state_dict"]], "step() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.step"]], "to() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.to"]], "to_empty() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.to_empty"]], "train() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.train"]], "type() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.type"]], "xpu() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.xpu"]], "zero_grad() (torchrl.envs.gymlikeenv method)": [[54, "torchrl.envs.GymLikeEnv.zero_grad"]], "modelbasedenvbase() (in module torchrl.envs)": [[55, "torchrl.envs.ModelBasedEnvBase"]], "rand_step() (in module torchrl.envs)": [[55, "torchrl.envs.rand_step"]], "reset() (in module torchrl.envs)": [[55, "torchrl.envs.reset"]], "rollout() (in module torchrl.envs)": [[55, "torchrl.envs.rollout"]], "set_seed() (in module torchrl.envs)": [[55, "torchrl.envs.set_seed"]], "step() (in module torchrl.envs)": [[55, "torchrl.envs.step"]], "multithreadedenv (class in torchrl.envs)": [[56, "torchrl.envs.MultiThreadedEnv"]], "add_module() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.add_module"]], "apply() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.apply"]], "batch_locked (torchrl.envs.multithreadedenv property)": [[56, "torchrl.envs.MultiThreadedEnv.batch_locked"]], "bfloat16() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.bfloat16"]], "buffers() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.buffers"]], "children() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.children"]], "close() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.close"]], "cpu() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.cpu"]], "cuda() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.cuda"]], "double() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.double"]], "eval() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.eval"]], "extra_repr() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.fake_tensordict"]], "float() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.float"]], "forward() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.forward"]], "get_buffer() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_buffer"]], "get_extra_state() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_extra_state"]], "get_parameter() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_parameter"]], "get_submodule() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.get_submodule"]], "half() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.half"]], "ipu() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.ipu"]], "load_state_dict() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.load_state_dict"]], "modules() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.modules"]], "named_buffers() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_buffers"]], "named_children() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_children"]], "named_modules() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_modules"]], "named_parameters() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.named_parameters"]], "parameters() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.parameters"]], "rand_action() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.rand_action"]], "rand_step() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.rand_step"]], "register_backward_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_module"]], "register_parameter() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.requires_grad_"]], "reset() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.reset"]], "rollout() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.rollout"]], "set_extra_state() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.set_extra_state"]], "set_seed() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.set_seed"]], "share_memory() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.share_memory"]], "specs (torchrl.envs.multithreadedenv property)": [[56, "torchrl.envs.MultiThreadedEnv.specs"]], "state_dict() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.state_dict"]], "step() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.step"]], "to() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.to"]], "to_empty() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.to_empty"]], "train() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.train"]], "type() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.type"]], "xpu() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.xpu"]], "zero_grad() (torchrl.envs.multithreadedenv method)": [[56, "torchrl.envs.MultiThreadedEnv.zero_grad"]], "parallelenv (class in torchrl.envs)": [[57, "torchrl.envs.ParallelEnv"]], "add_module() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.add_module"]], "apply() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.apply"]], "batch_locked (torchrl.envs.parallelenv property)": [[57, "torchrl.envs.ParallelEnv.batch_locked"]], "bfloat16() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.bfloat16"]], "buffers() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.buffers"]], "children() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.children"]], "cpu() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.cpu"]], "cuda() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.cuda"]], "double() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.double"]], "eval() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.eval"]], "extra_repr() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.fake_tensordict"]], "float() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.float"]], "forward() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.forward"]], "get_buffer() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_buffer"]], "get_extra_state() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_extra_state"]], "get_parameter() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_parameter"]], "get_submodule() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.get_submodule"]], "half() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.half"]], "ipu() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.ipu"]], "load_state_dict() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.load_state_dict"]], "modules() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.modules"]], "named_buffers() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_buffers"]], "named_children() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_children"]], "named_modules() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_modules"]], "named_parameters() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.named_parameters"]], "parameters() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.parameters"]], "rand_action() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.rand_action"]], "rand_step() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.rand_step"]], "register_backward_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_module"]], "register_parameter() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.requires_grad_"]], "reset() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.reset"]], "rollout() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.rollout"]], "set_extra_state() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.set_extra_state"]], "set_seed() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.set_seed"]], "share_memory() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.share_memory"]], "specs (torchrl.envs.parallelenv property)": [[57, "torchrl.envs.ParallelEnv.specs"]], "state_dict() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.state_dict"]], "step() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.step"]], "to() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.to"]], "to_empty() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.to_empty"]], "train() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.train"]], "type() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.type"]], "update_kwargs() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.update_kwargs"]], "xpu() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.xpu"]], "zero_grad() (torchrl.envs.parallelenv method)": [[57, "torchrl.envs.ParallelEnv.zero_grad"]], "serialenv (class in torchrl.envs)": [[58, "torchrl.envs.SerialEnv"]], "add_module() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.add_module"]], "apply() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.apply"]], "batch_locked (torchrl.envs.serialenv property)": [[58, "torchrl.envs.SerialEnv.batch_locked"]], "bfloat16() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.bfloat16"]], "buffers() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.buffers"]], "children() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.children"]], "cpu() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.cpu"]], "cuda() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.cuda"]], "double() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.double"]], "eval() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.eval"]], "extra_repr() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.fake_tensordict"]], "float() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.float"]], "forward() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.forward"]], "get_buffer() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_buffer"]], "get_extra_state() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_extra_state"]], "get_parameter() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_parameter"]], "get_submodule() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.get_submodule"]], "half() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.half"]], "ipu() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.ipu"]], "load_state_dict() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.load_state_dict"]], "modules() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.modules"]], "named_buffers() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_buffers"]], "named_children() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_children"]], "named_modules() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_modules"]], "named_parameters() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.named_parameters"]], "parameters() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.parameters"]], "rand_action() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.rand_action"]], "rand_step() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.rand_step"]], "register_backward_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_module"]], "register_parameter() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.requires_grad_"]], "reset() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.reset"]], "rollout() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.rollout"]], "set_extra_state() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.set_extra_state"]], "set_seed() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.set_seed"]], "share_memory() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.share_memory"]], "specs (torchrl.envs.serialenv property)": [[58, "torchrl.envs.SerialEnv.specs"]], "state_dict() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.state_dict"]], "step() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.step"]], "to() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.to"]], "to_empty() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.to_empty"]], "train() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.train"]], "type() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.type"]], "update_kwargs() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.update_kwargs"]], "xpu() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.xpu"]], "zero_grad() (torchrl.envs.serialenv method)": [[58, "torchrl.envs.SerialEnv.zero_grad"]], "braxenv() (in module torchrl.envs.libs.brax)": [[59, "torchrl.envs.libs.brax.BraxEnv"]], "braxwrapper() (in module torchrl.envs.libs.brax)": [[60, "torchrl.envs.libs.brax.BraxWrapper"]], "dmcontrolenv() (in module torchrl.envs.libs.dm_control)": [[61, "torchrl.envs.libs.dm_control.DMControlEnv"]], "dmcontrolwrapper() (in module torchrl.envs.libs.dm_control)": [[62, "torchrl.envs.libs.dm_control.DMControlWrapper"]], "gymenv() (in module torchrl.envs.libs.gym)": [[63, "torchrl.envs.libs.gym.GymEnv"]], "gymwrapper() (in module torchrl.envs.libs.gym)": [[64, "torchrl.envs.libs.gym.GymWrapper"]], "habitatenv() (in module torchrl.envs.libs.habitat)": [[65, "torchrl.envs.libs.habitat.HabitatEnv"]], "jumanjienv() (in module torchrl.envs.libs.jumanji)": [[66, "torchrl.envs.libs.jumanji.JumanjiEnv"]], "jumanjiwrapper() (in module torchrl.envs.libs.jumanji)": [[67, "torchrl.envs.libs.jumanji.JumanjiWrapper"]], "openmlenv() (in module torchrl.envs.libs.openml)": [[68, "torchrl.envs.libs.openml.OpenMLEnv"]], "vmasenv() (in module torchrl.envs.libs.vmas)": [[69, "torchrl.envs.libs.vmas.VmasEnv"]], "vmaswrapper() (in module torchrl.envs.libs.vmas)": [[70, "torchrl.envs.libs.vmas.VmasWrapper"]], "dreamerenv() (in module torchrl.envs.model_based.dreamer)": [[71, "torchrl.envs.model_based.dreamer.DreamerEnv"]], "binarizereward (class in torchrl.envs.transforms)": [[72, "torchrl.envs.transforms.BinarizeReward"]], "transform_reward_spec() (torchrl.envs.transforms.binarizereward method)": [[72, "torchrl.envs.transforms.BinarizeReward.transform_reward_spec"]], "catframes (class in torchrl.envs.transforms)": [[73, "torchrl.envs.transforms.CatFrames"]], "forward() (torchrl.envs.transforms.catframes method)": [[73, "torchrl.envs.transforms.CatFrames.forward"]], "reset() (torchrl.envs.transforms.catframes method)": [[73, "torchrl.envs.transforms.CatFrames.reset"]], "transform_observation_spec() (torchrl.envs.transforms.catframes method)": [[73, "torchrl.envs.transforms.CatFrames.transform_observation_spec"]], "cattensors (class in torchrl.envs.transforms)": [[74, "torchrl.envs.transforms.CatTensors"]], "forward() (torchrl.envs.transforms.cattensors method)": [[74, "torchrl.envs.transforms.CatTensors.forward"]], "transform_observation_spec() (torchrl.envs.transforms.cattensors method)": [[74, "torchrl.envs.transforms.CatTensors.transform_observation_spec"]], "centercrop (class in torchrl.envs.transforms)": [[75, "torchrl.envs.transforms.CenterCrop"]], "transform_observation_spec() (torchrl.envs.transforms.centercrop method)": [[75, "torchrl.envs.transforms.CenterCrop.transform_observation_spec"]], "compose (class in torchrl.envs.transforms)": [[76, "torchrl.envs.transforms.Compose"]], "forward() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.forward"]], "reset() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.reset"]], "to() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.to"]], "transform_input_spec() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.compose method)": [[76, "torchrl.envs.transforms.Compose.transform_reward_spec"]], "discreteactionprojection (class in torchrl.envs.transforms)": [[77, "torchrl.envs.transforms.DiscreteActionProjection"]], "transform_input_spec() (torchrl.envs.transforms.discreteactionprojection method)": [[77, "torchrl.envs.transforms.DiscreteActionProjection.transform_input_spec"]], "doubletofloat (class in torchrl.envs.transforms)": [[78, "torchrl.envs.transforms.DoubleToFloat"]], "transform_input_spec() (torchrl.envs.transforms.doubletofloat method)": [[78, "torchrl.envs.transforms.DoubleToFloat.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.doubletofloat method)": [[78, "torchrl.envs.transforms.DoubleToFloat.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.doubletofloat method)": [[78, "torchrl.envs.transforms.DoubleToFloat.transform_reward_spec"]], "excludetransform (class in torchrl.envs.transforms)": [[79, "torchrl.envs.transforms.ExcludeTransform"]], "forward() (torchrl.envs.transforms.excludetransform method)": [[79, "torchrl.envs.transforms.ExcludeTransform.forward"]], "reset() (torchrl.envs.transforms.excludetransform method)": [[79, "torchrl.envs.transforms.ExcludeTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.excludetransform method)": [[79, "torchrl.envs.transforms.ExcludeTransform.transform_observation_spec"]], "finitetensordictcheck (class in torchrl.envs.transforms)": [[80, "torchrl.envs.transforms.FiniteTensorDictCheck"]], "forward() (torchrl.envs.transforms.finitetensordictcheck method)": [[80, "torchrl.envs.transforms.FiniteTensorDictCheck.forward"]], "flattenobservation (class in torchrl.envs.transforms)": [[81, "torchrl.envs.transforms.FlattenObservation"]], "forward() (torchrl.envs.transforms.flattenobservation method)": [[81, "torchrl.envs.transforms.FlattenObservation.forward"]], "transform_observation_spec() (torchrl.envs.transforms.flattenobservation method)": [[81, "torchrl.envs.transforms.FlattenObservation.transform_observation_spec"]], "frameskiptransform (class in torchrl.envs.transforms)": [[82, "torchrl.envs.transforms.FrameSkipTransform"]], "forward() (torchrl.envs.transforms.frameskiptransform method)": [[82, "torchrl.envs.transforms.FrameSkipTransform.forward"]], "grayscale (class in torchrl.envs.transforms)": [[83, "torchrl.envs.transforms.GrayScale"]], "transform_observation_spec() (torchrl.envs.transforms.grayscale method)": [[83, "torchrl.envs.transforms.GrayScale.transform_observation_spec"]], "inittracker (class in torchrl.envs.transforms)": [[84, "torchrl.envs.transforms.InitTracker"]], "forward() (torchrl.envs.transforms.inittracker method)": [[84, "torchrl.envs.transforms.InitTracker.forward"]], "reset() (torchrl.envs.transforms.inittracker method)": [[84, "torchrl.envs.transforms.InitTracker.reset"]], "transform_observation_spec() (torchrl.envs.transforms.inittracker method)": [[84, "torchrl.envs.transforms.InitTracker.transform_observation_spec"]], "noopresetenv (class in torchrl.envs.transforms)": [[85, "torchrl.envs.transforms.NoopResetEnv"]], "reset() (torchrl.envs.transforms.noopresetenv method)": [[85, "torchrl.envs.transforms.NoopResetEnv.reset"]], "observationnorm (class in torchrl.envs.transforms)": [[86, "torchrl.envs.transforms.ObservationNorm"]], "init_stats() (torchrl.envs.transforms.observationnorm method)": [[86, "torchrl.envs.transforms.ObservationNorm.init_stats"]], "transform_input_spec() (torchrl.envs.transforms.observationnorm method)": [[86, "torchrl.envs.transforms.ObservationNorm.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.observationnorm method)": [[86, "torchrl.envs.transforms.ObservationNorm.transform_observation_spec"]], "observationtransform (class in torchrl.envs.transforms)": [[87, "torchrl.envs.transforms.ObservationTransform"]], "pinmemorytransform (class in torchrl.envs.transforms)": [[88, "torchrl.envs.transforms.PinMemoryTransform"]], "forward() (torchrl.envs.transforms.pinmemorytransform method)": [[88, "torchrl.envs.transforms.PinMemoryTransform.forward"]], "r3mtransform (class in torchrl.envs.transforms)": [[89, "torchrl.envs.transforms.R3MTransform"]], "to() (torchrl.envs.transforms.r3mtransform method)": [[89, "torchrl.envs.transforms.R3MTransform.to"]], "randomcroptensordict (class in torchrl.envs.transforms)": [[90, "torchrl.envs.transforms.RandomCropTensorDict"]], "forward() (torchrl.envs.transforms.randomcroptensordict method)": [[90, "torchrl.envs.transforms.RandomCropTensorDict.forward"]], "renametransform (class in torchrl.envs.transforms)": [[91, "torchrl.envs.transforms.RenameTransform"]], "forward() (torchrl.envs.transforms.renametransform method)": [[91, "torchrl.envs.transforms.RenameTransform.forward"]], "transform_input_spec() (torchrl.envs.transforms.renametransform method)": [[91, "torchrl.envs.transforms.RenameTransform.transform_input_spec"]], "transform_output_spec() (torchrl.envs.transforms.renametransform method)": [[91, "torchrl.envs.transforms.RenameTransform.transform_output_spec"]], "resize (class in torchrl.envs.transforms)": [[92, "torchrl.envs.transforms.Resize"]], "transform_observation_spec() (torchrl.envs.transforms.resize method)": [[92, "torchrl.envs.transforms.Resize.transform_observation_spec"]], "rewardclipping (class in torchrl.envs.transforms)": [[93, "torchrl.envs.transforms.RewardClipping"]], "transform_reward_spec() (torchrl.envs.transforms.rewardclipping method)": [[93, "torchrl.envs.transforms.RewardClipping.transform_reward_spec"]], "rewardscaling (class in torchrl.envs.transforms)": [[94, "torchrl.envs.transforms.RewardScaling"]], "transform_reward_spec() (torchrl.envs.transforms.rewardscaling method)": [[94, "torchrl.envs.transforms.RewardScaling.transform_reward_spec"]], "rewardsum (class in torchrl.envs.transforms)": [[95, "torchrl.envs.transforms.RewardSum"]], "forward() (torchrl.envs.transforms.rewardsum method)": [[95, "torchrl.envs.transforms.RewardSum.forward"]], "reset() (torchrl.envs.transforms.rewardsum method)": [[95, "torchrl.envs.transforms.RewardSum.reset"]], "transform_observation_spec() (torchrl.envs.transforms.rewardsum method)": [[95, "torchrl.envs.transforms.RewardSum.transform_observation_spec"]], "selecttransform (class in torchrl.envs.transforms)": [[96, "torchrl.envs.transforms.SelectTransform"]], "forward() (torchrl.envs.transforms.selecttransform method)": [[96, "torchrl.envs.transforms.SelectTransform.forward"]], "reset() (torchrl.envs.transforms.selecttransform method)": [[96, "torchrl.envs.transforms.SelectTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.selecttransform method)": [[96, "torchrl.envs.transforms.SelectTransform.transform_observation_spec"]], "squeezetransform (class in torchrl.envs.transforms)": [[97, "torchrl.envs.transforms.SqueezeTransform"]], "stepcounter (class in torchrl.envs.transforms)": [[98, "torchrl.envs.transforms.StepCounter"]], "forward() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.forward"]], "reset() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.reset"]], "transform_input_spec() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.stepcounter method)": [[98, "torchrl.envs.transforms.StepCounter.transform_observation_spec"]], "tensordictprimer (class in torchrl.envs.transforms)": [[99, "torchrl.envs.transforms.TensorDictPrimer"]], "forward() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.forward"]], "reset() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.reset"]], "to() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.to"]], "transform_observation_spec() (torchrl.envs.transforms.tensordictprimer method)": [[99, "torchrl.envs.transforms.TensorDictPrimer.transform_observation_spec"]], "timemaxpool (class in torchrl.envs.transforms)": [[100, "torchrl.envs.transforms.TimeMaxPool"]], "forward() (torchrl.envs.transforms.timemaxpool method)": [[100, "torchrl.envs.transforms.TimeMaxPool.forward"]], "reset() (torchrl.envs.transforms.timemaxpool method)": [[100, "torchrl.envs.transforms.TimeMaxPool.reset"]], "transform_observation_spec() (torchrl.envs.transforms.timemaxpool method)": [[100, "torchrl.envs.transforms.TimeMaxPool.transform_observation_spec"]], "totensorimage (class in torchrl.envs.transforms)": [[101, "torchrl.envs.transforms.ToTensorImage"]], "transform_observation_spec() (torchrl.envs.transforms.totensorimage method)": [[101, "torchrl.envs.transforms.ToTensorImage.transform_observation_spec"]], "transform (class in torchrl.envs.transforms)": [[102, "torchrl.envs.transforms.Transform"]], "forward() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.forward"]], "reset() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.reset"]], "transform_done_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_done_spec"]], "transform_input_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_observation_spec"]], "transform_output_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_output_spec"]], "transform_reward_spec() (torchrl.envs.transforms.transform method)": [[102, "torchrl.envs.transforms.Transform.transform_reward_spec"]], "transformedenv (class in torchrl.envs.transforms)": [[103, "torchrl.envs.transforms.TransformedEnv"]], "action_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.action_spec"]], "batch_locked (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.batch_locked"]], "done_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.done_spec"]], "eval() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.eval"]], "input_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.input_spec"]], "load_state_dict() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.load_state_dict"]], "observation_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.observation_spec"]], "output_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.output_spec"]], "reward_spec (torchrl.envs.transforms.transformedenv property)": [[103, "torchrl.envs.transforms.TransformedEnv.reward_spec"]], "set_seed() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.set_seed"]], "state_dict() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.state_dict"]], "to() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.to"]], "train() (torchrl.envs.transforms.transformedenv method)": [[103, "torchrl.envs.transforms.TransformedEnv.train"]], "unsqueezetransform (class in torchrl.envs.transforms)": [[104, "torchrl.envs.transforms.UnsqueezeTransform"]], "transform_input_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[104, "torchrl.envs.transforms.UnsqueezeTransform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[104, "torchrl.envs.transforms.UnsqueezeTransform.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[104, "torchrl.envs.transforms.UnsqueezeTransform.transform_reward_spec"]], "viprewardtransform (class in torchrl.envs.transforms)": [[105, "torchrl.envs.transforms.VIPRewardTransform"]], "forward() (torchrl.envs.transforms.viprewardtransform method)": [[105, "torchrl.envs.transforms.VIPRewardTransform.forward"]], "reset() (torchrl.envs.transforms.viprewardtransform method)": [[105, "torchrl.envs.transforms.VIPRewardTransform.reset"]], "viptransform (class in torchrl.envs.transforms)": [[106, "torchrl.envs.transforms.VIPTransform"]], "to() (torchrl.envs.transforms.viptransform method)": [[106, "torchrl.envs.transforms.VIPTransform.to"]], "vecnorm (class in torchrl.envs.transforms)": [[107, "torchrl.envs.transforms.VecNorm"]], "build_td_for_shared_vecnorm() (torchrl.envs.transforms.vecnorm static method)": [[107, "torchrl.envs.transforms.VecNorm.build_td_for_shared_vecnorm"]], "forward() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.forward"]], "get_extra_state() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.get_extra_state"]], "set_extra_state() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.set_extra_state"]], "to_observation_norm() (torchrl.envs.transforms.vecnorm method)": [[107, "torchrl.envs.transforms.VecNorm.to_observation_norm"]], "gsdenoise (class in torchrl.envs.transforms)": [[108, "torchrl.envs.transforms.gSDENoise"]], "check_env_specs() (in module torchrl.envs.utils)": [[109, "torchrl.envs.utils.check_env_specs"]], "exploration_mode() (in module torchrl.envs.utils)": [[110, "torchrl.envs.utils.exploration_mode"]], "exploration_type() (in module torchrl.envs.utils)": [[111, "torchrl.envs.utils.exploration_type"]], "get_available_libraries() (in module torchrl.envs.utils)": [[112, "torchrl.envs.utils.get_available_libraries"]], "make_composite_from_td() (in module torchrl.envs.utils)": [[113, "torchrl.envs.utils.make_composite_from_td"]], "set_exploration_mode() (in module torchrl.envs.utils)": [[114, "torchrl.envs.utils.set_exploration_mode"]], "set_exploration_type() (in module torchrl.envs.utils)": [[115, "torchrl.envs.utils.set_exploration_type"]], "step_mdp() (in module torchrl.envs.utils)": [[116, "torchrl.envs.utils.step_mdp"]], "cemplanner (class in torchrl.modules)": [[117, "torchrl.modules.CEMPlanner"]], "planning() (torchrl.modules.cemplanner method)": [[117, "torchrl.modules.CEMPlanner.planning"]], "convnet (class in torchrl.modules)": [[118, "torchrl.modules.ConvNet"]], "forward() (torchrl.modules.convnet method)": [[118, "torchrl.modules.ConvNet.forward"]], "ddpgcnnactor (class in torchrl.modules)": [[119, "torchrl.modules.DdpgCnnActor"]], "forward() (torchrl.modules.ddpgcnnactor method)": [[119, "torchrl.modules.DdpgCnnActor.forward"]], "ddpgcnnqnet (class in torchrl.modules)": [[120, "torchrl.modules.DdpgCnnQNet"]], "forward() (torchrl.modules.ddpgcnnqnet method)": [[120, "torchrl.modules.DdpgCnnQNet.forward"]], "ddpgmlpactor (class in torchrl.modules)": [[121, "torchrl.modules.DdpgMlpActor"]], "forward() (torchrl.modules.ddpgmlpactor method)": [[121, "torchrl.modules.DdpgMlpActor.forward"]], "ddpgmlpqnet (class in torchrl.modules)": [[122, "torchrl.modules.DdpgMlpQNet"]], "forward() (torchrl.modules.ddpgmlpqnet method)": [[122, "torchrl.modules.DdpgMlpQNet.forward"]], "delta (class in torchrl.modules)": [[123, "torchrl.modules.Delta"]], "log_prob() (torchrl.modules.delta method)": [[123, "torchrl.modules.Delta.log_prob"]], "mean (torchrl.modules.delta property)": [[123, "torchrl.modules.Delta.mean"]], "mode (torchrl.modules.delta property)": [[123, "torchrl.modules.Delta.mode"]], "rsample() (torchrl.modules.delta method)": [[123, "torchrl.modules.Delta.rsample"]], "sample() (torchrl.modules.delta method)": [[123, "torchrl.modules.Delta.sample"]], "distributionaldqnnet (class in torchrl.modules)": [[124, "torchrl.modules.DistributionalDQNnet"]], "forward() (torchrl.modules.distributionaldqnnet method)": [[124, "torchrl.modules.DistributionalDQNnet.forward"]], "distributionalqvaluehook (class in torchrl.modules)": [[125, "torchrl.modules.DistributionalQValueHook"]], "dreameractor (class in torchrl.modules)": [[126, "torchrl.modules.DreamerActor"]], "forward() (torchrl.modules.dreameractor method)": [[126, "torchrl.modules.DreamerActor.forward"]], "duelingcnndqnet (class in torchrl.modules)": [[127, "torchrl.modules.DuelingCnnDQNet"]], "forward() (torchrl.modules.duelingcnndqnet method)": [[127, "torchrl.modules.DuelingCnnDQNet.forward"]], "independentnormal (class in torchrl.modules)": [[128, "torchrl.modules.IndependentNormal"]], "mode (torchrl.modules.independentnormal property)": [[128, "torchrl.modules.IndependentNormal.mode"]], "lstmnet (class in torchrl.modules)": [[129, "torchrl.modules.LSTMNet"]], "forward() (torchrl.modules.lstmnet method)": [[129, "torchrl.modules.LSTMNet.forward"]], "mlp (class in torchrl.modules)": [[130, "torchrl.modules.MLP"]], "forward() (torchrl.modules.mlp method)": [[130, "torchrl.modules.MLP.forward"]], "mpcplannerbase (class in torchrl.modules)": [[131, "torchrl.modules.MPCPlannerBase"]], "forward() (torchrl.modules.mpcplannerbase method)": [[131, "torchrl.modules.MPCPlannerBase.forward"]], "planning() (torchrl.modules.mpcplannerbase method)": [[131, "torchrl.modules.MPCPlannerBase.planning"]], "mppiplanner (class in torchrl.modules)": [[132, "torchrl.modules.MPPIPlanner"]], "planning() (torchrl.modules.mppiplanner method)": [[132, "torchrl.modules.MPPIPlanner.planning"]], "noisylazylinear (class in torchrl.modules)": [[133, "torchrl.modules.NoisyLazyLinear"]], "initialize_parameters() (torchrl.modules.noisylazylinear method)": [[133, "torchrl.modules.NoisyLazyLinear.initialize_parameters"]], "noisylinear (class in torchrl.modules)": [[134, "torchrl.modules.NoisyLinear"]], "normalparamwrapper (class in torchrl.modules)": [[135, "torchrl.modules.NormalParamWrapper"]], "forward() (torchrl.modules.normalparamwrapper method)": [[135, "torchrl.modules.NormalParamWrapper.forward"]], "obsdecoder (class in torchrl.modules)": [[136, "torchrl.modules.ObsDecoder"]], "forward() (torchrl.modules.obsdecoder method)": [[136, "torchrl.modules.ObsDecoder.forward"]], "obsencoder (class in torchrl.modules)": [[137, "torchrl.modules.ObsEncoder"]], "forward() (torchrl.modules.obsencoder method)": [[137, "torchrl.modules.ObsEncoder.forward"]], "onehotcategorical (class in torchrl.modules)": [[138, "torchrl.modules.OneHotCategorical"]], "log_prob() (torchrl.modules.onehotcategorical method)": [[138, "torchrl.modules.OneHotCategorical.log_prob"]], "mode (torchrl.modules.onehotcategorical property)": [[138, "torchrl.modules.OneHotCategorical.mode"]], "rsample() (torchrl.modules.onehotcategorical method)": [[138, "torchrl.modules.OneHotCategorical.rsample"]], "sample() (torchrl.modules.onehotcategorical method)": [[138, "torchrl.modules.OneHotCategorical.sample"]], "qvaluehook (class in torchrl.modules)": [[139, "torchrl.modules.QValueHook"]], "rssmposterior (class in torchrl.modules)": [[140, "torchrl.modules.RSSMPosterior"]], "forward() (torchrl.modules.rssmposterior method)": [[140, "torchrl.modules.RSSMPosterior.forward"]], "rssmprior (class in torchrl.modules)": [[141, "torchrl.modules.RSSMPrior"]], "forward() (torchrl.modules.rssmprior method)": [[141, "torchrl.modules.RSSMPrior.forward"]], "tanhdelta (class in torchrl.modules)": [[142, "torchrl.modules.TanhDelta"]], "mean (torchrl.modules.tanhdelta property)": [[142, "torchrl.modules.TanhDelta.mean"]], "mode (torchrl.modules.tanhdelta property)": [[142, "torchrl.modules.TanhDelta.mode"]], "tanhnormal (class in torchrl.modules)": [[143, "torchrl.modules.TanhNormal"]], "mode (torchrl.modules.tanhnormal property)": [[143, "torchrl.modules.TanhNormal.mode"]], "truncatednormal (class in torchrl.modules)": [[144, "torchrl.modules.TruncatedNormal"]], "log_prob() (torchrl.modules.truncatednormal method)": [[144, "torchrl.modules.TruncatedNormal.log_prob"]], "mode (torchrl.modules.truncatednormal property)": [[144, "torchrl.modules.TruncatedNormal.mode"]], "reset_noise (class in torchrl.modules)": [[145, "torchrl.modules.reset_noise"]], "actor (class in torchrl.modules.tensordict_module)": [[146, "torchrl.modules.tensordict_module.Actor"]], "actorcriticoperator (class in torchrl.modules.tensordict_module)": [[147, "torchrl.modules.tensordict_module.ActorCriticOperator"]], "get_critic_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[147, "torchrl.modules.tensordict_module.ActorCriticOperator.get_critic_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[147, "torchrl.modules.tensordict_module.ActorCriticOperator.get_value_operator"]], "actorcriticwrapper (class in torchrl.modules.tensordict_module)": [[148, "torchrl.modules.tensordict_module.ActorCriticWrapper"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[148, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[148, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_value_operator"]], "actorvalueoperator (class in torchrl.modules.tensordict_module)": [[149, "torchrl.modules.tensordict_module.ActorValueOperator"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[149, "torchrl.modules.tensordict_module.ActorValueOperator.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[149, "torchrl.modules.tensordict_module.ActorValueOperator.get_value_operator"]], "additivegaussianwrapper (class in torchrl.modules.tensordict_module)": [[150, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper"]], "forward() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[150, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.forward"]], "step() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[150, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.step"]], "distributionalqvalueactor (class in torchrl.modules.tensordict_module)": [[151, "torchrl.modules.tensordict_module.DistributionalQValueActor"]], "egreedywrapper (class in torchrl.modules.tensordict_module)": [[152, "torchrl.modules.tensordict_module.EGreedyWrapper"]], "forward() (torchrl.modules.tensordict_module.egreedywrapper method)": [[152, "torchrl.modules.tensordict_module.EGreedyWrapper.forward"]], "step() (torchrl.modules.tensordict_module.egreedywrapper method)": [[152, "torchrl.modules.tensordict_module.EGreedyWrapper.step"]], "ornsteinuhlenbeckprocesswrapper (class in torchrl.modules.tensordict_module)": [[153, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper"]], "forward() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[153, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.forward"]], "step() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[153, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.step"]], "probabilisticactor (class in torchrl.modules.tensordict_module)": [[154, "torchrl.modules.tensordict_module.ProbabilisticActor"]], "qvalueactor (class in torchrl.modules.tensordict_module)": [[155, "torchrl.modules.tensordict_module.QValueActor"]], "safemodule (class in torchrl.modules.tensordict_module)": [[156, "torchrl.modules.tensordict_module.SafeModule"]], "random() (torchrl.modules.tensordict_module.safemodule method)": [[156, "torchrl.modules.tensordict_module.SafeModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safemodule method)": [[156, "torchrl.modules.tensordict_module.SafeModule.random_sample"]], "to() (torchrl.modules.tensordict_module.safemodule method)": [[156, "torchrl.modules.tensordict_module.SafeModule.to"]], "safeprobabilisticmodule (class in torchrl.modules.tensordict_module)": [[157, "torchrl.modules.tensordict_module.SafeProbabilisticModule"]], "random() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[157, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[157, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random_sample"]], "safeprobabilistictensordictsequential (class in torchrl.modules.tensordict_module)": [[158, "torchrl.modules.tensordict_module.SafeProbabilisticTensorDictSequential"]], "safesequential (class in torchrl.modules.tensordict_module)": [[159, "torchrl.modules.tensordict_module.SafeSequential"]], "valueoperator (class in torchrl.modules.tensordict_module)": [[160, "torchrl.modules.tensordict_module.ValueOperator"]], "worldmodelwrapper (class in torchrl.modules.tensordict_module)": [[161, "torchrl.modules.tensordict_module.WorldModelWrapper"]], "get_reward_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[161, "torchrl.modules.tensordict_module.WorldModelWrapper.get_reward_operator"]], "get_transition_model_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[161, "torchrl.modules.tensordict_module.WorldModelWrapper.get_transition_model_operator"]], "biased_softplus (class in torchrl.modules.utils)": [[162, "torchrl.modules.utils.biased_softplus"]], "forward() (torchrl.modules.utils.biased_softplus method)": [[162, "torchrl.modules.utils.biased_softplus.forward"]], "inv_softplus (class in torchrl.modules.utils)": [[163, "torchrl.modules.utils.inv_softplus"]], "mappings (class in torchrl.modules.utils)": [[164, "torchrl.modules.utils.mappings"]], "a2closs (class in torchrl.objectives)": [[165, "torchrl.objectives.A2CLoss"]], "forward() (torchrl.objectives.a2closs method)": [[165, "torchrl.objectives.A2CLoss.forward"]], "make_value_estimator() (torchrl.objectives.a2closs method)": [[165, "torchrl.objectives.A2CLoss.make_value_estimator"]], "clipppoloss (class in torchrl.objectives)": [[166, "torchrl.objectives.ClipPPOLoss"]], "forward() (torchrl.objectives.clipppoloss method)": [[166, "torchrl.objectives.ClipPPOLoss.forward"]], "ddpgloss (class in torchrl.objectives)": [[167, "torchrl.objectives.DDPGLoss"]], "forward() (torchrl.objectives.ddpgloss method)": [[167, "torchrl.objectives.DDPGLoss.forward"]], "make_value_estimator() (torchrl.objectives.ddpgloss method)": [[167, "torchrl.objectives.DDPGLoss.make_value_estimator"]], "dqnloss (class in torchrl.objectives)": [[168, "torchrl.objectives.DQNLoss"]], "forward() (torchrl.objectives.dqnloss method)": [[168, "torchrl.objectives.DQNLoss.forward"]], "make_value_estimator() (torchrl.objectives.dqnloss method)": [[168, "torchrl.objectives.DQNLoss.make_value_estimator"]], "discretesacloss (class in torchrl.objectives)": [[169, "torchrl.objectives.DiscreteSACLoss"]], "forward() (torchrl.objectives.discretesacloss method)": [[169, "torchrl.objectives.DiscreteSACLoss.forward"]], "make_value_estimator() (torchrl.objectives.discretesacloss method)": [[169, "torchrl.objectives.DiscreteSACLoss.make_value_estimator"]], "distributionaldqnloss (class in torchrl.objectives)": [[170, "torchrl.objectives.DistributionalDQNLoss"]], "forward() (torchrl.objectives.distributionaldqnloss method)": [[170, "torchrl.objectives.DistributionalDQNLoss.forward"]], "make_value_estimator() (torchrl.objectives.distributionaldqnloss method)": [[170, "torchrl.objectives.DistributionalDQNLoss.make_value_estimator"]], "dreameractorloss (class in torchrl.objectives)": [[171, "torchrl.objectives.DreamerActorLoss"]], "forward() (torchrl.objectives.dreameractorloss method)": [[171, "torchrl.objectives.DreamerActorLoss.forward"]], "make_value_estimator() (torchrl.objectives.dreameractorloss method)": [[171, "torchrl.objectives.DreamerActorLoss.make_value_estimator"]], "dreamermodelloss (class in torchrl.objectives)": [[172, "torchrl.objectives.DreamerModelLoss"]], "forward() (torchrl.objectives.dreamermodelloss method)": [[172, "torchrl.objectives.DreamerModelLoss.forward"]], "dreamervalueloss (class in torchrl.objectives)": [[173, "torchrl.objectives.DreamerValueLoss"]], "forward() (torchrl.objectives.dreamervalueloss method)": [[173, "torchrl.objectives.DreamerValueLoss.forward"]], "hardupdate (class in torchrl.objectives)": [[174, "torchrl.objectives.HardUpdate"]], "iqlloss (class in torchrl.objectives)": [[175, "torchrl.objectives.IQLLoss"]], "forward() (torchrl.objectives.iqlloss method)": [[175, "torchrl.objectives.IQLLoss.forward"]], "loss_value_diff() (torchrl.objectives.iqlloss static method)": [[175, "torchrl.objectives.IQLLoss.loss_value_diff"]], "make_value_estimator() (torchrl.objectives.iqlloss method)": [[175, "torchrl.objectives.IQLLoss.make_value_estimator"]], "klpenppoloss (class in torchrl.objectives)": [[176, "torchrl.objectives.KLPENPPOLoss"]], "forward() (torchrl.objectives.klpenppoloss method)": [[176, "torchrl.objectives.KLPENPPOLoss.forward"]], "lossmodule (class in torchrl.objectives)": [[177, "torchrl.objectives.LossModule"]], "convert_to_functional() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.convert_to_functional"]], "cpu() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.cpu"]], "cuda() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.cuda"]], "double() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.double"]], "float() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.float"]], "forward() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.forward"]], "half() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.half"]], "make_value_estimator() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.make_value_estimator"]], "named_parameters() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.named_parameters"]], "parameters() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.parameters"]], "register_buffer() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.register_buffer"]], "to() (torchrl.objectives.lossmodule method)": [[177, "torchrl.objectives.LossModule.to"]], "value_estimator (torchrl.objectives.lossmodule property)": [[177, "torchrl.objectives.LossModule.value_estimator"]], "ppoloss (class in torchrl.objectives)": [[178, "torchrl.objectives.PPOLoss"]], "forward() (torchrl.objectives.ppoloss method)": [[178, "torchrl.objectives.PPOLoss.forward"]], "make_value_estimator() (torchrl.objectives.ppoloss method)": [[178, "torchrl.objectives.PPOLoss.make_value_estimator"]], "redqloss (class in torchrl.objectives)": [[179, "torchrl.objectives.REDQLoss"]], "forward() (torchrl.objectives.redqloss method)": [[179, "torchrl.objectives.REDQLoss.forward"]], "make_value_estimator() (torchrl.objectives.redqloss method)": [[179, "torchrl.objectives.REDQLoss.make_value_estimator"]], "reinforceloss (class in torchrl.objectives)": [[180, "torchrl.objectives.ReinforceLoss"]], "forward() (torchrl.objectives.reinforceloss method)": [[180, "torchrl.objectives.ReinforceLoss.forward"]], "make_value_estimator() (torchrl.objectives.reinforceloss method)": [[180, "torchrl.objectives.ReinforceLoss.make_value_estimator"]], "sacloss (class in torchrl.objectives)": [[181, "torchrl.objectives.SACLoss"]], "forward() (torchrl.objectives.sacloss method)": [[181, "torchrl.objectives.SACLoss.forward"]], "make_value_estimator() (torchrl.objectives.sacloss method)": [[181, "torchrl.objectives.SACLoss.make_value_estimator"]], "softupdate (class in torchrl.objectives)": [[182, "torchrl.objectives.SoftUpdate"]], "td3loss (class in torchrl.objectives)": [[183, "torchrl.objectives.TD3Loss"]], "forward() (torchrl.objectives.td3loss method)": [[183, "torchrl.objectives.TD3Loss.forward"]], "make_value_estimator() (torchrl.objectives.td3loss method)": [[183, "torchrl.objectives.TD3Loss.make_value_estimator"]], "valueestimators (class in torchrl.objectives)": [[184, "torchrl.objectives.ValueEstimators"]], "default_value_kwargs (class in torchrl.objectives)": [[185, "torchrl.objectives.default_value_kwargs"]], "distance_loss (class in torchrl.objectives)": [[186, "torchrl.objectives.distance_loss"]], "hold_out_net (class in torchrl.objectives)": [[187, "torchrl.objectives.hold_out_net"]], "hold_out_params (class in torchrl.objectives)": [[188, "torchrl.objectives.hold_out_params"]], "next_state_value (class in torchrl.objectives)": [[189, "torchrl.objectives.next_state_value"]], "gae (class in torchrl.objectives.value)": [[190, "torchrl.objectives.value.GAE"]], "forward() (torchrl.objectives.value.gae method)": [[190, "torchrl.objectives.value.GAE.forward"]], "value_estimate() (torchrl.objectives.value.gae method)": [[190, "torchrl.objectives.value.GAE.value_estimate"]], "td0estimator (class in torchrl.objectives.value)": [[191, "torchrl.objectives.value.TD0Estimator"]], "forward() (torchrl.objectives.value.td0estimator method)": [[191, "torchrl.objectives.value.TD0Estimator.forward"]], "value_estimate() (torchrl.objectives.value.td0estimator method)": [[191, "torchrl.objectives.value.TD0Estimator.value_estimate"]], "td1estimator (class in torchrl.objectives.value)": [[192, "torchrl.objectives.value.TD1Estimator"]], "forward() (torchrl.objectives.value.td1estimator method)": [[192, "torchrl.objectives.value.TD1Estimator.forward"]], "value_estimate() (torchrl.objectives.value.td1estimator method)": [[192, "torchrl.objectives.value.TD1Estimator.value_estimate"]], "tdlambdaestimator (class in torchrl.objectives.value)": [[193, "torchrl.objectives.value.TDLambdaEstimator"]], "forward() (torchrl.objectives.value.tdlambdaestimator method)": [[193, "torchrl.objectives.value.TDLambdaEstimator.forward"]], "value_estimate() (torchrl.objectives.value.tdlambdaestimator method)": [[193, "torchrl.objectives.value.TDLambdaEstimator.value_estimate"]], "valueestimatorbase (class in torchrl.objectives.value)": [[194, "torchrl.objectives.value.ValueEstimatorBase"]], "forward() (torchrl.objectives.value.valueestimatorbase method)": [[194, "torchrl.objectives.value.ValueEstimatorBase.forward"]], "value_estimate() (torchrl.objectives.value.valueestimatorbase method)": [[194, "torchrl.objectives.value.ValueEstimatorBase.value_estimate"]], "generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[195, "torchrl.objectives.value.functional.generalized_advantage_estimate"]], "td0_advantage_estimate (class in torchrl.objectives.value.functional)": [[196, "torchrl.objectives.value.functional.td0_advantage_estimate"]], "td0_return_estimate (class in torchrl.objectives.value.functional)": [[197, "torchrl.objectives.value.functional.td0_return_estimate"]], "td1_advantage_estimate (class in torchrl.objectives.value.functional)": [[198, "torchrl.objectives.value.functional.td1_advantage_estimate"]], "td1_return_estimate (class in torchrl.objectives.value.functional)": [[199, "torchrl.objectives.value.functional.td1_return_estimate"]], "td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[200, "torchrl.objectives.value.functional.td_lambda_advantage_estimate"]], "td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[201, "torchrl.objectives.value.functional.td_lambda_return_estimate"]], "vec_generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[202, "torchrl.objectives.value.functional.vec_generalized_advantage_estimate"]], "vec_td1_advantage_estimate (class in torchrl.objectives.value.functional)": [[203, "torchrl.objectives.value.functional.vec_td1_advantage_estimate"]], "vec_td1_return_estimate (class in torchrl.objectives.value.functional)": [[204, "torchrl.objectives.value.functional.vec_td1_return_estimate"]], "vec_td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[205, "torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate"]], "vec_td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[206, "torchrl.objectives.value.functional.vec_td_lambda_return_estimate"]], "tensordictrecorder() (in module torchrl.record)": [[207, "torchrl.record.TensorDictRecorder"]], "videorecorder() (in module torchrl.record)": [[208, "torchrl.record.VideoRecorder"]], "logger() (in module torchrl.record.loggers)": [[209, "torchrl.record.loggers.Logger"]], "csvlogger() (in module torchrl.record.loggers.csv)": [[210, "torchrl.record.loggers.csv.CSVLogger"]], "generate_exp_name() (in module torchrl.record.loggers)": [[211, "torchrl.record.loggers.generate_exp_name"]], "get_logger() (in module torchrl.record.loggers)": [[212, "torchrl.record.loggers.get_logger"]], "mlflowlogger() (in module torchrl.record.loggers.mlflow)": [[213, "torchrl.record.loggers.mlflow.MLFlowLogger"]], "tensorboardlogger() (in module torchrl.record.loggers.tensorboard)": [[214, "torchrl.record.loggers.tensorboard.TensorboardLogger"]], "wandblogger() (in module torchrl.record.loggers.wandb)": [[215, "torchrl.record.loggers.wandb.WandbLogger"]], "batchsubsampler (class in torchrl.trainers)": [[216, "torchrl.trainers.BatchSubSampler"]], "register() (torchrl.trainers.batchsubsampler method)": [[216, "torchrl.trainers.BatchSubSampler.register"]], "clearcudacache (class in torchrl.trainers)": [[217, "torchrl.trainers.ClearCudaCache"]], "register() (torchrl.trainers.clearcudacache method)": [[217, "torchrl.trainers.ClearCudaCache.register"]], "countframeslog (class in torchrl.trainers)": [[218, "torchrl.trainers.CountFramesLog"]], "register() (torchrl.trainers.countframeslog method)": [[218, "torchrl.trainers.CountFramesLog.register"]], "logreward (class in torchrl.trainers)": [[219, "torchrl.trainers.LogReward"]], "register() (torchrl.trainers.logreward method)": [[219, "torchrl.trainers.LogReward.register"]], "optimizerhook (class in torchrl.trainers)": [[220, "torchrl.trainers.OptimizerHook"]], "register() (torchrl.trainers.optimizerhook method)": [[220, "torchrl.trainers.OptimizerHook.register"]], "recorder (class in torchrl.trainers)": [[221, "torchrl.trainers.Recorder"]], "register() (torchrl.trainers.recorder method)": [[221, "torchrl.trainers.Recorder.register"]], "replaybuffertrainer (class in torchrl.trainers)": [[222, "torchrl.trainers.ReplayBufferTrainer"]], "register() (torchrl.trainers.replaybuffertrainer method)": [[222, "torchrl.trainers.ReplayBufferTrainer.register"]], "rewardnormalizer (class in torchrl.trainers)": [[223, "torchrl.trainers.RewardNormalizer"]], "register() (torchrl.trainers.rewardnormalizer method)": [[223, "torchrl.trainers.RewardNormalizer.register"]], "selectkeys (class in torchrl.trainers)": [[224, "torchrl.trainers.SelectKeys"]], "register() (torchrl.trainers.selectkeys method)": [[224, "torchrl.trainers.SelectKeys.register"]], "trainer (class in torchrl.trainers)": [[225, "torchrl.trainers.Trainer"]], "trainerhookbase (class in torchrl.trainers)": [[226, "torchrl.trainers.TrainerHookBase"]], "register() (torchrl.trainers.trainerhookbase method)": [[226, "torchrl.trainers.TrainerHookBase.register"]], "updateweights (class in torchrl.trainers)": [[227, "torchrl.trainers.UpdateWeights"]], "register() (torchrl.trainers.updateweights method)": [[227, "torchrl.trainers.UpdateWeights.register"]], "correct_for_frame_skip() (in module torchrl.trainers.helpers)": [[228, "torchrl.trainers.helpers.correct_for_frame_skip"]], "get_stats_random_rollout() (in module torchrl.trainers.helpers)": [[229, "torchrl.trainers.helpers.get_stats_random_rollout"]], "make_a2c_loss() (in module torchrl.trainers.helpers)": [[230, "torchrl.trainers.helpers.make_a2c_loss"]], "make_a2c_model() (in module torchrl.trainers.helpers)": [[231, "torchrl.trainers.helpers.make_a2c_model"]], "make_collector_offpolicy() (in module torchrl.trainers.helpers)": [[232, "torchrl.trainers.helpers.make_collector_offpolicy"]], "make_collector_onpolicy() (in module torchrl.trainers.helpers)": [[233, "torchrl.trainers.helpers.make_collector_onpolicy"]], "make_ddpg_actor() (in module torchrl.trainers.helpers)": [[234, "torchrl.trainers.helpers.make_ddpg_actor"]], "make_ddpg_loss() (in module torchrl.trainers.helpers)": [[235, "torchrl.trainers.helpers.make_ddpg_loss"]], "make_dqn_actor() (in module torchrl.trainers.helpers)": [[236, "torchrl.trainers.helpers.make_dqn_actor"]], "make_dqn_loss() (in module torchrl.trainers.helpers)": [[237, "torchrl.trainers.helpers.make_dqn_loss"]], "make_ppo_loss() (in module torchrl.trainers.helpers)": [[238, "torchrl.trainers.helpers.make_ppo_loss"]], "make_ppo_model() (in module torchrl.trainers.helpers)": [[239, "torchrl.trainers.helpers.make_ppo_model"]], "make_redq_loss() (in module torchrl.trainers.helpers)": [[240, "torchrl.trainers.helpers.make_redq_loss"]], "make_redq_model() (in module torchrl.trainers.helpers)": [[241, "torchrl.trainers.helpers.make_redq_model"]], "make_replay_buffer() (in module torchrl.trainers.helpers)": [[242, "torchrl.trainers.helpers.make_replay_buffer"]], "make_sac_loss() (in module torchrl.trainers.helpers)": [[243, "torchrl.trainers.helpers.make_sac_loss"]], "make_sac_model() (in module torchrl.trainers.helpers)": [[244, "torchrl.trainers.helpers.make_sac_model"]], "make_target_updater() (in module torchrl.trainers.helpers)": [[245, "torchrl.trainers.helpers.make_target_updater"]], "make_trainer() (in module torchrl.trainers.helpers)": [[246, "torchrl.trainers.helpers.make_trainer"]], "parallel_env_constructor() (in module torchrl.trainers.helpers)": [[247, "torchrl.trainers.helpers.parallel_env_constructor"]], "sync_async_collector() (in module torchrl.trainers.helpers)": [[248, "torchrl.trainers.helpers.sync_async_collector"]], "sync_sync_collector() (in module torchrl.trainers.helpers)": [[249, "torchrl.trainers.helpers.sync_sync_collector"]], "transformed_env_constructor() (in module torchrl.trainers.helpers)": [[250, "torchrl.trainers.helpers.transformed_env_constructor"]]}})